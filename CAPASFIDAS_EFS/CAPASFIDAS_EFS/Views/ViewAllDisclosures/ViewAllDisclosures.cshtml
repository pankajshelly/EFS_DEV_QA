@*
    CREIGHTON NEWSOM
    CREIGHTON NEWSOM
    VIEW ALL DISCLOSURES PAGE
*@

@{
    ViewBag.Title = "ViewAllDisclosures";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}


@using (Html.BeginForm("ViewAllDisclosures", "ViewAllDisclosures", FormMethod.Get, new { id = "viewAllDisclosuresForm" }))
{
    @Html.Partial("UserControls/_UC_Alert_Message")
    @Html.Partial("UserControls/_UC_Delete_Message")
    @Html.Partial("UserControls/_UC_Loding")
    @*Left Side Search Filter starts*@
    <div id="divMainNew" class="mainDiv">
        <div class="mainLowerDivCSSDesktop">
            <div id="divhide" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonShowHide1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Up/Hide Filter Arrow" /></button>
            </div>
            <div id="divshow" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonHideShow1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Down/Show Filter Arrow" /></button>
            </div>
        </div>
        <div class="mainLowerDivCSS">
            <div id="divhideForMobile" class="hideShowButtonCSS">
                View All Disclosures
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonShowHide2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Up/Hide Filter Arrow" /></button>
                </div>
            </div>
            <div id="divshowForMobile" class="hideShowButtonCSS">
                View All Disclosures
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonHideShow2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Down/Show Filter Arrow" /></button>
                </div>
            </div>
        </div>
        <div id="divTopSection">
            <div id="divHideShow">
                <div class="divWidth">
                    @*<div class="floatRightNew clsShowButtonClass">
                            <input type="button" id="btnCommonSearch" class="btn btn-default clsCommonSearch ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Search" title="Search" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent"  onclick="CallHelp();" ><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp" /></button>
                        </div>*@
                    <div id="divFilerID">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerID">Filer ID</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @*@Html.DropDownList("txtFilerID", ViewData["txtFilerID"] as SelectList, new { @class = "spanMobileWidth" })*@
                            @Html.DropDownList("txtFilerID", Enumerable.Empty<SelectListItem>(), "-Select-", new { @class = "spanMobileWidth txtFilerID", aria_labelledby = "lblFilerID" })
                        </div>
                    </div>

                    <div id="divFilerType">
                        <div class="verticalCSSDestop lblCSS"><span id="lblFilerType">* Filer Type</span></div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("txtFilerType", null, new { id = "txtFilerType", @class = "txtWidth txtReportPeriodDatesFrom", aria_labelledby = "lblFilerType" })
                        </div>
                    </div>


                    <div id="divCommitteeName">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCommitteeName">Candidate/Committee Name</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @*@Html.DropDownList("txtCommitteeName", ViewData["txtCommitteeName"] as SelectList, new { @class = "spanMobileWidth" })*@
                            @Html.TextBox("txtCommitteeName", null, new { id = "txtCommitteeName", @class = "txtWidth txtReportPeriodDatesFrom", aria_labelledby = "lblCommitteeName" })
                        </div>
                    </div>
                    <div id="divReportYear">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportYear">Report Year</span>
                        </div>
                        <div id="lstReportYear_validate" class="validationFilterDisclosures"></div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstReportYear", ViewData["lstReportYear"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblReportYear" })
                        </div>
                    </div>

                    @*//////////////////////////////////////////////////////////////*@

                    <div id="divOfficeType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblOfficeType">Election Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstOfficeType", ViewData["lstOfficeType"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblOfficeType" })
                        </div>
                    </div>
                    @*<div id="divCounty">
                            <div class="verticalCSSDestop lblCSS">
                                <span id="lblCounty">County</span>
                            </div>
                            <div class="verticalCSSDestop DDLCSS">
                                @Html.DropDownList("lstCounty", ViewData["lstCounty"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblCounty" })
                            </div>
                        </div>*@

                    @*<div id="divMunicipality">
                            <div class="verticalCSSDestop lblCSS">
                                <span id="lblMunicipality">Municipality</span>
                            </div>
                            <div class="verticalCSSDestop DDLCSS">
                                @Html.DropDownList("lstMunicipality", ViewData["lstMunicipality"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblMunicipality" })
                            </div>
                        </div>*@
                    <div id="divElectionType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionType">Report Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionType", ViewData["lstElectionType"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblElectionType" })
                        </div>
                    </div>

                    <div id="divElectionDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionDate">Election Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionDate", ViewData["lstElectionDate"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblElectionDate" })
                        </div>
                    </div>

                    @*//////////////////////////////////////////////////////////////*@
                    <div id="divDisclosureType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosureType">Disclosure Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosureType", ViewData["lstDisclosureType"] as SelectList, " - Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosureType" })
                        </div>
                    </div>
                    <div id="divDisclosurePeriod">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosurePeriod">Disclosure Period</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosurePeriod", ViewData["lstDisclosurePeriod"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosurePeriod" })
                        </div>
                    </div>
                    <div id="divFilingDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDate">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstFilingDate", ViewData["lstFilingDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblFilingDate" })
                        </div>
                    </div>

                    <div id="divFromDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFromDate">* From Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstFromDate", ViewData["lstFilingDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblFromDate" })
                        </div>
                    </div>

                    <div id="divToDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblToDate">* To Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstToDate", ViewData["lstFilingDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblToDate" })
                        </div>
                    </div>

                    <div class="floatRightNew" style="padding-bottom: 2em;">
                        <input type="button" id="btnCommonSearch" class="btn btn-default clsCommonSearch ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Search" title="Search" style="font-size:12px;" />&nbsp;
                        <input type="button" id="btnCommonClear" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                        <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelpFilter();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp" /></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @*Left Side Search Filter ends*@
    @*Right side Main section starts*@
    <div id="divMainRightTop" class="divMainRightWidth85">
        <div id="divBreadCrumb" class="breadCrumbDivCSS">
            <nav aria-label="Breadcrumbs" id="pBreadCrumb" class="FontSizeCss">
                <ol class="breadcrumb">
                    @*<li>@Html.ActionLink("Home", "Home", "Home", null, new { @class = "" })</li>*@
                    <li>@Html.ActionLink("File a Disclosure Report", "ContributionsMonetary", "ContributionsMonetary", null, new { @class = "lnkLogout" })</li>
                    <li class="active">View All Disclosure Reports</li>
                </ol>
            </nav>
            <div id="divHeader" class="paddingtoppt5">
                <h1 id="lblHeader">View All Disclosure Reports</h1>
            </div>
        </div>
    </div>
    <div id="DividDiv24Hourslbl" class="breadCrumbDivCSS divMainRightWidth85">
        <p>
            In order to view all reports (both submitted filings and unsubmitted drafts), select Search from the left sidebar navigation without providing any filter criteria.
            <br />
            <b>Please note:</b> Pending status means the filing has not been submitted (and remains an encrypted draft within the filer’s EFS account).
            Filings that have been submitted show a date and time stamp of submission under the Date Submitted column. By clicking Submit in the Action column, EFS redirects to the View/Submit Disclosure page, with all relevant filters applied for the particular report, so the filer only need select Submit Disclosure Report.
        </p>
    </div>
    <br />

    <div id="divReportButtons" class="btnCSSDialog">
        @*<input type="button" id="btnGenBalanceReport" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Generate Balance Report" title="Generate Balance Report" />
            <input type="button" id="btnGenDisclosureReport" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Generate Filing Inventory" title="Generate Filing Inventory" />*@

        <a id="btnGenBalanceReport" title="Generate Balance Report" class="btn btn-default" href="@Url.Action("BalanceReportPDF", "ViewAllDisclosures", new { strFilerID = "--strFilerIDBal", strReportName = "--strReportNameBal"})" target="_blank">
            Generate Balance Report
            <img src="@Url.Content("~/Content/Images/pdf.gif")" class="ButtonImageCSS" alt="PDF File" />
        </a>

        <a id="btnGenDisclosureReport" title="Generate Filing Inventory" class="btn btn-default" href="@Url.Action("FilerReportPDF", "ViewAllDisclosures", new {strFilerID = "--strFilerIDDis", strReportName = "--strReportNameDis"})" target="_blank">
            Generate Filing Inventory
            <img src="@Url.Content("~/Content/Images/pdf.gif")" class="ButtonImageCSS" alt="PDF File" />
        </a>

        <button class="btn btn-default" type="button" id="btnFullPeriodReport">
            Generate Full Period Report
            <img src="@Url.Content("~/Content/Images/pdf.gif")" alt="PDF File" />
        </button>

        @*<a id="btnFullPeriodReport" title="Generate Full Period Report PDF (Opens in New Tab)" class="btn btn-default" href="@Url.Action("GetFullPeriodReportPDF", "ViewAllDisclosures", new
                                                                                                       {
                                                                                                           strFilerID = "--strFilerIDFP",
                                                                                                           strReportName = "--strReportNameFP",
                                                                                                           strElectionYearID = "--strElectionYearIDFP",
                                                                                                           strOfficeTypeID = "--strOfficeTypeIDFP",
                                                                                                           strFilingTypeID = "--strFilingTypeIDFP",
                                                                                                           strFilingDate = "--strFilingDateFP",
                                                                                                           strElectionTypeID = "--strElectionTypeIDFP",
                                                                                                           strElectionDateID = "--strElectionDateIDFP"
                                                                                                       })" target="_blank">
                Generate Full Period Report
                <img src="@Url.Content("~/Content/Images/pdf.gif")" class="ButtonImageCSS" alt="PDF File" />
            </a>*@
        <button class="btn btn-default" type="button" onclick="CallHelpForGrid();" title="Launch Help Window">
            <img src="@Url.Content("~/Content/Images/help.png")" class="ButtonImageCSS" id="imgHelpTotalByReviewData" alt="Help Icon" />
        </button>
    </div>


    <!-- main grid starts-->
    <div id="divMainRightBottom" class="divMainRightWidth85">
        <!--DISCLOSURE GRID HEADER -->

        <div class="paddingTop1em paddingLeft1em" id="disclosuresGridHeader">
            <div style="float:left;">
                <h2 class="boeH3Style" style="margin-left:1.1em; margin-bottom:.5em; clear:left;">All Disclosure Reports</h2>
            </div>
            <div id="divAddSupportDocForPCF" style="float:right;">
                <input type="button" class="btnAddSupportingDocument" id="btnAddSupportingDocumentForPCF" name="Command" value="Add Supporting Document" title="Add Supporting Document" />
            </div>
        </div>

        <!-- DISCLOSURE GRID -->
        <div id="divDisclosuresGrid">
            <table id="disclosuresGrid" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead class="header">
                    <tr>
                        <th class="never">FilingsID</th>@*0*@
                        <th class="never">PolCalDateID</th>@*1*@
                        <th class="never">ReportYearID</th>@*2*@
                        <th class="never">OfficeTypeID</th>@*3*@
                        <th class="never">ElectionTypeID</th>@*4*@
                        <th class="never">DisclosureTypeID</th>@*5*@
                        <th class="never">DisclosurePeriodID</th>@*6*@
                        <th>Expand</th>@*7*@
                        <th>Action</th>@*8*@
                        <th><a href="javascript:SortTable(2,'D','mdy', 'disclosuresGrid');">Date Submitted</a></th>@*9*@
                        <th>Report Year</th>@*10*@
                        <th>Election Type</th>@*11*@
                        <th>Report Type</th>@*12*@
                        <th><a href="javascript:SortTable(6,'D','mdy', 'disclosuresGrid');">Election Date</a></th>@*13*@
                        <th><a href="javascript:SortTable(7,'D','mdy', 'disclosuresGrid');">Filing Date</a></th>@*14*@
                        <th>Disclosure Type</th>@*15*@
                        <th>Disclosure Period</th>@*16*@
                        <th>Amended</th>@*17*@
                        <th>Status</th>@*18*@
                        <th class="never">TransNumber</th>@*19*@
                        <th class="never">FilingAbbrev</th>@*20*@
                        <th class="never">ResigTermTypeID</th>@*21*@
                        <th class="never">LoanLibNumber</th>@*22*@
                        @*<th>Election County</th>@*23
                        <th>Election Municipality</th>*@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
            <br />
        </div>

        <!--TRANSACTION GRID HEADER -->
        <div class="paddingTop1em paddingLeft1em" id="transactionGridHeader">
            <div style="float:left;">
                <h2 class="boeH3Style" style="margin-left:1.1em; margin-bottom:.5em; clear:left;">Transactions</h2>
            </div>
            <div style="float:right;">
                <input type="button" class="btnAddSupportingDocument" id="btnAddSupportingDocument" name="Command" value="Add Supporting Document" title="Add Supporting Document" />
            </div>
        </div>

        <!--TRANSACTION GRID-->
        <div id="divTransactionsGrid">
            <table id="transactionsGrid" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead class="header">
                    <tr>
                        <th class="never">TransNumber</th> @* 0 *@
                        <th class="never">FilingSchedId</th> @* 1 *@
                        <th>Expand</th> @* 2 *@
                        <th>Action</th> @* 3 *@
                        <th><a href="javascript:SortTable(2,'D','mdy', 'transactionsGrid');">Date Submitted</a></th>  @* 4 *@
                        <th><a href="javascript:SortTable(3,'D','mdy', 'transactionsGrid');">Transaction Date</a></th>  @* 5 *@
                        <th>Transaction Type</th> @* 6 *@
                        <th>Contributor Type</th> @* 7 *@
                        <th>Entity Name</th> @* 8 *@
                        <th>First Name</th> @* 9 *@
                        <th>Middle Name</th> @* 10 *@
                        <th>Last Name</th> @* 11 *@
                        <th>Country</th> @* 12 *@
                        <th>Street Address</th> @* 13 *@
                        <th>City</th> @* 14 *@
                        <th>State</th> @* 15 *@
                        <th>Zip Code</th> @* 16 *@
                        <th>Method</th> @* 17 *@
                        <th>Check/Money Order #</th> @* 18 *@
                        <th>Amount $</th> @* 19 *@
                        <th>Outstanding Amount $</th> @* 20 *@
                        <th>Receipt Type</th> @* 21 *@
                        <th>Transfer Type</th> @* 22 *@
                        <th>Contribution Type</th> @* 23 *@
                        <th>Purpose Code</th> @* 24 *@
                        <th>Receipt Code</th> @* 25 *@
                        <th><a href="javascript:SortTable(24,'D','mdy', 'transactionsGrid');">Original Date</a></th>  @* 26 *@
                        <th>Lender Code</th> @* 27 *@
                        <th>Election Year</th> @* 28 *@
                        <th>Office</th> @* 29 *@
                        <th>District</th> @* 30 *@
                        <th>Explanation</th> @* 31 *@
                        <th>Itemized</th> @* 32 *@
                        @*<th>County</th> @* 33
                        <th>Municipality</th> 34*@
                        <th>Status</th> @* 33 *@
                        <th>Amended</th> @* 34 *@
                        <th class="never">PurposeCodeID</th> @* 35 *@
                        <th class="never">TransMapping</th> @* 36 *@
                        <th class="never">R_Subcontractor</th> @* 37 *@
                        <th><a href="javascript:SortTable(33,'D','mdy', 'transactionsGrid');">Created Date</a></th>  @* 38 *@
                        <th class="never">ContributorTypeID</th>@*39*@
                        <th class="never">LoanOtherID</th>@*40*@
                        <th class="never">ReceiptCodeID</th>@*41*@
                        <th class="never">R_Liability</th>@*42*@
                        <th class="never">LoanLibNumber</th>@*43*@
                        <th>Treasurer Occupation</th> @* 44 *@
                        <th>Treasurer Employer</th> @* 45 *@
                        <th>Treasurer Street Address</th> @* 46 *@
                        <th>Treasurer City</th> @* 47 *@
                        <th>Treasurer State</th> @* 48 *@
                        <th>Treasurer ZipCode</th> @* 49 *@
                        <th>Contribution Type</th> @* 50 *@
                        <th>Contributor Name</th> @* 51 *@
                        <th>Contributor Occupation</th> @* 52 *@
                        <th>Contributor Employer</th> @* 53 *@
                        <th>Independent Expenditure Description</th> @* 54 *@
                        <th>Candidate Name/Ballot Proposal Reference </th> @* 55 *@
                        <th>Is this in Support or Opposition to a Candidate?</th> @* 56 *@
                        <th>Is Transaction Being Submitted for Claim?</th> @* 57 *@
                        <th>In District</th> @* 58 *@
                        <th>Minor</th> @* 59 *@
                        <th>Vendor</th> @* 60 *@
                        <th>Lobbyist</th> @* 61 *@
                        <th>Is Contribution greater than or equal to $100 in the aggregate</th> @* 62 *@
                        <th>Employer</th> @* 63 *@
                        <th>Occupation</th> @* 64 *@
                        <th>Employer Address</th> @* 65 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
            <br />
        </div>

        <!--TRANSACTION DETAILS GRID HEADER -->
        <div class="paddingTop1em paddingLeft1em" id="transactionDetailsHeader">
            <h2 class="boeH3Style" style="margin-left:1.1em; margin-bottom:.5em; clear:left;">Transaction Details</h2>
        </div>
        <!--TRANSACTION DETAILS GRID-->
        <div id="divTransactionDetailsGrid">
            <table id="transactionDetailsGrid" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead class="header">
                    <tr>
                        <th class="never">FLNG_ENT_ID</th> @* 0 *@
                        <th class="never">CreatedDate</th>@* 1 *@
                        <th>Expand</th>@* 2 *@
                        <th>Entity Name</th>@* 3 *@
                        <th>First Name</th>@* 4 *@
                        <th>Middle Name</th>@* 5 *@
                        <th>Last Name</th>@* 6 *@
                        <th>Country</th>@* 7 *@
                        <th>Street Address</th>@* 8 *@
                        <th>City</th>@* 9 *@
                        <th>State</th>@* 10 *@
                        <th>Zip Code</th>@* 11 *@
                        <th>Purpose Code</th>@* 12 *@
                        <th><a href="javascript:SortTable(11,'D','mdy', 'transactionDetailsGrid');">Date Paid</a></th>
                        <th>Amount $</th>@* 14 *@
                        <th>Explanation</th>@* 15 *@
                        <th>Itemized</th>@* 16 *@
                        <th>Is Contribution greater than or equal to $100 in the aggregate?</th> @* 17 *@
                        <th>Employer</th> @* 18 *@
                        <th>Occupation</th> @* 19 *@
                        <th>Employer Address</th> @* 20 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
            <br />
        </div>

        <!--SUPPORTING DOCUMENTS GRID HEADER -->
        <div class="paddingTop1em paddingLeft1em" id="supportingDocumentsHeader">
            <h2 class="boeH3Style" style="margin-left:1.1em; margin-bottom:.5em; clear:left;">Supporting Documents</h2>
        </div>

        <!--SUPPORTING DOCUMENTS GRID-->
        <div id="divSupportingDocumentsGrid">
            <table id="supportingDocumentsGrid" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead class="header">
                    <tr>
                        <th class="never">SupportingDocID</th>@*0*@
                        <th class="never">ScanDocID</th>@*1*@
                        <th class="never">DocumentType</th>@*2*@
                        <th class="never">FileSize</th>@*3*@
                        <th class="never">FileType</th>@*4*@
                        <th>Expand</th>@*5*@
                        @*action commented out 6/10 for defect 715*@
                        @*<th>Action</th>*@
                        <th>Supporting Documents</th>@*6*@
                        <th><a href="javascript:SortTable(1,'D','mdy', 'supportingDocumentsGrid');">Date Received</a></th>
                        <th>Filing Method</th>@*8*@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
            <br />
        </div>

        <!--CAMPAIGN MATERIAL GRID HEADER -->
        <div class="paddingTop1em paddingLeft1em" id="campaignMaterialsHeader">
            <h2 class="boeH3Style" style="margin-left:1.1em; margin-bottom:.5em; clear:left;">Campaign Materials</h2>
        </div>

        <!--CAMPAIGN MATERIAL GRID-->
        <div id="divCampaignMaterialsGrid">
            <table id="campaignMaterialsGrid" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead class="header">
                    <tr>
                        <th class="never">CampaignMaterialId</th> @* 0 *@
                        <th class="never">FilingMethodId</th> @* 1 *@
                        <th class="never">DocumentId</th> @* 2 *@
                        <th class="never">FileType</th> @* 3 *@
                        <th class="never">FileSize</th> @* 4 *@
                        <th>Expand</th> @* 5 *@
                        <th>Action</th>@* 6 *@
                        <th><a href="javascript:SortTable(2,'D','mdy', 'campaignMaterialsGrid');">Date Submitted</a></th>
                        <th>Description</th> @* 8*@
                        <th>File Type (Size)</th> @* 9*@
                        <th>Filing Method</th> @* 10 *@
                        <th>Campaign Material</th> @* 11 *@
                        <th class="never">CreatedDate</th> @* 12 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
            <br />
        </div>

        <!--PIDA GRID HEADER -->
        <div class="paddingTop1em paddingLeft1em" id="PIDAHeader">
            <div style="float:left;">
                <h2 class="boeH3Style" style="margin-left:1.1em; margin-bottom:.5em; clear:left;">Paid Internet Digital Ads (PIDA)</h2>
            </div>
            <div style="float:right;">
                <input type="button" class="btnAddSupportingDocument" id="btnAddPIDA" name="Command" value="Add PIDA File" title="Add PIDA File" />
            </div>
        </div>

        <!--PIDA GRID-->
        <div id="divPIDAGrid">
            <table id="PIDAGrid" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead class="header">
                    <tr>
                        <th class="never">SupportingDocID</th> @* 0 *@
                        <th class="never">ScanDocID</th> @* 1 *@
                        <th class="never">CommunicationTypeID</th> @* 2 *@
                        <th class="never">FileSize</th> @* 3 *@
                        <th class="never">FileType</th> @* 4 *@
                        <th>Expand</th> @* 5 *@
                        <th>Action</th>@* 6 *@
                        <th>File Name</th>@* 7 *@
                        <th><a href="javascript:SortTable(3,'D','mdy', 'PIDAGrid');">Date Submitted</a></th>
                        <th>Communication Type</th>@* 9*@
                        <th>Description</th>@* 10 *@
                        <th>Submitted By</th> @* 11 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
            <br />
        </div>

        <!--PIDA AMOUNT ALLOCATION HEADER -->
        <div class="paddingTop1em paddingLeft1em" id="AmountAllocationHeader">
            <div style="float:left;">
                <h2 class="boeH3Style" style="margin-left:1.1em; margin-bottom:.5em; clear:left;">Amount Allocation</h2>
            </div>
        </div>

        <!--AMOUNT ALLOCATION GRID-->
        <div id="divAmountAllocationGrid">
            <table id="AmountAllocationGrid" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead class="header">
                    <tr>
                        <th class="never">FilingTransId</th> @* 0 *@
                        <th class="never">TransNumber</th> @* 1 *@
                        <th class="never">Filing Entity Id</th> @* 2 *@
                        <th>Expand</th> @* 3 *@
                        <th class="never">Action</th> @* 4 *@
                        <th>Support/Oppose</th> @* 5 *@
                        <th>Transaction Date</th> @* 6 *@
                        <th>First Name</th> @* 7 *@
                        <th>Middle Name</th> @* 8 *@
                        <th>Last Name</th> @* 9 *@
                        <th>Amount</th> @* 10 *@
                        <th>Election Year</th> @* 11 *@
                        <th>Office</th> @* 12 *@
                        <th>District</th> @* 13 *@
                        <th>Explanation</th> @* 14 *@
                        <th>Itemized</th> @* 15 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
            <br />
        </div>

    </div>
    <!--main grid ends-->
    @*Right side Main section ends*@
}

<!--ADD SUPPORTING DOCUMENTS DIALOG -->
<div id="dialog-form_AddSupportingDocument" title="Add Supporting Document">
    @using (Html.BeginForm("AddSupportingDocument", "AddSupportingDocument", FormMethod.Get, new { id = "addSupportingDocumentForm" }))
    {
        <div class="divWidth">
            <div>
                <span id="spanAcceptableFileTypes">Acceptable file types: PDF, JPEG, JPG, PNG</span>
            </div>
            <div style="margin-left:13em; margin-top:.3em; font-style:italic;">
                <span id="spanAllowableFileSizeAddSupportingDocument">(Allowable file size: 20MB)</span>
            </div>
            <div id="divDialogWrapAddSupportingDocument">
                <div id="divFileDialogAddSupportingDocument" class="divSpacerDialog">
                    <div class="lblCSSDialog">
                        <span id="lblFileDialog">* File To Upload</span>
                    </div>
                    <div class="txtCSSDialog">
                        @Html.TextBox("txtFileNameDialog", null, new { id = "txtFileNameDialog", type = "file", @class = "txtWidthForDialogSched_A required zIndexCSS", aria_labelledby = "lblFileDialog" })
                    </div>
                </div>

                <div id="divDocumentTypeDialog" class="divSpacerDialog">
                    <div class="lblCSSDialog">
                        <span id="lblDocumentTypeDialog">* Document Type</span>
                    </div>
                    <div class="DDLCSSDialog">
                        @Html.DropDownList("lstDocumentType", ViewData["lstDocumentType"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblDocumentTypeDialog" })
                    </div>
                </div>
                <div id="divDialogButtonAddSupportingDocument" class="btnCSSDialog">
                    <input type="button" id="btnSaveDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" />
                    <input type="button" id="btnClearDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" />
                    <input type="button" id="btnCloseDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" />
                </div>
            </div>
        </div>
    }
</div>


<!--ADD PIDA DIALOG -->
<div id="dialog-form_AddPIDADocument" title="Add/Edit PIDA">
    @using (Html.BeginForm("AddPIDADocument", "AddPIDADocument", FormMethod.Get, new { id = "AddPIDADocumentForm" }))
    {
        <div class="divWidth marginLeft">
            <div>
                <span id="lblAcceptableFileTypesAddPIDADocument">Acceptable file types: PDF, JPEG, JPG, PNG</span>
            </div>
            <div style="margin-top:.3em; font-style:italic;">
                <span id="spanAllowableFileSizeAddPIDADocument">(Allowable file size: 20MB)</span>
            </div>
        </div>

        <div class="divWidth">
            <div id="divDialogWrapAddPIDADocument">

                <div id="divCommunicationTypeDialogPIDA" class="divSpacerDialog">
                    <div id="lstCommunicationTypePIDA_validate" class="divPIDAError">
                        <!--Display validation message here-->
                    </div>
                    <div class="lblCSSDialogPIDA">
                        <span id="lblCommunicationTypeDialogPIDA">* Communication Type</span>
                    </div>
                    <div class="DDLCSSDialogPIDA">
                        @Html.DropDownList("lstCommunicationTypePIDA", ViewData["lstCommunicationTypes"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblCommunicationTypeDialogPIDA" })
                    </div>
                </div>

                <div id="divDescriptionDialogPIDA" class="divSpacerDialog">
                    <div id="txtDescriptionPIDA_validate" class="divPIDAError">
                        <!--Display validation message here-->
                    </div>
                    <div class="lblCSSDialogPIDA">
                        <span id="lblDescriptionDialogPIDA">* Description</span>
                    </div>
                    <div class="DDLCSSDialogPIDA">
                        @Html.TextBox("txtDescriptionPIDA", null, new { id = "txtDescriptionPIDA", @class = "spanMobileWidth", maxlength = "50", aria_labelledby = "lblDescriptionDialogPIDA" })
                    </div>
                </div>

                <div id="divDateSubmittedPIDA" class="divSpacerDialog">
                    <div id="dpDateSubmittedPIDA_validate" class="divPIDAError">
                        <!--Display validation message here-->
                    </div>
                    <div class="lblCSSDialogPIDA" id="divBAFilingDueDate">
                        <span id="lblDateSubmittedPIDA">* Date Submitted</span>
                    </div>
                    <div class="DDLCSSDialogPIDA">
                        <input id="dpDateSubmittedPIDA" name="dpDateSubmittedPIDA" type="text" class="datepicker dpWidth" maxlength="10" aria-labelledby="lblDateSubmittedPIDA" />
                    </div>
                </div>

                <div id="divFileDialogAddPIDADocument" class="divSpacerDialog">
                    <div id="txtFileNamePIDA_validate" class="divPIDAError">
                        <!--Display validation message here-->
                    </div>
                    <div class="lblCSSDialogPIDA">
                        <span id="lblFileDialogPIDA">* File To Upload</span>
                    </div>
                    <div class="txtCSSDialog">
                        @*@Html.TextBox("txtFileNamePIDA", null, new { id = "txtFileNamePIDA", type = "file", @class = "txtWidthForDialogSched_A required zIndexCSS" })*@
                        @Html.TextBox("txtFileNamePIDA", null, new { id = "txtFileNamePIDA", type = "file", @class = "zIndexCSS", aria_labelledby = "lblFileDialogPIDA" })
                    </div>
                </div>

                <div id="divDialogButtonAddPIDADocument" class="btnCSSDialogPIDA">
                    <input type="button" id="btnSaveDialogPIDA" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" />
                    <input type="button" id="btnClearDialogPIDA" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" />
                    <input type="button" id="btnCloseDialogPIDA" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" />
                </div>
            </div>
        </div>
    }
</div>


<!--ADD SUPPORTING DOCUMENTS DIALOG FOR CONTRIBUTION CARD -->
<div id="dialog-form_AddSupportingDocumentPCF" title="Add Supporting Document">
    @using (Html.BeginForm("AddSupportingDocumentPCF", "AddSupportingDocumentPCF", FormMethod.Get, new { id = "addSupportingDocumentFormPCF" }))
    {
        <div class="divWidth">
            <div>
                <span id="spanAcceptableFileTypes">Acceptable file types: PDF, JPEG, JPG, PNG</span>
            </div>
            <div style="margin-left:13em; margin-top:.3em; font-style:italic;">
                <span id="spanAllowableFileSizeAddSupportingDocument">(Allowable file size: 20MB)</span>
            </div>
            <div id="divDialogWrapAddSupportingDocument">
                <div id="divFileDialogAddSupportingDocument" class="divSpacerDialog">
                    <div class="lblCSSDialog">
                        <span id="lblFileDialog">* File To Upload</span>
                    </div>
                    <div class="txtCSSDialog">
                        @Html.TextBox("txtFileNameDialogPCF", null, new { id = "txtFileNameDialogPCF", type = "file", @class = "txtWidthForDialogSched_A required zIndexCSS", aria_labelledby = "lblFileDialog" })
                    </div>
                </div>

                <div id="divDocumentTypeDialog" class="divSpacerDialog">
                    <div class="lblCSSDialog">
                        <span id="lblDocumentTypeDialog">* Document Type</span>
                    </div>
                    <div class="DDLCSSDialog">
                        @Html.DropDownList("lstDocumentTypePCF", ViewData["lstDocumentTypePCF"] as SelectList, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblDocumentTypeDialog" })
                    </div>
                </div>
                <div id="divDialogButtonAddSupportingDocument" class="btnCSSDialog">
                    <input type="button" id="btnSaveDialogPCF" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" />
                    <input type="button" id="btnClearDialogPCF" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" />
                    <input type="button" id="btnCloseDialogPCF" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" />
                </div>
            </div>
        </div>
    }
</div>

<script>
    $m = jQuery.noConflict();

    function CallHelp() {
        window.open("#", "Help", "width=550, height=600,scrollbars=1");
    }

    $m(document).ready(function () {

        $("#txtFilerType").attr('title', '@ViewBag.txtFilerType');
        $("#txtFilerType").val("@ViewBag.txtFilerType");
        $("#txtFilerType").prop("disabled", true);
        $("#btnFullPeriodReport").attr("disabled", true);

        $("#btnFullPeriodReport").bind('click', function () {
            window.open('@Url.Action("GetFullPeriodReportPDF", "ViewAllDisclosures")', '_blank');
        });


        // GLOBAL ARRAY CONTAINING THE TYPES OF DISCLOSURES THAT DO NOT HAVE
        // DELETE CAPABILITY
        //var DisclosureTypesWithoutDeleteButton = ["2", "3", "10"];
        // THIS ARRAY WAS EXPANDED ON 3/21 AFTER DISCUSSION TO NOT DISPLAY DELETE BUTTON
        // FOR NON ITEMIZED

        // MODIFIED THIS GLOBAL ARRAY AND MANY IF STATEMENTS INVOLVING
        // GLOBALDISCLOSURETYPEID ON 7/25
        var DisclosureTypesWithoutTransactions = ["2", "3", "5" /*"10"*/];

        // GLOBAL ARRAY CONTAINING DOCUMENT TYPES WHICH DETERMINE WHETHER EDIT BUTTON IS DISPLAYED
        // IN TRANSACTION GRID AND WHETHER THE USE CAN ADD SUPPORTING DOCUMENTS
        // TESTING AND PRODUCTION
        // THIS WAS MODIFIED FOR DEFECT #577 ON 9/16
        var TransactionsWithSupportingDocuments = ["9", "11"];

        // GLOBAL ARRAY CONTAINING TRANSACTION TYPES THAT DO NOT ALLOW EDIT FUNCTIONALITY
        // IN THE TRANSACTION GRID
        var TransactionsWithoutEditCapability = ["11", "14"];

        // GLOBAL ARRAY CONTAINING TYPES OF TRANSACTIONS THAT SHOULD DISPLAY THE DETAILS GRID
        // (added "3" on 6/10/2019 for defect #731)
        var TransactionsWithDetailsLink = ["1", "3", "4", "6", "9", "16", "17", "20"]

        // MODIFIED THIS GLOBAL ARRAY AND MANY IF STATEMENTS INVOLVING
        // GLOBALDISCLOSURETYPEID ON 7/25
        //  ADDED '14' FOR DEFECT 5121 ON 11/14
        var WeeklyDisclosureTypes = ["7", "9", "10", "12", "14"]
        var TwentyFourHourTypes = ["4", "8", "11", "13"]
        var IEDisclosureTypes = ["7", "8", "9", "10", "11", "12"]
        var NoDisclosurePeriods = ["4", "6", "7", "8", "9", "10", "11", "12", "13"]
        var IEand24HourDisclosureTypes = ["7", "8", "9", "10", "11", "12", "13", "4"]


        // INITIALIZATION CODE, SET FILERID 0
        $("#txtFilerID")[0].selectedIndex = 0;
        $("#txtCommitteeName").attr("disabled", true);

        // INITIALIZE THE FILTERS (SET THEM TO SELECT AND ASSIGN THEM THE APPROPRIATE
        // STATES)
        ClearFilters();

        // HIDE GRIDS
        HideAllGrids();

        // Hide Lookups
        $("#divshow").hide();
        $("#divshowForMobile").hide();

        // INITIALIZE THE DATEPICKER
        initializeDp();
        $("#divAddSupportDocForPCF").hide();

        // DECLARE AND ASSIGN GLOBAL VARIABLES
        var GlobalCommitteeName = $("#txtCommitteeName").val();

        var disclosuresDataTable = 'undefined';
        var transactionsDataTable = 'undefined';
        var transactionDetailsDataTable = 'undefined';
        var supportingDocumentsDataTable = 'undefined';
        var campaignMaterialsDataTable = 'undefined';
        var PIDADataTable = 'undefined';
        var AmountAllocationDataTable = 'undefined';
        var GlobalTransNumberFromDisclosureGrid = '';
        var GlobalResigTermTypeID = '';

        // USED TO EDIT TRANSACTIONS AND TO DISPLAY DISCLOSURE GRID
        var GlobalReportYear = "";

        // VARIABLES USED TO GET THE TRANSACTION GRID DATA
        var GlobalFilingsID = "";
        var GlobalPolCalDateID = "";
        var GlobalAmended = "";
        var GlobalDateSubmitted = "";
        var GlobalR_Status = "";
        var GlobalFilingDate = "";
        var GlobalElectionDate = "";

        // VARIABLES USED TO EDIT TRANSACTIONS
        var GlobalReportYearID = "";
        var GlobalOfficeTypeID = "";
        var GlobalElectionTypeID = "";
        var GlobalDisclosureTypeID = "";
        var GlobalDisclosureType = "";
        var GlobalDisclosurePeriodID = "";
        var GlobalDisclosurePeriod = "";

        // VARIABLES USED FOR GetSupportingDocumentsGridData
        var GlobalTransNumber = "";
        var GlobalFilingSchedID = "";

        // VARIABLE USED TO UPLOAD A SUPPORTING DOCUMENT
        var GlobalDocumentTypeID = "";
        var GlobalFilingAbbrev = '';

        var GlobalAddEdit = "";
        var GlobalSupportDocID_PIDA = "";
        var GlobalScanDocID_PIDA = "";
        var GlobalExtension_PIDA = "";
        var GlobalFileSize_PIDA = "";

        // INITIALIZE DIRTYDATA TO FALSE
        sessionStorage.setItem("DirtyData", "False");

        // LOGICAL SWITCH USED TO MANAGE INTERFACE. BECAUSE THE ROW CLICK EVENT FIRES AFTER
        // THE LINK CLICK EVENT, AND THERE IS THE POSSIBILITY OF CLICKING IN A LINK IN A
        // DIFFERENT ROW, THERE ARE TIMES WHEN THE SYSTEM NEEDS TO KNOW IF THE ROW CLICK EVENT
        // IS FIRING BECAUSE THE USER HAS CLICKED THE LINK OR HAS JUST SWITCHED ROWS
        // THE SYSTEM ALSO NEEDS TO KNOW IF THE USER IS CLICKING ON THE SAME ROW
        // OR A DIFFERENT ROW, THIS IS HANDLED IN THE CLICK EVENTS THEMSELVES
        var IsLinkFiring = false;
        var IsSupportingDocLink = false;

        // VARIABLES ADDED 4/25/2019 TO ACCOMODATE CHANGES TO PUBLIC FACING VIEWALLDISCLOSURES
        var CanUploadSupportingDocs = false;

        // ADDED 6/6/2019 FOR NONITEMIZED
        var SoleFilingOrUnsubmittedOrLatest = false;

        var AllowAddSupportingDocument = false;
        var AllowAddSupportingDocumentForPCF = false;
        $m("#btnAddSupportingDocumentForPCF").attr("disabled", true);

        ///////////////////// INITIALIZE VALIDATION FOR REPORT YEAR /////////////////////
        var validator = $m("#viewAllDisclosuresForm").validate({ // initialize the plugin
            onfocusout: function (element) { $m(element).valid(); },
            invalidHandler: function (form, validator) {
                var errors = validator.numberOfInvalids();
                if (errors) {
                    validator.errorList[0].element.focus();
                }
            },
            errorPlacement: function (error, element) {
                var name = $m(element).attr("name");
                error.appendTo($m("#" + name + "_validate"));
            },
        });
        ////////////////////// END VALIDATION ////////////////////////////

        function SetSessionsForFullPeriod() {
            if ($m('#viewAllDisclosuresForm').valid()) {
                /**
                 * Do not add ("#divLoading") to this method since it happens behind the scenes and has no dependencies.
                 * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
                */
                $.post(' @Url.Action("SetSessionsForFullPeriod", "ViewAllDisclosures" ) ', {
                    strFilerID: sessionStorage.getItem('GlobalFilerID'),
                    strReportName: 'EFS_VADfp_Report',
                    strElectionYearID: GlobalReportYearID,
                    strOfficeTypeID: GlobalOfficeTypeID,
                    strFilingTypeID: GlobalDisclosurePeriodID,
                    strFilingDate: GlobalFilingDate,
                    strElectionTypeID: GlobalElectionTypeID,
                    strElectionDateID: GlobalPolCalDateID,
                    strSubmitDate: GlobalDateSubmitted
                }, function (results) {

                });
            }
        }

        function SetSessionFilerID_NotForFP() {
            if ($m('#viewAllDisclosuresForm').valid()) {
                $.post(' @Url.Action("SetSessionFilerID_NotForFP", "ViewAllDisclosures" ) ', {
                    strFilerID: sessionStorage.getItem('GlobalFilerID')
                }, function (results) {

                });
            }
        }

        ////////////////////// VIEW SUPPORTING DOCUMENTS MAIN CODE //////////////////////////

        ////Start - Set Filter and Grid Cursor came from Import Disclosure Report page
        if (sessionStorage.getItem("IDR_REPORT_YEAR") != null) {
            if (sessionStorage.getItem("IDR_OFFICE_TYPE_ID").toString() == "4") {
                sessionStorage.setItem("IDR_OFFICE_TYPE_ID", "1");
            }

            //Select Report Year
            $m("#lstReportYear option").each(function () {
                if ($(this).text() == sessionStorage.getItem("IDR_REPORT_YEAR").toString()) {
                    $(this).prop('selected', true).trigger('change');
                }
            });

            PopulateOfficeTypes("#lstOfficeType", $("#lstReportYear").val().toString());
            PopulateElectionTypes("#lstElectionType", $("#lstReportYear").val().toString(), sessionStorage.getItem("IDR_OFFICE_TYPE_ID").toString());
            PopulateElectionDate("#lstElectionDate", $("#lstReportYear").val().toString(), sessionStorage.getItem("IDR_OFFICE_TYPE_ID").toString(), sessionStorage.getItem("IDR_ELECT_TYPE_ID").toString());
            PopulateDisclosureTypes("#lstDisclosureType", $("#lstReportYear").val().toString(), sessionStorage.getItem("IDR_ELECT_TYPE_ID").toString(), sessionStorage.getItem("IDR_ELECTION_DATE_ID").toString());
            PopulateDisclosurePeriods("#lstDisclosurePeriod", $("#lstReportYear").val().toString(), sessionStorage.getItem("IDR_ELECT_TYPE_ID").toString(), sessionStorage.getItem("IDR_FILING_CAT_ID").toString());

            $m("#divLoading").show();
            // SET UP CONTROLS
            $("#disclosuresGridHeader").show();
            $("#divDisclosuresGrid").show();
            $("#divReportButtons").show();

            sessionStorage.setDataTable = "true";
            $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
            $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");
            var IDToHightlight = 0;

            // BECAUSE THERE ARE SOME CASES WHERE ELECTIONDATE CAN BE NULL,
            // THIS MUST BE CODED FOR
            var localElectionDateID = "";
            if ($("#divElectionDate").is(":visible")) {
                localElectionDateID = $("#lstElectionDate").val();
                if (localElectionDateID != null)
                    localElectionDateID = $("#lstElectionDate").val().toString();
                else
                    localElectionDateID = "";
            }
            else if ($("#divFilingDate").is(":visible")) {
                localElectionDateID = $("#lstFilingDate").val();
                if (localElectionDateID != null)
                    localElectionDateID = $("#lstFilingDate").val().toString();
                else
                    localElectionDateID = "";
            }


            // HAVE TO ADD TO SESSION STORAGE, OTHERWISE THE WRONG VALUE WILL BE
            // SENT TO THE CONTROLLER, JS IS WEIRD LIKE THAT
            sessionStorage.setItem("localElectionDateID", localElectionDateID);

            $m('#disclosuresGrid').dataTable().fnClearTable();
            $m('#disclosuresGrid').dataTable().fnDestroy();

            disclosuresDataTable = $m('#disclosuresGrid').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [ 0, 1, 2, 3, 4, 5, 6, 19, 20, 21, 22],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [8],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#disclosuresGrid').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    if (iDisplayIndex == 0) IDToHightlight = aaData[2];
                    // NEED TO DETERMINE WHETHER OR NOT TO DISPLAY THE 'DELETE' BUTTON IN THE
                    // DISCLOSURE GRID. DELETE BUTTON IS DISPLAYED IF THE FILING SELECTED
                    // IS THE CURRENT FILING OR THE MOST RECENTLY SUBMITTED (THIS MEANS THAT
                    // THE FILING CAN EITHER BE UNSUBMITTED AND IN TEMP DATABASE
                    // OR SUBMITTED IN THE MAIN DATABASE)

                    // CREATE ARRAYS OF FILINGIDS AND SUBMITDATES TO PASS
                    // TO IsMostRecentFiling METHOD, ALONG WITH THE GLOBALFILINGSID
                    // AND GLOBALDATESUBMITTED
                    var CurrentFilingID = aaData[0];
                    var FilingIDs = disclosuresDataTable.column(0).data();
                    var CurrentSubmitDate = aaData[9];
                    var SubmitDates = disclosuresDataTable.column(9).data();
                    var UnSubmitted = CurrentSubmitDate == '' || CurrentSubmitDate == 'See Transactions';

                    // ADD CONDITION ON WHETHER OR NOT TO DISPLAY DELETE BUTTON 3/15/2019
                    var CurrentDisclosureType = aaData[5];


                    var Itemized = CurrentDisclosureType == '1';
                    var IsCampaignMaterial = CurrentDisclosureType == '6';
                    var IsAuthorizedUser = @Session["RoleID_FILER"] == "11";
                    if (IsAuthorizedUser) { // authorized users cannot submit
                        // FOR DEMO AND PRODUCTION
                        if (UnSubmitted && Itemized)
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  />');
                        else if (UnSubmitted && !IsCampaignMaterial)
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                    else {
                        // FOR DEMO AND PRODUCTION
                        if (UnSubmitted && Itemized)  // non authorized users can submit
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="submitClick" style="color:blue; cursor:pointer;" id="lnkSubmit" href="">Submit</a>');
                        else if (UnSubmitted && !IsCampaignMaterial)
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }

                    if (aaData[23] == "Y") {
                        $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>');
                    }

                    return nRow;
                },
                "fnServerData": function (url, data, callback) {
                    $m.ajax({
                        "url": '@Url.Action("GetDisclosuresGridData", "ViewAllDisclosures")',
                        "data": {
                            strFilerID: sessionStorage.getItem("IDR_FILER_ID").toString(),
                            strReportYearID: $("#lstReportYear").val().toString(),
                            strOfficeTypeID: sessionStorage.getItem("IDR_OFFICE_TYPE_ID").toString(),
                            strCountyID: '',
                            strMunicipalityID: '',
                            strElectionTypeID: sessionStorage.getItem("IDR_ELECT_TYPE_ID").toString(),
                            strElectionDateID: sessionStorage.getItem("IDR_ELECTION_DATE_ID"),
                            strDisclosureTypeID: sessionStorage.getItem("IDR_FILING_CAT_ID").toString(),
                            strDisclosurePeriodID: sessionStorage.getItem("IDR_FILING_TYPE_ID").toString(), //$("#lstDisclosurePeriod").val().toString(),
                            strReportYear: GlobalReportYear
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    }).always(function () {
                        $m("#divLoading").hide();
                    });
                },
                "order": []
            });
            $m("#disclosuresGrid").DataTable().ajax.reload();
            disclosuresDataTable.columns.adjust().draw(true);
            disclosuresDataTable.responsive.recalc();

            if (@Session["COMM_TYPE_ID"] == "23") {
                $("#divAddSupportDocForPCF").show();
            }
            else {
                $("#divAddSupportDocForPCF").hide();
            }

            $m("#lstOfficeType option").each(function () {
                if ($(this).text() == sessionStorage.getItem("IDR_FILER_TYPE").toString()) {
                    $(this).prop('selected', true).trigger('change');
                }
            });

            setTimeout(
                function () {
                    $m("#lstElectionType option").each(function () {
                        if ($(this).text() == sessionStorage.getItem("IDR_REPORT_TYPE").toString()) {
                            $(this).prop('selected', true).trigger('change');

                            setTimeout(
                                function () {
                                    $m("#lstDisclosureType option").each(function () {
                                        if ($(this).val() == sessionStorage.getItem("IDR_FILING_CAT_ID").toString()) {
                                            $(this).prop('selected', true).trigger('change');
                                            return false;
                                        }
                                    });
                                }, 5000);
                        }
                    });
                }, 5000);

            SetSessionFilerID_NotForFP();
            DisableFilters();

            // UPDATE INTERFACE
            $("#transactionGridHeader").hide();
            $("#divTransactionsGrid").hide();
            $("#transactionDetailsHeader").hide();
            $("#divTransactionDetailsGrid").hide();
            $("#supportingDocumentsHeader").hide();
            $("#divSupportingDocumentsGrid").hide();
            $("#campaignMaterialsHeader").hide();
            $("#divCampaignMaterialsGrid").hide();

            //sessionStorage.setItem("IDR_REPORT_YEAR", null);
            sessionStorage.removeItem("IDR_REPORT_YEAR");
        }
        ////End - Set Filter and Grid Cursor came from Import Disclosure Report page

        $("#supportingDocumentsHeader").hide();
        $("#divSupportingDocumentsGrid").hide();

        ////////////////////// HIDE / SHOW FUNCTIONALITY ///////////////////////////////////////

        // SHOW/HIDE
        $m(".clsbtnCommonShowHide").bind('click', function (e) {

            $("#divHideShow").toggle("slow");
            $("#divhide").hide("slow");
            $("#divshow").show("slow");

            $("#divhideForMobile").hide("slow");
            $("#divshowForMobile").show("slow");

            $("#divTopSection").hide("slow", function () {
                //Grow the grid after hiding/shrinking the filter
                $m("#divMainRightBottom").addClass("divMainRightWidth100").removeClass("divMainRightWidth85");
            });
        });

        // HIDE/SHOW
        $m(".clsbtnCommonHideShow").bind('click', function (e) {

            $("#divHideShow").toggle("slow");
            $("#divhide").show("slow");
            $("#divshow").hide("slow");

            $("#divhideForMobile").show("slow");
            $("#divshowForMobile").hide("slow");

            //Shrink the grid before growing the filter.
            $m("#divMainRightBottom").addClass("divMainRightWidth85").removeClass("divMainRightWidth100");
            $("#divTopSection").show("slow");
        });

        $("#btnShowHide").click(function () {
            if ($("#divShowHide").is(":hidden")) {
                $("#divMainNew").removeClass("mainDivNew");
                $("#divMainNew").addClass("mainDiv");

            } else {
                $("#divMainNew").removeClass("mainDiv");
                $("#divMainNew").addClass("mainDivNew");
            }
        });

        //////////////////// MAIN FORM COMMON 'APPLY/SEARCH' BUTTON CLICK ////////////
        $m(".clsCommonSearch").bind('click', function (e) {
            // IF THE FORM VALIDATES DISPLAY THE DISCLOSURES GRID
            if ($m("#viewAllDisclosuresForm").valid()) {
                SetSessionFilerID_NotForFP();
                DisableFilters();
                DisplayDisclosuresGrid();
                if (@Session["COMM_TYPE_ID"] == "23") {
                    $m("#btnAddSupportingDocumentForPCF").attr("disabled", true);
                }
                else {
                    $("#divAddSupportDocForPCF").hide();
                }
            }
        });

        function DisableFilters() {
            $('#txtFilerID').attr("disabled", true);
            $('#lstReportYear').attr("disabled", true);
            $("#lstOfficeType").attr("disabled", true);
            $("#divCounty").attr("disabled", true);
            $("#divMunicipality").attr("disabled", true);
            $("#lstElectionType").attr("disabled", true);
            $('#lstElectionDate').attr('disabled', true);
            $('#lstDisclosureType').attr('disabled', true);
            $('#lstDisclosurePeriod').attr('disabled', true);
            $('#lstFilingDate').attr('disabled', true);
            $('#lstFromDate').attr('disabled', true);
            $('#lstToDate').attr('disabled', true);
            $('#lstCounty').attr('disabled', true);
            $('#lstMunicipality').attr('disabled', true);

        }

        function EnableFilters() {
            $('#txtFilerID').attr("disabled", false);
            $('#lstReportYear').attr("disabled", false);
            $("#lstOfficeType").attr("disabled", false);
            $("#divCounty").attr("disabled", false);
            $("#divMunicipality").attr("disabled", false);
            $("#lstElectionType").attr("disabled", false);
            $('#lstElectionDate').attr('disabled', false);
            $('#lstDisclosureType').attr('disabled', false);
            $('#lstDisclosurePeriod').attr('disabled', false);
            $('#lstFilingDate').attr('disabled', false);
            $('#lstFromDate').attr('disabled', false);
            $('#lstToDate').attr('disabled', false);
            $('#lstCounty').attr('disabled', false);
            $('#lstMunicipality').attr('disabled', false);
        }

        ///////////////////// MAIN FORM COMMON 'CLEAR' CLICK EVENT ////////////////////
        $m(".clsCommonClear").bind('click', function (e) {
            // CLEAR THE VALIDATION ERRORS, FILTERS, AND HIDE GRIDS
            ClearValErrorAndForm("viewAllDisclosuresForm");
            //EnableFilters();
            ClearFilters();
            HideAllGrids();
            $("#divAddSupportDocForPCF").hide();
        });

        LoadFilerId();
        function LoadFilerId() {
            var optionHtml = "";
            var selected = "";
            var options = {};
            //options.url = "@Url.Content("~/ViewAllDisclosures/GetFilerIdData/")";
            options.url = '@Url.Action("GetFilerIdData", "ViewAllDisclosures")';
            options.type = "POST";
            options.data = null;
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                $("#txtFilerID").empty();
                for (var i = 0; i < results.length; i++) {
                    if (@Session["FilerID"].ToString() == results[i].Text) {
                        selected = " selected";
                    }
                    else {
                        selected = '';
                    }
                    optionHtml += '<option value="' + results[i].Value + '"' + selected + '>' + results[i].Text + '</option>';
                }
                $("#txtFilerID").html(optionHtml);
                sessionStorage.setItem("GlobalFilerID", $("#txtFilerID").val());
            };
            options.error = function () {
            };
            $.ajax(options);
        }

        ///////////////////// MAIN FORM REPORT YEAR DROPDOWN CHANGE EVENT //////////////
        $("#lstReportYear").change(function () {
            // MAINTAIN SELECTION CONTROLS
            SetToSelect("#lstOfficeType");
            SetToSelect("#lstElectionType");
            SetToSelect("#lstElectionDate");
            $("#lstElectionDate").attr("disabled", false);
            SetToSelect("#lstDisclosureType");
            SetToSelect("#lstDisclosurePeriod");
            SetToSelect("#lstFilingDate");
            $("#divFilingDate").hide();
            SetToSelect("#lstFromDate");
            $("#divFromDate").hide();
            SetToSelect("#lstToDate");
            $("#divToDate").hide();

            if ($("#lstReportYear").val().toString() != "- Select -" && $("#lstReportYear").val().toString() != "")
                PopulateOfficeTypes("#lstOfficeType", $("#lstReportYear").val().toString());
        });

        ///////////// MAIN FORM OFFICETYPE DROPDOWN CHANGE EVENT (GETS THE ELECTIONTYPE DATA) /////////////////
        ///////////// ALSO, IF OFFICETYPE IS COUNTY, THEN IT POPULATES COUNTY AND MUNICIPALITY DROPDOWNS///////
        $("#lstOfficeType").change(function () {
            // MAINTAIN SELECTION CONTROLS
            SetToSelect("#lstElectionType");
            SetToSelect("#lstElectionDate");
            $("#lstElectionDate").attr("disabled", false);
            SetToSelect("#lstDisclosureType");
            SetToSelect("#lstDisclosurePeriod");
            $("#divDisclosurePeriod").hide();
            SetToSelect("lstFilingDate");
            $("#divFilingDate").hide();
            $("#divFromDate").hide();
            $("#divToDate").hide();

            if ($("#lstOfficeType").val().toString() != "- Select -" && $("#lstOfficeType").val().toString() != "")
                PopulateElectionTypes("#lstElectionType", $("#lstReportYear").val().toString(), $("#lstOfficeType").val().toString());
        });

        ////////////////// MAIN FORM ELECTION TYPE DROPDOWN CHANGE EVENT ////////////
        $("#lstElectionType").change(function () {
            // MAINTAIN SELECTION CONTROLS
            SetToSelect("#lstDisclosureType");
            SetToSelect("#lstDisclosurePeriod");

            $("#divFilingDate").hide();
            $("#divFromDate").hide();
            $("#divToDate").hide();

            // FOR ELECTION TYPE ID 4 OR 6 (OFFCYCLE AND PERIODIC) WE DO NOT DISPLAY ELECTION DATE
            if ($("#lstElectionType").val() == 4 || $("#lstElectionType").val() == 6) {
                $("#divElectionDate").hide();
                PopulateDisclosureTypes("#lstDisclosureType", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), '');
            }
            else
            {
                // POPULATE ELECTION DATES BASED ON REPORTYEAR, ELECTIONTYPE, AND OFFICETYPE
                PopulateElectionDate("#lstElectionDate", $("#lstReportYear").val().toString(), $("#lstOfficeType").val().toString(), $("#lstElectionType").val().toString());
                $("#divElectionDate").show();
                $("#divFilingDate").hide();
            }
          });




        /////////////////// MAIN FORM DISCLOSURE TYPE DROPDOWN CHANGE EVENT ////////////
        $("#lstDisclosureType").change(function () {
            // MAINTAIN SELECTION CONTROLS
            SetToSelect("#lstDisclosurePeriod");
            $("#divDisclosurePeriod").hide();
            SetToSelect("#lstFilingDate");
            $("#divFilingDate").hide();
            $("#divFromDate").hide();
            $("#divToDate").hide();

            if ($("#lstDisclosureType").val().toString() != "- Select -" && $("#lstDisclosureType").val().toString() != "") {
                var discType = $("#lstDisclosureType").val().toString();

                if ($("#lstElectionType").val() == 6) {
                    PopulateFilingDatesOffCycle("#lstFilingDate", $("#lstReportYear").val().toString(), $("#lstOfficeType").val().toString(), $("#lstDisclosureType").val().toString());
                    $("#divFilingDate").show();
                    PopulateDisclosurePeriods("#lstDisclosurePeriod", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstDisclosureType").val().toString());
                    $("#divDisclosurePeriod").show();
                }
                else if (InArray(discType, WeeklyDisclosureTypes)) {
                    PopulateFilingDatesIEs("#lstFilingDate", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstOfficeType").val().toString(), sessionStorage.getItem('GlobalFilerID'), $("#lstDisclosureType").val().toString(), $("#lstElectionDate").val().toString());
                    $("#divFilingDate").show();
                }
                else if (InArray(discType, TwentyFourHourTypes)) {
                    $("#divFilingDate").hide();
                    $("#divDisclosurePeriod").hide();
                    $("#divFromDate").show();
                    $("#divToDate").show();
                    PopulateFromToDates("#lstFromDate","#lstToDate", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstOfficeType").val().toString(), $("#lstDisclosureType").val().toString(), $("#lstElectionDate").val().toString(), $("#lstDisclosurePeriod").val().toString());
                }
                else {
                    $("#divFromDate").hide();
                    $("#divToDate").hide();
                    if (!InArray($("#lstDisclosureType").val().toString(), NoDisclosurePeriods)) {
                        var electionType = $("#lstElectionType option:selected").val();
                        var reportYear = parseInt($("#lstReportYear option:selected").text());
                        if (discType == '6' && electionType == '2' && reportYear >= 2021) {
                            // for primary camppaign materials >= 2021
                            // we are no longer showing discloure periods
                            // not sure if code will be required here at some point
                        }
                        else {
                            // POPULATE DISCLOSUREPERIODS BASED ON ELECTIONTYPE AND DISCLOSURETYPE
                            PopulateDisclosurePeriods("#lstDisclosurePeriod", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstDisclosureType").val().toString());
                            $("#divDisclosurePeriod").show();
                            $("#divFilingDate").hide();
                        }
                    }
                }
            }
        });

        $("#lstElectionDate").change(function () {
            if ($("#lstElectionDate").val().toString() == "- Select -" || $("#lstElectionDate").val().toString() == "") {
                SetToSelect('#lstDisclosureType');
                $("#divFromDate").hide();
                $("#divToDate").hide();
                SetToSelect("#lstFilingDate");
                $("#divFilingDate").hide();
            }
            else
                PopulateDisclosureTypes("#lstDisclosureType", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstElectionDate").val().toString());
        });


        /////////////////// MAIN FORM ADD SUPPORTING DOCUMENT CLICK EVENT ///////////////
        $("#btnAddSupportingDocument").bind('click', function () {

            // CanUPloadSupportingDocs is set in DisclosureGrid click event
            // AllowAddSupportingDocument is set in TransactionsGrid click event
            if (!AllowAddSupportingDocument || !CanUploadSupportingDocs) {
                ShowDialogBox('EFS', 'Supporting Document can only be added to the latest submitted iteration of a Loan Received or Liabilities/Loans Forgiven.', 'Ok', '');
                return;
            }

            // SET DIRTYDATA TO FALSE
            sessionStorage.setItem("DirtyData", "False");

            // CLEAR AND OPEN THE DIALOG
            ClearDialog();
            dialogAddSupportingDocument.dialog("open");

            // ADDED CODE TO ONLY ALLOW THE ADDITION OF CERTAIN SUPPORTING DOCUMENTS
            // BASED UPON THE SELECTED TRANSACTION TYPE
            $("#lstDocumentType").attr("disabled", true);
            if (GlobalFilingSchedID == '9') {
                $("#lstDocumentType").prop("selectedIndex", '1');
                GlobalDocumentTypeID = "1";
            }
            else if (GlobalFilingSchedID == '11') {
                $("#lstDocumentType").prop("selectedIndex", '2');
                GlobalDocumentTypeID = "2";
            }
        });

        /////////////////// MAIN FORM ADD SUPPORTING DOCUMENT CLICK EVENT ///////////////
        $("#btnAddSupportingDocumentForPCF").bind('click', function () {

            // CanUPloadSupportingDocs is set in DisclosureGrid click event
            // AllowAddSupportingDocument is set in TransactionsGrid click event
            if (!AllowAddSupportingDocumentForPCF || !CanUploadSupportingDocs) {
                ShowDialogBox('EFS', 'Supporting Document can only be added to the latest submitted Itemized iteration.', 'Ok', '');
                return;
            }

            // SET DIRTYDATA TO FALSE
            sessionStorage.setItem("DirtyData", "False");

            // CLEAR AND OPEN THE DIALOG
            ClearDialogPCF();
            dialogAddSupportingDocumentPCF.dialog("open");

            // ADDED CODE TO ONLY ALLOW THE ADDITION OF CERTAIN SUPPORTING DOCUMENTS
            // BASED UPON THE SELECTED TRANSACTION TYPE
            GlobalDocumentTypeID = $("#lstDocumentTypePCF option:selected").val();
            $("#lstDocumentType").attr("disabled", true);
        });


        ///////////////////// MAIN FORM LOAD TRANSACTIONS GRID ///////////////////////////
        $m('#disclosuresGrid tbody').on('click', 'tr', function (e) {
            /**
             * Always start the call to retreive data with ("#divLoading").show.
             * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
            */
            $m("#divLoading").show();
            e.preventDefault();
            // THIS WILL BE SET TO TRUE IN TRANSACTION GRID CLICK EVENT UNDER CONDITIONS
            AllowAddSupportingDocument = false;

            // MAKE SURE THAT THERE IS DATA IN THE GRID
            if (disclosuresDataTable.cell(this, 0).data() == null) return;

            // UPDATE INTERFACE
            disclosuresDataTable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');

            $("#transactionGridHeader").hide();
            $("#divTransactionsGrid").hide();
            $("#transactionDetailsHeader").hide();
            $("#divTransactionDetailsGrid").hide();
            $("#campaignMaterialsHeader").hide();
            $("#divCampaignMaterialsGrid").hide();
            $("#PIDAHeader").hide();
            $("#divPIDAGrid").hide();
            $("#AmountAllocationHeader").hide();
            $("#divAmountAllocationGrid").hide();

            // ASSIGN GLOBAL VARIABLES
            GlobalFilingsID = disclosuresDataTable.cell(this, 0).data();
            GlobalPolCalDateID = disclosuresDataTable.cell(this, 1).data();
            GlobalReportYearID = disclosuresDataTable.cell(this, 2).data();
            GlobalOfficeTypeID = disclosuresDataTable.cell(this, 3).data();
            GlobalElectionTypeID = disclosuresDataTable.cell(this, 4).data();
            GlobalDisclosureTypeID = disclosuresDataTable.cell(this, 5).data();
            GlobalDisclosurePeriodID = disclosuresDataTable.cell(this, 6).data();
            GlobalDateSubmitted = disclosuresDataTable.cell(this, 9).data();
            GlobalReportYear = disclosuresDataTable.cell(this, 10).data();
            GlobalElectionDate = disclosuresDataTable.cell(this, 13).data();
            GlobalFilingDate = disclosuresDataTable.cell(this, 14).data();
            GlobalDisclosureType = disclosuresDataTable.cell(this, 15).data();
            GlobalDisclosurePeriod = disclosuresDataTable.cell(this, 16).data();
            GlobalAmended = disclosuresDataTable.cell(this, 17).data();
            GlobalR_Status = disclosuresDataTable.cell(this, 18).data();
            GlobalTransNumberFromDisclosureGrid = disclosuresDataTable.cell(this, 19).data();
            GlobalFilingAbbrev = disclosuresDataTable.cell(this, 20).data();
            GlobalResigTermTypeID = disclosuresDataTable.cell(this, 21).data();

            if (GlobalDisclosureTypeID == '1') {
                SetSessionsForFullPeriod();
                $m("#btnFullPeriodReport").attr("disabled", false);
            }
            else {
                $m("#btnFullPeriodReport").attr("disabled", true);
            }

            var IsSubmittedPCF = GlobalDateSubmitted != '';

            if ((GlobalDisclosureTypeID == "1" || GlobalDisclosureTypeID == "14")  && IsSubmittedPCF) {
                AllowAddSupportingDocumentForPCF = true;
                $m("#btnAddSupportingDocumentForPCF").attr("disabled", false);
            }
            else {
                AllowAddSupportingDocumentForPCF = false;
                $m("#btnAddSupportingDocumentForPCF").attr("disabled", true);
            }

            // IF CAMPAIGN MATERIAL, SHOW GRID AND LEAVE
            if (GlobalDisclosureTypeID == '6'/*'17'*/) {
                /**
                 * Only hide ("#divLoading") when we're done retreinving data or breaking program execution via return.
                 * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
                */
                $m("#divLoading").hide();
                DisplayCampaignMaterialsGrid();
                return;
            }
            // IF DISCLOSURETYPE HAS NO TRANSACTIONS THEN LEAVE
            else if (InArray(GlobalDisclosureTypeID, DisclosureTypesWithoutTransactions)) {
                /**
                    * Only hide ("#divLoading") when we're done retreinving data or breaking program execution via return.
                    * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
                */
                $m("#divLoading").hide();
                return;
            }

            var timeOutTime = 50; //Used in setTimeout how long do you want the delay to be?
            setTimeout(function () {

                // THIS SECTION OF CODE ADDED TO INCLUDE NEW LOGIC FOR WHEN TO DISPLAY
                // ADDSUPPORTING DOCUMENTS BUTTON 4/25/2019
                // CanUploadSupportingDocs IS INCLUDED IN A CONDITION IN THE CLICK
                // EVENT OF THE TRANSACTIONS GRID
                var tempFilingIDs = disclosuresDataTable.column(0).data();
                var tempSubmitDates = disclosuresDataTable.column(9).data();
                if (GlobalDateSubmitted != "" && GlobalR_Status == "Active" && IsMostRecentSubmittedFiling(GlobalFilingsID, tempFilingIDs, GlobalDateSubmitted, tempSubmitDates))
                    CanUploadSupportingDocs = true;
                else
                    CanUploadSupportingDocs = false;

                // VARIABLE ADDED /6/10/2019 FOR LOGIC RELATED FOR ANOTHER CONDITION FOR DISPLAYING
                // THE EDIT BUTTON IN TRANSACTIONS GRID
                SoleFilingOrUnsubmittedOrLatest = DetermineSoleFilingOrUnsubmittedOrLatest(GlobalFilingsID, tempFilingIDs, GlobalDateSubmitted, tempSubmitDates);

                $("#transactionGridHeader").show();
                $("#divTransactionsGrid").show();

                // MAKE AJAX CALL
                transactionsDataTable = $m('#transactionsGrid').DataTable({
                    "bProcessing": true,
                    "responsive": true,
                    "deferRender": true,
                    "retrieve": true,
                    "columnDefs": [
                        {
                            "targets": [0, 1, 35, 36, 37, 39, 40, 41, 42, 43],
                            "visible": false,
                            "searchable": false
                        },
                        {
                            "targets": [3],
                            "fnCreatedCell": function (cell) {
                                cell.setAttribute('aria-label', "Row Actions");
                            }
                        }
                    ],
                    "initComplete": function (settings, json) {
                        //Accessibility: Applies various Accessibility features to this dataTable.
                        makeDataTableAccessible($m('#transactionsGrid').DataTable());
                    },
                    "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                        var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                        // NEED TO DETERMINE WHETHER OR NOT TO DISPLAY THE 'EDIT' BUTTON IN THE
                        // TRANSACTION GRID. EDIT BUTTON IS DISPLAYED IF THE FILING SELECTED
                        // IN THE DISCLOSURES GRID IS THE CURRENT FILING AND IF IT IS
                        // NOT IN THE GLOBAL SUPPORTINGDOCUMENTS ARRAY

                        // CREATE ARRAYS OF FILINGIDS AND SUBMITDATES TO PASS
                        // TO IsMostRecentFiling METHOD, ALONG WITH THE CURRENT GLOBALFILINGSID
                        // AND GLOBALDATESUBMITTED
                        var FilingIDs = disclosuresDataTable.column(0).data();
                        var SubmitDates = disclosuresDataTable.column(9).data();

                        // THIS IS NEEDED TO DETERMINE WHETHER LINKS ARE DISPLAYED
                        var FilingScheduleID = aaData[1];
                        var IsItemized = GlobalDisclosureTypeID == '1';

                        // VARIABLES REQUIRED TO DETERMINE IF I NEED TO DISPLAY THE DETAILS LINK OR EDIT BUTTON
                        var PurposeCodeID = aaData[35];
                        var TransMappingID = aaData[36];
                        var R_SubContractor = aaData[37];
                        var ContributorTypeID = aaData[39];
                        var LoanOtherID = aaData[40];
                        var ReceiptCodeID = aaData[41];
                        var varSupportOppose = aaData[56];
                        // THIS CODE AND THE ELSE ARE VIRTUALLY IDENTICAL....THE MAIN DIFFERENCE
                        // IS THAT FOR !ITEMIZED, WE DON'T CHECK TO SEE IF IT IS THE MOST
                        // RECENT FILING
                        if (!IsItemized) {
                            var addPIDALink = (GlobalDisclosureTypeID == '12' || GlobalDisclosureTypeID == '13') && GlobalDateSubmitted != '';
                            if (addPIDALink) {
                                $m('td:eq(1)', nRow).html('<a class="PIDAClick" style="color:blue; cursor:pointer;" id="lnkPIDA" href="">PIDA File</a>');
                            }
                            else {
                                $.post(' @Url.Action("DoesTransNumberExistInTemp", "ViewAllDisclosures" ) ', {
                                    strTransNumber: GlobalTransNumberFromDisclosureGrid
                                }, function (results) {
                                    if (results) {
                                        var existsInTemp = results == "True";
                                        // DETERMINE IF I NEED TO DISPLAY THE EDIT BUTTON AND ASSIGN BOOLEAN
                                        // IF THE FILINGSCHEDULEID IS NOT ONE OF THE TYPES OF TRANSACTIONS
                                        var addEditButton = false;
                                        if (InArray(GlobalDisclosureTypeID, IEand24HourDisclosureTypes))
                                            addEditButton = (!InArray(GlobalDisclosureTypeID, DisclosureTypesWithoutTransactions) && (GlobalR_Status == "Active" || GlobalR_Status == "Pending") && !existsInTemp);
                                        else
                                            addEditButton = !InArray(GlobalDisclosureTypeID, DisclosureTypesWithoutTransactions) && (GlobalR_Status == "Active" || GlobalR_Status == "Pending") && SoleFilingOrUnsubmittedOrLatest;

                                        var addDetailsLink;
                                        var addSupportingDocumentsLink;
                                        var addAmountAllocationLink;
                                        addAmountAllocationLink = false;
                                        // IF THERE ARE SUPPORTING DOCUMENTS ASSOCIATED WITH THIS TRANSACTION
                                        // AND/OR DETAIL INFORMATION, THE DISPLAY THE LINKS
                                        // THE SUPPORTING DOCS LINK IS DISPLAYED IF THERE ARE SUPPORTING DOCUMENTS
                                        // ASSOCIATED WITH THE TRANSACTION, AND THE DETAILS LINK IS DISPLAYED IF
                                        // TRANSMAPPINGID != NULL
                                        var TransNumber = aaData[0];

                                       @*$.post("@Url.Content("../ViewAllDisclosures/TransactionHasSupportingDocuments")", {*@
                                        $.post('@Url.Action("TransactionHasSupportingDocuments", "ViewAllDisclosures")', {
                                            strTransNumber: TransNumber,
                                        }, function (addSupportingDocumentsResult) {
                                            if (addSupportingDocumentsResult) {

                                                if (addSupportingDocumentsResult == 'True' && InArray(FilingScheduleID, TransactionsWithSupportingDocuments) && GlobalDisclosureTypeID == "1")
                                                    addSupportingDocumentsLink = true;
                                                else
                                                    addSupportingDocumentsLink = false;

                                                //$.post("@Url.Content("../ViewAllDisclosures/TransactionHasDetails")", {
                                                $.post('@Url.Action("TransactionHasDetails", "ViewAllDisclosures")', {
                                                    strTransNumber: TransNumber
                                                }, function (addDetailsLinkResult) {
                                                                if (addDetailsLinkResult) {

                                                                    if (addDetailsLinkResult == 'True') {
                                                                        if (!InArray(FilingScheduleID, TransactionsWithDetailsLink))
                                                                            addDetailsLink = false;
                                                                        else if ((FilingScheduleID == '1' || FilingScheduleID == '4') && ContributorTypeID == '5')
                                                                            addDetailsLink = true;

                                                                        else if ((FilingScheduleID == '6') && (PurposeCodeID == '29' || PurposeCodeID == '11' || R_SubContractor == 'Y'))
                                                                            addDetailsLink = true;
                                                                        else if ((FilingScheduleID == '20') && (PurposeCodeID == '29' || PurposeCodeID == '11' || R_SubContractor == 'Y'))
                                                                            addDetailsLink = true;

                                                                        else if (FilingScheduleID == '9' && LoanOtherID == '10')
                                                                            addDetailsLink = true;

                                                                        else if (FilingScheduleID == '16' && (ReceiptCodeID == '2' || ReceiptCodeID == '7'))
                                                                            addDetailsLink = true;

                                                                        else if (FilingScheduleID == '17' && (PurposeCodeID == '11' || PurposeCodeID == '29'))
                                                                            addDetailsLink = true;

                                                                        else if (FilingScheduleID == "3") // ADDED 6/10 FOR DEFECT #731
                                                                            addDetailsLink = true;

                                                                        else
                                                                            addDetailsLink = false;

                                                                        if ((FilingScheduleID == '6' || FilingScheduleID == '14') && (varSupportOppose == 'Y')) {
                                                                            addAmountAllocationLink = true;
                                                                        }                                             
                                                                        else {
                                                                            addAmountAllocationLink = false;
                                                                        }
                                                                    }
                                                                    else {
                                                                        addDetailsLink = false;
                                                                        addAmountAllocationLink = false;
                                                                    }
                                                                        

                                                                    // added 1/27/2021
                                                                    addDetailsLink = false;

                                                                    if (addAmountAllocationLink == false) {
                                                                        if (addEditButton && addSupportingDocumentsLink && addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                                        }
                                                                        else if (addEditButton && addSupportingDocumentsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>');
                                                                        }
                                                                        else if (addEditButton && addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                                        }
                                                                        else if (addSupportingDocumentsLink && addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                                        }
                                                                        else if (addEditButton) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                                                                        }
                                                                        else if (addSupportingDocumentsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>');
                                                                        }
                                                                        else if (addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                                        }
                                                                    }
                                                                    else if (addAmountAllocationLink == true) {                                                                        
                                                                        if (addEditButton && addSupportingDocumentsLink && addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                        else if (addEditButton && addSupportingDocumentsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                        else if (addEditButton && addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                        else if (addSupportingDocumentsLink && addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                        else if (addEditButton) {
                                                                            $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                        else if (addSupportingDocumentsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                        else if (addDetailsLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                        else if (addAmountAllocationLink) {
                                                                            $m('td:eq(1)', nRow).html('<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    $("#divLoading").hide();
                                                                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                                                }
                                                            });
                                                    }
                                                    else {
                                                        $("#divLoading").hide();
                                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                                    }
                                                });
                                        }
                                        else {
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');//
                                        }
                                    });
                            }
                        }
                        else
                            // CALL IS CURRENTFILING METHOD WITH VARIABLES JUST ASSIGNED
                            if (IsMostRecentFiling(GlobalFilingsID, FilingIDs, GlobalDateSubmitted, SubmitDates)) {
                                //////////////////////////////////////////////
                                // MODIFIED FOR DEFECT 2225
                                var addEditButton = !InArray(FilingScheduleID, TransactionsWithoutEditCapability) && (GlobalR_Status == "Active" || GlobalR_Status == "Pending") && SoleFilingOrUnsubmittedOrLatest && FilingScheduleID != '15';
                                //////////////////////////////////////////////

                                var addDetailsLink;
                                var addSupportingDocumentsLink;
                                var addAmountAllocationLink;
                                addAmountAllocationLink = false;
                                // IF THERE ARE SUPPORTING DOCUMENTS ASSOCIATED WITH THIS TRANSACTION
                                // AND/OR DETAIL INFORMATION, THE DISPLAY THE LINKS
                                // THE SUPPORTING DOCS LINK IS DISPLAYED IF THERE ARE SUPPORTING DOCUMENTS
                                // ASSOCIATED WITH THE TRANSACTION, AND THE DETAILS LINK IS DISPLAYED IF
                                // TRANSMAPPINGID != NULL
                                var TransNumber = aaData[0];

                                //$.post("@Url.Content("../ViewAllDisclosures/TransactionHasSupportingDocuments")", {
                                $.post('@Url.Action("TransactionHasSupportingDocuments", "ViewAllDisclosures")', {
                                    strTransNumber: TransNumber
                                }, function (addSupportingDocumentsResult) {
                                    if (addSupportingDocumentsResult) {

                                        if (addSupportingDocumentsResult == 'True' && InArray(FilingScheduleID, TransactionsWithSupportingDocuments) && GlobalDisclosureTypeID == "1")
                                            addSupportingDocumentsLink = true;
                                        else
                                            addSupportingDocumentsLink = false;

                                        @*$.post("@Url.Content("../ViewAllDisclosures/TransactionHasDetails")", {*@
                                        $.post('@Url.Action("TransactionHasDetails", "ViewAllDisclosures")', {
                                            strTransNumber: TransNumber
                                        }, function (addDetailsLinkResult) {
                                                    if (addDetailsLinkResult) {
                                                        if (addDetailsLinkResult == 'True') {

                                                            if (!InArray(FilingScheduleID, TransactionsWithDetailsLink))
                                                                addDetailsLink = false;
                                                            else if ((FilingScheduleID == '1' || FilingScheduleID == '4') && (ContributorTypeID == '5' || ContributorTypeID == '11') && GlobalDisclosureTypeID == '1') {
                                                                addDetailsLink = true; // added contributor type 11 on 6/24/2001 for new functionality
                                                            }
                                                            else if ((FilingScheduleID == '6') && (PurposeCodeID == '29' || PurposeCodeID == '11' || R_SubContractor == 'Y') && GlobalDisclosureTypeID == '1') {
                                                                addDetailsLink = true;
                                                            }
                                                            else if ((FilingScheduleID == '20') && (PurposeCodeID == '29' || PurposeCodeID == '11' || R_SubContractor == 'Y') && GlobalDisclosureTypeID == '1') {
                                                                addDetailsLink = true;
                                                            }
                                                            else if (FilingScheduleID == '9' && LoanOtherID == '10' && GlobalDisclosureTypeID == '1') {
                                                                addDetailsLink = true;
                                                            }
                                                            else if (FilingScheduleID == '16' && (ReceiptCodeID == '2' || ReceiptCodeID == '7') && GlobalDisclosureTypeID == '1') {
                                                                addDetailsLink = true;
                                                            }
                                                            else if (FilingScheduleID == '17' && (PurposeCodeID == '11' || PurposeCodeID == '29') && GlobalDisclosureTypeID == '1') {
                                                                addDetailsLink = true;
                                                            }
                                                            else if (FilingScheduleID == "3") { // ADDED 8/7 FOR DEFECT #958
                                                                addDetailsLink = true;
                                                            }
                                                            else {
                                                                addDetailsLink = false;
                                                            }

                                                            if ((FilingScheduleID == '6'|| FilingScheduleID == '14') && (varSupportOppose == 'Y')) {
                                                                addAmountAllocationLink = true;
                                                            }                                                            
                                                            else {
                                                                addAmountAllocationLink = false;
                                                            }
                                                                
                                                        }
                                                        else {
                                                            addDetailsLink = false;
                                                            addAmountAllocationLink = false;
                                                        }
                                                        if (addAmountAllocationLink == false) {
                                                            if (addEditButton && addSupportingDocumentsLink && addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                            }
                                                            else if (addEditButton && addSupportingDocumentsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>');
                                                            }
                                                            else if (addEditButton && addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                            }
                                                            //////////////////////////////
                                                            else if (addEditButton && addPIDALink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="PIDAClick" style="color:blue; cursor:pointer;" id="lnkPIDA" href="">PIDA File</a>');
                                                            }
                                                            //////////////////////////////
                                                            else if (addSupportingDocumentsLink && addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                            }
                                                            else if (addEditButton) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                                                            }
                                                            else if (addSupportingDocumentsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>');
                                                            }
                                                            else if (addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>');
                                                            }
                                                        }
                                                        else if (addAmountAllocationLink == true) {                                                       
                                                            if (addEditButton && addSupportingDocumentsLink && addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            else if (addEditButton && addSupportingDocumentsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            else if (addEditButton && addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            //////////////////////////////
                                                            else if (addEditButton && addPIDALink) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="PIDAClick" style="color:blue; cursor:pointer;" id="lnkPIDA" href="">PIDA File</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            //////////////////////////////
                                                            else if (addSupportingDocumentsLink && addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            else if (addEditButton) {
                                                                $m('td:eq(1)', nRow).html('<a class="cssSelectorBtnEditTransactions" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            else if (addSupportingDocumentsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            else if (addDetailsLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="detailsClick" style="color:blue; cursor:pointer;" id="lnkDetails" href="">Details</a>&nbsp;|&nbsp;<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                            else if (addAmountAllocationLink) {
                                                                $m('td:eq(1)', nRow).html('<a class="AmountAllocationClick" style="color:blue; cursor:pointer;" id="lnkAmountAllocation" href="">Amount Allocation</a>');
                                                            }
                                                        }
                                                        
                                                    }
                                                    else {
                                                        $("#divLoading").hide();
                                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                                    }
                                                });
                                        }
                                        else {
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                        }
                                    });
                            }
                        return nRow;
                    },
                    "fnServerData": function (url, data, callback) {
                        $.ajax({
                            "url": '@Url.Action("GetTransactionsGridData", "ViewAllDisclosures")',
                            "data": {
                                strFilingsID: GlobalFilingsID,
                                strPolCalDateID: GlobalPolCalDateID,
                                strAmended: GlobalAmended,
                                strR_Status: GlobalR_Status,
                                strDateSubmitted: GlobalDateSubmitted,
                                strFilingCatID: GlobalDisclosureTypeID,
                                strTransNumber: GlobalTransNumberFromDisclosureGrid,
                                strElectionTypeID: GlobalElectionTypeID,
                                strOfficeTypeID: GlobalOfficeTypeID,
                                strElectionYearID: GlobalReportYearID
                            },
                            "success": callback,
                            "dataType": "json",
                            "type": "POST",
                            "error": function () {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                            }
                        }).always(function () {
                            /**
                             * Only hide ("#divLoading") when we're done retreinving data or breaking program execution via return.
                             * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
                            */
                            $m("#divLoading").hide();
                            //Adjust column widths after the data is returned.
                            transactionsDataTable.columns.adjust().responsive.recalc();
                        });
                    },
                    "order": [[1, "asc"]]
                }).on('search.dt', function () {
                    //Adjust column widths after the user perfoms a search.
                    transactionsDataTable.columns.adjust().responsive.recalc();
                });
                if (@Session["COMM_TYPE_ID"] == "23") {
                    transactionsDataTable.column(57).visible(true);
                    transactionsDataTable.column(58).visible(true);
                    transactionsDataTable.column(59).visible(true);
                    transactionsDataTable.column(60).visible(true);
                    transactionsDataTable.column(61).visible(true);
                    transactionsDataTable.column(62).visible(true);
                    transactionsDataTable.column(63).visible(true);
                    transactionsDataTable.column(64).visible(true);
                    transactionsDataTable.column(65).visible(true);
                }
                else {
                    transactionsDataTable.column(57).visible(false);
                    transactionsDataTable.column(58).visible(false);
                    transactionsDataTable.column(59).visible(false);
                    transactionsDataTable.column(60).visible(false);
                    transactionsDataTable.column(61).visible(false);
                    transactionsDataTable.column(62).visible(false);
                    transactionsDataTable.column(63).visible(false);
                    transactionsDataTable.column(64).visible(false);
                    transactionsDataTable.column(65).visible(false);
                }
                transactionsDataTable.columns.adjust().draw(false);
                // UPDATE INTERFACE
                $m('#transactionsGrid').DataTable().ajax.reload();

            }, timeOutTime);

            if (IsSupportingDocLink == true) {
                $("#supportingDocumentsHeader").show();
                $("#divSupportingDocumentsGrid").show();
            }
            else {
                $("#supportingDocumentsHeader").hide();
                $("#divSupportingDocumentsGrid").hide();
            }


            IsSupportingDocLink = false;
        });

        ////////////////////////// MAIN FORM SUBMIT LINK CLICK ///////////////////////
        $m('#disclosuresGrid tbody').on('click', 'tr a.submitClick', function (e) {
            var data = disclosuresDataTable.row($(this).parents('tr')).data();
            sessionStorage.setItem("MoveDataToSubmitPage", "True");
            sessionStorage.setItem("submitReportYear", data[10].toString());
            sessionStorage.setItem("submitFilerType", data[11].toString());
            sessionStorage.setItem("submitElectionType", data[12].toString());
            sessionStorage.setItem("submitElectionDate", data[13].toString());
            sessionStorage.setItem("submitOffCycleFilingDate", data[14].toString());
            sessionStorage.setItem("submitDisclosureType", data[15].toString());
            sessionStorage.setItem("submitDisclosurePeriod", data[16].toString());
            sessionStorage.setItem("submitOffCycleTermRegID", data[21].toString());

            sessionStorage.setItem("submitCounty", '');



            sessionStorage.setItem("submitMunicipality", '');
            var urlDisclosureReportSummary = "@Url.Content("~/DisclosureReportSummary/DisclosureReportSummary/")";
            window.location.href = urlDisclosureReportSummary;
        });

        ////////////////////////// MAIN FORM DETAIL LINK CLICK ///////////////////////
        $m('#transactionsGrid tbody').on('click', 'tr a.detailsClick', function (e) {
            // BECAUSE THE LINK CLICK EVENT FIRES BEFORE THE ROW CLICK EVENT,
            // WE NEED A WAY TO DETERMINE IF THE ROW CLICK EVENT IS OCCURRING DUE TO
            // A LINK BEING CLICKED OR NOT. THE BEHAVIOR IS DIFFERENT.
            IsLinkFiring = true;

            // WE NEED TO KNOW IF WE ARE CLICKING ON THE SAME ROW OR A DIFFERENT ROW
            // BECAUSE IF WE ARE CLICKING ON A DIFFERENT ROW WE NEED TO HIDE THE SUPPORTING
            // DOCUMENTS GRID
            var rowData = $m('#transactionsGrid').DataTable().row($(this).parents('tr')).data();
            var TransNumber = rowData[0];
            if (TransNumber != GlobalTransNumber) {
                $("#supportingDocumentsHeader").hide();
                $("#divSupportingDocumentsGrid").hide();
            }
            // REASSIGN GLOBALTRANSNUMBER
            GlobalTransNumber = TransNumber;

            // CALL THE CODE TO DISPLAY THE TRANSACTION GRID
            DisplayTransactionDetailsGrid();
        });

        /////////////////// MAIN FORM SUPPORTING DOCUMENTS LINK CLICK //////////////////
        $m('#disclosuresGrid tbody').on('click', 'tr a.supportingDocumentsClick', function (e) {
            // BECAUSE THE LINK CLICK EVENT FIRES BEFORE THE ROW CLICK EVENT,
            // WE NEED A WAY TO DETERMINE IF THE ROW CLICK EVENT IS OCCURRING DUE TO
            // A LINK BEING CLICKED OR NOT. THE BEHAVIOR IS DIFFERENT.
            IsLinkFiring = true;
            IsSupportingDocLink = true;

            // WE NEED TO KNOW IF WE ARE CLICKING ON THE SAME ROW OR A DIFFERENT ROW
            // BECAUSE IF WE ARE CLICKING ON A DIFFERENT ROW WE NEED TO HIDE THE DETAILS GRID
            var rowData = $m('#disclosuresGrid').DataTable().row($(this).parents('tr')).data();
            GlobalFilingsID = rowData[0];
            var TransNumber = "";

            if (TransNumber != GlobalTransNumber) {
                $m('#divTransactionDetailsGrid').hide();
                $m('#transactionDetailsHeader').hide();
            }
            // REASSIGN GLOBALTRANSNUMBER
            GlobalTransNumber = TransNumber;

            // CALL THE CODE TO DISPLAY THE SUPPORTING DOCUMENTS GRID
            DisplaySupportingDocumentsGrid();
        });

        /////////////////// MAIN FORM SUPPORTING DOCUMENTS LINK CLICK //////////////////
        $m('#transactionsGrid tbody').on('click', 'tr a.supportingDocumentsClick', function (e) {
            // BECAUSE THE LINK CLICK EVENT FIRES BEFORE THE ROW CLICK EVENT,
            // WE NEED A WAY TO DETERMINE IF THE ROW CLICK EVENT IS OCCURRING DUE TO
            // A LINK BEING CLICKED OR NOT. THE BEHAVIOR IS DIFFERENT.
            IsLinkFiring = true;

            // WE NEED TO KNOW IF WE ARE CLICKING ON THE SAME ROW OR A DIFFERENT ROW
            // BECAUSE IF WE ARE CLICKING ON A DIFFERENT ROW WE NEED TO HIDE THE DETAILS GRID
            var rowData = $m('#transactionsGrid').DataTable().row($(this).parents('tr')).data();
            var TransNumber = rowData[0];
            if (TransNumber != GlobalTransNumber) {
                $m('#divTransactionDetailsGrid').hide();
                $m('#transactionDetailsHeader').hide();
            }
            // REASSIGN GLOBALTRANSNUMBER
            GlobalTransNumber = TransNumber;

            // CALL THE CODE TO DISPLAY THE SUPPORTING DOCUMENTS GRID
            DisplaySupportingDocumentsGrid();
        });

        // Amount Allocation GRID CLICK EVENT
        $m('#AmountAllocationGrid').on('click', 'tr', function (e) {
            AmountAllocationDataTable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');
        });

        // PIDA GRID CLICK EVENT
        $m('#PIDAGrid').on('click', 'tr', function (e) {
            PIDADataTable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');
        });

        // EDIT PIDA CLICK EVENT
        $("#PIDAGrid tbody").on('click', '#btnEditPIDA', function (e) {
            e.preventDefault();
            ClearValErrorAndForm("AddPIDADocumentForm");
            $("#AddPIDADocumentForm").css("overflow", "hidden");
            var rowData = $m('#PIDAGrid').DataTable().row($(this).parents('tr')).data();
            var CommTypeID = rowData[2];
            var Description = rowData[10];
            var DateSubmitted = rowData[8];
            GlobalSupportDocID_PIDA = rowData[0];
            GlobalScanDocID_PIDA = rowData[1];
            GlobalExtension_PIDA = rowData[4];
            GlobalFileSize_PIDA = rowData[3];
            $("#lstCommunicationTypePIDA").val(CommTypeID);
            $("#txtDescriptionPIDA").val(Description);
            $("#dpDateSubmittedPIDA").val(DateSubmitted);
            //var fileName
            $("#ui-id-2.ui-dialog-title.ui-dialog-title").text("Edit PIDA Files");
            dialogAddPIDADocument.dialog("open");
            GlobalAddEdit = "EDIT";
        });


        // DELETE PIDA CLICK EVENT
        $("#PIDAGrid tbody").on('click', '#btnDeletePIDA', function (e) {
            e.preventDefault();

            var rowData = $m('#PIDAGrid').DataTable().row($(this).parents('tr')).data();
            var SupDocID = rowData[0];

          $m('#modal_dialog').text("Are you sure you want to delete this PIDA File?");
            $m("#modal_dialog").dialog({
                resizable: false,
                width: '400px',
                height: 'auto',
                bgiframe: false,
                modal: true,
                resizable: false,
                closeOnEscape: false,
                open: function (event, ui) { hideDialogXButton(this); },
                position: {
                    my: "center top",
                    at: "center top+300"
                },
                hide: { effect: 'scale', duration: 400 },
                buttons: {
                    // IF THEY CLICK OK, DELETE THE SUPPORTING DOCUMENT
                    "Ok": function () {
                        $m(this).dialog("close");

                        // MAKE THE AJAX CALL
                        var options = {};
                        options.url = '@Url.Action("DeleteSupportingDocument", "ViewAllDisclosures")';
                        options.type = "POST";
                        options.data = JSON.stringify({
                            strSupportingDocumentID: SupDocID
                        });
                        options.dataType = "json";
                        options.contentType = "application/json";
                        options.success = function (results) {
                            $m('#PIDAGrid').DataTable().ajax.reload();
                            PIDADataTable.columns().search('').draw();//Select all columns, clear the search and draw the table.
                            PIDADataTable.responsive.recalc();//Recalculate the widths used by responsive after a change in the display.

                            window.status = "PIDA document deleted successfully";
                            ShowDialogBox('EFS', 'PIDA document deleted successfully', 'Ok', '');
                        }
                        options.error = function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        };
                        $.ajax(options);

                    },
                    "Cancel": function () {
                        $m(this).dialog("close");
                    }
                }
            });
            $m("#modal_dialog").dialog("open");

        });

        /////////////////////////// MAIN FORM PIDA CLICK LINK EVENT //////////////////
        $m('#transactionsGrid tbody').on('click', 'tr a.PIDAClick', function (e) {

            var rowData = $m('#transactionsGrid').DataTable().row($(this).parents('tr')).data();
            GlobalTransNumber = rowData[0];

            // Condition changed 6/21 due to business requirement
            //if (CanUploadSupportingDocs)
            if (GlobalR_Status == 'Active' && GlobalDateSubmitted != '')
                $("#btnAddPIDA").show();
            else
                $("#btnAddPIDA").hide();

            // CALL THE CODE TO DISPLAY THE SUPPORTING DOCUMENTS GRID
            DisplayPIDAGrid();
        });

        /////////////////////////// MAIN FORM PIDA CLICK LINK EVENT //////////////////
        $m('#transactionsGrid tbody').on('click', 'tr a.AmountAllocationClick', function (e) {

            var rowData = $m('#transactionsGrid').DataTable().row($(this).parents('tr')).data();
            GlobalTransNumber = rowData[0];

            // CALL THE CODE TO DISPLAY
            DisplayAmountAllocationGrid();
        });

        ///////////////////////// MAIN FORM ADD PIDA BUTTON CLICK EVENT ///////////////
        $("#btnAddPIDA").bind('click', function () {
            ClearValErrorAndForm("AddPIDADocumentForm");
            $("#ui-id-2.ui-dialog-title.ui-dialog-title").text("Add PIDA Files");
            dialogAddPIDADocument.dialog("open");
            $("#AddPIDADocumentForm").css("overflow", "hidden");
            GlobalAddEdit = "ADD";
            sessionStorage.setItem("DirtyData", "False");
        });

        function DisplayPIDAGrid() {
            $("#PIDAHeader").show();
            $("#divPIDAGrid").show();

            // MAKE THE AJAX CALL
            PIDADataTable = $m('#PIDAGrid').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 3, 4],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [6],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#PIDAGrid').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    // FILE TYPE/SIZE COLUMN DATA
                    var FileType = aaData[3];
                    var FileSize = aaData[4];
                    var CommType = aaData[9];
                    var FilerID = sessionStorage.getItem("GlobalFilerID");
                    var linkText = FilerID + ' ' + CommType +  ' ('  + FileType + ' ' +  FileSize + ')';

                    var url = '@Url.Action("DownloadPIDADocument", "ViewAllDisclosures", new { documentID = "__documentID__" })';
                    url = url.replace("__documentID__", aaData[1]);

                    $m('td:eq(2)', nRow).html('<a class="editor_remove_CampMatr" style="color:blue; cursor:pointer;" id="lnkColumnData"></a><a class="editor_IEWeeklyExp_History lnkGird"  href=' + url + ' target="_blank">' + linkText + '</a > ');
                    // COMMENTED OUT FOR DEFECT 3771 ON 3/25/2021
                    //$m('td:eq(1)', nRow).html('<a id="btnEditPIDA" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a id="btnDeletePIDA" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');

                    return nRow;

                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": '@Url.Action("GetPIDAGridData", "ViewAllDisclosures")',
                        "data": {
                            strTransNumber: GlobalTransNumber
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    });
                },
                "order": [[8, "desc"]]
            });

            $m('#PIDAGrid').DataTable().ajax.reload();
            PIDADataTable.columns().search('').draw();//Select all columns, clear the search and draw the table.
            PIDADataTable.responsive.recalc();//Recalculate the widths used by responsive after a change in the display.

        }

        function DisplayAmountAllocationGrid() {
            $("#AmountAllocationHeader").show();
            $("#divAmountAllocationGrid").show();

            // CENTER THE GRID
            $('html, body').animate({ scrollTop: $("#divAmountAllocationGrid").offset().top }, 500);

            // MAKE THE AJAX CALL
            AmountAllocationDataTable = $m('#AmountAllocationGrid').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#AmountAllocationGrid').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    return nRow;
                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": '@Url.Action("GetFilingTransSchedR_ChildData", "ExpenditurePaymentsSchedF")',
                        "data": {
                            strTransNumberReimb: GlobalTransNumber
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    });
                }
            });

            $m('#AmountAllocationGrid').DataTable().ajax.reload();
            AmountAllocationDataTable.columns().search('').draw();//Select all columns, clear the search and draw the table.
            AmountAllocationDataTable.responsive.recalc();//Recalculate the widths used by responsive after a change in the display.

        }

        /////////////////////////// MAIN FORM TRANSACTION GRID CLICK ////////////////////
        $m('#transactionsGrid tbody').on('click', 'tr', function (e) {
            e.preventDefault();

            // MAKE SURE THAT THERE IS DATA IN THE GRID
            if (transactionsDataTable.cell(this, 0).data() == null) return;

            // ASSIGN THE CURRENT VALUE OF GLOBALTRANSNUMBER TO LOCAL TRANSNUMBER
            var TransNumber = GlobalTransNumber;

            // UPDATE INTERFACE
            transactionsDataTable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');

            // ASSIGN GLOBAL VARIABLES (REASSIGN GLOBALTRANSNUMBER)
            GlobalFilingSchedID = transactionsDataTable.cell(this, 1).data();
            GlobalTransNumber = transactionsDataTable.cell(this, 0).data();

            // ADDED ISSUBMITTED FOR DEFECT #577 ON 9/16/2019
            var IsSubmitted = GlobalDateSubmitted != '';

            // DON'T ENABLE THE ADDSUPPORTINGDOCUMENTS BUTTON UNLESS THE
            // CURRENT FILING SCHEDULE ID IS IN THE ARRAY (ARRAY IS FILING_SCHEDULE_ID)
            // AND FOR LIABILITIES WE NEED TO DETERMINE IF IT IS THE ORIGINAL LIABILITY
            if (InArray(GlobalFilingSchedID, TransactionsWithSupportingDocuments) && GlobalDisclosureTypeID == "1" && IsSubmitted) {
                //$("#btnAddSupportingDocument").attr("disabled", false);
                AllowAddSupportingDocument = true;

                // COMMENTED OUT DUE TO DEFECT 577 ON 9/16
                //if (GlobalFilingSchedID == '14') {
                //    // ASSIGN R_LIABILTIY TO TRUE IF IF HAS VALUE OF 'Y'
                //    var R_Liability = transactionsDataTable.cell(this, 44).data() == 'Y';

                //    // DETERMINE IF IT IS THE ORIGINAL LIABILITY
                //    var originalAmount = transactionsDataTable.cell(this, 19).data();
                //    var owedAmount = transactionsDataTable.cell(this, 20).data();
                //    var originalLiability = originalAmount == owedAmount;

                //    if (originalLiability && R_Liability && CanUploadSupportingDocs)
                //        $("#btnAddSupportingDocument").attr("disabled", false);
                //    else
                //        $("#btnAddSupportingDocument").attr("disabled", true);
                //}
                //else if (CanUploadSupportingDocs)
                //    $("#btnAddSupportingDocument").attr("disabled", false);
            }
            else {
                AllowAddSupportingDocument = false;
            }

            // IF THE USER IS CLICKING IN A DIFFERENT ROW
            if (TransNumber != GlobalTransNumber) {
                // HIDE THE GRIDS IF NOT FIRING FROM A LINK
                if (!IsLinkFiring) {
                    $m('#divTransactionDetailsGrid').hide();
                    $m('#transactionDetailsHeader').hide();

                    $("#PIDAHeader").hide();
                    $("#divPIDAGrid").hide();
                }
            }

            // SET ISLINKFIRING TO FALSE BECAUSE NO MATTER WHAT WE CANNOT BE FIRING NOW
            IsLinkFiring = false;
        });


        ////////////////////////////////////// MAIN FORM DELETE DISCLOSURE CLICK EVENT ///////////////////////////////////////////
        $("#disclosuresGrid tbody").on('click', '#btnDeleteDisclosure', function (e) {
            e.preventDefault();
            // DETERMINE IF THE FILING HAS BEEN SUBMITTED (I.E. IT'S NOT A TEMPORARY FILING)
            // AND MAKE SURE THAT IT IS NOT A 'CAMPAIGN MATERIAL' FILING (17)
            // CAMPAIGN MATERIAL FILINGS ARE AUTOMATIC SUBMITS BUT WE DON'T
            // DISPLAY THOSE DATES ON SUMBIT DATE SO WE CANNOT RELY ON DATESUBMITTED
            var IsSubmitted = "True";
            if ((GlobalDateSubmitted == null || GlobalDateSubmitted == "") && GlobalDisclosureTypeID != '6'/*'17'*/)
                IsSubmitted = "False"


            // NEED TO SET THE GLOBAL FILINGS ID HERE BECAUSE THIS EVENT IS NOW FIRING BEFORE THE
            // ROW CLICK EVENT, AND THE VALUE IS NEEDED HERE (defect 974)
            var data = $m('#disclosuresGrid').DataTable().row($(this).parents('tr')).data();
            GlobalFilingsID = data[0];


            // CREATE MESSAGE VARIABLES
            var primaryMessage = '';
            var secondaryMessage = ''


            primaryMessage = 'This action will delete this iteration of filing (and all associated transactions). Are you sure you want to delete this filing?';
            secondaryMessage = 'All associated transactions will be deleted. Do you want to continue?';

            $m('#modal_dialog').text(primaryMessage);
            $m("#modal_dialog").dialog({
                resizable: false,
                width: '400px',
                height: 'auto',
                bgiframe: false,
                modal: true,
                resizable: false,
                closeOnEscape: false,
                open: function (event, ui) { hideDialogXButton(this); },
                position: {
                    my: "center top",
                    at: "center top+300"
                },
                hide: { effect: 'scale', duration: 400 },
                buttons: {
                    // IF THEY CLICK OK, CLOSE THE DIALOG
                    // AND DELETE THE FILING
                    "Ok": function () {
                        $m(this).dialog("close");
                        $m('#modal_dialog').text(secondaryMessage);
                        $m("#modal_dialog").dialog({
                            resizable: false,
                            width: '400px',
                            height: 'auto',
                            bgiframe: false,
                            modal: true,
                            resizable: false,
                            closeOnEscape: false,
                            open: function (event, ui) { hideDialogXButton(this); },
                            position: {
                                my: "center top",
                                at: "center top+300"
                            },
                            hide: { effect: 'scale', duration: 400 },
                            buttons: {
                                // IF THEY CLICK OK, CLOSE THE DIALOG
                                // AND DELETE THE FILING
                                "Ok": function () {
                                    $m(this).dialog("close");
                                    var options = {};
                                    options.url = '@Url.Action("DeleteDisclosure", "ViewAllDisclosures")';
                                    options.type = "POST";
                                    options.data = JSON.stringify(
                                        {
                                            strFilingID: GlobalFilingsID,
                                            strIsSubmitted: IsSubmitted,
                                            strTransNumber: GlobalTransNumberFromDisclosureGrid
                                        });
                                    options.dataType = "json";
                                    options.contentType = "application/json";
                                    options.success = function (results) {
                                        if (results == "TRUE") {
                                            window.status = "Disclosure removed successfully";
                                            ShowDialogBox('EFS', 'Disclosure removed successfully', 'Ok', '');

                                            // HIDE OFFICE AND ELECTION GRID AFTER DELETING A FILING
                                            $("#transactionGridHeader").hide();
                                            $("#divTransactionsGrid").hide();
                                            $("#supportingDocumentsHeader").hide();
                                            $("#divSupportingDocumentsGrid").hide();
                                            $("#campaignMaterialsHeader").hide();
                                            $("#divCampaignMaterialsGrid").hide();

                                            // REFRESH DISCLOSURE GRID
                                            $m('#disclosuresGrid').DataTable().columns.adjust().draw(false);
                                            $m('#disclosuresGrid').DataTable().ajax.reload();

                                            // CHANGES BELOW FOR DEFECTS #974, #1452
                                            // REFRESH THE REPORT YEARS
                                            //PopulateReportYears("#lstReportYear");

                                            var numColumns = document.getElementById('disclosuresGrid').rows[1].cells.length;
                                            // CLEAR THE FILTER IF THERE ARE NO ITEMS REMAINING IN GRID
                                            if (numColumns == 1) {
                                                PopulateReportYears("#lstReportYear");
                                                ClearFilters();
                                            }

                                            // CLEAR THE FILTER IF THERE ARE NO ITEMS REMAINING IN GRID
                                            if ($('#disclosuresGrid tr').length <= '2') {
                                                ClearFilters();
                                            }
                                        }
                                        else {
                                            window.status = 'Disclosure unable to be deleted. Please delete any transactions first.';
                                            ShowDialogBox('EFS', 'Disclosure unable to be deleted. Please delete any transactions first.', 'Ok', '');

                                        }

                                    }
                                        options.error = function () {
                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                    };
                                    $.ajax(options);
                                },
                                // IF THEY CLICK CANCEL, CLOSE THE DIALOG
                                "Cancel": function () {
                                    $m(this).dialog("close");
                                }
                            }
                        });
                        $m("#modal_dialog").dialog("open");

                    },
                    // IF THEY CLICK CANCEL, CLOSE THE DIALOG
                    "Cancel": function () {
                        $m(this).dialog("close");
                    }
                }
            });
            $m("#modal_dialog").dialog("open");

            e.stopPropagation();
        });

        /////////////// MAIN FORM DELETE SUPPORTINGDOCUMENTS CLICK EVENT ///////////////
        $("#supportingDocumentsGrid tbody").on('click', '#btnDeleteSupportingDocument', function (e) {

            // GRAB THE GRID DATA SO WE CAN GET THE SUPPORTING DOCUMENTID
            var data = $m('#supportingDocumentsGrid').DataTable().row($(this).parents('tr')).data();
            var SupportingDocumentID = data[0];

            $m('#modal_dialog').text("Are you sure you want to delete this supporting document?");
            $m("#modal_dialog").dialog({
                resizable: false,
                width: '400px',
                height: 'auto',
                bgiframe: false,
                modal: true,
                resizable: false,
                closeOnEscape: false,
                open: function (event, ui) { hideDialogXButton(this); },
                position: {
                    my: "center top",
                    at: "center top+300"
                },
                hide: { effect: 'scale', duration: 400 },
                buttons: {
                    // IF THEY CLICK OK, DELETE THE SUPPORTING DOCUMENT
                    "Ok": function () {
                        $m(this).dialog("close");
                        // MAKE THE AJAX CALL
                        var options = {};
                        options.url = '@Url.Action("DeleteSupportingDocument", "ViewAllDisclosures")';
                        options.type = "POST";
                        options.data = JSON.stringify({
                            strSupportingDocumentID: SupportingDocumentID
                        });
                        options.dataType = "json";
                        options.contentType = "application/json";
                        options.success = function (results) {
                            $m("#transactionsGrid").DataTable().ajax.reload();

                            $m('#supportingDocumentsGrid').DataTable().ajax.reload();
                            supportingDocumentsDataTable.columns().search('').draw();//Select all columns, clear the search and draw the table.
                            supportingDocumentsDataTable.responsive.recalc();//Recalculate the widths used by responsive after a change in the display.

                            window.status = "Document removed successfully";
                            ShowDialogBox('EFS', 'Supporting document deleted successfully', 'Ok', '');
                        }
                        options.error = function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        };
                        $.ajax(options);

                    },
                    "Cancel": function () {
                        $m(this).dialog("close");
                    }
                }
            });
            $m("#modal_dialog").dialog("open");
        });


        ////////////////////////////////////// MAIN FORM EDIT TRANSACTIONS CLICK EVENT ///////////////////////////////////////////
        $("#transactionsGrid tbody").on('click', '.cssSelectorBtnEditTransactions', function (e) {
            // SET UP SESSION VARIABLES FOR CALL TO EDIT PAGE
            sessionStorage.setItem("FilerId", sessionStorage.getItem('GlobalFilerID'));
            sessionStorage.setItem("CommitteeName", GlobalCommitteeName);
            sessionStorage.setItem("ElectionCycle", GlobalReportYearID);
            sessionStorage.setItem("ElectionType", GlobalElectionTypeID);
            sessionStorage.setItem("ElectionDate", GlobalPolCalDateID);
            sessionStorage.setItem("DisclosureType", GlobalDisclosureTypeID);
            sessionStorage.setItem("DisclosurePeriod", GlobalDisclosurePeriodID);
            sessionStorage.setItem("TransactionType", GlobalFilingSchedID);
            sessionStorage.setItem("ElectionCycleText", GlobalReportYear);

            if (GlobalOfficeTypeID == 4)
                sessionStorage.setItem("OfficeType", '1');
            else
                sessionStorage.setItem("OfficeType", GlobalOfficeTypeID);

            sessionStorage.setItem("lstResigTermType", GlobalResigTermTypeID);
            sessionStorage.setItem("FilerTypeId", $("#txtFilerType").val());
            sessionStorage.setItem("DisclosurePeriodText", GlobalDisclosurePeriod);

            sessionStorage.setItem("DisclosureTypeText", GlobalDisclosureType);

            // START - CODE - START
            // IF OFFICE CYCLE SEND THE FILINGS ID
            // IN SESSION "lstFilingDate" INSTEAD OF FILING DATE FOR OFF CYCLE.
            // ADDED SB - 02.05.2021
            if (GlobalElectionTypeID == "6") {
                sessionStorage.setItem("lstFilingDate", GlobalFilingsID);
            }
            else {
                sessionStorage.setItem("lstFilingDate", GlobalFilingDate);
            }
            // END - CODE - END
            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
            sessionStorage.setItem("County", "");
            sessionStorage.setItem("CountyId", "");
            sessionStorage.setItem("Municipality", "");
            sessionStorage.setItem("MunicipalityID", "");

            // START - CODE - START
            // THIS ONE CALLING HERE TO GET THE SESSION VARIABLE FILED IN CONTROLLER.
            // TO REQUIRED FOR OFF CYCLE FOR STATE/LOCAL AND VILLAGE. FLOW.
            // // ADDED SB - 02.05.2021
            $.post('@Url.Action("GetFilingDateIEWeekly", "ViewAllDisclosures")', {
                strElectionYearId: GlobalReportYearID,
                strElectionTypeId: GlobalElectionTypeID,
                strOfficeTypeId: GlobalOfficeTypeID,
                strFilerId: sessionStorage.getItem('GlobalFilerID'),
                strFilingCatId: GlobalDisclosureTypeID,
                strElectionDateId: GlobalPolCalDateID,
                strMunicipalityID: ""
            }, function (results) {
                if (results) {
                    // NOT DOING ANYTHING
                    // JUST CALLING THIS CONTROLLER TO GET THE SESSION FILED IN CONTROLLER.
                }
                else {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                }
            });
            // END - CODE - END

            // ASSIGN THE DISCLOSURETYPE
            if ($("#lstDisclosureType option:selected").text() != "- Select -")
                sessionStorage.setItem("DisclosureTypeText", $("#lstDisclosureType option:selected").text());
            else
                sessionStorage.setItem("DisclosureTypeText", GlobalDisclosureType);

            // ASSIGN BOOLEAN VARIABLE
            var IsWeekly = InArray(GlobalDisclosureTypeID, WeeklyDisclosureTypes)

            /**
             * Always start the call to retreive data with ("#divLoading").show.
             * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
            */
            $m("#divLoading").show();
            $.post('@Url.Action("GetEditFlag", "_UC_GridCommonControl")' , {
                txtFilerId: sessionStorage.getItem('GlobalFilerID'),
                lstElectYearId: GlobalReportYearID,
                strElectionTypeId: GlobalElectionTypeID,
                lstOfficeTypeId: GlobalOfficeTypeID,
                lstFilingTypeId: GlobalDisclosurePeriodID,
                lstFilingDate: GlobalFilingDate,
                txtFilingDate: GlobalFilingDate,
                electionDateId: GlobalPolCalDateID
            }, function (resultEditFlag) {
                /**
                 * Hide ("#divLoading") on success.
                 * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
                */
                $m("#divLoading").hide();
                    if (resultEditFlag == "TRUE") {

                    //Start - Set controller global session
                    $.post("@Url.Content("~/ViewAllDisclosures/SetSession/")", {
                            strReportYearID: GlobalReportYearID,
                            strElectionTypeID: GlobalElectionTypeID,
                            strOfficeTypeID: GlobalOfficeTypeID
                            }, function (resultSetSession) {
                    });
                    //End - Set controller global session

                    // IF IT'S NOT A WEEKLY DISCLOSURE TYPE
                        if (!IsWeekly) {
                        // MAKE AJAX CALL TO GET THE FilingCutoffData
                        $.post('@Url.Action("GetFilingCutoffData", "ViewAllDisclosures")' , {
                            strReportYearID: GlobalReportYearID,
                            strElectionTypeID: GlobalElectionTypeID,
                            strOfficeTypeID: GlobalOfficeTypeID,
                            strDisclosurePeriodID: GlobalDisclosurePeriodID,
                            strDisclosureTypeID: GlobalDisclosureTypeID,
                            lstElectionDateId: GlobalPolCalDateID
                        }, function (results) {
                                if (results) {

                                if (GlobalDisclosureTypeID != 4 && GlobalDisclosureTypeID != 8/*19*/ && GlobalDisclosureTypeID != 11 && GlobalDisclosureTypeID != 13) {
                                    if (GlobalElectionTypeID == '6') {
                                        sessionStorage.setItem("CutOffDate", '');
                                        sessionStorage.setItem("FilingDate", GlobalFilingDate);
                                    }
                                    else {
                                        for (var i = 0; i < results.length; i++) {
                                            var item = results[i];
                                            if (item.FilingDueDate == null)
                                                sessionStorage.setItem("CutOffDate", item.CutOffDate);
                                            else
                                                sessionStorage.setItem("FilingDate", item.FilingDueDate);
                                        }
                                    }
                                }
                                else if (GlobalDisclosureTypeID == 4/*19*/) {
                                    if (GlobalElectionTypeID == '6') {
                                        sessionStorage.setItem("CutOffDate", '');
                                        sessionStorage.setItem("FilingDate", GlobalFilingDate);
                                    }
                                    else {
                                        for (var i = 0; i < results.length; i++) {
                                            var item = results[i];
                                            if (item.FilingDueDate != null)
                                                sessionStorage.setItem("CutOffDate", item.FilingDueDate);
                                            else
                                                sessionStorage.setItem("FilingDate", item.CutOffDate);
                                        }
                                    }
                                }
                                else if (GlobalDisclosureTypeID == 8/*19*/) {
                                    if (GlobalElectionTypeID == '6') {
                                        sessionStorage.setItem("CutOffDate", '');
                                        sessionStorage.setItem("FilingDate", GlobalFilingDate);
                                    }
                                    else {
                                        for (var i = 0; i < results.length; i++) {
                                            var item = results[i];
                                            if (item.FilingDueDate != null)
                                                sessionStorage.setItem("CutOffDate", item.FilingDueDate);
                                            else
                                                sessionStorage.setItem("FilingDate", item.CutOffDate);
                                        }
                                    }
                                }
                                else if (GlobalDisclosureTypeID == 13/*'23'*/) {
                                    ////////////// ADDED 3/26/2020 //////////////////
                                    if (GlobalElectionTypeID == '6') {
                                        sessionStorage.setItem("CutOffDate", '');
                                        sessionStorage.setItem("FilingDate", GlobalFilingDate);
                                    }
                                    else {
                                        for (var i = 0; i < results.length; i++) {
                                            var item = results[i];
                                            if (item.FilingDueDate != null)
                                                sessionStorage.setItem("CutOffDate", item.FilingDueDate);
                                            else
                                                sessionStorage.setItem("FilingDate", item.CutOffDate);
                                        }
                                    }
                                }
                                else if (GlobalDisclosureTypeID == 11/*22*/) {
                                    if (GlobalElectionTypeID == '6') {
                                        sessionStorage.setItem("CutOffDate", '');
                                        sessionStorage.setItem("FilingDate", GlobalFilingDate);
                                    }
                                    else {
                                        for (var i = 0; i < results.length; i++) {
                                            var item = results[i];
                                            if (item.FilingDueDate != null)
                                                sessionStorage.setItem("CutOffDate", item.FilingDueDate);
                                            else
                                                sessionStorage.setItem("FilingDate", item.CutOffDate);
                                        }
                                    }
                                }
                                else {
                                    if (GlobalElectionTypeID == '6') {
                                        sessionStorage.setItem("CutOffDate", '');
                                        sessionStorage.setItem("FilingDate", GlobalFilingDate);
                                    }
                                    else {
                                        for (var i = 0; i < results.length; i++) {
                                            var item = results[i];
                                            if (item.FilingDueDate != null)
                                                sessionStorage.setItem("CutOffDate", item.FilingDueDate);
                                            else
                                                sessionStorage.setItem("FilingDate", item.CutOffDate);
                                        }
                                    }
                                }
                            }
                            else {
                                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                            }
                        });
                    }
                    // IT IS A WEEKLY DISCLOSURETYPE
                    else {
                        // MAKE AJAX CALL TO GET THE FilingCutoffData
                        $.post('@Url.Action("GetFilingDateIEWeekly", "ViewAllDisclosures")' , {
                            strElectionYearId: GlobalReportYearID,
                            strElectionTypeId: GlobalElectionTypeID,
                            strOfficeTypeId: GlobalOfficeTypeID,
                            strFilerId: sessionStorage.getItem('GlobalFilerID'),
                            strFilingCatId: GlobalDisclosureTypeID,
                            strElectionDateId: GlobalPolCalDateID,
                            strMunicipalityID: ""
                        }, function (results) {
                            if (results) {
                                for (var i = 0; i < results.length; i++) {
                                    var item = results[i];
                                    //sessionStorage.setItem("lstFilingDate", item.FilingDateId.toString());
                                    sessionStorage.setItem("lstFilingDate", item.FilingDate.toString());
                                    sessionStorage.setItem("FilingDate", "");
                                }
                            }
                            else {
                                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                            }
                        });

                    }

                    // ASSIGN GlobalFilingsSchedID to selectedlstTransactionType
                    // BASED ON THAT VALUE, ASSIGN SESSIONSTORAGE VALUES AND CALL EDIT PAGE
                    selectedlstTransactionType = GlobalFilingSchedID;
                    ////////////////// ADDED 6/3 2019 FOR NO ACTIVITY AND IEs////////////////
                    // 24-hour notice
                    if (GlobalDisclosureTypeID == '4') {
                         if (selectedlstTransactionType == '1') {
                            // Set the Session Variable for Edit DialogBox.
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Contributions - Candidate, Individual & Family");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemizedTransactionSchedA", "NonItemizedTransactionSchedA")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '2') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From Corporate");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemizedTransactionSchedB", "NonItemizedTransactionSchedB")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '3') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From All Other");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemizedTransactionSchedC", "NonItemizedTransactionSchedC")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '4') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Contributions - In Kind");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemizedTransactionSchedD", "NonItemizedTransactionSchedD")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '9') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Loan Received");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("NonItemizedTransactionSchedI", "NonItemizedTransactionSchedI")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                    }
                    // ie - weekly contributions
                    else if (GlobalDisclosureTypeID == '7'/*'18'*/) {
                        ////////////// ADDED 2/24/2020 ///////////////////
                        ///////////////////////////////////////////
                        ///////////////////////////////////////////
                        if (selectedlstTransactionType == '1') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Contributions - Candidate, Individual & Family");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIEWeeklyContributionSchedA", "NonItemIEWeeklyContributionSchedA")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '2') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From Corporate");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIEWeeklyContributionSchedB", "NonItemIEWeeklyContributionSchedB")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '3') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From All Other");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIEWeeklyContributionSchedC", "NonItemIEWeeklyContributionSchedC")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '4') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Contributions - In Kind");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIEWeeklyContributionSchedD", "NonItemIEWeeklyContributionSchedD")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '9') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Loan Received");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("NonItemIEWeeklyContributionSchedI", "NonItemIEWeeklyContributionSchedI")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                    }
                    else if (GlobalDisclosureTypeID == '8'/*'19'*/) {
                        if (selectedlstTransactionType == '1') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From Corporate");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIE24HContributionSchedA", "NonItemIE24HContributionSchedA")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '2') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From Corporate");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIE24HContributionSchedB", "NonItemIE24HContributionSchedB")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '3') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From All Other");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIE24HContributionSchedC", "NonItemIE24HContributionSchedC")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '4') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Contributions - In Kind");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIE24HContributionSchedD", "NonItemIE24HContributionSchedD")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        else if (selectedlstTransactionType == '9') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Loan Received");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("NonItemIE24HContributionSchedI", "NonItemIE24HContributionSchedI")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                    }
                    else if (GlobalDisclosureTypeID == '9'/*'20'*/) {
                        ////////////// ADDED 2/24/2020 //////////////////

                        if (selectedlstTransactionType == '6') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Expenditure Payments");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIEWeeklyExpenditureSchedF", "NonItemIEWeeklyExpenditureSchedF")';
                            window.location.href = urlContributionsCandIndFamily;
                        }

                    }
                    else if (GlobalDisclosureTypeID == 11/*'22'*/) {
                        ////////////// ADDED 2/24/2020 //////////////////
                        if (selectedlstTransactionType == '6') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Expenditure Payments");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIE24HourExpenditureSchedF", "NonItemIE24HourExpenditureSchedF")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                    }
                    else if (GlobalDisclosureTypeID == 12/*'23'*/) {
                        ////////////// ADDED 2/24/2020 //////////////////
                        if (selectedlstTransactionType == '6') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");

                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Expenditure Payments");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIEWeeklyPIDAExpenditureSchedF", "NonItemIEWeeklyPIDAExpenditureSchedF")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                    }
                    else if (GlobalDisclosureTypeID == '13') {
                        if (selectedlstTransactionType == '6') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Expenditure Payments");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIE24HourPIDAExpenditureSchedF", "NonItemIE24HourPIDAExpenditureSchedF")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                    }
                    //  ADDED '14' FOR DEFECT 5121 ON 11/14
                    else if (GlobalDisclosureTypeID == '14') {
                            sessionStorage.setItem("EditFlag", "True");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            var urlWeeklyClaimSubmission = '@Url.Action("WeeklyClaimSubmission", "WeeklyClaimSubmission")';
                            window.location.href = urlWeeklyClaimSubmission;
                    }
                    else if (GlobalDisclosureTypeID == '10'/*'21'*/) {
                        ////////////// ADDED 2/24/2020 //////////////////

                        if (selectedlstTransactionType == '14') {
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("lstTransactionTypeNonItem", GlobalFilingSchedID);
                            sessionStorage.setItem("FilingTransIdEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            // Changes the Header Name.
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Expenditure Payment");
                            var urlContributionsCandIndFamily = '@Url.Action("NonItemIEWeeklyLiabilityIncurredSchedN", "NonItemIEWeeklyLiabilityIncurredSchedN")';
                            window.location.href = urlContributionsCandIndFamily;
                        }
                    }
                    else if (GlobalDisclosureTypeID == '1') {
                        if (selectedlstTransactionType == "1") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From Individual & Partnerships");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            if (sessionStorage.getItem("CutOffDate") == null) {
                                sessionStorage.setItem("CutOffDate", '');
                            }

                            if (sessionStorage.getItem("FilingDate") == null) {
                                sessionStorage.setItem("FilingDate", '');
                            }
                            var urlContributionsCandIndFamily = '@Url.Action("ContributionsCandIndFamily", "ContributionsCandIndFamily")';
                            sessionStorage.setItem("IndPart", "Yes");
                            sessionStorage.setItem("Corporate", "No");
                            sessionStorage.setItem("Other", "No");
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        if (selectedlstTransactionType == "2") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From Corporate");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            if (sessionStorage.getItem("CutOffDate") == null) {
                                sessionStorage.setItem("CutOffDate", '');
                            }

                            if (sessionStorage.getItem("FilingDate") == null) {
                                sessionStorage.setItem("FilingDate", '');
                            }

                            var urlContributionsCandIndFamily = '@Url.Action("ContributionsCandIndFamily", "ContributionsCandIndFamily")';
                            sessionStorage.setItem("Corporate", "Yes");
                            sessionStorage.setItem("IndPart", "No");
                            sessionStorage.setItem("Other", "No");
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        if (selectedlstTransactionType == "3") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Monetary Contributions Received From All Other");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            if (sessionStorage.getItem("CutOffDate") == null) {
                                sessionStorage.setItem("CutOffDate", '');
                            }

                            if (sessionStorage.getItem("FilingDate") == null) {
                                sessionStorage.setItem("FilingDate", '');
                            }

                            var urlContributionsCandIndFamily = '@Url.Action("ContributionsCandIndFamily", "ContributionsCandIndFamily")';
                            sessionStorage.setItem("Other", "Yes");
                            sessionStorage.setItem("IndPart", "No");
                            sessionStorage.setItem("Corporate", "No");
                            window.location.href = urlContributionsCandIndFamily;
                        }
                        if (selectedlstTransactionType == "4") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Contributions - In Kind");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlContributionInKind = '@Url.Action("ContributionInKind", "ContributionInKind")';
                            window.location.href = urlContributionInKind;
                        }
                        if (selectedlstTransactionType == "5") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Other Receipts Received");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("OtherReceiptsReceivedSchedE", "OtherReceiptsReceivedSchedE")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "6") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Expenditure Payments");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlExpenditurePaymentsSchedF = '@Url.Action("ExpenditurePaymentsSchedF", "ExpenditurePaymentsSchedF")';                            
                            window.location.href = urlExpenditurePaymentsSchedF;
                        }
                        if (selectedlstTransactionType == "7") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Transfer In");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("TransferInScheG", "TransferInScheG")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "8") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Transfer Out");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlTransferOut = '@Url.Action("TransferOutSchedH", "TransferOutSchedH")';
                            window.location.href = urlTransferOut;
                        }
                        if (selectedlstTransactionType == "9") {

                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Loan Received");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("LoanReceivedSchedI", "LoanReceivedSchedI")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "10") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Loan Repayments");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("LoanRepaymentsSchedJ", "LoanRepaymentsSchedJ")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "11") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Liabilities/Loans Forgiven");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("LiabilitiesLoansForgivenSchedK", "LiabilitiesLoansForgivenSchedK")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "12") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Expenditure Refund");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("ExpenditureRefundsSchedL", "ExpenditureRefundsSchedL")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "13") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Contributions Refunded");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("ContributionRefundedSchedM", "ContributionRefundedSchedM")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "14") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Outstanding Liabilities/Loans");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("OutStandingLiabilityLoansSchedN", "OutStandingLiabilityLoansSchedN")';                            
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "15") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Partnership/Subcontractor");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("OtherReceiptsReceivedSchedE", "OtherReceiptsReceivedSchedE")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "16") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Non-Campaign HouseKeeping Receipts");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlNonCompHKReceipts = '@Url.Action("NonCampaignHousekeepingReceiptsSchedP", "NonCampaignHousekeepingReceiptsSchedP")';
                            window.location.href = urlNonCompHKReceipts;
                        }
                        if (selectedlstTransactionType == "17") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Non-Campaign HouseKeeping Expenses");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlNonCompHKExpenses = '@Url.Action("NonCampaignHousekeepingExpensesSchedQ", "NonCampaignHousekeepingExpensesSchedQ")';
                            window.location.href = urlNonCompHKExpenses;
                        }
                        if (selectedlstTransactionType == "18") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Amount Allocated");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("ExpensesAllocationScheR", "ExpensesAllocationScheR")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "19") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Public Fund Receipts");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("PublicFundReceiptsSchedS", "PublicFundReceiptsSchedS")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "20") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Public Fund Expenses");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("PublicFundExpensesSchedT", "PublicFundExpensesSchedT")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                        if (selectedlstTransactionType == "21") {
                            $("#lblHeader,#lblHeader1,#lblHeader2").text("Public Fund Repayment");
                            sessionStorage.setItem("ScheduleId", GlobalFilingSchedID);
                            sessionStorage.setItem("TransNumberEdit", GlobalTransNumber);
                            sessionStorage.setItem("EditFlag", "True");
                            var urlOtherReceiptsReceivedSchedE = '@Url.Action("PublicFundRepaymentSchedU", "PublicFundRepaymentSchedU")';
                            window.location.href = urlOtherReceiptsReceivedSchedE;
                        }
                    }
                }
                else {
                    /**
                     * Hide ("#divLoading") when we're not able to finish transaction.
                     * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
                    */
                    $m("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before adding this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                /**
                    * Hide ("#divLoading") when we're not able to finish transaction.
                    * See defect 3933 where lack of orchestration on the loading image created a false sense that the application was done drawing tables.
                */
                $m("#divLoading").hide();
            });
        });


        /////////////// MAIN FORM DELETE CAMPAIGN MATERIAL CLICK EVENT ///////////////
        $("#campaignMaterialsGrid tbody").on('click', '#btnDeleteCampaignMaterial', function (e) {
            var dataTrans = campaignMaterialsDataTable.row($(this).parents('tr')).data();

            var resultsDelete = false;
            var cutOffDate = '';

            sessionStorage.setItem("EditYesNo", "Yes");

            resultsDelete = "Are you sure you want to delete this transaction?";

            $m('#modal_dialog').text(resultsDelete);
            $m("#modal_dialog").dialog({
                resizable: false,
                width: '400px',
                height: 'auto',
                bgiframe: false,
                modal: true,
                closeOnEscape: false,
                open: function (event, ui) { hideDialogXButton(this); },
                buttons: {
                    "OK": function () {
                        //Close Confirm Box.
                        $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                        /////////////////////////////////////
                        // MAKE AJAX CALL TO GET THE FilingCutoffData
                        $.post('@Url.Action("GetFilingCutoffData", "ViewAllDisclosures")' , {
                            strReportYearID: GlobalReportYearID,
                            strElectionTypeID: GlobalElectionTypeID,
                            strOfficeTypeID: GlobalOfficeTypeID,
                            strDisclosurePeriodID: GlobalDisclosurePeriodID
                        }, function (results) {
                            if (results) {
                                for (var i = 0; i < results.length; i++) {
                                    var item = results[i];
                                    if (item.FilingDueDate == null)
                                        cutOffDate = item.CutOffDate;
                                    else
                                        sessionStorage.setItem("FilingDate", item.FilingDueDate);
                                }

                                sessionStorage.setItem("EditYesNo", "No");

                                // DELETE TRANSACTION.
                                $.post('@Url.Action("DeleteNonItemCampMaterialData", "NonItemCampaignMaterial")' , {
                                    strCampaignMaterialId: dataTrans[0].toString()
                                }, function (results) {

                                    ShowDialogBox('EFS', 'Transaction deleted successfully', 'Ok', '');
                                    window.status = "Transaction deleted successfully";

                                    $m.ajax({
                                        "url": '@Url.Action("GetCampaignMaterialData", "NonItemCampaignMaterial")',
                                        "data": {
                                            txtFilerID: sessionStorage.getItem('GlobalFilerID'),
                                            lstElectionCycle: GlobalReportYearID,
                                            lstElectionYear: GlobalReportYear,
                                            lstUCOfficeType: GlobalOfficeTypeID,
                                            lstElectionType: GlobalElectionTypeID,
                                            lstElectionDate: GlobalElectionDate,
                                            lstDisclosurePeriod: GlobalDisclosurePeriodID,
                                            strDisclosurePeriodDesc: GlobalDisclosurePeriod,
                                            lstElectionDateId: GlobalPolCalDateID,
                                            txtCuttOffDate: cutOffDate
                                        },
                                        "success": results,
                                        "dataType": "json",
                                        "type": "POST",
                                        "error": function () {
                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                        }
                                    });
                                    $m('#campaignMaterialsGrid').DataTable().ajax.reload();
                                    campaignMaterialsDataTable.responsive.recalc();

                                });

                            }
                            else {
                                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                            }
                        });
                    },
                    "Cancel": function () {
                        sessionStorage.setItem("EditYesNo", "No");
                        $m(this).dialog("close");
                    }
                }
            });


        });

        ////////////////////// ADD SUPPORTING DOCUMENT DIALOG CODE /////////////////////
        var dialogAddSupportingDocument;

        dialogAddSupportingDocument = $m("#dialog-form_AddSupportingDocument").dialog({
            autoOpen: false,
            height: 'auto',
            width: 450,
            modal: true,
            closeOnEscape: false,
            dialogClass: "no-close",
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            // get the screen height and width
            if ($(window).width() < 500) {
                dialogAddSupportingDocument = $m("#dialog-form_AddSupportingDocument").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    dialogClass: "no-close",
                    width: 300,
                    modal: true,
                    closeOnEscape: false,
                    dialogClass: "MinHeight",
                    open: function (event, ui) { hideDialogXButton(this); }
                });

            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogAddSupportingDocument = $m("#dialog-form_AddSupportingDocument").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    dialogClass: "no-close",
                    width: 450,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialogAddSupportingDocument = $m("#dialog-form_AddSupportingDocument").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    width: 500,
                    dialogClass: "no-close",
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        ////////////////////// ADD SUPPORTING DOCUMENT DIALOG CODE /////////////////////
        var dialogAddSupportingDocumentPCF;

        dialogAddSupportingDocumentPCF = $m("#dialog-form_AddSupportingDocumentPCF").dialog({
            autoOpen: false,
            height: 'auto',
            width: 450,
            modal: true,
            closeOnEscape: false,
            dialogClass: "no-close",
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            // get the screen height and width
            if ($(window).width() < 500) {
                dialogAddSupportingDocumentPCF = $m("#dialog-form_AddSupportingDocumentPCF").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    dialogClass: "no-close",
                    width: 300,
                    modal: true,
                    closeOnEscape: false,
                    dialogClass: "MinHeight",
                    open: function (event, ui) { hideDialogXButton(this); }
                });

            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogAddSupportingDocumentPCF = $m("#dialog-form_AddSupportingDocumentPCF").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    dialogClass: "no-close",
                    width: 450,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialogAddSupportingDocumentPCF = $m("#dialog-form_AddSupportingDocumentPCF").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    width: 500,
                    dialogClass: "no-close",
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        ////////////////////////////////////// DIALOG FORM DISCLOSURE TYPE DROPDOWN CHANGE EVENT //////////////////////////////////////////////
        $("#lstDocumentType").change(function () {
            sessionStorage.setItem("DirtyData", "True");
            GlobalDocumentTypeID = $("#lstDocumentType").val();
        });

        $("#lstDocumentTypePCF").change(function () {
            sessionStorage.setItem("DirtyData", "True");
            GlobalDocumentTypeID = $("#lstDocumentTypePCF").val();
        });

        ////////////////////////////////////// DIALOG FORM SAVE BUTTON CLICK EVENT ///////////////////////////////////////////
        $("#btnSaveDialog").bind('click', function () {
            // MAKE SURE USER SELECTS A DOCUMENT TYPE TO UPLOAD
            if ($("#lstDocumentType").val() == "") {
                ShowDialogBox('EFS', 'You must select a document type.', 'Ok', '');
                return;
            }
            else
                var DocumentType = $("#lstDocumentType option:selected").text().split(' ').join('');

            // PUT THE SELECTED FILE INTO DATA ARRAY
            var data = new FormData();
            var files = $("#txtFileNameDialog").get(0).files;
            // MAKE SURE THE USER HAS SELECTED A DOCUMENT TO UPLOAD
            if (files.length > 0) {
                data.append("UploadedFile", files[0]);
            }
            else {
                ShowDialogBox('EFS', 'You must select a document to upload.', 'Ok', '');
                return;
            }

            $.post('@Url.Action("SetSessionVariables", "ViewAllDisclosures")', {
                strDocumentType: DocumentType,
                strElectionYear: GlobalReportYear,
                strFilingAbbrev: GlobalFilingAbbrev
            }, function (sessionResults) {
                if (sessionResults == "True") {
                    // Make a call to upload file into Cabinet and get Document ID, File Type,
                    // and File Size. Make Ajax request with the contentType = false,
                    // and procesDate = false
                    var ajaxRequest = $.ajax({
                        type: "POST",
                        url: '@Url.Action("UploadSupportingDocument", "ViewAllDisclosures")',
                        contentType: false,
                        processData: false,
                        data: data
                    });

                    // WHEN THAT PROCESS COMPLETES, MAKE AJAX CALL TO INSERT RECORD INTO
                    // SUPPORTINGDOCUMENTS TABLE
                    $("#divLoading").show();

                    ajaxRequest.done(function (xhr, textStatus) {
                        $.post('@Url.Action("InsertSupportingDocument", "ViewAllDisclosures")' , {
                            strTransNumber: GlobalTransNumber,
                            strDocTypeID: GlobalDocumentTypeID,
                            strFilerID: sessionStorage.getItem('GlobalFilerID'),
                            strFilingsID: GlobalFilingsID
                        }, function (results) {
                            if (results) {
                                // IF THERE ARE NO ERRORS RETURNED FROM THE CONTROLLER
                                // THEN GO AHEAD AND PROCESS NORMALLY
                                if (results.Errors == null) {
                                    $("#divLoading").hide();
                                    //dialogAddSupportingDocument.dialog("close");
                                    // RELOAD THE TRANSACTIONGRID AFTER ADDING A SUPPORTING DOCUMENT
                                    // THIS ALLOWS US TO SHOW THE SUPPORTING DOCUMENTS LINK
                                    // IN THE EVENT THAT THE SUPPORTING DOCUMENT ADDED IS THE FIRST
                                    $m("#transactionsGrid").DataTable().ajax.reload();

                                    if (supportingDocumentsDataTable != "undefined")
                                        $m("#supportingDocumentsGrid").DataTable().ajax.reload();

                                    ClearDialog();
                                    sessionStorage.setItem("DirtyData", "False");
                                    $("#txtFileNameDialog").focus();

                                    window.status = "Supporting document saved successfully.";
                                    ShowDialogBox('EFS', 'Supporting document saved successfully.', 'Ok', '');
                                }
                                else {
                                    // TAKE THE ERROR MESSAGES RETURNED FROM THE CONTROLLER
                                    // AND CONSTRUCT A MESSAGE AND DISPLAY IT IN A DIALOG
                                    $("#divLoading").hide();
                                    var message = "";
                                    for (var i = 0; i < results.Errors.length; i++) {
                                        message += i + 1 + ") " + results.Errors[i].Value + "  ";
                                    }
                                    ShowDialogBox('EFS', message, 'Ok', '');
                                }
                            }
                            else {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                            }
                        });
                    });
                }
                else {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                }
            });
        });

        ////////////////////////////////////// DIALOG FORM SAVE BUTTON CLICK EVENT FOR PCF ///////////////////////////////////////////
        $("#btnSaveDialogPCF").bind('click', function () {
            // MAKE SURE USER SELECTS A DOCUMENT TYPE TO UPLOAD
            if ($("#lstDocumentTypePCF").val() == "") {
                ShowDialogBox('EFS', 'You must select a document type.', 'Ok', '');
                return;
            }
            else
                var DocumentType = $("#lstDocumentTypePCF option:selected").text().split(' ').join('');

            // PUT THE SELECTED FILE INTO DATA ARRAY
            var data = new FormData();
            var files = $("#txtFileNameDialogPCF").get(0).files;
            // MAKE SURE THE USER HAS SELECTED A DOCUMENT TO UPLOAD
            if (files.length > 0) {
                data.append("UploadedFile", files[0]);
            }
            else {
                ShowDialogBox('EFS', 'You must select a document to upload.', 'Ok', '');
                return;
            }

            $.post('@Url.Action("SetSessionVariables", "ViewAllDisclosures")', {
                strDocumentType: DocumentType,
                strElectionYear: GlobalReportYear,
                strFilingAbbrev: GlobalFilingAbbrev
            }, function (sessionResults) {
                if (sessionResults == "True") {
                    // Make a call to upload file into Cabinet and get Document ID, File Type,
                    // and File Size. Make Ajax request with the contentType = false,
                    // and procesDate = false
                    var ajaxRequest = $.ajax({
                        type: "POST",
                        url: '@Url.Action("UploadSupportingDocument", "ViewAllDisclosures")',
                        contentType: false,
                        processData: false,
                        data: data
                    });

                    // WHEN THAT PROCESS COMPLETES, MAKE AJAX CALL TO INSERT RECORD INTO
                    // SUPPORTINGDOCUMENTS TABLE
                    $("#divLoading").show();

                    ajaxRequest.done(function (xhr, textStatus) {
                        $.post('@Url.Action("InsertSupportingDocument", "ViewAllDisclosures")' , {
                            strTransNumber: "",
                            strDocTypeID: $("#lstDocumentTypePCF option:selected").val(),
                            strFilerID: sessionStorage.getItem('GlobalFilerID'),
                            strFilingsID: GlobalFilingsID
                        }, function (results) {
                            if (results) {
                                // IF THERE ARE NO ERRORS RETURNED FROM THE CONTROLLER
                                // THEN GO AHEAD AND PROCESS NORMALLY
                                if (results.Errors == null) {
                                    $("#divLoading").hide();
                                    //dialogAddSupportingDocument.dialog("close");
                                    // RELOAD THE TRANSACTIONGRID AFTER ADDING A SUPPORTING DOCUMENT
                                    // THIS ALLOWS US TO SHOW THE SUPPORTING DOCUMENTS LINK
                                    // IN THE EVENT THAT THE SUPPORTING DOCUMENT ADDED IS THE FIRST
                                    $m("#transactionsGrid").DataTable().ajax.reload();


                                    if (supportingDocumentsDataTable != "undefined") {
                                        $m("#supportingDocumentsGrid").DataTable().ajax.reload();
                                    }
                                    ClearDialogPCF();
                                    $("#lstDocumentTypePCF")[0].selectedIndex = 0;
                                    sessionStorage.setItem("DirtyData", "False");
                                    $("#txtFileNameDialogPCF").focus();

                                    window.status = "Supporting document saved successfully.";
                                    ShowDialogBox('EFS', 'Supporting document saved successfully.', 'Ok', '');
                                    SetSessionFilerID_NotForFP();
                                    DisplayDisclosuresGrid();
                                }
                                else {
                                    // TAKE THE ERROR MESSAGES RETURNED FROM THE CONTROLLER
                                    // AND CONSTRUCT A MESSAGE AND DISPLAY IT IN A DIALOG
                                    $("#divLoading").hide();
                                    var message = "";
                                    for (var i = 0; i < results.Errors.length; i++) {
                                        message += i + 1 + ") " + results.Errors[i].Value + "  ";
                                    }
                                    ShowDialogBox('EFS', message, 'Ok', '');
                                }
                            }
                            else {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                            }
                        });
                    });
                }
                else {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                }
            });
        });

        ////////////////////////////////////// DIALOG FORM CLOSE BUTTON CLICK EVENT ///////////////////////////////////////////
        $("#btnCloseDialog").bind('click', function () {

            // IF THEY'VE MADE CHANGES, PROMPT THEM AND CLOSE
            if (sessionStorage.getItem("DirtyData") == "True") {
                $m('#modal_dialog').text("All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?");
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    resizable: false,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    position: {
                        my: "center top",
                        at: "center top+300"
                    },
                    hide: { effect: 'scale', duration: 400 },
                    buttons: {
                        // IF THEY CLICK OK, CLOSE THE FORM
                        "Ok": function () {
                            $m(this).dialog("close");
                            dialogAddSupportingDocument.dialog("close");
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
                $m("#modal_dialog").dialog("open");
            }
            else
                dialogAddSupportingDocument.dialog("close");
        });

        ///////////////////// DIALOG FORM CLEAR BUTTON CLICK EVENT ////////////////////////
        $("#btnClearDialog").bind('click', function () {
            // CLEARS ALL CONTROLS
            ClearDialog();
            $("#txtFileNameDialog").focus();
        });

        ////////////////////////////////////// DIALOG FORM CLOSE BUTTON CLICK EVENT ///////////////////////////////////////////
        $("#btnCloseDialogPCF").bind('click', function () {

            // IF THEY'VE MADE CHANGES, PROMPT THEM AND CLOSE
            if (sessionStorage.getItem("DirtyData") == "True") {
                $m('#modal_dialog').text("All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?");
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    resizable: false,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    position: {
                        my: "center top",
                        at: "center top+300"
                    },
                    hide: { effect: 'scale', duration: 400 },
                    buttons: {
                        // IF THEY CLICK OK, CLOSE THE FORM
                        "Ok": function () {
                            $m(this).dialog("close");
                            dialogAddSupportingDocumentPCF.dialog("close");
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
                $m("#modal_dialog").dialog("open");
            }
            else
                dialogAddSupportingDocumentPCF.dialog("close");
        });

        ///////////////////// DIALOG FORM CLEAR BUTTON CLICK EVENT ////////////////////////
        $("#btnClearDialogPCF").bind('click', function () {
            // CLEARS ALL CONTROLS
            $('#txtFileNameDialogPCF').val("");
            $("#txtFileNameDialogPCF").focus();
            $("#lstDocumentTypePCF")[0].selectedIndex = 0;
        });

        //////////////////// DIALOG FORM SELECT FILE EVENT ////////////////////////////////
        $('#txtFileNameDialog').change(function () {
            // GET THE FILE TO UPLOAD AND PERFORM VALIDATION BASED ON ITS TYPE
            if (this.value != '') {
                // GET THE EXTENSION AND SET THE MAX SIZE
                var ext = this.value.match(/\.(.+)$/)[1];
                var maxFileSize = 20971520;// 20 MB

                switch (ext.toUpperCase()) {
                    case 'JPEG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size should not exceed 20MB.', 'Ok', '');
                            $("#txtFileNameDialog").val('');
                        }
                        $("#txtFileNameDialog").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'JPG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNameDialog").val('');
                        }
                        $("#txtFileNameDialog").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'PNG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNameDialog").val('');
                        }
                        $("#txtFileNameDialog").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'PDF':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNameDialog").val('');
                        }
                        $("#txtFileNameDialog").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    default:
                        ShowDialogBox('EFS', 'Allowable file types are PDF, JPEG, JPG, PNG. File Name should only contain one (. dot), followed by file extension.', 'Ok', '');
                        $("#txtFileNameDialog").val('');
                        break;
                }
            }
        });


        //////////////////// DIALOG FORM SELECT FILE EVENT ////////////////////////////////
        $('#txtFileNameDialogPCF').change(function () {
            // GET THE FILE TO UPLOAD AND PERFORM VALIDATION BASED ON ITS TYPE
            if (this.value != '') {
                // GET THE EXTENSION AND SET THE MAX SIZE
                var ext = this.value.match(/\.(.+)$/)[1];
                var maxFileSize = 20971520;// 20 MB

                switch (ext.toUpperCase()) {
                    case 'JPEG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size should not exceed 20MB.', 'Ok', '');
                            $("#txtFileNameDialogPCF").val('');
                        }
                        $("#txtFileNameDialogPCF").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'JPG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNameDialogPCF").val('');
                        }
                        $("#txtFileNameDialogPCF").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'PNG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNameDialogPCF").val('');
                        }
                        $("#txtFileNameDialogPCF").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'PDF':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNameDialogPCF").val('');
                        }
                        $("#txtFileNameDialogPCF").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    default:
                        ShowDialogBox('EFS', 'Allowable file types are PDF, JPEG, JPG, PNG. File Name should only contain one (. dot), followed by file extension.', 'Ok', '');
                        $("#txtFileNameDialogPCF").val('');
                        break;
                }
            }
        });


        ////////////////////// ADD PIDA DIALOG CODE /////////////////////
        var dialogAddPIDADocument;

        dialogAddPIDADocument = $m("#dialog-form_AddPIDADocument").dialog({
            autoOpen: false,
            height: 'auto',
            width: 575,
            modal: true,
            closeOnEscape: false,
            dialogClass: "no-close",
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            // get the screen height and width
            if ($(window).width() < 500) {
                dialogAddPIDADocument = $m("#dialog-form_AddPIDADocument").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    dialogClass: "no-close",
                    width: 550,
                    modal: true,
                    closeOnEscape: false,
                    dialogClass: "MinHeight",
                    open: function (event, ui) { hideDialogXButton(this); }
                });

            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogAddPIDADocument = $m("#dialog-form_AddPIDADocument").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    dialogClass: "no-close",
                    width: 550,
                    modal: true,
                    closeOnEscape: false,
                    dialogClass: "MinHeight",
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialogAddPIDADocument = $m("#dialog-form_AddPIDADocument").dialog({
                    autoOpen: false,
                    resizable: true,
                    height: 'auto',
                    width: 550,
                    dialogClass: "no-close",
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();


        ///////////////////// INITIALIZE VALIDATION PIDA DIALOG /////////////////////
        var validatorPIDA = $m("#AddPIDADocumentForm").validate({ // initialize the plugin
            onfocusout: function (element) { $m(element).valid(); },
            rules: {
                lstCommunicationTypePIDA: {
                    required: true
                },
                txtDescriptionPIDA: {
                    required: true,
                    ValidateAlphaNumericAddress: true
                },
                dpDateSubmittedPIDA: {
                    required: true,
                    dateUS: true,
                    restrictFutureDate: true
                },
                txtFileNamePIDA: {
                    //required: true
                    required: {
                        depends: function () {
                            return (GlobalAddEdit == "ADD");
                        }
                    }
                }
            },
            messages: {
                lstCommunicationTypePIDA: {
                    required: "Error: Communication Type is required"
                },
                txtDescriptionPIDA: {
                    required: "Error: Description is required",
                    ValidateAlphaNumericAddress: "Letters and characters '# -., are allowed"
                },
                dpDateSubmittedPIDA: {
                    required: "Error: Date Submitted is required",
                    dateUS: "Error: Enter valid date format (MM/DD/YYYY)",
                    restrictFutureDate: "Error: Date Filed cannot be future date"
                },
                txtFileNamePIDA: {
                    required: "Error: File is required"
                }
            },
            invalidHandler: function (form, validatorPIDA) {
                var errors = validatorPIDA.numberOfInvalids();
                if (errors) {
                    validatorPIDA.errorList[0].element.focus();
                }
            },
            errorPlacement: function (error, element) {
                var name = $m(element).attr("name");
                error.appendTo($m("#" + name + "_validate"));
            },
        });

        $m.validator.addMethod("ValidateAlphaNumericAddress", function (value, element) {
            return this.optional(element) || /^[a-zA-Z0-9 #'.,-]*$/i.test(value);
        });

        $m.validator.addMethod("restrictFutureDate", function (value, element) {
            var now = new Date();
            //var m = now.getMonth() + 1;
            var m = now.getMonth();
            var d = now.getDate();
            var y = now.getFullYear();
            var dtCurrentDate = new Date(y, m, d);

            var selectedDate = new Date(value);
            //var sm = selectedDate.getMonth() + 1;
            var sm = selectedDate.getMonth();
            var sd = selectedDate.getDate();
            var sy = selectedDate.getFullYear();
            var dtSelectedDate = new Date(sy, sm, sd);
            return this.optional(element) || dtSelectedDate <= dtCurrentDate;
        }, "Error: Date can not be in future");

        $m.validator.addMethod(
            "dateUS",
            function (value, element) {
                var errormsg = "";
                var re = /^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$/;
                if (re.test(value)) {
                    var adata = value.split('/');
                    var mm = parseInt(adata[0], 10);
                    var dd = parseInt(adata[1], 10);
                    var yyyy = parseInt(adata[2], 10);
                    var xdata = new Date(yyyy, mm - 1, dd);
                    if ((xdata.getFullYear() == yyyy) && (xdata.getMonth() == mm - 1) && (xdata.getDate() == dd))
                        check = true;
                    else {
                        check = false;
                        errormsg = "Error: Leap year date";
                    }
                } else
                    check = false;
                return this.optional(element) || check;
            },
            "Error: Invalid Date");

        ////////////////////// END VALIDATION ////////////////////////////


        //////////////////// DIALOG FORM SELECT FILE EVENT ////////////////////////////////
        $('#txtFileNamePIDA').change(function () {
            // GET THE FILE TO UPLOAD AND PERFORM VALIDATION BASED ON ITS TYPE
            if (this.value != '') {
                // GET THE EXTENSION AND SET THE MAX SIZE
                var ext = this.value.match(/\.(.+)$/)[1];
                var maxFileSize = 20971520;// 20 MB

                switch (ext.toUpperCase()) {
                    case 'JPEG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size should not exceed 20MB.', 'Ok', '');
                            $("#txtFileNamePIDA").val('');
                        }
                        $m("#txtFileNamePIDA").removeClass("error");
                        $m("#AddPIDADocumentForm").valid();
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'JPG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNamePIDA").val('');
                        }
                        $m("#txtFileNamePIDA").removeClass("error");
                        $m("#AddPIDADocumentForm").valid();
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'PNG':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNamePIDA").val('');
                        }
                        $m("#txtFileNamePIDA").removeClass("error");
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    case 'PDF':
                        if (this.files[0].size > maxFileSize) {
                            ShowDialogBox('EFS', 'File size cannot be more than 20MB.', 'Ok', '');
                            $("#txtFileNamePIDA").val('');
                        }
                        $m("#txtFileNamePIDA").removeClass("error");
                        $m("#AddPIDADocumentForm").valid();
                        sessionStorage.setItem("DirtyData", "True");
                        break;
                    default:
                        ShowDialogBox('EFS', 'Allowable file types are PDF, JPEG, JPG, PNG. File Name should only contain one (. dot), followed by file extension.', 'Ok', '');
                        $("#txtFileNamePIDA").val('');
                        break;
                }
            }
        });

        ///////////////// PIDA DIALOG SAVE BUTTON CLICK /////////////////
        $("#btnSaveDialogPIDA").bind('click', function () {
            $m("#AddPIDADocumentForm").valid();
            if (!$m("#AddPIDADocumentForm").valid())
                return;

            if (GlobalAddEdit == "ADD") {
                // PUT THE SELECTED FILE INTO DATA ARRAY
                var data = new FormData();
                var files = $("#txtFileNamePIDA").get(0).files;
                // MAKE SURE THE USER HAS SELECTED A DOCUMENT TO UPLOAD
                if (files.length > 0) {
                    data.append("UploadedFile", files[0]);
                }
                else {
                    ShowDialogBox('EFS', 'You must select a document to upload.', 'Ok', '');
                    return;
                }

                $.post('@Url.Action("SetSessionVariablesPIDA", "ViewAllDisclosures")', {
                    strCommunicationType: $("#lstCommunicationTypePIDA").val(),
                    strElectionYear: GlobalReportYear,
                    strFilingAbbrev: GlobalFilingAbbrev,
                    // FOR ADD THESE VALUES ARE BLANK, AS THEY WILL BE ASSIGNED IN THE
                    // CABINET CODE
                    strScanDocID: "",
                    strFileType: "",
                    strFileSize: ""
                }, function (sessionResults) {
                    if (sessionResults == "True") {
                        // Make a call to upload file into Cabinet and get Document ID, File Type,
                        // and File Size. Make Ajax request with the contentType = false,
                        // and procesDate = false
                        var ajaxRequest = $.ajax({
                            type: "POST",
                            url: '@Url.Action("UploadPIDADocument", "ViewAllDisclosures")',
                            contentType: false,
                            processData: false,
                            data: data
                        });

                        // WHEN THAT PROCESS COMPLETES, MAKE AJAX CALL TO INSERT RECORD INTO
                        // SUPPORTINGDOCUMENTS TABLE
                        $("#divLoading").show();

                        ajaxRequest.done(function (xhr, textStatus) {
                            $.post('@Url.Action("InsertSupportingDocumentPIDA", "ViewAllDisclosures")', {
                                strTransNumber: GlobalTransNumber,
                                strCommunicationTypeID: $("#lstCommunicationTypePIDA").val(),
                                strDateSubmitted: $("#dpDateSubmittedPIDA").val(),
                                strComments: $("#txtDescriptionPIDA").val(),
                                strFilerID: sessionStorage.getItem('GlobalFilerID'),
                                strFilingsID: GlobalFilingsID
                            }, function (results) {
                                if (results) {
                                    // IF THERE ARE NO ERRORS RETURNED FROM THE CONTROLLER
                                    // THEN GO AHEAD AND PROCESS NORMALLY
                                    if (results.Errors == null) {
                                        $("#divLoading").hide();

                                        // RELOAD THE TRANSACTIONGRID AFTER ADDING A SUPPORTING DOCUMENT
                                        // THIS ALLOWS US TO SHOW THE SUPPORTING DOCUMENTS LINK
                                        // IN THE EVENT THAT THE SUPPORTING DOCUMENT ADDED IS THE FIRST
                                        $m("#transactionsGrid").DataTable().ajax.reload();

                                        // DEFECT 3373 REQUIRES FORM STAY OPEN BUT CLEAR
                                        // CHANGED BY CREIGHTON ON 3/25/2021
                                        //dialogAddPIDADocument.dialog("close");
                                        ClearValErrorAndForm("AddPIDADocumentForm");

                                        if (PIDADataTable != "undefined")
                                            $m("#PIDAGrid").DataTable().ajax.reload();

                                        sessionStorage.setItem("DirtyData", "False");

                                        window.status = "Transaction saved successfully.";
                                        ShowDialogBox('EFS', 'Transaction saved successfully.', 'Ok', '');
                                    }
                                    else {
                                        // TAKE THE ERROR MESSAGES RETURNED FROM THE CONTROLLER
                                        // AND CONSTRUCT A MESSAGE AND DISPLAY IT IN A DIALOG
                                        $("#divLoading").hide();
                                        var message = "";
                                        for (var i = 0; i < results.Errors.length; i++) {
                                            message += i + 1 + ") " + results.Errors[i].Value + "  ";
                                        }
                                        ShowDialogBox('EFS', message, 'Ok', '');
                                    }
                                }
                                else {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                }
                            });
                        });
                    }
                    else {
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                    }
                });

            }

            else if (GlobalAddEdit == "EDIT") {
                //////////////////////////////////////////
                if ($("#txtFileNamePIDA").val() != '') {
                    // PUT THE SELECTED FILE INTO DATA ARRAY
                    var data = new FormData();
                    var files = $("#txtFileNamePIDA").get(0).files;
                    // MAKE SURE THE USER HAS SELECTED A DOCUMENT TO UPLOAD
                    if (files.length > 0) {
                        data.append("UploadedFile", files[0]);
                    }
                    else {
                        ShowDialogBox('EFS', 'You must select a document to upload.', 'Ok', '');
                        return;
                    }

                    $.post('@Url.Action("SetSessionVariablesPIDA", "ViewAllDisclosures")', {
                        strCommunicationType: $("#lstCommunicationTypePIDA").val(),
                        strElectionYear: GlobalReportYear,
                        strFilingAbbrev: GlobalFilingAbbrev,
                        // FOR EDIT CASES WHEN A NEW FILE IS SELECTED, THESE VALUES ARE BLANK,
                        // AS THEY WILL BE ASSIGNED IN THE CABINET CODE
                        strScanDocID: "",
                        strFileType: "",
                        strFileSize: ""
                    }, function (sessionResults) {
                        if (sessionResults == "True") {
                            // Make a call to upload file into Cabinet and get Document ID, File Type,
                            // and File Size. Make Ajax request with the contentType = false,
                            // and procesDate = false
                            var ajaxRequest = $.ajax({
                                type: "POST",
                                url: '@Url.Action("UploadPIDADocument", "ViewAllDisclosures")',
                                contentType: false,
                                processData: false,
                                data: data
                            });

                            // WHEN THAT PROCESS COMPLETES, MAKE AJAX CALL TO INSERT RECORD INTO
                            // SUPPORTINGDOCUMENTS TABLE
                            $("#divLoading").show();

                            ajaxRequest.done(function (xhr, textStatus) {
                                $.post('@Url.Action("UpdateSupportingDocumentPIDA", "ViewAllDisclosures")', {
                                    strSupportingDocID: GlobalSupportDocID_PIDA,
                                    strCommunicationTypeID: $("#lstCommunicationTypePIDA").val(),
                                    strDateSubmitted: $("#dpDateSubmittedPIDA").val(),
                                    strComments: $("#txtDescriptionPIDA").val()
                                }, function (results) {
                                    if (results) {
                                        // IF THERE ARE NO ERRORS RETURNED FROM THE CONTROLLER
                                        // THEN GO AHEAD AND PROCESS NORMALLY
                                        if (results.Errors == null) {
                                            $("#divLoading").hide();
                                            //dialogAddSupportingDocument.dialog("close");
                                            // RELOAD THE TRANSACTIONGRID AFTER ADDING A SUPPORTING DOCUMENT
                                            // THIS ALLOWS US TO SHOW THE SUPPORTING DOCUMENTS LINK
                                            // IN THE EVENT THAT THE SUPPORTING DOCUMENT ADDED IS THE FIRST
                                            $m("#transactionsGrid").DataTable().ajax.reload();

                                            dialogAddPIDADocument.dialog("close");

                                            if (PIDADataTable != "undefined")
                                                $m("#PIDAGrid").DataTable().ajax.reload();

                                            sessionStorage.setItem("DirtyData", "False");

                                            window.status = "PIDA file saved successfully.";
                                            ShowDialogBox('EFS', 'PIDA file saved successfully.', 'Ok', '');
                                        }
                                        else {
                                            // TAKE THE ERROR MESSAGES RETURNED FROM THE CONTROLLER
                                            // AND CONSTRUCT A MESSAGE AND DISPLAY IT IN A DIALOG
                                            $("#divLoading").hide();
                                            var message = "";
                                            for (var i = 0; i < results.Errors.length; i++) {
                                                message += i + 1 + ") " + results.Errors[i].Value + "  ";
                                            }
                                            ShowDialogBox('EFS', message, 'Ok', '');
                                        }
                                    }
                                    else {
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                    }
                                });
                            });
                        }
                        else {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    });
                }
                else {
                    $.post('@Url.Action("SetSessionVariablesPIDA", "ViewAllDisclosures")', {
                        strCommunicationType: $("#lstCommunicationTypePIDA").val(),
                        strElectionYear: GlobalReportYear,
                        strFilingAbbrev: GlobalFilingAbbrev,
                        // FOR EDIT CASES WHEN A NEW FILE IS NOT SELECTED, THESE VALUES ARE MAINTAINED
                        strScanDocID: GlobalScanDocID_PIDA,
                        strExtensionName: GlobalExtension_PIDA,
                        strFileSize: GlobalFileSize_PIDA
                    }, function (sessionResults) {
                        if (sessionResults == "True") {
                            // Make a call to upload file into Cabinet and get Document ID, File Type,
                            // and File Size. Make Ajax request with the contentType = false,
                            // and procesDate = false

                            $("#divLoading").show();

                                $.post('@Url.Action("UpdateSupportingDocumentPIDA", "ViewAllDisclosures")', {
                                    strSupportingDocID: GlobalSupportDocID_PIDA,
                                    strCommunicationTypeID: $("#lstCommunicationTypePIDA").val(),
                                    strDateSubmitted: $("#dpDateSubmittedPIDA").val(),
                                    strComments: $("#txtDescriptionPIDA").val()
                                }, function (results) {
                                    if (results) {
                                        // IF THERE ARE NO ERRORS RETURNED FROM THE CONTROLLER
                                        // THEN GO AHEAD AND PROCESS NORMALLY
                                        if (results.Errors == null) {
                                            $("#divLoading").hide();

                                            // RELOAD THE TRANSACTIONGRID AFTER ADDING A SUPPORTING DOCUMENT
                                            // THIS ALLOWS US TO SHOW THE SUPPORTING DOCUMENTS LINK
                                            // IN THE EVENT THAT THE SUPPORTING DOCUMENT ADDED IS THE FIRST
                                            $m("#transactionsGrid").DataTable().ajax.reload();

                                            dialogAddPIDADocument.dialog("close");

                                            if (PIDADataTable != "undefined")
                                                $m("#PIDAGrid").DataTable().ajax.reload();

                                            sessionStorage.setItem("DirtyData", "False");

                                            window.status = "PIDA file saved successfully.";
                                            ShowDialogBox('EFS', 'PIDA file saved successfully.', 'Ok', '');
                                        }
                                        else {
                                            // TAKE THE ERROR MESSAGES RETURNED FROM THE CONTROLLER
                                            // AND CONSTRUCT A MESSAGE AND DISPLAY IT IN A DIALOG
                                            $("#divLoading").hide();
                                            var message = "";
                                            for (var i = 0; i < results.Errors.length; i++) {
                                                message += i + 1 + ") " + results.Errors[i].Value + "  ";
                                            }
                                            ShowDialogBox('EFS', message, 'Ok', '');
                                        }
                                    }
                                    else {
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                    }
                                });


                        }
                        else {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    });
                }

                //////////////////////////////////////////
            }

        });

        ///////////////// PIDA DIALOG CLEAR BUTTON CLICK ///////////////
        $("#btnClearDialogPIDA").bind('click', function () {
            ClearValErrorAndForm("AddPIDADocumentForm");
            $("#lstCommunicationTypePIDA").focus();
        });

        $("#lstCommunicationTypePIDA").change(function () {
            sessionStorage.setItem("DirtyData", "True");
        });

        $("#txtDescriptionPIDA").change(function () {
            sessionStorage.setItem("DirtyData", "True");
        });

        $("#dpDateSubmittedPIDA").change(function () {
            sessionStorage.setItem("DirtyData", "True");
        });

        $("#txtFileNamePIDA").change(function () {
            sessionStorage.setItem("DirtyData", "True");
        });

        //////////////// PIDA DIALOG CLOSE BUTTON CLICK ///////////////
        $("#btnCloseDialogPIDA").bind('click', function () {
            // IF WE ARE NOT IN ADD MODE ASK THEM
            if (GlobalAddEdit != "ADD") {
                $m('#modal_dialog').text("All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?");
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    resizable: false,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    position: {
                        my: "center top",
                        at: "center top+300"
                    },
                    hide: { effect: 'scale', duration: 400 },
                    buttons: {
                        // IF THEY CLICK OK, CLOSE THE FORM
                        "Ok": function () {
                            $m(this).dialog("close");
                            dialogAddPIDADocument.dialog("close");
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
                $m("#modal_dialog").dialog("open");
            }
            else
                if (sessionStorage.getItem("DirtyData") == "True") {
                    $m('#modal_dialog').text("All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?");
                    $m("#modal_dialog").dialog({
                        resizable: false,
                        width: '400px',
                        height: 'auto',
                        bgiframe: false,
                        modal: true,
                        resizable: false,
                        closeOnEscape: false,
                        open: function (event, ui) {
                            $(".ui-dialog-titlebar-close", ui.dialog | ui).hide();
                        },
                        position: {
                            my: "center top",
                            at: "center top+300"
                        },
                        hide: { effect: 'scale', duration: 400 },
                        buttons: {
                            // IF THEY CLICK OK, CLOSE THE FORM
                            "Ok": function () {
                                sessionStorage.setItem("DirtyData", "False");
                                $m(this).dialog("close");
                                dialogAddPIDADocument.dialog("close");
                            },
                            "Cancel": function () {
                                $m(this).dialog("close");
                            }
                        }
                    });
                    $m("#modal_dialog").dialog("open");

                }
                else
                    dialogAddPIDADocument.dialog("close");
        });


        ///////////////////////// UTILITY FUNCTIONS //////////////////////////////

        function PopulateReportYears(controlToPopulate) {
            var options = {};
            options.url = '@Url.Action("GetReportYears", "ViewAllDisclosures")';
            options.type = "POST";
            options.data = JSON.stringify(
                {
                });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                SetToSelect(controlToPopulate);
                for (var i = 0; i < results.length; i++) {
                    $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                }

                if (results.length == "1") {
                    $(controlToPopulate).prop("selectedIndex", 1);
                    PopulateOfficeTypes("#lstOfficeType", $(controlToPopulate).val().toString());
                }

            };
            options.error = function (errorResults) {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
            };
            $.ajax(options);
        }

        function PopulateOfficeTypes(controlToPopulate, electionYearID) {
            // GET THE DATA FOR THE OFFICETYPE DROPDOWN BASED ON ELECTIONYEAR
            var options = {};
            options.url = '@Url.Action("GetOfficeTypeData", "ViewAllDisclosures")';
            options.type = "POST";
            options.data = JSON.stringify(
                {
                    //Parameter to be sent to JsonResult function in ElectionController.  Parameter must have the same name as the one used in function.
                    strElectYearID: electionYearID
                });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                SetToSelect(controlToPopulate);
                for (var i = 0; i < results.length; i++) {
                    $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");

                    if ($(controlToPopulate).text() == sessionStorage.getItem("IDR_FILER_TYPE").toString()) {
                        $(controlToPopulate).prop('selected', true).trigger('change');
                        sessionStorage.setItem("IDR_FILER_TYPE", null);
                    }
                }

                if (results.length == "1") {
                    $(controlToPopulate).prop("selectedIndex", 1);
                    PopulateElectionTypes("#lstElectionType", electionYearID, $(controlToPopulate).val().toString());
                }

            };
            options.error = function (errorResults) {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
            };
            $.ajax(options);
        }

        function PopulateElectionTypes(controlToPopulate, electionYearID, officeTypeID) {
            // GET THE DATA FOR THE ELECTIONTYPE DROPDOWN BASED ON ELECTIONYEAR AND OFFICETYPE
            var options = {};
            options.url = '@Url.Action("GetElectionTypeData", "ViewAllDisclosures")';
            options.type = "POST";
            options.data = JSON.stringify(
                {
                    strElectYearID: electionYearID,
                    strOfficeTypeID: officeTypeID
                });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                SetToSelect(controlToPopulate);
                for (var i = 0; i < results.length; i++) {
                    $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                 }

                if (results.length == "1") {
                    $(controlToPopulate).prop("selectedIndex", 1);

                    // FOR ELECTION TYPE ID 4 OR 6 (OFFCYCLE AND PERIODIC) WE DO NOT DISPLAY ELECTION DATE
                    if (results[0].Value == 4 || results[0].Value == 6) {
                        $("#divElectionDate").hide();
                        PopulateDisclosureTypes("#lstDisclosureType", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), '');
                    }
                    else {
                        // POPULATE ELECTION DATES BASED ON REPORTYEAR, ELECTIONTYPE, AND OFFICETYPE
                        PopulateElectionDate("#lstElectionDate", $("#lstReportYear").val().toString(), $("#lstOfficeType").val().toString(), $("#lstElectionType").val().toString());
                        $("#divElectionDate").show();
                        $("#divFilingDate").hide();
                    }
                }

            };
            options.error = function () {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
            };
            $.ajax(options);
        }

        function PopulateElectionDate(controlToPopulate, ElectionYearID, OfficeTypeID, ElectionTypeID) {
            var numItems = 0;
            var options = {};
            options.url = '@Url.Action("GetElectionDateData", "ViewAllDisclosures")';
            options.type = "POST";
            options.data = JSON.stringify(
                {
                    strElectionYearID: ElectionYearID,
                    strOfficeTypeID: OfficeTypeID,
                    strElectionTypeID: ElectionTypeID,
                    countyID: '',
                    municipalityID: ''
                });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                SetToSelect(controlToPopulate);
                for (var i = 0; i < results.length; i++) {
                    $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                    numItems = numItems + 1;
                }
                if (results.length == "1") {
                    $(controlToPopulate).prop("selectedIndex", 1);
                    PopulateDisclosureTypes("#lstDisclosureType", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstElectionDate").val().toString());
                }

            };
            options.error = function () {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
            };
            $.ajax(options);
        }

        //////////////////////////////////// POPULATE DISCLOSURE TYPES /////////////////////////
        function PopulateDisclosureTypes(controlToPopulate, electionYearID, electionTypeID, electionDateID) {
            // GET THE DISCLOSURETYPES
            var options = {};
            options.url = '@Url.Action("GetDisclosureTypesForYearAndFilerID", "ViewAllDisclosures")';
            options.type = "POST";
            options.data = JSON.stringify(
                {
                    strElectionYearID: electionYearID,
                    strElectionTypeID: electionTypeID,
                    strElectionDateID: electionDateID
                });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                SetToSelect(controlToPopulate);
                for (var i = 0; i < results.length; i++) {
                    $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                }

                if (results.length == "1") {
                    $(controlToPopulate).prop("selectedIndex", 1);


                    var discType = $("#lstDisclosureType").val().toString();

                    if ($("#lstElectionType").val() == 6) {
                        PopulateFilingDatesOffCycle("#lstFilingDate", $("#lstReportYear").val().toString(), $("#lstOfficeType").val().toString(), $("#lstDisclosureType").val().toString());
                        $("#divFilingDate").show();
                        PopulateDisclosurePeriods("#lstDisclosurePeriod", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstDisclosureType").val().toString());
                        $("#divDisclosurePeriod").show();
                    }
                    else if (InArray(discType, WeeklyDisclosureTypes)) {
                        PopulateFilingDatesIEs("#lstFilingDate", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstOfficeType").val().toString(), sessionStorage.getItem('GlobalFilerID'), $("#lstDisclosureType").val().toString(), $("#lstElectionDate").val().toString());
                        $("#divDisclosurePeriod").hide();
                        $("#divFilingDate").show();
                    }
                    else if (InArray(discType, TwentyFourHourTypes)) {
                        $("#divFilingDate").hide();
                        $("#divDisclosurePeriod").hide();
                        $("#divFromDate").show();
                        $("#divToDate").show();
                        PopulateFromToDates("#lstFromDate", "#lstToDate", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstOfficeType").val().toString(), $("#lstDisclosureType").val().toString(), $("#lstElectionDate").val().toString(), $("#lstDisclosurePeriod").val().toString());
                    }
                    else {
                        $("#divFromDate").hide();
                        $("#divToDate").hide();
                        if (!InArray($("#lstDisclosureType").val().toString(), NoDisclosurePeriods)) {
                            // POPULATE DISCLOSUREPERIODS BASED ON ELECTIONTYPE AND DISCLOSURETYPE
                            PopulateDisclosurePeriods("#lstDisclosurePeriod", $("#lstReportYear").val().toString(), $("#lstElectionType").val().toString(), $("#lstDisclosureType").val().toString());
                            $("#divDisclosurePeriod").show();
                            $("#divFilingDate").hide();
                        }
                        else {
                            $("#divDisclosurePeriod").hide();
                        }
                    }
                }

            };
            options.error = function () {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
            };
            $.ajax(options);
        }

        //////////////////////////////////// POPULATE DISCLOSURE PERIODS /////////////////////////
        function PopulateDisclosurePeriods(controlToPopulate, electionYearID, electionTypeID, disclosureTypeID) {

            // SPECIAL CODE FOR CAMPAIGN MATERIAL
            if (disclosureTypeID == '17') {
                // GET THE DISCLOSUREPERIODS BASED ON ELECTIONTYPE AND DISCLOSURETYPE
                var optionsCM = {};
                optionsCM.url = '@Url.Action("GetDisclosurePeriodCampMaterial", "ViewAllDisclosures")';
                optionsCM.type = "POST";
                optionsCM.data = JSON.stringify(
                    {
                        //variable should match name of Controller method parameter
                        strElectionTypeID: electionTypeID
                    });
                optionsCM.dataType = "json";
                optionsCM.contentType = "application/json";
                optionsCM.success = function (resultsCM) {
                    SetToSelect(controlToPopulate);
                    for (var i = 0; i < resultsCM.length; i++) {
                        $(controlToPopulate).append("<option value='" + resultsCM[i].Value + "'>" + resultsCM[i].Text + "</option>");
                    }

                    if (resultsCM.length == "1")
                        $(controlToPopulate).prop("selectedIndex", 1)
                };
                optionsCM.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                };
                $.ajax(optionsCM);
            }
            else {
                // GET THE DISCLOSUREPERIODS BASED ON ELECTIONTYPE AND DISCLOSURETYPE
                var options = {};
                options.url = '@Url.Action("GetDisclosurePeriodsForYearAndFilerIDAndElectionType", "ViewAllDisclosures")';
                options.type = "POST";
                options.data = JSON.stringify(
                    {
                        //variable should match name of Controller method parameter
                        strElectionYearID: electionYearID,
                        strElectionTypeID: electionTypeID,
                        strFilingCatID: disclosureTypeID,
                        strOfficeTypeID: $("#lstOfficeType").val().toString()
                    });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                    SetToSelect(controlToPopulate);
                    for (var i = 0; i < results.length; i++) {
                        $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                    }
                    if (results.length == "1")
                        $(controlToPopulate).prop("selectedIndex", 1)
                };
                options.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                };
                $.ajax(options);
            }
        }

        function PopulateFilingDatesIEs(controlToPopulate, electionYearID, electionTypeID, officeTypeID, filerID, disclosureTypeID, electionDateID) {
                // GET THE DISCLOSURETYPES
                var options = {};
                options.url = '@Url.Action("GetFilingDateIEWeeklyForList", "ViewAllDisclosures")';
                options.type = "POST";
                options.data = JSON.stringify(
                    {
                        strElectionYearId: electionYearID,
                        strElectionTypeId: electionTypeID,
                        strOfficeTypeId: officeTypeID,
                        strFilerId: sessionStorage.getItem('GlobalFilerID'),
                        strFilingCatId: disclosureTypeID,
                        strElectionDateId: electionDateID,
                        strMunicipalityID: ""
                    });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                    SetToSelect(controlToPopulate);
                    for (var i = 0; i < results.length; i++) {
                        $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                    }
                    if (results.length == "1") {
                        $(controlToPopulate).prop("selectedIndex", 1);
                    }
                };
                options.error = function () {
                };
                $.ajax(options);
        }

        function PopulateFilingDatesOffCycle(controlToPopulate, electionYearID, officeTypeID, disclosureTypeID) {
                // GET THE DISCLOSURETYPES
                var options = {};
                options.url = '@Url.Action("GetFilingDatesOffCycle", "ViewAllDisclosures")';
                options.type = "POST";
                options.data = JSON.stringify(
                    {
                        strElectionYearId: electionYearID,
                        strOfficeTypeId: officeTypeID,
                        strFilerId: sessionStorage.getItem('GlobalFilerID'),
                        strFilingCatId: disclosureTypeID
                    });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                    SetToSelect(controlToPopulate);
                    for (var i = 0; i < results.length; i++) {
                        $(controlToPopulate).append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                    }
                    if (results.length == "1") {
                        $(controlToPopulate).prop("selectedIndex", 1);
                    }
                };
                options.error = function () {
                };
                $.ajax(options);
        }

        ////////////////////////////////////////////////////////////
    function PopulateFromToDates(controlFromDate, controlToDate, electionYearID, electionTypeID, officeTypeID, disclosureTypeID, electionDateID, disclosurePeriodID) {
                // GET THE DISCLOSURETYPES
                var options = {};
                options.url = '@Url.Action("GetFilingCutoffData", "ViewAllDisclosures")';
                options.type = "POST";
                options.data = JSON.stringify(
                    {
                        strReportYearID: electionYearID,
                        strElectionTypeId: electionTypeID,
                        strOfficeTypeId: officeTypeID,
                        strDisclosureTypeID: disclosureTypeID,
                        lstElectionDateId: electionDateID,
                        strDisclosurePeriodID: disclosurePeriodID
                    });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                SetToSelect(controlFromDate);
                SetToSelect(controlToDate);
                    for (var i = 0; i < results.length; i++) {

                        var item = results[i];
                        if (item.FilingDueDate != null)
                            $(controlFromDate).append("<option value='" + results[i].Value + "'>" + item.FilingDueDate + "</option>");
                        else
                            $(controlToDate).append("<option value='" + results[i].Value + "'>" + item.CutOffDate + "</option>");
                    }
                    $(controlFromDate).prop("selectedIndex", 1);
                    $(controlToDate).prop("selectedIndex", 1);

                };
                options.error = function () {
                };
                $.ajax(options);
        }
        ////////////////////////////////////////////////////////////

        function DisplayTransactionDetailsGrid() {

            $m('#divTransactionDetailsGrid').show();
            $m('#transactionDetailsHeader').show();
            // CENTER THE GRID
            $('html, body').animate({ scrollTop: $("#divTransactionDetailsGrid").offset().top }, 500);

            // MAKE THE AJAX CALL
            transactionDetailsDataTable = $m('#transactionDetailsGrid').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    },
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#transactionDetailsGrid').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    return nRow;
                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        //"url": "@Url.Content("~/ViewAllDisclosures/GetTransactionDetailsGridData/")",
                        "url": '@Url.Action("GetTransactionDetailsGridData", "ViewAllDisclosures")',
                        "data": {
                            strTransNumber: GlobalTransNumber,//"C8D602B7-524A-4414-8518-442F1AE7646A"
                            strSubmitDate: GlobalDateSubmitted,
                            strFilerID: sessionStorage.getItem('GlobalFilerID')
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    });
                },
                "order": [[1, "desc"]]
            });
            if (@Session["COMM_TYPE_ID"] == "23") {
                transactionDetailsDataTable.column(17).visible(true);
                transactionDetailsDataTable.column(18).visible(true);
                transactionDetailsDataTable.column(19).visible(true);
                transactionDetailsDataTable.column(20).visible(true);
            }
            else {
                transactionDetailsDataTable.column(17).visible(false);
                transactionDetailsDataTable.column(18).visible(false);
                transactionDetailsDataTable.column(19).visible(false);
                transactionDetailsDataTable.column(20).visible(false);
            }
            transactionDetailsDataTable.columns.adjust().draw(false);
            $m('#transactionDetailsGrid').DataTable().ajax.reload();
            transactionDetailsDataTable.columns.adjust().draw(true);
            transactionDetailsDataTable.responsive.recalc();
        }

        function DisplayDisclosuresGrid() {
            $m("#divLoading").show();
            // SET UP CONTROLS
            $("#disclosuresGridHeader").show();
            $("#divDisclosuresGrid").show();
            $("#divReportButtons").show();

            sessionStorage.setDataTable = "true";
            $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
            $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");
            var IDToHightlight = 0;

            // BECAUSE THERE ARE SOME CASES WHERE ELECTIONDATE CAN BE NULL,
            // THIS MUST BE CODED FOR
            var localElectionDateID = "";
            if ($("#divElectionDate").is(":visible")) {
                localElectionDateID = $("#lstElectionDate").val();
                if (localElectionDateID != null)
                    localElectionDateID = $("#lstElectionDate").val().toString();
                else
                    localElectionDateID = "";
            }
            else if ($("#divFilingDate").is(":visible")) {
                localElectionDateID = $("#lstFilingDate").val();
                if (localElectionDateID != null)
                    localElectionDateID = $("#lstFilingDate").val().toString();
                else
                    localElectionDateID = "";
            }


            // HAVE TO ADD TO SESSION STORAGE, OTHERWISE THE WRONG VALUE WILL BE
            // SENT TO THE CONTROLLER, JS IS WEIRD LIKE THAT
            sessionStorage.setItem("localElectionDateID", localElectionDateID);

            $m('#disclosuresGrid').dataTable().fnClearTable();
            $m('#disclosuresGrid').dataTable().fnDestroy();

            disclosuresDataTable = $m('#disclosuresGrid').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [ 0, 1, 2, 3, 4, 5, 6, 19, 20, 21, 22],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [8],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#disclosuresGrid').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    if (iDisplayIndex == 0) IDToHightlight = aaData[2];
                    // NEED TO DETERMINE WHETHER OR NOT TO DISPLAY THE 'DELETE' BUTTON IN THE
                    // DISCLOSURE GRID. DELETE BUTTON IS DISPLAYED IF THE FILING SELECTED
                    // IS THE CURRENT FILING OR THE MOST RECENTLY SUBMITTED (THIS MEANS THAT
                    // THE FILING CAN EITHER BE UNSUBMITTED AND IN TEMP DATABASE
                    // OR SUBMITTED IN THE MAIN DATABASE)

                    // CREATE ARRAYS OF FILINGIDS AND SUBMITDATES TO PASS
                    // TO IsMostRecentFiling METHOD, ALONG WITH THE GLOBALFILINGSID
                    // AND GLOBALDATESUBMITTED
                    var CurrentFilingID = aaData[0];
                    var FilingIDs = disclosuresDataTable.column(0).data();
                    var CurrentSubmitDate = aaData[9];
                    var SubmitDates = disclosuresDataTable.column(9).data();
                    var UnSubmitted = CurrentSubmitDate == '' || CurrentSubmitDate == 'See Transactions';

                    // ADD CONDITION ON WHETHER OR NOT TO DISPLAY DELETE BUTTON 3/15/2019
                    var CurrentDisclosureType = aaData[5];


                    var Itemized = CurrentDisclosureType == '1';
                    var IsCampaignMaterial = CurrentDisclosureType == '6';
                    var IsAuthorizedUser = @Session["RoleID_FILER"] == "11";
                    if (IsAuthorizedUser) { // authorized users cannot submit
                        // FOR DEMO AND PRODUCTION
                        if (UnSubmitted && Itemized)
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  />');
                        else if (UnSubmitted && !IsCampaignMaterial)
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                    else {
                        // FOR DEMO AND PRODUCTION
                        if (UnSubmitted && Itemized)  // non authorized users can submit. Remove pcfb monthly filins
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="submitClick" style="color:blue; cursor:pointer;" id="lnkSubmit" href="">Submit</a>');
                        else if (UnSubmitted && !IsCampaignMaterial)
                            $m('td:eq(1)', nRow).html('<a id="btnDeleteDisclosure" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }

                    if (aaData[23] == "Y") {
                        $m('td:eq(1)', nRow).html('<a class="supportingDocumentsClick" style="color:blue; cursor:pointer;" id="lnkSupportingDocuments" href="">Supporting Docs</a>');
                    }
                    return nRow;
                },
                "fnServerData": function (url, data, callback) {
                    $m.ajax({
                        "url": '@Url.Action("GetDisclosuresGridData", "ViewAllDisclosures")',
                        "data": {
                            strFilerID: $("#txtFilerID").val().toString(),
                            strReportYearID: $("#lstReportYear").val().toString(),
                            strOfficeTypeID: $("#lstOfficeType").val().toString(),
                            strCountyID: '',
                            strMunicipalityID: '',
                            strElectionTypeID: $("#lstElectionType").val().toString(),
                            strElectionDateID: sessionStorage.getItem("localElectionDateID"),
                            strDisclosureTypeID: $("#lstDisclosureType").val().toString(),
                            strDisclosurePeriodID: $("#lstDisclosurePeriod").val().toString(),
                            strReportYear: GlobalReportYear
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    }).always(function () {
                        $m("#divLoading").hide();
                    });
                },
                "order": []
            });
            $m("#disclosuresGrid").DataTable().ajax.reload();
            disclosuresDataTable.columns.adjust().draw(true);
            disclosuresDataTable.responsive.recalc();

            // UPDATE INTERFACE
            $("#transactionGridHeader").hide();
            $("#divTransactionsGrid").hide();
            $("#transactionDetailsHeader").hide();
            $("#divTransactionDetailsGrid").hide();
            $("#supportingDocumentsHeader").hide();
            $("#divSupportingDocumentsGrid").hide();
            $("#campaignMaterialsHeader").hide();
            $("#divCampaignMaterialsGrid").hide();

            if (@Session["COMM_TYPE_ID"] == "23") {
                $("#divAddSupportDocForPCF").show();
            }
            else {
                $("#divAddSupportDocForPCF").hide();
            }

        }

        function DisplaySupportingDocumentsGrid() {
            $("#supportingDocumentsHeader").show();
            $("#divSupportingDocumentsGrid").show();

            // CENTER THE GRID
            $('html, body').animate({ scrollTop: $("#divSupportingDocumentsGrid").offset().top }, 500);

            // MAKE THE AJAX CALL
            supportingDocumentsDataTable = $m('#supportingDocumentsGrid').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 3, 4],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#supportingDocumentsGrid').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    // DELETE FUNCTIONALITY REMOVED 4/25/2019

                    // CONSTRUCT THE URL
                    var url = '@Url.Action("DownloadSupportingDocument", "ViewAllDisclosures", new { documentID = "__documentID__" })';
                    url = url.replace("__documentID__", aaData[1]);

                    // PUT THE LINKTEXT TOGETHER AND INSERT IT
                    var DocumentType = aaData[2];
                    var FileSize = aaData[3];
                    var FileType = aaData[4];
                    var linkText = DocumentType + " (" + FileType + " " + FileSize + ")";
                    $m('td:eq(1)', nRow).html('<a class="editor_remove_CampMatr" style="color:blue; cursor:pointer;" id="lnkColumnData"></a><a class="editor_IEWeeklyExp_History lnkGird"  href=' + url + ' target="_blank">' + linkText + '</a > ');
                    return nRow;
                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": '@Url.Action("GetSupportingDocumentsGridData", "ViewAllDisclosures")',
                        "data": {
                            strTransNumber: GlobalTransNumber,
                            strFilingID: GlobalFilingsID
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    });
                },
                "order": [[7, "desc"]]
            });
            $m('#supportingDocumentsGrid').DataTable().ajax.reload();
            supportingDocumentsDataTable.columns().search('').draw();//Select all columns, clear the search and draw the table.
            supportingDocumentsDataTable.responsive.recalc();//Recalculate the widths used by responsive after a change in the display.

        }

        function DisplayCampaignMaterialsGrid() {
            $("#campaignMaterialsHeader").show();
            $("#divCampaignMaterialsGrid").show();

            // MAKE THE AJAX CALL
            campaignMaterialsDataTable = $m('#campaignMaterialsGrid').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 3, 4, 12],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [6],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#campaignMaterialsGrid').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    // FILE TYPE/SIZE COLUMN DATA
                    var FileType = aaData[3];
                    var FileSize = aaData[4];

                    if (FileSize && FileType)
                        $m('td:eq(4)', nRow).html(FileType + ' (' + FileSize + ')');

                    if (aaData[11] == "Yes") {
                        // Download file from Cabinet.

                        // IF STATEMENT ADDED FOR DEFECT #1768
                        if (aaData[2] != '') {
                            var url = '@Url.Action("DownloadCampaignMaterial", "NonItemCampaignMaterial", new { documentID = "__documentID__" })';
                            url = url.replace("__documentID__", aaData[2]);

                            // DELETE FUNCTIONALITY REMOVED 4/25/2019

                            $m('td:eq(1)', nRow).html('<a class="editor_remove_CampMatr" style="color:blue; cursor:pointer;" id="lnkColumnData"></a><a class="editor_IEWeeklyExp_History lnkGird"  href=' + url + ' target="_blank"> Campaign Material </a>');
                        }
                        else
                            $m('td:eq(1)', nRow).html('<p style="color:black;">Campaign Material</>');

                        return nRow;
                    }
                    else {
                        // DELETE FUNCTIONALITY REMOVED 4/25/2019
                        return nRow;
                    }


                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": '@Url.Action("GetCampaignMaterialsGridData", "ViewAllDisclosures")',
                        "data": {
                            strFilingsID: GlobalFilingsID,
                            strAmended: GlobalAmended
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                        }
                    });
                },
                "order": [[7, "desc"]]
            });
            $m('#campaignMaterialsGrid').DataTable().ajax.reload();
            campaignMaterialsDataTable.columns().search('').draw();//Select all columns, clear the search and draw the table.
            campaignMaterialsDataTable.responsive.recalc();//Recalculate the widths used by responsive after a change in the display.

        }

        function CheckTransMappingAndSubContractor(FilingScheduleID, Transmapping, RSubcontractor) {
            // RETURNING FALSE FROM THIS FUNCTION WILL HIDE THE
            // EDIT BUTTON IN THE TRANSACTION GRID

            // DON'T SHOW IN THE CASE OF FILING SCHEDULE OF 15
            if (FilingScheduleID == "15")
                return false;

            // SHOW EDIT BUTTON IF Transmapping HAS NO VALUE
            if (Transmapping == null)
                return true;
            else // CHECK GlobalFilingSchedID = 6 OR RSubcontractor = 'Y' AND DO NOT SHOW
                if (FilingScheduleID == "6" || RSubcontractor == "Y")
                    return false;
                else if (FilingScheduleID == "20" || RSubcontractor == "Y")
                    return false;
                else
                    return true;
        }

        // FUNCTION CLEARS THE DIALOG FORM
        function ClearDialog() {
            $('#txtFileNameDialog').val("");
        }

        // FUNCTION CLEARS THE DIALOG FORM
        function ClearDialogPCF() {
            $('#txtFileNameDialogPCF').val("");
        }

        function CallHelp() {
            var winX = (document.all) ? window.screenLeft : window.screenX;
            var winY = (document.all) ? window.screenTop : window.screenY;
            var newWindowWidth = 800;
            var newWindowHeight = 500;
            var currentWindowWidth = $(window).width();
            var currentWindowHeight = $(window).height();
            var newWindowX = (winX + (currentWindowWidth / 2)) - (newWindowWidth / 2);
            var newWindowY = (winY + (currentWindowHeight / 2)) - (newWindowHeight / 2);
            window.open("", "Help", "width=" + newWindowWidth + ",height=" + newWindowHeight + ",top=" + newWindowY + ",left=" + newWindowX);
        }

        // FUNCTIONS CLEARS THE ERRORS FROM THE FORM
        function ClearValErrorAndForm(formId) {
            var validator = $m('#' + formId).validate();
            validator.resetForm();  // clear out the validation errors
            $m('#' + formId)[0].reset();   // clear out the form data
        }

        function GetTodayDate() {
            var tdate = new Date();
            var dd = tdate.getDate(); //yields day
            var MM = tdate.getMonth(); //yields month
            var yyyy = tdate.getFullYear(); //yields year
            var result = (MM + 1) + "-" + dd + "-" + yyyy;
            return result;
        }

        function SetToSelect(divID) {
            $(divID).empty();
            $(divID).append("<option value=''>- Select -</option>");
        }

        // FUNCTION CLEARS FILTERS AND SETS FOCUS BACK ON REPORTYEAR
        function ClearFilters() {
            EnableFilters();
            $('#lstReportYear').attr("disabled", false);
            $('#lstReportYear').prop('selectedIndex', 0);

            SetToSelect("#lstOfficeType");
            $("lstOfficeType").attr("disabled", true);

            SetToSelect("#lstCounty");
            $("#divCounty").hide();

            $("#divFromDate").hide();
            $("#divToDate").hide();

            SetToSelect("#lstMunicipality");
            $("#divMunicipality").hide();

            SetToSelect("#lstElectionType");

            SetToSelect("#lstElectionDate");
            $('#lstElectionDate').attr('disabled', false);
            $("#lstElectionDate").show();
            $("#lblElectionDate").show();

            SetToSelect("#lstDisclosureType");

            SetToSelect('#lstDisclosurePeriod');
            $("#divDisclosurePeriod").show();
            $('#lstDisclosurePeriod').prop('selectedIndex', 0);

            $("#divFilingDate").hide();
            $('#lstFilingDate').prop('selectedIndex', 0);

            // SET FOCUS TO ELECTIONYEAR CONTROL AND RESET TO ITEM 0
            $("#lstReportYear").focus();
            $("#lstReportYear")[0].selectedIndex = 0;
        }

        // txtFilerID Change
        $("#txtFilerID").change(function () {
            sessionStorage.setItem("Cnty_PageName", "ViewAllDisclosures");
            var url = '@Url.Action("RoleMap", "RoleMap", new { Cnty_FilerID = "__FilerID__" })';
            window.location.href = url.replace('__FilerID__', $("#txtFilerID option:selected").text());
        });

        // FUNCTION HIDS THE GRIDS
        function HideAllGrids() {
            //Find all visible dataTable tables and clear their search field.
            $m.fn.dataTable.tables({ visible: true, api: true }).search('').draw();
            $("#disclosuresGridHeader").hide();
            $("#divDisclosuresGrid").hide();
            $("#transactionGridHeader").hide();
            $("#divTransactionsGrid").hide();
            $("#transactionDetailsHeader").hide();
            $("#divTransactionDetailsGrid").hide();
            $("#supportingDocumentsHeader").hide();
            $("#divSupportingDocumentsGrid").hide();
            $("#campaignMaterialsHeader").hide();
            $("#divCampaignMaterialsGrid").hide();

            $("#PIDAHeader").hide();
            $("#divPIDAGrid").hide();
            $("#AmountAllocationHeader").hide();
            $("#divAmountAllocationGrid").hide();
            $("#divReportButtons").hide();
            $("#btnFullPeriodReport").attr("disabled", true);
        }

        // FUNCTION DETERMINES IF AN ITEM IS IN AN ARRAY
        function InArray(item, array) {
            var i = 0;
            for (i = 0; i < array.length; i++)
                if (array[i] == item)
                    return true;
            return false;
        }

        function DetermineSoleFilingOrUnsubmittedOrLatest(FilingID, FilingIDs, DateSubmitted, SubmitDates) {
            // IF DATE SUBMITTED IS NULL THEN IT'S UNSUBMITTED AND RETURN TRUE
            if (DateSubmitted == '')
                return true;

            // DETERMINE IF THERE ARE MULTIPLE FILINGS....IF THERE ARE NOT, RETURN TRUE
            var multipleFilings = AreMultipleFilings(FilingID, FilingIDs);
            if (!multipleFilings)
                return true;

            // FIND OUT IF THERE ARE MULTIPLE SUBMITTED FILINGS. IF THERE ARE, AND THE ONE SELECTED
            // IS THE MOST RECENT, AND THERE ARE NO UNSUBMITTEDFILINGS, THEN RETURN TRUE;
            var multipleSubmittedFilings = AreMultipleSubmittedFilings(FilingID, FilingIDs, DateSubmitted, SubmitDates);
            var unsubmittedFilingExists = UnsubmittedFilingExists(FilingID, FilingIDs, DateSubmitted, SubmitDates);
            if (multipleSubmittedFilings && !unsubmittedFilingExists && IsMostRecentSubmittedFiling(FilingID, FilingIDs, DateSubmitted, SubmitDates))
                return true;

            return false;
        }

        // FUNCTION DETERMINES IF THE SELECTED ITEM IN DISCLOSURES GRID IS THE MOST CURRENT
        function IsMostRecentFiling(FilingID, FilingIDs, DateSubmitted, SubmitDates) {

            // RETURN TRUE IMMEDIATELY IF GLOBALDATESUBMITTED IS NULL
            if (DateSubmitted == "" || DateSubmitted == null)
                return true;

            // OTHERWISE, LOOP THROUGH ALL FILINGIDS, COMPARING THE FILINGID IN THE ARRAY
            // TO THE GLOBALFILINGID, IF EQUAL, COMPARE DATE FROM THE SUBMITTEDDATES
            // ARRAY (WITH THE CURRENT INDEX) TO THE SUBMITDATE, IF LESS THEN RETURN FALSE.
            var i = 0;
            var submitDate = new Date(DateSubmitted);
            for (i = 0; i < FilingIDs.length; i++) {
                if (FilingIDs[i] == FilingID) {
                    var arraySubmitDate = new Date(SubmitDates[i]);
                    if (submitDate < arraySubmitDate)
                        return false;
                }
            }
            return true;
        }

        function IsMostRecentSubmittedFiling(FilingID, FilingIDs, DateSubmitted, SubmitDates) {
            // LOOP THROUGH ALL FILINGIDS, COMPARING THE FILINGID IN THE ARRAY
            // TO THE GLOBALFILINGID, IF EQUAL, COMPARE DATE FROM THE SUBMITTEDDATES
            // ARRAY (WITH THE CURRENT INDEX) TO THE SUBMITDATE, IF LESS THEN RETURN FALSE.
            var i = 0;
            var submitDate = new Date(DateSubmitted);
            for (i = 0; i < FilingIDs.length; i++) {
                if (FilingIDs[i] == FilingID) {
                    var arraySubmitDate = new Date(SubmitDates[i]);
                    if (submitDate < arraySubmitDate)
                        return false;
                }
            }
            return true;
        }

        function UnsubmittedFilingExists(FilingID, FilingIDs, DateSubmitted, SubmitDates) {
            // LOOP THROUGH ALL FILINGIDS, COMPARING THE FILINGID IN THE ARRAY
            // TO THE GLOBALFILINGID, IF EQUAL, CHECK TO SEE IF THE VALUE IS
            // NULL OR EMPTY, IF SO, RETURN TRUE
            var i = 0;
            for (i = 0; i < FilingIDs.length; i++) {
                if (FilingIDs[i] == FilingID) {
                    var arraySubmitDate = SubmitDates[i];
                    if (arraySubmitDate == null || arraySubmitDate == '') {
                        return true;
                    }
                }
            }
            return false;
        }

        function AreMultipleFilings(FilingID, FilingIDs) {
            // FUNCTION COUNTS THE NUMBER OF TIMES THE VALUE IS IN THE ARRAY
            var numInstances = 0;
            for (var i = 0; i < FilingIDs.length; i++) {
                if (FilingIDs[i] == FilingID) {
                    numInstances++;
                }
            }
            return numInstances > 1;
        }

        function AreMultipleSubmittedFilings(FilingID, FilingIDs, DateSubmitted, SubmitDates) {
            // LOOP THROUGH ALL FILINGIDS, COMPARING THE FILINGID IN THE ARRAY
            // TO THE GLOBALFILINGID, IF EQUAL, COMPARE DATE FROM THE SUBMITTEDDATES
            // ARRAY (WITH THE CURRENT INDEX) TO THE SUBMITDATE, IF LESS THEN RETURN FALSE.
            var i = 0;
            var count = 0;

            for (i = 0; i < FilingIDs.length; i++) {
                if (FilingIDs[i] == FilingID) {
                    if (SubmitDates[i] != '')
                        count++;
                }
            }
            return count > 1;
        }

        function initializeDp() {
            $m(".datepicker").datepicker({
                showOn: "button",
                buttonImage: "../../Content/Images/Calendar.png",
                buttonImageOnly: false,
                buttonText: "Select From Date",
                changeMonth: true,
                changeYear: true,
                numberOfMonths: 1,
                maxDate: '0',
                dateFormat: 'mm/dd/yy',
                onChange: function () {
                    $m(this).valid();
                },
                onClose: function () {
                    $m(this).valid();
                }
            });

            $m(".datepicker").datepicker();

            $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();

        }

    });

    function CallHelpFilter() {

        var myWidth = 500;
        var myHeight = 600;

        var left = (screen.width - myWidth) / 2;
        var top = (screen.height - myHeight) / 4;

        window.open("@Url.Content("~/ViewAllDisclosures/ViewAllDisclosuresSearchHelp/")", "Help", 'width = 450, height = 600, scrollbars = 1, width = ' + myWidth + ', height = ' + myHeight + ', top = ' + top + ', left = ' + left);
    }

</script>
