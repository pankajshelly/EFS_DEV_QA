@{
    ViewBag.Title = ": Transfer Out Schedule H";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

<form id="TransferOutSchedHForm">

    @Html.Partial("UserControls/_UC_Alert_Message")
    @Html.Partial("UserControls/_UC_Delete_Message")

    <div id="divMainNew" class="mainDiv">
        <div class="mainLowerDivCSSDesktop">
            <div id="divhide" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonShowHide1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Collapse/Hide Filter" /></button>
            </div>
            <div id="divshow" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonHideShow1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Expand/Show Filter" /></button>
            </div>
        </div>
        <div class="mainLowerDivCSS">
            <div id="divhideForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonShowHide2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Collapse/Hide Filter" /></button>
                </div>
            </div>
            <div id="divshowForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonHideShow2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Expand/Show Filter" /></button>
                </div>
            </div>
        </div>
        <div id="divTopSection">
            <div id="selectorItsRpt">
                <div class="divWidth">
                    <fieldset>
                        <legend class="visibleToScreenReaderOnly">Filter Controls Top</legend>
                        <div class="floatRightNew clsShowButtonClass">
                            <input type="button" id="btnCommonSearch" class="btn btn-default clsCommonSearch" name="Command" value="Apply" title="Apply" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear" class="btn btn-default clsCommonClear" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp1" /></button>
                        </div>
                    </fieldset>
                    <div class="requiredTextFilter">* marks required fields</div>
                    <div id="divFilerID">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerID">* Filer ID</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtFilerID", ViewData["txtFilerID"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblFilerID" })
                        </div>
                    </div>
                    <div id="divFilerType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerType">* Filer Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("txtFilerType", null, new { id = "txtFilerType", @class = "txtWidth txtReportPeriodDatesFrom", aria_labelledby = "lblFilerType" })
                        </div>
                    </div>
                    <div id="divCommitteeName">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCommitteeName">* Candidate/Committee Name</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtCommitteeName", ViewData["txtCommitteeName"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblCommitteeName" })
                        </div>
                    </div>
                    <div id="divElectionCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionCycle">* Report Year</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionCycle", ViewData["lstElectionCycle"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionCycle" })
                        </div>
                    </div>
                    <div id="divOfficeType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblOfficeType">* Election Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCOfficeType", null, "- Select -", new { id = "lstUCOfficeType", @class = "spanMobileWidth", aria_labelledby = "lblOfficeType" })
                        </div>
                    </div>
                    <div id="divCounty">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCounty">* County</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCCounty", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblCounty" })
                        </div>
                    </div>
                    <div id="divMunicipality">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblMunicipality">* Municipality</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCMuncipality", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblMunicipality" })
                        </div>
                    </div>
                    <div id="divElectionType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionType">* Report Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionType", ViewData["lstElectionType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionType" })
                        </div>
                    </div>
                    <div id="divElectionDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionDate">* Election Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionDate", ViewData["lstElectionDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionDate" })
                        </div>
                    </div>
                    <div id="divDisclosureType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosureType">* Disclosure Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosureType", ViewData["lstDisclosureType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosureType" })
                        </div>
                    </div>
                    <div id="divDisclosurePeriod">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosurePeriod">* Disclosure Period</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosurePeriod", ViewData["lstDisclosurePeriod"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosurePeriod" })
                        </div>
                    </div>

                    <div id="divReportPeriodDates">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesFrom">* Cut off Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesFrom", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesFrom" })
                        </div>
                    </div>
                    <div id="divFilingDateDropDown">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDate">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstFilingDate", ViewData["lstFilingDate"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstFilingDate", aria_labelledby = "lblFilingDate" })
                        </div>
                    </div>
                    <div id="divReportPeriodDatesTo">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesTo">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesTo", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesTo" })
                        </div>
                    </div>
                    @* OFFICE CYCLE FILING DATE *@
                    <div id="divFilingDateOffCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDateOffCycle">* New Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            <input type="text" id="txtNewFilingDate" name="txtNewFilingDate" class="txtWidth txtCurrentDateCls" maxlength="10" aria-labelledby = "lblFilingDateOffCycle"/>
                        </div>
                    </div>
                    @* OFFICE CYCLE FILING DATE *@
                    <div id="divFilingReason">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReasonforFiling">Resignation/Termination</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstResigTermType", ViewData["lstResigTermType"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstFilingDate", aria_labelledby = "lblReasonforFiling" })
                        </div>
                    </div>
                    <fieldset style="clear:both;">
                        <legend class="visibleToScreenReaderOnly">Filter Controls Bottom</legend>
                        <div class="floatRightNew">
                            <input type="button" id="btnCommonSearch2" class="btn btn-default clsCommonSearch" name="Command" value="Apply" title="Search" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear2" class="btn btn-default clsCommonClear" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp2" /></button>
                        </div>
                    </fieldset>
                </div>
            </div>
        </div>
    </div>

    <div class="floatRight paddingRight3em paddingTop0pt6em">
        <p><button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelpSchedH();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp3" /></button></p>
    </div>


    <div id="divBreadCrumb" class="breadCrumbDivCSS" style="width: 46em;">
        <nav aria-label="Breadcrumbs" id="pBreadCrumb" class="FontSizeCss">
            <ol class="breadcrumb">
                <li>@Html.ActionLink("File a Disclosure Report", "ContributionsMonetary", "ContributionsMonetary", null, new { @class = "lnkLogout" })</li>
                <li class="active">Transfers Out</li>
            </ol>
        </nav>
        <div id="divHeader2" class="paddingtoppt5 clsHeaderWidth">
            <h1>
                <span id="lblHeader">File a Disclosure Report</span> -
                <span id="lblHEleYear">File a Disclosure Report</span>
                <span id="lblHDisclPer">File a Disclosure Report</span>
            </h1>
        </div>
        <div id="divHeader" class="paddingtoppt5">
            <div class="paddingTop0em2em DisplayInlineBlock">
                <h2><span id="lblHeader2">Transfers Out</span></h2>
            </div>
        </div>
    </div>
    <div id="divGrid" class="divGridCSSTransferin">
        @Html.Partial("UserControls/_UC_Loding")
        @Html.Partial("UserControls/_UC_GridCommonControl")
    </div>
</form>
<div id="dialog-form_Sched_H" title="Add/Edit Transaction">
    <form id="DialogBoxSchedHForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%;">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="divWidth">
                    <div id="txtCurrentDateTransferred_validate" class="verticalCSSDestopForError">
                    </div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDatePaid">* Date Transferred</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDateTransferred" name="txtCurrentDateTransferred" class="datepicker txtWidthForDateSched_ABC txtCurrentDateCls" maxlength="10" aria-labelledby = "lblDatePaid"/>
                    </div>
                </div>
                <div id="divTransferorName">
                    <div id="txtTransfereeName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblTransfereeName">* Transferee Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtTransfereeName", null, new { id = "txtTransfereeName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "60", @aria_label = "Transferee Name", aria_labelledby = "lblTransfereeName" })
                    </div>
                </div>
                <div id="tdCountryContributionChk">
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblOtherCountry">Other Country</span>
                    </div>
                    <div class="verticalCSSDestopForCheckBoxSched_ABC DDLCSSAdd">
                        @Html.CheckBox("chkCountry", false, new { @class = "txtWidthForDialogSched_ABC_CountryChkbox", aria_labelledby = "lblOtherCountry" })
                    </div>
                </div>
                <div id="tdCountryContributionTxt">
                    <div id="txtCountry_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblCountry">* Country</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSched_ABC DDLCSSAdd">
                        @Html.TextBox("txtCountry", null, new { id = "txtCountry", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCountry" })
                    </div>
                </div>
                <div id="divStreetAddress">
                    <div id="txtStreetName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblStreetName">* Street Address</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStreetName", null, new { id = "txtStreetName", @class = "txtWidthForDialogSched_A", @maxlength = "60", aria_labelledby = "lblStreetName" })
                    </div>
                </div>

                <div id="divCity">
                    <div id="txtCity_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCity">* City</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCity", null, new { id = "txtCity", @class = "txtWidthForDialogSched_A", @maxlength = "30", aria_labelledby = "lblCity" })
                    </div>
                </div>

                <div id="divState">
                    <div id="txtState_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblState">* State</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtState", null, new { id = "txtState", @class = "txtWidthForDialogSched_A", @maxlength = "2", aria_labelledby = "lblState" })
                    </div>
                </div>

                <div id="divZip5">
                    <div id="txtZipCode_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblZip5">* Zip Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtZipCode", null, new { id = "txtZipCode", @class = "txtWidthForDialogSched_A", @maxlength = "10", aria_labelledby = "lblZip5" })
                    </div>
                </div>
                <div id="divTransferType">
                    <div id="lstTransferType_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblTransferType">* Transfer Type</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstTransferType", ViewData["lstTransferType"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblTransferType" })
                    </div>
                </div>
                <div id="tdMethod">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblMethod">* Method</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstMethod", ViewData["lstMethod"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblMethod" })
                    </div>
                </div>
                <div id="tdCheck">
                    <div id="txtCheck_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCheck">* Check #</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCheck", null, new { id = "txtCheck", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCheck" })
                    </div>
                </div>
                <div id="divAmount">
                    <div id="txtAmt_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmount">* Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmt", null, new { id = "txtAmt", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblAmount" })
                    </div>
                </div>

                <div id="divExplanation">
                    <div id="txtExplanationCommon_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanation">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationCommon", null, new { id = "txtExplanationCommon", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanation" })
                    </div>
                </div>

                <div id="AddUpdateBtnIdSchedA" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnUpdateDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnAddDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>
            </div>
        </div>
    </form>
</div>

<script>
    $m = jQuery.noConflict();


    function CallHelpSchedH() {

        var myWidth = 1050;
        var myHeight = 550;

        var left = (screen.width - myWidth) / 2;
        var top = (screen.height - myHeight) / 4;

        window.open("../../TransferOutSchedH/GetScheduleHHelpPopUp", "Help", 'width=550, height=600,scrollbars=1, width=' + myWidth + ', height=' + myHeight + ', top=' + top + ', left=' + left);
    }

    $('#menuNav').css('opacity', 0);
    $('#TransferOutSchedHForm').css('opacity', 0);
    $('#dialog-form_Sched_H').css('opacity', 0);
    $(window).on('load', function () {
        $('#menuNav').css('opacity', 1);
        $('#TransferOutSchedHForm').css('opacity', 1);
        $('#dialog-form_Sched_H').css('opacity', 1);
    });

    $m(document).ready(function () {

        var tableFilingTransactions = '';
        $m("#txtAmt").attr('aria-required', true);
        $("#main").addClass("SetHeightTransferIn");
        $("#main").removeClass("SetHeight");

        $("#lblAllTransText").text("All Transactions: " + sessionStorage.getItem("ElectionCycleText").toString() + " - " + sessionStorage.getItem("DisclosurePeriodText").toString());

        // Common Function in EFS-Validation.js file - Start
        validatePage("DialogBoxSchedHForm");
        LefthandFilterValues();
        // Common Function in EFS-Validation.js file - ENd

        /// Dialog Box Code /////////////////////////////////////////////////////////////////////

        var dialog;
        dialog = $m("#dialog-form_Sched_H").dialog({
            autoOpen: false,
            resizable: true,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+200"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialog_Sched_A = $m("#dialog-form_Sched_H").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialog_Sched_A = $m("#dialog-form_Sched_H").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialog_Sched_A = $m("#dialog-form_Sched_H").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyle',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();


        $("#main").addClass("SetHeightAssignReview");
        $("#main").removeClass("SetHeight");
        sessionStorage.setDataTable = "true";


        $m("#btnAddNewTransaction").button().on("click", function () {
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                 txtFilerId: $("#txtFilerID").val(),
                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                 txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
             }, function (resultEditFlag) {
                 if (resultEditFlag == "TRUE") {
                     dialog.dialog("open");
                     clearOutDialogBoxSchedHFormDataCommon();
                     sessionStorage.setItem("AddEditCloseStatus", "Add");
                     $("#btnUpdateDialog").hide();
                     $("#btnAddDialog").show();

                     $("#lblExplanation").text("Explanation");
                     $("#txtCurrentDateTransferred").blur();
                     $("#txtZipCode").blur();
                     $("#txtAmt").blur();

                     $("#txtCountry").val("United States");
                     $("#txtCountry").prop("disabled", true);
                     $("#chkCountry").prop('checked', false);
                     $("#txtState").prop('maxLength', '2');
                     $("#lstTransferType")[0].selectedIndex = 0;
                     $("#lstMethod")[0].selectedIndex = 0;
                     $("#tdCheck").hide();
                     $("#txtCurrentDateTransferred").focus();
                     $m("label[for=txtCurrentDateTransferred]").text('');
                     $m("#txtCurrentDateTransferred").removeClass("error");
                 }
                 else {
                     ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before adding this Transaction.', 'Ok', '');
                 }
            });
        });

        $m("#btnCloseDialog").button().on("click", function () {
            //By default we require close dialog confirmation for this form.
            var requireCloseConfirm = true;
            if (sessionStorage.getItem("AddEditCloseStatus") != null) {
                if (sessionStorage.getItem("AddEditCloseStatus").toString() == "Add") {
                    //We may not require confirmation of the user is trying to add.
                    requireCloseConfirm = false;
                    if ( $("#txtCurrentDateTransferred").val().toString().length >= 1
                        || $("#txtTransfereeName").val().toString().length >= 1
                        || $("#txtStreetName").val().toString().length >= 1
                        || $("#txtCity").val().toString().length >= 1
                        || $("#txtState").val().toString().length >= 1
                        || $("#lstMethod option:selected").val().toString() != "0"
                        || $("#txtAmt").val().toString().length >= 1
                        || $("#txtExplanationCommon").val().toString().length >= 1
                        || $('#chkCountry').is(':checked') /*Other COUNTRY*/
                        || $("#txtZipCode").val().toString().length >= 1
                        || ($("#lstMethod option:selected").val().toString() == "1" && $("#txtCheck").val().toString().length >= 1)) {
                        requireCloseConfirm = true;
                    }
                }
            }
            if (!requireCloseConfirm) {
                dialog.dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
            }
            else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?"; 

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "Ok": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the DialogBox
                            dialog.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
            }

        });

        //====================================================================================================================
        // Date picker validation based on Filing Type.
        if ($("#lstElectionType option:selected").val().toString() == "6") { // Off-Cycle
            if ($("#lstFilingDate option:selected").text().toString() == "- New Filing Date -") {
                sessionStorage.setItem("CuttOffDateForFiling", sessionStorage.getItem("FilingDate").toString());
            }
            else {
                sessionStorage.setItem("CuttOffDateForFiling", $("#lstFilingDate option:selected").text().toString());
            }
        }
        else {

            sessionStorage.setItem("CuttOffDateForFiling", sessionStorage.getItem("CutOffDate"));
        }

        $m("#txtCurrentDateTransferred").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png", //"@Url.Content("~/Content/Images / Calendar.png")",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: sessionStorage.getItem("CuttOffDateForFiling").toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDateTransferred").valid();
            },
        }).datepicker();

        $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();
        $("#txtCurrentDateTransferred").addClass("watermarkHTMLTextBox");
        $("#txtCurrentDateTransferred").focusin(function () {
            $("#txtCurrentDateTransferred").removeClass("watermarkHTMLTextBox");
        });

        // Watermark TextBox. ////////////////////////////////////////////////////

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDateTransferred").focusout(function () {
            if ($("#txtCurrentDateTransferred").val().toString() != "") {
                if ($("#txtCurrentDateTransferred").val().toString() != "MM/DD/YYYY") {
                    var results = GetValidDateForCommon("txtCurrentDateTransferred", "Transferred");

                    if (results == "") {
                        var MyDate = new Date($("#txtCurrentDateTransferred").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDateTransferred").val("");
                        $("#txtCurrentDateTransferred").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDateTransferred").addClass("watermarkHTMLTextBox");
            }
        });
        // DATE FORMATE....///////////////////////////////////////////////
        //====================================================================================================================


        // Method Change
        // ------------------------------------------------------------------------------------------------------------------------------------------
        $("#lstMethod").change(function () {

            $("#txtCheck").val("");

            if ($("#lstMethod option:selected").val().toString() == "1") { // CHECK
                $("#tdCheck").show();
                $("#lblExplanation").text("Explanation");
            }
            else if ($("#lstMethod option:selected").val().toString() == "7") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
                $("#tdCheck").hide();
            }
            else {
                $("#lblExplanation").text("Explanation");
                $("#tdCheck").hide();
            }
        });

        $m("#btnAddDialog").button().on("click", function () {
            $m('#DialogBoxSchedHForm').valid();
            if ($m('#DialogBoxSchedHForm').valid()) {
                $m("#divLoading").show();
                var url = '@Url.Action("AddTransferOutScheduledData", "TransferOutSchedH")';
                $.post(url, {
                    txtFilerId: $("#txtFilerID").val(),
                    strFilingSchedId: $m("#lstTransactionType option:selected").val(),
                    strTransferTypeId: $m("#lstTransferType option:selected").val(),
                    strFilingSchedDate: $m("#txtCurrentDateTransferred").val().toString(),
                    strPayNumber: $m("#txtCheck").val().toString(),
                    strOrgAmt: $m("#txtAmt").val().toString(),
                    strTransExplanation: $m("#txtExplanationCommon").val().toString(),
                    strElectionTypeId: $m("#lstElectionType option:selected").val(),
                    lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                    lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                    lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                    lstFilingEntId: "",
                    strFlngEntName: $m("#txtTransfereeName").val().toString(),
                    strFlngEntStrName: $m("#txtStreetName").val().toString(),
                    txtPartCity: $m("#txtCity").val().toString(),
                    txtPartState: $m("#txtState").val().toString(),
                    txtPartZip: $m("#txtZipCode").val().toString(),
                    txtCountry: $m("#txtCountry").val().toString(),
                    chkCountry: $('#chkCountry').is(':checked').toString(),
                    PaymentTypeId: $m("#lstMethod option:selected").val(),
                    strFilingDate: $m("#lstFilingDate option:selected").text(),
                    txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                    electionDateId: $m("#lstElectionDate").val(),
                    lstResigTermType: $m("#lstResigTermType option:selected").val(),
                    txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                    lstFilingDate: $m("#lstFilingDate option:selected").text(),
                    lstElectionType: $("#lstElectionType option:selected").val(),
                    lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                },
                function (results) {
                    if (results.Errors == null) {
                        if (results == "Custom Error") {
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                            window.location.reload();
                        }
                        else {
                            if (results == "0") {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'System Error Found. Please try again.', 'Ok', '');
                                window.location.reload();
                            }
                            else {
                                results = "Custom Error";
                                $("#txtCurrentDateTransferred").focus();
                                window.status = "Transaction saved successfully";
                                clearOutDialogBoxSchedHFormDataCommon();

                                $("#txtCurrentDateTransferred").blur();
                                $("#txtZipCode").blur();
                                $("#txtAmt").blur();

                                $("#txtCountry").val("United States");
                                $("#txtCountry").prop("disabled", true);
                                $("#lstTransferType")[0].selectedIndex = 0;
                                $("#lstMethod")[0].selectedIndex = 0;
                                $("#lblExplanation").text("Explanation");
                                $("#tdCheck").hide();
                                $("#txtCurrentDateTransferred").focus();
                                $m("label[for=txtCurrentDateTransferred]").text('');
                                $m("#txtCurrentDateTransferred").removeClass("error");
                                var doneFunction = function () {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                }
                                // Refresh the Data on Grid...
                                GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                            }
                        }
                    }
                    else if (results.Errors.length >= 0) {
                        $("#divLoading").hide();
                        ClearServerSideErrors(); // Server Side Validation Clear
                        AppendCustomErrorLabels(results.Errors);
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    $("#divLoading").hide();// AddTransferOutScheduledData failed.
                    $m("#divLoading").hide();
                });
            }
        });

        function ClearServerSideErrors() {
            //removing error class and error messages in search form
            $("#txtCurrentDateTransferred_validate").empty();
            $("#txtTransfereeName_validate").empty();
            $("#txtCountry_validate").empty();
            $("#txtStreetName_validate").empty();
            $("#txtCity_validate").empty();
            $("#txtState_validate").empty();
            $("#txtZipCode_validate").empty();
            $("#txtCheck_validate").empty();
            $("#txtAmt_validate").empty();
            $("#txtExplanationCommon_validate").empty();
        }
        
        // EDIT COMMON ...................
        //...............................................................................................................

        if (sessionStorage.getItem("EditFlag") != null) {
            if (sessionStorage.getItem("EditFlag").toString() == "True") {

                var validator = $m("#DialogBoxSchedHForm").validate();
                validator.resetForm();  // clear out the validation errors
                $m("#DialogBoxSchedHForm")[0].reset();   // clear out the form data

                $("#lstTransactionType option").each(function () {
                    if ($(this).val() == sessionStorage.getItem("ScheduleId").toString()) {
                        //$(this).attr('selected', 'selected');
                        $(this).prop("selected", true);
                    }
                });

                // BIND COMMON SESSION VARIABLE.
                sessionStorage.setItem("TransactionType", sessionStorage.getItem("ScheduleId").toString());        

                $.post("@Url.Content("~/_UC_GridCommonControl/GetEditTransactionData/")", {
                    strTransNumber: sessionStorage.getItem("TransNumberEdit").toString()
                }, function (resultsEditData) {
                    $.each(resultsEditData, function (i, item) {

                        $("#btnUpdateDialog").show();
                        $("#btnAddDialog").hide();

                        dialog.dialog("open");

                        sessionStorage.setItem("TransNumber", item.TransNumber.toString());
                        sessionStorage.setItem("FilingTransId", item.TransNumber.toString());
                        sessionStorage.setItem("FilingEntityId", item.FilingEntityId.toString());
                        $("#txtCurrentDateTransferred").val(item.SchedDate.toString());
                        if ($("#txtCurrentDateTransferred").val().toString() != "MM/DD/YYYY") {
                            $("#txtCurrentDateTransferred").removeClass('watermark');
                        }
                        $("#txtCurrentDateTransferred").focus();
                        $("#txtTransfereeName").val(item.FilingEntityName.toString());
                        $("#txtStreetName").val(item.FilingStreetName.toString());
                        $("#txtCity").val(item.FilingCity.toString());
                        $("#txtState").val(item.FilingState.toString());
                        $("#txtZipCode").val(item.FilingZip.toString());
                        if ($("#txtZipCode").val().toString() != "00000-0000") {
                            $("#txtZipCode").removeClass('watermark');
                        }
                        /// Country
                        $("#txtCountry").val(item.FilingCountry.toString());
                        if (item.FilingCountry.toString() == "United States") {
                            $("#chkCountry").prop('checked', false);
                            $("#txtCountry").prop("disabled", true);
                            $("#txtState").prop('maxLength', '2');
                        }
                        else { // Other Country
                            $("#chkCountry").prop('checked', true);
                            $("#txtCountry").prop("disabled", false);
                            $("#txtState").prop('maxLength', '30');
                            $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            $m('#txtZipCode').attr("placeholder", "");
                        }
                        if (item.FilingZip.toString() != "") {
                            $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                        }
                        else {
                            $("#txtZipCode").addClass("watermarkHTMLTextBox");
                            if (item.FilingCountry.toString() == "United States") {
                                $("#txtZipCode").blur();
                            }
                        }
                        $("#lstMethod option").each(function () {
                            if ($(this).text() == item.PaymentTypeDesc.toString()) {
                                //$(this).attr('selected', 'selected');
                                $(this).prop("selected", true);
                            }
                        });

                        if (item.PaymentTypeId.toString() == "1") {
                            $("#tdCheck").show();
                            $("#txtCheck").val(item.PayNumber.toString());
                        }
                        else {
                            $("#tdCheck").hide();
                        }

                        var varAmt = item.OriginalAmount.toString();

                        $("#txtAmt").val(varAmt);
                        if (item.OriginalAmount.toString() != "") {
                            $("#txtAmt").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtExplanationCommon").val(item.TransExplanation.toString());

                        // Common Code
                        sessionStorage.setItem("EditFlag", "False");
                    });
                });
            }
        }

        // EDIT COMMON ...................
        //...............................................................................................................

        $m('#gridFilingTransactions tbody').on('click', 'a.editor_edit', function (e) {
            event.preventDefault();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            var data = tableFilingTransactions.row($(this).parents('tr')).data();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                 txtFilerId: $("#txtFilerID").val(),
                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                 txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
             }, function (resultEditFlag) {
                 if (resultEditFlag == "TRUE") {
                     var selectedTransactionType = data[1].toString();
                     clearOutDialogBoxSchedHFormDataCommon();

                     sessionStorage.setItem("AddEditCloseStatus", "Edit");
                     $("#txtCurrentDateTransferred").focus();

                     if (selectedTransactionType == "8") { // Schedule H
                         $("#divLoading").hide();
                         dialog.dialog("open");

                         $("#btnUpdateDialog").show();
                         $("#btnAddDialog").hide();

                         sessionStorage.setItem("TransNumber", data[42].toString());
                         sessionStorage.setItem("FilingEntityId", data[2].toString());
                         $("#txtCurrentDateTransferred").val(data[10].toString());
                         $("#txtCurrentDateTransferred").removeClass("watermarkHTMLTextBox");
                         if (data[10].toString() != "" || data[10].toString() != null) {
                             var MyDate = new Date($("#txtCurrentDateTransferred").val().toString());
                             var MyDateString;
                             MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                 + ('0' + MyDate.getDate()).slice(-2) + '/'
                                 + MyDate.getFullYear();
                             $("#txtCurrentDateTransferred").val("");
                             $("#txtCurrentDateTransferred").val(MyDateString);
                             $("#txtCurrentDateTransferred").removeClass("watermarkHTMLTextBox");
                         }
                         $("#txtCurrentDateTransferred").focus();
                         $("#txtTransfereeName").val(data[13].toString());
                         $("#txtCountry").val(data[17].toString());
                         if (data[17].toString() == "United States") {
                             $("#chkCountry").prop('checked', false);
                             $("#txtCountry").prop("disabled", true);
                             $("#txtState").prop('maxLength', '2');
                         }
                         else { // Other Country
                             $("#chkCountry").prop('checked', true);
                             $("#txtCountry").prop("disabled", false);
                             $("#txtState").prop('maxLength', '30');
                             $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                             $m('#txtZipCode').attr("placeholder", "");
                         }
                         $("#txtStreetName").val(data[18].toString());
                         $("#txtCity").val(data[19].toString());
                         $("#txtState").val(data[20].toString());
                         $("#txtZipCode").val(data[21].toString());
                         if ($("#txtZipCode").val().toString() != "00000-0000") {
                             $("#txtZipCode").removeClass('watermark');
                         }

                         if (data[21].toString() != "") {
                             $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                         }
                         else {
                             $("#txtZipCode").addClass("watermarkHTMLTextBox");
                             if (data[17].toString() == "United States") {
                                 $("#txtZipCode").blur();
                             }
                         }
                         if (data[5].toString() == "1") {
                             $("#tdCheck").show();
                             $("#txtCheck").val(data[23].toString());
                         }
                         else {
                             $("#tdCheck").hide();
                         }
                         var originalAmount = data[24].toString();

                         $("#txtAmt").val(originalAmount);
                         if ($("#txtAmt").val().toString() != "" || $("#txtAmt").val().toString() != "999999999.99") {
                             $("#txtAmt").removeClass("watermarkHTMLTextBox");
                         }

                         if (data[5].toString() == "7") {
                             $("#lblExplanation").text("* Explanation");
                         }
                         else {
                             $("#lblExplanation").text("Explanation");
                         }

                         $m("#lstTransferType option").each(function () {
                             if ($(this).text() == data[27].toString()) {
                                 //$(this).attr('selected', 'selected');
                                 $(this).prop("selected", true);
                             }
                         });

                         $m("#lstMethod option").each(function () {
                             if ($(this).text() == data[22].toString()) {
                                 $(this).prop('selected', true).trigger('change');
                             }
                         });

                         $("#txtCheck").val(data[23].toString());
                         var varAmt = data[24].toString();
                         $("#txtAmt").val(varAmt);
                         $("#txtExplanationCommon").val(data[36].toString());

                     } // Other Schedules
                     else if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17", "18", "19", "20", "21"].includes(data[1].toString())) {
                         //Common code to determine redirect url and set session varialbes. Also hides $("#divLoading") on fail.
                         //Uses window.location.href
                         appCommonEFS_DetermineScheduleRedirect(data[1].toString(), data[42].toString());
                     }
                 }
                 else {
                     $("#divLoading").hide();
                     ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                 }
                }).fail(function () {
                    $("#divLoading").hide();// GetEditFlag failed.
                });
        });

        //Delete - Start
        // Delete Record FILING TRANSACTIONS.
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_remove', function (e) {
            e.preventDefault();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            var dataTrans = tableFilingTransactions.row($(this).parents('tr')).data();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    $.post("@Url.Content("~/_UC_GridCommonControl/GetDeleteFlag/")", {
                    }, function (resultDeleteFlag) {
                        if (resultDeleteFlag == "True") {

                            // LOAN RECEIVED DELETE CHECK.
                            $.post("@Url.Content("~/LoanReceivedSchedI/ValidateDelete_LoanReceived/")", {
                                loan_Lib_Number: dataTrans[41].toString(),
                            }, function (resultDeleteFlagSchedI) {

                                // CHECK THE VALIDATION IF ANY CONTRIBUTION REFUNDS (SCHEDULE 'M') EXISTS OR NOT.
                                // IF SCHEDULE 'M' EXISTS FOR EITHER SCHEDULE 'A', SCHEUDLE 'B', OR SCHEDULE 'C'...
                                // THEN SHOULD NOT DELETE UNTIL CHILD RECORDS DELETE.
                                $.post("@Url.Content("~/ContributionsCandIndFamily/ContributionsRefundSchedMExists/")", {
                                    strTransNumber: dataTrans[42].toString()
                                }, function (resultDelSchedABC) {

                                    // CHECK THE VALIDATION IF ANY EXPENDITURE REFUNDS (SCHEDULE 'L') EXISTS OR NOT.
                                    // IF SCHEDULE 'L' EXITS THEN SCHEDULE 'F' SHOULD NOT DELETE UNTLI CHILD DELETE ALL.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/ExpenditureRefundSchedLExists/")", {
                                        strTransNumber: dataTrans[42].toString()
                                    }, function (resultDelSchedF) {

                                        var deleteData = {
                                            resultDeleteFlagSchedI: resultDeleteFlagSchedI,
                                            resultDelSchedABC: resultDelSchedABC,
                                            resultDelSchedF: resultDelSchedF
                                        }

                                        var resultsDelete = "Are you sure you want to delete this transaction?";
                                        var deleteURL = "";
                                        //Determine if you can 
                                        var veredict = appCommonEFS_DetermineScheduleDelete(dataTrans, deleteData);
                                        if (!veredict || !bUtilIsObject(veredict)) {
                                            $("#divLoading").hide();
                                            return false;
                                        } else {
                                            var resultsDelete = veredict.alertMessageForOperation;
                                            var deleteURL = veredict.deleteURL;
                                        }

                                        $m('#modal_dialog').text(resultsDelete);
                                        $m("#modal_dialog").dialog({
                                            resizable: false,
                                            width: '400px',
                                            height: 'auto',
                                            bgiframe: false,
                                            modal: true,
                                            closeOnEscape: false,
                                            open: function (event, ui) {
                                                $("#divLoading").hide();
                                                hideDialogXButton(this);
                                            },
                                            buttons: {
                                                "Ok": function () {
                                                    //Close Confirm Box.
                                                    $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                                    $("#divLoading").show();
                                                    var options = {};
                                                    options.url = deleteURL;
                                                    options.type = "GET";
                                                    options.data = {
                                                        strLoanLiabNumberOrg: dataTrans[41].toString(),
                                                        strTransNumber: dataTrans[42].toString(),
                                                        strRLiability: dataTrans[6].toString()
                                                    };
                                                    options.dataType = "json";
                                                    options.contentType = "application/json";
                                                    options.success = function (results) {
                                                        window.status = "Record deleted successfully";
                                                        $("#divShowPartnerAdddataNCR").hide();
                                                        var doneFunction = function () {
                                                            $("#divLoading").hide();
                                                            ShowDialogBox('EFS', 'Record deleted successfully', 'Ok', '');
                                                        }
                                                        GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                                                    };
                                                    options.error = function () {
                                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                                    };
                                                    $.ajax(options).fail(function () {
                                                        $("#divLoading").hide();// Call to method in deleteURL failed.
                                                    });
                                                },
                                                "Cancel": function () {
                                                    $m(this).dialog("close");
                                                }
                                            }
                                        });
                                    }).fail(function () {
                                        $("#divLoading").hide();// ExpenditureRefundSchedLExists failed.
                                    });
                                }).fail(function () {
                                    $("#divLoading").hide();// ContributionsRefundSchedMExists failed.
                                });
                            }).fail(function () {
                                $("#divLoading").hide();// ValidateDelete_LoanReceived failed.
                            });
                        }
                        else {
                            //Triggers when resultDeleteFlag != "True"
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'The last transaction cannot be deleted.  To delete the Disclosure report, a deletion request must be submitted to cfinfo@elections.ny.gov', 'Ok', '');
                        }
                    }).fail(function () {
                        $("#divLoading").hide();// GetDeleteFlag failed.
                    });
                }
                else {
                    //Triggers when resultEditFlag != "True"
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });
        //Delete - End

        $m("#btnUpdateDialog").button().on("click", function () {
            $m('#DialogBoxSchedHForm').valid();
            if ($m('#DialogBoxSchedHForm').valid()) {
                // SHOW THE PROCESSING....
                $("#divLoading").show();
                var url = '@Url.Action("UpdateTransferOutScheduledData", "TransferOutSchedH")';
                $m.post(url, {
                    txtFilerId: $("#txtFilerID").val(),
                    strTransferTypeId: $m("#lstTransferType option:selected").val(),
                    strFilingSchedDate: $m("#txtCurrentDateTransferred").val().toString(),
                    strPayNumber: $m("#txtCheck").val().toString(),
                    strOrgAmt: $m("#txtAmt").val().toString(),
                    strTransExplanation: $m("#txtExplanationCommon").val().toString(),
                    strElectionTypeId: $m("#lstElectionType option:selected").val(),
                    lstFilingEntId: sessionStorage.getItem("FilingEntityId").toString(),
                    strFlngEntName: $m("#txtTransfereeName").val().toString(),
                    strFlngEntStrName: $m("#txtStreetName").val().toString(),
                    txtPartCity: $m("#txtCity").val().toString(),
                    txtPartState: $m("#txtState").val().toString(),
                    txtPartZip: $m("#txtZipCode").val().toString(),
                    txtCountry: $m("#txtCountry").val().toString(),
                    chkCountry: $('#chkCountry').is(':checked').toString(),
                    transNumber: sessionStorage.getItem("TransNumber").toString(),
                    PaymentTypeId: $m("#lstMethod option:selected").val(),
                    strFilingDate: $m("#txtReportPeriodDatesTo").val().toString(),
                    txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                    electionDateId: $m("#lstElectionDate").val(),
                    lstResigTermType: $m("#lstResigTermType option:selected").val(),
                    txtCuttOffDate: sessionStorage.getItem("CutOffDate"),
                },
                    function (results) {
                        if (results.Errors == null) {
                            // Close Dialogbox.
                            dialog.dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Saved
                            window.status = "Transaction saved successfully";
                            var doneFunction = function () {
                                // HIDE THE PROCESSING....
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                            }
                            // Refresh the Data on Grid...
                            GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                        }
                        else if (results.Errors.length >= 0) {
                            ClearServerSideErrors(); // Server Side Validation Clear
                            AppendCustomErrorLabels(results.Errors);
                        }
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        $m("#divLoading").hide();//UpdateTransferOutScheduledData failed.
                    });
            }// IF VALIDATION FAILED.
            else {
                // HIDE THE PROCESSING....
                $("#divLoading").hide();
            }
        });

        /**
         * Simplify reseting common fields in DialogBoxSchedHForm.
         * Clears out the validation errors and clear out the form data.
         */
        function clearOutDialogBoxSchedHFormDataCommon() {
            var validator = $m("#DialogBoxSchedHForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedHForm")[0].reset();   // clear out the form data

            $("#txtCurrentDateTransferred").removeClass("ui-state-error error");
            $("#txtTransfereeName").removeClass("ui-state-error error");
            $("#txtCountry").removeClass("ui-state-error error");
            $("#txtStreetName").removeClass("ui-state-error error");
            $("#txtCity").removeClass("ui-state-error error");
            $("#txtState").removeClass("ui-state-error error");
            $("#txtZipCode").removeClass("ui-state-error error");
            $("#txtCheck").removeClass("ui-state-error error");
            $("#txtAmt").removeClass("ui-state-error error");
            $("#txtExplanationCommon").removeClass("ui-state-error error");
            $("#lstTransferType").removeClass("ui-state-error error");
        }

        $m("#btnClearDialog").button().on("click", function () {
            clearOutDialogBoxSchedHFormDataCommon();

            $("#lblExplanation").text("Explanation");

            $("#txtCountry").val("United States");
            $("#txtCountry").prop("disabled", true);
            $("#chkCountry").prop('checked', false);
            $("#txtState").prop('maxLength', '2');
            $("#lstTransferType")[0].selectedIndex = 0;
            $("#lstMethod")[0].selectedIndex = 0;
            $("#tdCheck").hide();
            $("#txtCurrentDateTransferred").focus();
            $m("label[for=txtCurrentDateTransferred]").text('');
            $m("#txtCurrentDateTransferred").removeClass("error");
        });

        // Partnership Name Auto Complete.
        $m("#txtTransfereeName").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/TransferOutSchedH/AutoCompleteEntityName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/ContributionsCandIndFamily/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        $.each(results, function (i, item) {
                            $("#txtTransfereeName").val(item.FilingEntityName.toString());
                            $("#txtStreetName").val(item.FilingEntityStreetName.toString());
                            $("#txtCity").val(item.FilingEntityCity.toString());
                            $("#txtState").val(item.FilingEntityState.toString());
                            $("#txtZipCode").val(item.FilingEntityZip.toString());
                            $("#txtCountry").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountry").val().toString() == "United States") {
                                $("#chkCountry").prop('checked', false);
                                $("#txtCountry").prop("disabled", true);
                                $("#txtState").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                    $("#txtZipCode").blur();
                                }
                            } else {
                                $("#chkCountry").prop('checked', true);
                                $("#txtCountry").prop("disabled", false);
                                $("#txtState").prop('maxLength', '30');

                                $m('#txtZipCode').attr("placeholder", "");
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            }
                            // Address validation
                            $m("#txtCountry").valid();
                            $m("#txtStreetName").valid();
                            $m("#txtCity").valid();
                            $m("#txtState").valid();
                            $m("#txtZipCode").valid();
                            $m("#txtTransfereeName").valid();
                        });
                    }
                });
                $("#lstTransferType").focus();
            }
        });

        //==============================================================================================================================================
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //Bind Clear Click
        $m(".clsCommonClear").button().on("click", function () {
            $("#divGridMonetary").show();
            sessionStorage.setDataTable = "true";
            $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
            $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");
            //Bind Clear Click
            sessionStorage.setItem("FilerId", $("#txtFilerID option:selected").val());
            sessionStorage.setItem("CommitteeName", $("#txtCommitteeName option:selected").val());
            sessionStorage.setItem("ElectionCycle", $("#lstElectionCycle option:selected").val());
            sessionStorage.setItem("ElectionType", $("#lstElectionType option:selected").val());
            sessionStorage.setItem("ElectionDate", $("#lstElectionDate option:selected").val());
            sessionStorage.setItem("DisclosureType", $("#lstDisclosureType option:selected").val());
            sessionStorage.setItem("DisclosurePeriod", $("#lstDisclosurePeriod option:selected").val());
            sessionStorage.setItem("CutOffDate", $("#txtReportPeriodDatesFrom").val());
            if ($("#lstElectionType option:selected").val() == "6") {
                sessionStorage.setItem("FilingDate", $("#txtNewFilingDate").val());
            }
            else {
                sessionStorage.setItem("FilingDate", $("#txtReportPeriodDatesTo").val());
            }
            sessionStorage.setItem("TransactionType", $("#lstTransactionType option:selected").val());
            sessionStorage.setItem("lstResigTermType", $("#lstResigTermType option:selected").val());
            sessionStorage.setItem("lstFilingDate", $("#lstFilingDate option:selected").val());

            sessionStorage.setItem("TransactionTypeId", "true");

            var urlContrHome = "@Url.Content("~/ContributionsMonetary/ContributionsMonetary/")";

            window.location.href = urlContrHome;
        });
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //==============================================================================================================================================

        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================
        $("#divLoading").show();
        tableFilingTransactions = $m('#gridFilingTransactions').DataTable({
            "bProcessing": true,
            "responsive": true,
            "deferRender": true,
            "retrieve": true,
            "columnDefs": [
                {
                    "targets": [0, 1, 2, 3, 4, 5, 6, 7, 38, 39, 41, 42, 43, 44],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [9],
                    "fnCreatedCell": function (cell) {
                        cell.setAttribute('aria-label', "Row Actions");
                    }
                }
            ],
            "initComplete": function (settings, json) {
                //Accessibility: Applies various Accessibility features to this dataTable.
                makeDataTableAccessible($m('#gridFilingTransactions').DataTable());
            },
            "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                if (aaData[1] == "7") {
                    $m('td:eq(1)', nRow).html('<a class="editor_edit" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Edit_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                }
                else if (aaData[1] == "14") {
                    $m('td:eq(1)', nRow).html('');
                }
                else if (aaData[1] == "11") { // LIABILITY/LOANS FORGIVEN 
                    $m('td:eq(1)', nRow).html('<a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                }
                else {
                    if (aaData[1] != "15") {
                        $m('td:eq(1)', nRow).html('<a class="editor_edit" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Edit_' + uniqueID + '"><img src="../../Content/Images/edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                    else { // SCHEDULE 15 LEGACY DATA NOT EDIT NO ADD ONLY DELETE.
                        $m('td:eq(1)', nRow).html('<a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                }
                return nRow;
            },
            "fnDrawCallback": function () {
                $("#divLoading").hide();
            },
            "fnServerData": function (url, data, callback) {
                GetAllTransactionTypesData(false, callback, false, false);
            }
        });
        $m('#gridFilingTransactions').DataTable().ajax.reload();
        if (@Session["COMM_TYPE_ID"] == "23") {
                tableFilingTransactions.column(46).visible(true);
                tableFilingTransactions.column(47).visible(true);
                tableFilingTransactions.column(48).visible(true);
                tableFilingTransactions.column(49).visible(true);
                tableFilingTransactions.column(50).visible(true);
                tableFilingTransactions.column(51).visible(true);
                tableFilingTransactions.column(52).visible(true);
                tableFilingTransactions.column(53).visible(true);
                tableFilingTransactions.column(54).visible(true);
            }
            else {
                tableFilingTransactions.column(46).visible(false);
                tableFilingTransactions.column(47).visible(false);
                tableFilingTransactions.column(48).visible(false);
                tableFilingTransactions.column(49).visible(false);
                tableFilingTransactions.column(50).visible(false);
                tableFilingTransactions.column(51).visible(false);
                tableFilingTransactions.column(52).visible(false);
                tableFilingTransactions.column(53).visible(false);
                tableFilingTransactions.column(54).visible(false);
        }

        if (@Session["COMM_TYPE_ID"] == "19") {
                tableFilingTransactions.column(55).visible(true);
            }
            else {
                tableFilingTransactions.column(55).visible(false);
        }

        tableFilingTransactions.columns.adjust().draw(false);
        tableFilingTransactions.order([0, $("#lstSortColumnNameOrder option:selected").val()]).draw();
        tableFilingTransactions.columns.adjust().responsive.recalc();
        tableFilingTransactions.responsive.recalc();
        $("#divLoading").show();

        //Common Code for Set Preferences - Start
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------
        $('#btnSetPreferences').click(function () {
            appCommonEFS_btnSetPrefrencesCommonCode($m("#ddlViewableColumn").multipleSelect("getSelects").toString(), tableFilingTransactions, "ddlViewableColumn", GetTableFilingTransactionsAjaxOptionsData());
        });

        $.post("@Url.Content("~/_UC_GridCommonControl/GetSortName/")", {
        }, function (results) {
            HideColumn(results.toString().split(","));
        });

        function HideColumn(results) {
            var rules = {
                "indexesToStartHidden": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
                "indexesToAlwaysKeepUnhidden": [8, 9], //Will always unhide.
                "columnNamesToUnhide": results,//String to match.
                "columnNamesIndexMappings": appCommonEFS_GetGridColumnSettings("UC_GridCommonControl") //String in header, index to unhide
            }
            appCommonEFS_HideTableColumn(tableFilingTransactions, rules);
        }

        /**
         * Appends label text to _validate elementys based on a list of custom errors returned from the server.
         * It won't do anyting to handle "AmmountError" keys but it will return true if it sees one in the list.
          * param {reuslt.Errors} errorList
          * Replaces this type of code basically:
             for (var i = 0; i < results.Errors.length; i++) {
                 if (results.Errors[i].Key == "txtPartAmt") {
                     $("#txtPartAmtSchedD_validate").append('<label for="txtPartAmtSchedD" class="error">' + results.Errors[i].Value + '</label>');
                 }
                 if (results.Errors[i].Key == "txtPartExplanationInKind") {
                     $("#txtPartExplanationInKind_validate").append('<label for="txtPartExplanationInKind" class="error">' + results.Errors[i].Value + '</label>');
                 }
                 if (results.Errors[i].Key == "AmountError") {
                     ShowDialogBox('EFS', 'Partnership Amount cannot be more than Outstanding Amount $' + parseFloat(expPartAmount).toFixed(2).toString(), 'Ok', '');
                 }
             }
        */
        function AppendCustomErrorLabels(errorList) {
            //You can define special error conditions using  new Map([["txtAmt", "txtAmtABC"], ["txtPartAmt", "txtPartAmtAC"]])
            var errorLabelDiscrepancies = false;//In this page all the error keys matched the label name so no discrepancies were needed.
            return appCommonEFS_AppendCustomErrorLabelsForAmmountError(errorList, errorLabelDiscrepancies);
        }

        //Commonly used values in this particular page.
        function GetTableFilingTransactionsAjaxOptionsData() {
            return {
                txtFilerID: $("#txtFilerID").val(),
                lstElectionCycle: $("#lstElectionCycle option:selected").val(),
                lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                lstElectionType: $("#lstElectionType option:selected").val(),
                lstElectionDateId: $("#lstElectionDate option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }
        }

        /**Common code for invoking GetAllTransactionTypesData from controller.
         * reloadAndRecalc { boolean } reloads and recalculates the table. When we reload we will display the "divLoading" image until the ajax reload call is completed. This was created for ALM Defect 707 where users were intertacting with the table while the "Processing..." text was still visible.
         * dataTableInstanceToReload { function } The referecne to the datatable we will reload in the success callback..
         * dataOverides { ajax data params } pass to overwrite data values when making ajax call.
         * doneFunction { function } A function to be called if the ajax call is completed.
         */
        function GetAllTransactionTypesData(reloadAndRecalc, dataTableInstanceToReload, dataOverides, doneFunction) {
            var callback = dataTableInstanceToReload ? dataTableInstanceToReload : tableFilingTransactions;
            //Determine what data to use.
            var optionsData = bUtilIsObject(dataOverides) ? dataOverides : GetTableFilingTransactionsAjaxOptionsData();
            appCommonEFS_GetAllTransactionTypesDataCommon(reloadAndRecalc, callback, optionsData, doneFunction); 
        }
        //Common Code for Set Preferences - End
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------

        $m('#gridFilingTransactions tbody').on('click', 'tr', function (e) {
            if ($(this).hasClass('selected')) {
            }
            else {
                tableFilingTransactions.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }

        });

    });
</script>