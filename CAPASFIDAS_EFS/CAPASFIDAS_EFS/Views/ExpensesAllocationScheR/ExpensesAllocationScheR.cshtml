@{
    ViewBag.Title = ": Expenses Allocation Schedule R";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

<form id="TransferInScheRForm">

    @Html.Partial("UserControls/_UC_Alert_Message")
    @Html.Partial("UserControls/_UC_Delete_Message")
    <div id="divMainNew" class="mainDiv">
        <div class="mainLowerDivCSSDesktop">
            <div id="divhide" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonShowHide1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonShowHide">
                    <img src="~/Content/Images/up20.png" alt="Up/Hide Filter Arrow" />
                </button>
            </div>
            <div id="divshow" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonHideShow1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonHideShow">
                    <img src="~/Content/Images/down20.png" alt="Down/Show Filter Arrow" />
                </button>
            </div>
        </div>
        <div class="mainLowerDivCSS">
            <div id="divhideForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonShowHide2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonShowHide">
                        <img src="~/Content/Images/up20.png" alt="Up/Hide Filter Arrow" />
                    </button>
                </div>
            </div>
            <div id="divshowForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonHideShow2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonHideShow">
                        <img src="~/Content/Images/down20.png" alt="Down/Show Filter Arrow" />
                    </button>
                </div>
            </div>
        </div>
        <div id="divTopSection">
            <div id="selectorItsRpt">
                <div class="divWidth">
                    <fieldset>
                        <legend class="visibleToScreenReaderOnly">Filter Controls Top</legend>
                        <div class="floatRightNew clsShowButtonClass">
                            <input type="button" id="btnCommonSearch1" class="btn btn-default clsCommonSearch" name="Command" value="Apply" title="Apply" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear1" class="btn btn-default clsCommonClear" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp1" /></button>
                        </div>
                    </fieldset>
                    <div class="requiredTextFilter">* marks required fields</div>
                    <div id="divFilerID">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerID">* Filer ID</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtFilerID", ViewData["txtFilerID"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblFilerID" })
                        </div>
                    </div>
                    <div id="divFilerType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerType">* Filer Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("txtFilerType", null, new { id = "txtFilerType", @class = "txtWidth txtReportPeriodDatesFrom", aria_labelledby = "lblFilerType" })
                        </div>
                    </div>
                    <div id="divCommitteeName">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCommitteeName">* Candidate/Committee Name</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtCommitteeName", ViewData["txtCommitteeName"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblCommitteeName" })
                        </div>
                    </div>
                    <div id="divElectionCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionCycle">* Report Year</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionCycle", ViewData["lstElectionCycle"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionCycle" })
                        </div>
                    </div>
                    <div id="divOfficeType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblOfficeType">* Election Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCOfficeType", null, "- Select -", new { id = "lstUCOfficeType", @class = "spanMobileWidth", aria_labelledby = "lblOfficeType" })
                        </div>
                    </div>
                    <div id="divCounty">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCounty">* County</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCCounty", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblCounty" })
                        </div>
                    </div>
                    <div id="divMunicipality">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblMunicipality">* Municipality</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCMuncipality", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblMunicipality" })
                        </div>
                    </div>
                    <div id="divElectionType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionType">* Report Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionType", ViewData["lstElectionType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionType" })
                        </div>
                    </div>
                    <div id="divElectionDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionDate">* Election Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionDate", ViewData["lstElectionDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionDate" })
                        </div>
                    </div>
                    <div id="divDisclosureType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosureType">* Disclosure Type </span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosureType", ViewData["lstDisclosureType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosureType" })
                        </div>
                    </div>
                    <div id="divDisclosurePeriod">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosurePeriod">* Disclosure Period</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosurePeriod", ViewData["lstDisclosurePeriod"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosurePeriod" })
                        </div>
                    </div>
                    @* OFFICE CYCLE FILING DATE *@
                    <div id="divFilingDateOffCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDateOffCycle">* New Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            <input type="text" id="txtNewFilingDate" name="txtNewFilingDate" class="txtWidth txtCurrentDateCls" maxlength="10" aria-labelledby = "lblFilingDateOffCycle" />
                        </div>
                    </div>
                    @* OFFICE CYCLE FILING DATE *@
                    <div id="divFilingReason">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReasonforFiling">Resignation/Termination</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstResigTermType", ViewData["lstResigTermType"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstFilingDate", aria_labelledby = "lblReasonforFiling" })
                        </div>
                    </div>
                    <div id="divReportPeriodDates">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesFrom">* Cut off Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesFrom", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesFrom" })
                        </div>
                    </div>
                    <div id="divFilingDateDropDown">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDate">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstFilingDate", ViewData["lstFilingDate"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstFilingDate", aria_labelledby = "lblFilingDate" })
                        </div>
                    </div>
                    <div id="divReportPeriodDatesTo">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesTo">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesTo", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesTo" })
                        </div>
                    </div>
                    <div class="floatRightNew">
                        <fieldset>
                            <legend class="visibleToScreenReaderOnly">Filter Controls Bottom</legend>
                            <input type="button" id="btnCommonSearch2" class="btn btn-default clsCommonSearch" name="Command" value="Apply" title="Search" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear2" class="btn btn-default clsCommonClear" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp2" /></button>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="floatRight paddingRight3em paddingTop0pt6em">
        <p><button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelpSchedR();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help Schedule R" id="imgHelp3" /></button></p>
    </div>

    <div id="divBreadCrumb" class="breadCrumbDivCSS">
        <nav aria-label="Breadcrumbs" id="pBreadCrumb" class="FontSizeCss">
            <ol class="breadcrumb">
                <li>@Html.ActionLink("File a Disclosure Report", "ContributionsMonetary", "ContributionsMonetary", null, new { @class = "lnkLogout" })</li>
                <li class="active">Expense Allocation Among Candidates</li>
            </ol>
        </nav>
        <div class="paddingtop3pt5">
            <h1>
                <span id="lblHeader1">File a Disclosure Report</span> -
                <span id="lblHEleYear">File a Disclosure Report</span> -
                <span id="lblHDisclPer">File a Disclosure Report</span>
            </h1>
        </div>
        <br />
        <div >
            <div class="paddingbottom1pt5em paddingtoppt5TS">
                <h3><span id="lblHeader2">Expense Allocation Among Candidates</span></h3>
            </div>
        </div>
    </div>
    <div id="divGrid" class="divGridCSSTransferin">
        @Html.Partial("UserControls/_UC_Loding")
        @Html.Partial("UserControls/_UC_GridCommonControl")
    </div>
</form>
<div id="dialog-form_Sched_R" title="Add/Edit Transaction">
    <form id="DialogBoxSchedRForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%;">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="dvIsAllocationExist">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAllocationExisting">Is Allocation Existing?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstAllocationExisting", ViewData["lstAllocationExisting"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblAllocationExisting" })
                    </div>
                </div>
                <div id="tdDateRcvd">
                    <div id="txtCurrentDateAllocatedSchedR_validate" class="verticalCSSDestopForError">
                    </div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDateReceived">* Date Allocated</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDateAllocatedSchedR" name="txtCurrentDateAllocatedSchedR" class="datepicker txtWidthForDateSched_ABC txtCurrentDateCls" maxlength="10" aria-labelledby="lblDateReceived" />
                    </div>
                </div>                
                <div id="divLenderFirstName">
                    <div id="txtLenderFirstName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderFirstName">* First Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderFirstName", null, new { id = "txtLenderFirstName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "30", aria_labelledby = "lblLenderFirstName" })
                    </div>
                </div>
                <div id="divLenderMiddleName">
                    <div id="txtLenderMIName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderMiddleName">Middle Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderMIName", null, new { id = "txtLenderMIName", @class = "txtWidthForDialogSched_A", @maxlength = "30", aria_labelledby = "lblLenderMiddleName" })
                    </div>
                </div>
                <div id="divLenderLastName">
                    <div id="txtLenderLastName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderLastName">* Last Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderLastName", null, new { id = "txtLenderLastName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "30", aria_labelledby = "lblLenderLastName" })
                    </div>
                </div>
                <div id="tdElectYearAllocation">
                    <div id="lstElectionCycleAllocated_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblElectionCycleAllocated">* Election Year Allocated</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstElectionCycleAllocated", ViewData["lstElectionCycle"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblElectionCycleAllocated" })
                    </div>
                </div>
                <div id="tdOffice">
                    <div id="lstOffice_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblOffice">* Office</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstOffice", ViewData["lstOffice"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblOffice" })
                    </div>
                </div>
                <div id="tdDistrict">
                    <div id="lstDistrict_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDistrict">* District</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstDistrict", ViewData["lstDistrict"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblDistrict" })
                    </div>
                </div>
                <div id="divAmount">
                    <div id="txtAmtExpensesAllocation_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmountAltAllReport">* Amount Allocated this report $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtExpensesAllocation", null, new { id = "txtAmtExpensesAllocation", @class = "txtWidthForDialogSched_A required", @maxlength = "13", aria_labelledby = "lblAmountAltAllReport" })
                    </div>
                </div>
                <div id="divAmountAllReport">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmountAllReport">* Amount Allocated all reports $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtAllReport", null, new { id = "txtAmtAllReport", @class = "txtWidthForDialogSched_A required", @maxlength = "13", aria_labelledby = "lblAmountAllReport" })
                    </div>
                </div>
                <div id="divExplanation">
                    <div id="txtExplanationCommonScheR_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanation">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationCommonScheR", null, new { id = "txtExplanationCommonScheR", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanation" })
                    </div>
                </div>
                <div id="AddUpdateBtnIdSchedA" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnUpdateDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnAddDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogEdit" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>
            </div>
        </div>
    </form>
</div>

<script>
    $m = jQuery.noConflict();

    var autoNameFound = false;
    var amountAllReports = '';

    function CallHelpSchedR() {

        var myWidth = 1050;
        var myHeight = 550;

        var left = (screen.width - myWidth) / 2;
        var top = (screen.height - myHeight) / 4;

        window.open("../../ExpensesAllocationScheR/GetScheduleRHelpPopUp", "Help", 'width=550, height=600,scrollbars=1, width=' + myWidth + ', height=' + myHeight + ', top=' + top + ', left=' + left);
    }

    $('#menuNav').css('opacity', 0);
    $('#TransferInScheRForm').css('opacity', 0);
    $('#dialog-form_Sched_R').css('opacity', 0);
    $('#divWelcomeBanner').css('opacity', 0);
    $(window).on('load', function () {
        $('#menuNav').css('opacity', 1);
        $('#TransferInScheRForm').css('opacity', 1);
        $('#dialog-form_Sched_R').css('opacity', 1);
        $('#divWelcomeBanner').css('opacity', 1);
    });


    $m(document).ready(function () {

        var tableFilingTransactions = '';
        $m("#txtAmtExpensesAllocation").attr('aria-required', true);
        $("#main").addClass("SetHeightTransferIn");
        $("#main").removeClass("SetHeight");

        $("#lblAllTransText").text("All Transactions: " + sessionStorage.getItem("ElectionCycleText").toString() + " - " + sessionStorage.getItem("DisclosurePeriodText").toString());

        // Common Function in EFS-Validation.js file - Start
        //LoadDatePicker(); //For static date pickers
        validatePage("DialogBoxSchedRForm");
        LefthandFilterValues();
        // Common Function in EFS-Validation.js file - ENd

        /// Dialog Box Code /////////////////////////////////////////////////////////////////////
        var dialog;
        dialog = $m("#dialog-form_Sched_R").dialog({
            autoOpen: false,
            resizable: true,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+200"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();


        $("#main").addClass("SetHeightAssignReview");
        $("#main").removeClass("SetHeight");
        sessionStorage.setDataTable = "true";

        $("#tdDistrict").hide();
        $("#txtAmtAllReport").prop("disabled", true);
        $m("#btnAddNewTransaction").button().on("click", function () {
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                 txtFilerId: $("#txtFilerID").val(),
                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                 txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
             }, function (resultEditFlag) {
                 if (resultEditFlag == "TRUE") {
                     sessionStorage.setItem("ValidateAutoComplete", "false");
                     dialog.dialog("open");
                     var validator = $m("#DialogBoxSchedRForm").validate();
                     validator.resetForm();  // clear out the validation errors
                     $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                     sessionStorage.setItem("AddEditCloseStatus", "Add");
                     $(".divWidthSchedABC .error").removeClass("error");
                     sessionStorage.setItem("AmountEdit", "ADD");
                     $("#btnUpdateDialog").hide();
                     $("#btnAddDialog").show();
                     $("#btnClearDialog").show();
                     $("#btnClearDialogEdit").hide();
                     $("#txtCurrentDateAllocatedSchedR").blur();
                     $("#txtAmtExpensesAllocation").blur();
                     $("#txtCurrentDateAllocatedSchedR").focus();
                     $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                     $m("#txtCurrentDateAllocatedSchedR").removeClass("error");

                     $("#lstAllocationExisting").prop("disabled", false);
                     $("#txtLenderFirstName").prop("disabled", false);
                     $("#txtLenderMIName").prop("disabled", false);
                     $("#txtLenderLastName").prop("disabled", false);
                     $("#lstElectionCycleAllocated").prop("disabled", false);
                     $("#lstOffice").prop("disabled", false);
                     $("#lstDistrict").prop("disabled", false);
                     $("#tdDistrict").hide();
                     $("#dvIsAllocationExist").show();
                     $("#divAmountAllReport").show();
                } else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before adding this Transaction.', 'Ok', '');
                }
            });
        });

        $m("#btnCloseDialog").button().on("click", function () {
            var valid = true;
            if (sessionStorage.getItem("AddEditCloseStatus") != null) {
                if (sessionStorage.getItem("AddEditCloseStatus").toString() == "Edit") {
                    if ($("#txtCurrentDateAllocatedSchedR").val().toString().length >= 1
                        || $("#txtLenderFirstName").val().toString().length >= 1
                        || $("#txtLenderMIName").val().toString().length >= 1
                        || $("#txtLenderLastName").val().toString().length >= 1
                        || $("#lstOffice option:selected").val().toString() != "0"
                        || $("#lstDistrict option:selected").val().toString() != "0"
                        || $("#txtAmtExpensesAllocation").val().toString().length >= 1
                        || $("#txtExplanationCommonScheR").val().toString().length >= 1) {
                        valid = false;
                    }
                }
            }
            if (valid) {
                dialog.dialog("close");
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
            } else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?";

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "Ok": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the DialogBox
                            dialog.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
            }

        });

        //====================================================================================================================
        // Date picker validation based on Filing Type.
        if ($("#lstElectionType option:selected").val().toString() == "6") { // Off-Cycle
            if ($("#lstFilingDate option:selected").text().toString() == "- New Filing Date -") {
                sessionStorage.setItem("CuttOffDateForFiling", bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString());
            }
            else {
                sessionStorage.setItem("CuttOffDateForFiling", $("#lstFilingDate option:selected").text().toString());
            }
        }
        else {
            sessionStorage.setItem("CuttOffDateForFiling", bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString());
        }
        // Date picker validation based on Filing Type.
        //====================================================================================================================

        $m("#txtCurrentDateAllocatedSchedR").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: sessionStorage.getItem("CuttOffDateForFiling").toString(),            
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDateAllocatedSchedR").valid();
            },
        }).datepicker();

        $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();
        $("#txtCurrentDateAllocatedSchedR").addClass("watermarkHTMLTextBox");
        $("#txtCurrentDateAllocatedSchedR").focusin(function () {
            $("#txtCurrentDateAllocatedSchedR").removeClass("watermarkHTMLTextBox");
        });

        // Watermark TextBox. ////////////////////////////////////////////////////

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDateAllocatedSchedR").focusout(function () {
            if ($("#txtCurrentDateAllocatedSchedR").val().toString() != "") {
                if ($("#txtCurrentDateAllocatedSchedR").val().toString() != "MM/DD/YYYY") {
                    var results = GetValidDateForCommon("txtCurrentDateAllocatedSchedR", "Transferred");

                    if (results == "") {
                        var MyDate = new Date($("#txtCurrentDateAllocatedSchedR").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDateAllocatedSchedR").val("");
                        $("#txtCurrentDateAllocatedSchedR").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDateAllocatedSchedR").addClass("watermarkHTMLTextBox");
            }
        });

        // DATE FORMATE....
         /////////////////////////////////////////////////////////////////////////////////////
         $("#btnAddDialog").click(function (e) {
             $m('#DialogBoxSchedRForm').valid();
             if ($m('#DialogBoxSchedRForm').valid()) {
                 $m("#divLoading").show();
                 ////////////////////////////// DETERMINE IF A SCHEDULE R ALREADY EXISTS ////////////////////////////////////////////////////
                 var url = '@Url.Action("ScheduleRAlreadyExists", "ExpensesAllocationScheR")';
                 $.post(url, {
                     strFirstName: $m("#txtLenderFirstName").val().toString(),
                     strLastName: $m("#txtLenderLastName").val().toString(),
                     strMiddleName: $m("#txtLenderMIName").val().toString(),
                     strElectionYearID: $m("#lstElectionCycleAllocated option:selected").val(),
                     strOfficeID: $m("#lstOffice option:selected").val(),
                     strDistrictID: $m("#lstDistrict option:selected").val(),
                     strAllocationExists: $m("#lstAllocationExisting option:selected").val(),
                     validateCheck: sessionStorage.getItem("ValidateAutoComplete").toString()
                 }, function (resultsVal) {
                        ///////////////////////// DO THE INSERT IF THERE IS NO EXISTING SCHEDULE R //////////////////////////////
                         if (resultsVal == "NO") {
                             var url = '@Url.Action("AddExpensesAllocationScheRData", "ExpensesAllocationScheR")';
                             $.post(url, {
                                 txtFilerId: $("#txtFilerID").val(),
                                 strFilingSchedId: $m("#lstTransactionType option:selected").val(),
                                 strFilingSchedDate: $m("#txtCurrentDateAllocatedSchedR").val().toString(),
                                 strFlngEntFirstName: $m("#txtLenderFirstName").val().toString(),
                                 strFlngEntMiddleName: $m("#txtLenderMIName").val().toString(),
                                 strFlngEntLastName: $m("#txtLenderLastName").val().toString(),
                                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                                 lstElectYear: $m("#lstElectionCycleAllocated option:selected").text(),
                                 lstOfficeID: $m("#lstOffice option:selected").val(),
                                 lstDistrictID: $m("#lstDistrict option:selected").val(),
                                 strOrgAmt: $m("#txtAmtExpensesAllocation").val().toString(),
                                 strTransExplanation: $m("#txtExplanationCommonScheR").val().toString(),
                                 lstFilingEntId: "",
                                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                                 strFilingDate: $m("#txtReportPeriodDatesTo").val().toString(),
                                 txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                                 electionDateId: $m("#lstElectionDate").val(),
                                 lstResigTermType: $m("#lstResigTermType option:selected").val(),
                                 txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                                 lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                                 lstDiaSupportOppose: "",
                                 parentTranID: ""
                             }, function (results) {
                                 if (results.Errors == null) {
                                     if (results == "Custom Error") {
                                         $m("#divLoading").hide();
                                         ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                                         window.location.reload();
                                     } else {
                                         if (results == "0") {
                                             $m("#divLoading").hide();
                                             ShowDialogBox('EFS', 'System Error Found. Please try again.', 'Ok', '');
                                             window.location.reload();
                                         } else {
                                             results = "Custom Error";
                                             window.status = "Transaction saved successfully";
                                             sessionStorage.setItem("ValidateAutoComplete", "false");
                                             $("#txtLenderMIName").prop("disabled", false);
                                             $("#txtLenderLastName").prop("disabled", false);
                                             $('#lstElectionCycleAllocated').attr('disabled', false);
                                             $('#lstOffice').attr('disabled', false);
                                             $('#lstDistrict').attr('disabled', false);

                                             var validator = $m("#DialogBoxSchedRForm").validate();
                                             validator.resetForm();  // clear out the validation errors
                                             $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                                             $(".divWidthSchedABC .error").removeClass("error");

                                             $("#txtCurrentDateAllocatedSchedR").blur();
                                             $("#txtAmtExpensesAllocation").blur();
                                             $("#lblExplanation").text("Explanation");
                                             $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                                             $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
                                             $("#txtCurrentDateAllocatedSchedR").focus();
                                             $("#lstAllocationExisting")[0].selectedIndex = 0;
                                             $("#tdDistrict").hide();
                                             $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                                             $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
                                             var doneFunction = function () {
                                                 $m("#divLoading").hide();
                                                 ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                             };
                                             // Refresh the Data on Grid... Hides the loading too!
                                             GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                                         }
                                     }
                                 } else if (results.Errors.length >= 0) {
                                     $m("#divLoading").hide();
                                     ClearServerSideErrors(); // Server Side Validation Clear
                                     appCommonEFS_AppendCustomErrorLabelsForAmmountError(results.Errors, false);
                                 }
                             }).fail(function () {
                                 $m("#divLoading").hide();//AddExpensesAllocationScheRData failed.
                             });
                         }
                         else if (resultsVal == "DUPLICATE") {
                             //The resultsVal could also be "DPULICATE" or "EXISTS" but we don't treat each case differently right now.
                             $m("#divLoading").hide();
                             // IF THERE WAS ALREADY AN ELECTION FOR THAT DATE, PRESENT DIALOG AND EXIT
                             ShowDialogBox('EFS', 'Schedule R has already filed for the entered combination. Either enter new allocation or select Yes in the Is Allocation Existing question', 'Ok', '');
                         }
                         else {
                             //The resultsVal could also be "DPULICATE" or "EXISTS" but we don't treat each case differently right now.
                             $m("#divLoading").hide();
                             // IF THERE WAS ALREADY AN ELECTION FOR THAT DATE, PRESENT DIALOG AND EXIT
                             ShowDialogBox('EFS', 'Name entered is not available in database. Either enter an existing name or change "Is Allocation Existing?" to "No"', 'Ok', '');
                         }
                }).fail(function () {
                    $m("#divLoading").hide();//ScheduleRAlreadyExists Failed.
                    ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                });
             }
         });
         /////////////////////////////////////////////////////////////////////////////////////


         function ClearServerSideErrors() {
             //removing error class and error messages in search form
             $("#txtCurrentDateAllocatedSchedR_validate").empty();
             $("#txtLenderFirstName_validate").empty();
             $("#txtLenderMIName_validate").empty();
             $("#txtLenderLastName_validate").empty();
             $("#txtAmtExpensesAllocation_validate").empty();
             $("#txtExplanationCommonScheR_validate").empty();
         }

        // EDIT COMMON ...................
        //...............................................................................................................

        if (sessionStorage.getItem("EditFlag") != null) {
            if (sessionStorage.getItem("EditFlag").toString() == "True") {

                var validator = $m("#DialogBoxSchedRForm").validate();
                validator.resetForm();  // clear out the validation errors
                $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data

                $("#lstTransactionType option").each(function () {
                    if ($(this).val() == sessionStorage.getItem("ScheduleId").toString()) {
                        //$(this).attr('selected', 'selected');
                        $(this).prop("selected", true);
                    }
                });

                // BIND COMMON SESSION VARIABLE.
                sessionStorage.setItem("TransactionType", sessionStorage.getItem("ScheduleId").toString());

                $.post("@Url.Content("~/_UC_GridCommonControl/GetEditTransactionData/")", {
                    strTransNumber: sessionStorage.getItem("TransNumberEdit").toString()
                }, function (resultsEditData) {
                    $.each(resultsEditData, function (i, item) {

                        dialog.dialog("open");
                        sessionStorage.setItem("AmountEdit", "EDIT");
                        $("#btnUpdateDialog").show();
                        $("#btnAddDialog").hide();
                        $("#btnClearDialog").hide();
                        $("#btnClearDialogEdit").show();

                        sessionStorage.setItem("TransNumber", item.TransNumber.toString());
                        sessionStorage.setItem("FilingTransId", item.TransNumber.toString());
                        sessionStorage.setItem("FilingEntityId", item.FilingEntityId.toString());
                        $("#txtCurrentDateAllocatedSchedR").val(item.SchedDate.toString());
                        if ($("#txtCurrentDateAllocatedSchedR").val().toString() != "MM/DD/YYYY") {
                            $("#txtCurrentDateAllocatedSchedR").removeClass('watermark');
                        }
                        $("#txtCurrentDateAllocatedSchedR").focus();
                        $("#txtLenderFirstName").val(item.FilingFirstName.toString());
                        $("#txtLenderMIName").val(item.FilingMiddleName.toString());
                        $("#txtLenderLastName").val(item.FilingLastName.toString());
                        $("#txtStreetName").val(item.FilingStreetName.toString());
                        $("#txtCity").val(item.FilingCity.toString());
                        $("#txtState").val(item.FilingState.toString());
                        $("#txtZipCode").val(item.FilingZip.toString());
                        if (item.FilingZip.toString() != "") {
                            $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                        }
                        else {
                            $("#txtZipCode").addClass("watermarkHTMLTextBox");
                            if (item.FilingCountry.toString() == "United States") {
                                $("#txtZipCode").blur();
                            }
                        }
                        /// Country
                        $("#txtCountry").val(item.FilingCountry.toString());
                        if (item.FilingCountry.toString() == "United States") {
                            $("#chkCountry").prop('checked', false);
                            $("#txtCountry").prop("disabled", true);
                            $("#txtState").prop('maxLength', '2');
                        }
                        else { // Other Country
                            $("#chkCountry").prop('checked', true);
                            $("#txtCountry").prop("disabled", false);
                            $("#txtState").prop('maxLength', '30');
                            $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            $m('#txtZipCode').attr("placeholder", "");
                        }
                        $("#lstMethod option").each(function () {
                            if ($(this).text() == item.PaymentTypeDesc.toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });
                        if (item.ElectionYear != null) {
                            if (item.ElectionYear.toString() != "") {
                                $m("#lstElectionCycleAllocated option").each(function () {
                                    if ($(this).text() == item.ElectionYear.toString()) {
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                            }
                        }
                        if (item.Office != null) {
                            if (item.Office.toString() != "") {
                                $m("#lstOffice option").each(function () {
                                    if ($(this).val() == item.Office.toString()) {
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                            }
                        }
                        if (item.District != null) {
                            if (item.District.toString() != "") {
                                sessionStorage.setItem("districtData", item.District.toString());

                                $m("#lstDistrict option").each(function () {
                                    if ($(this).val() == item.District.toString()) {
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                            }
                            else {
                                if (item.District == '') {
                                    item.District = 'None';
                                }
                                sessionStorage.setItem("districtData", item.District.toString());

                                $m("#lstDistrict option").each(function () {
                                    if ($(this).val() == item.District.toString()) {
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                            }
                        }
                        if (item.PaymentTypeId.toString() == "1") {
                            $("#tdCheck").show();
                            $("#txtCheck").val(item.PayNumber.toString());
                        }
                        else {
                            $("#tdCheck").hide();
                        }
                        var varAmt = item.OriginalAmount.toString();
                        $("#txtAmtExpensesAllocation").val(varAmt);
                        if (item.OriginalAmount.toString() != "") {
                            $("#txtAmtExpensesAllocation").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtAmtAllReport").val(varAmt);
                        $("#txtExplanationCommonScheR").val(item.TransExplanation.toString());

                        $.post("@Url.Content("~/ExpensesAllocationScheR/CaluclateAllAmount/")", {
                            firstName: item.FilingFirstName.toString(),
                            middleName: item.FilingMiddleName.toString(),
                            lastName: item.FilingLastName.toString(),
                            electYear: $m("#lstElectionCycleAllocated option:selected").text(),
                            officeID: $m("#lstOffice option:selected").val(),
                            distID: item.District.toString()
                        }, function (result) {
                                if (result != "") {
                                    var amtVal = parseFloat(result);
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }
                                    $("#txtAmtAllReport").val(amtVal);
                                    sessionStorage.setItem("txtAmtAllReportEdit", amtVal);
                                    sessionStorage.setItem("txtAmtEdit", $("#txtAmtExpensesAllocation").val());
                                }
                        });

                        $("#dvIsAllocationExist").hide();
                        $("#lstAllocationExisting").prop("disabled", true);
                        $("#txtLenderFirstName").prop("disabled", true);
                        $("#txtLenderMIName").prop("disabled", true);
                        $("#txtLenderLastName").prop("disabled", true);
                        $("#lstElectionCycleAllocated").prop("disabled", true);
                        $("#lstOffice").prop("disabled", true);
                        $("#lstDistrict").prop("disabled", true);
                        $("#txtAmtAllReport").prop("disabled", true);

                        // Common Code
                        sessionStorage.setItem("EditFlag", "False");
                    });
                });
            }
        }

        // EDIT COMMON ...................
        //...............................................................................................................
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_edit', function (e) {
            event.preventDefault();
            var data = tableFilingTransactions.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    if (data[1].toString() == "18") { // Schedule R
                        var validator = $m("#DialogBoxSchedRForm").validate();
                        validator.resetForm();  // clear out the validation errors
                        $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                        $(".divWidthSchedABC .error").removeClass("error");
                        $("#txtCurrentDateAllocatedSchedR").focus();

                        dialog.dialog("open");
                        sessionStorage.setItem("AddEditCloseStatus", "Edit");
                        $("#lstAllocationExisting")[0].selectedIndex = 1;
                        $("#dvIsAllocationExist").hide();
                        $("#btnUpdateDialog").show();
                        $("#btnAddDialog").hide();
                        $("#btnClearDialog").hide();
                        $("#btnClearDialogEdit").show();
                        sessionStorage.setItem("TransNumber", data[42].toString());
                        sessionStorage.setItem("FilingEntityId", data[2].toString());
                        $("#txtCurrentDateAllocatedSchedR").val(data[10].toString());
                        $("#txtCurrentDateAllocatedSchedR").removeClass("watermarkHTMLTextBox");
                        if (data[10].toString() != "" || data[10].toString() != null) {
                            var MyDate = new Date($("#txtCurrentDateAllocatedSchedR").val().toString());
                            var MyDateString;
                            MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                + ('0' + MyDate.getDate()).slice(-2) + '/'
                                + MyDate.getFullYear();
                            $("#txtCurrentDateAllocatedSchedR").val("");
                            $("#txtCurrentDateAllocatedSchedR").val(MyDateString);
                            $("#txtCurrentDateAllocatedSchedR").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtCurrentDateAllocatedSchedR").focus();

                        $("#txtLenderFirstName").val(data[14].toString());
                        $("#txtLenderMIName").val(data[15].toString());
                        $("#txtLenderLastName").val(data[16].toString());

                        var originalAmount = data[24].toString();
                        $("#txtAmtExpensesAllocation").val(originalAmount);
                        if ($("#txtAmtExpensesAllocation").val().toString() != "" || $("#txtAmtExpensesAllocation").val().toString() != "999999999.99") {
                            $("#txtAmtExpensesAllocation").removeClass("watermarkHTMLTextBox");
                        }
                        $("#divAmountAllReport").show();

                        $m("#lstElectionCycleAllocated option").each(function () {
                            if ($(this).text() == data[33].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });

                        $m("#lstOffice option").each(function () {
                            if ($(this).val() == data[45].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });

                        if (data[35].toString() == '') {
                            data[35] = 'None';
                        }

                        sessionStorage.setItem("districtData", data[35].toString());
                        $m("#lstDistrict option").each(function () {
                            if ($(this).val() == data[35].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });
                        $("#txtExplanationCommonScheR").val(data[36].toString());
                        sessionStorage.setItem("AmountEdit", "EDIT");
                        $.post("@Url.Content("~/ExpensesAllocationScheR/CaluclateAllAmount/")", {
                            firstName: $("#txtLenderFirstName").val(),
                            middleName: $("#txtLenderMIName").val(),
                            lastName: $("#txtLenderLastName").val(),
                            electYear: $m("#lstElectionCycleAllocated option:selected").text(),
                            officeID: $m("#lstOffice option:selected").val(),
                            distID: data[35].toString()
                        }, function (result) {
                            if (result != "") {
                                var amtVal = parseFloat(result);
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }

                                sessionStorage.setItem("txtAmtAllReportEdit", result);
                                sessionStorage.setItem("txtAmtEdit", $("#txtAmtExpensesAllocation").val());
                            }
                        }).always(function () {
                            $("#divLoading").hide();
                        });

                        $("#lstAllocationExisting").prop("disabled", true);
                        $("#txtLenderFirstName").prop("disabled", true);
                        $("#txtLenderMIName").prop("disabled", true);
                        $("#txtLenderLastName").prop("disabled", true);
                        $("#lstElectionCycleAllocated").prop("disabled", true);
                        $("#lstOffice").prop("disabled", true);
                        $("#lstDistrict").prop("disabled", true);
                        $("#txtAmtAllReport").prop("disabled", true);

                    } // Other Schedules
                    else if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17", "18", "19", "20", "21"].includes(data[1].toString())) {
                        //Common code to determine redirect url and set session varialbes. Also hides $("#divLoading") on fail.
                        //Uses window.location.href
                        appCommonEFS_DetermineScheduleRedirect(data[1].toString(), data[42].toString());
                    }
                } else { // When resultEditFlag != "TRUE"
                    $("#divLoading").hide();// GetEditFlag failed.
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });

        //Delete - Start
        // Delete Record FILING TRANSACTIONS.
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_remove', function (e) {
            e.preventDefault();
            var dataTrans = tableFilingTransactions.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                 txtFilerId: $("#txtFilerID").val(),
                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                 txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
             }, function (resultEditFlag) {
                 if (resultEditFlag == "TRUE") {
                     $.post("@Url.Content("~/_UC_GridCommonControl/GetDeleteFlag/")", {
                     }, function (resultDeleteFlag) {
                         if (resultDeleteFlag == "True") {
                             // LOAN RECEIVED DELETE CHECK
                             $.post("@Url.Content("~/LoanReceivedSchedI/ValidateDelete_LoanReceived/")", {
                                 loan_Lib_Number: dataTrans[41].toString(),
                             }, function (resultDeleteFlagSchedI) {
                                 // CHECK THE VALIDATION IF ANY CONTRIBUTION REFUNDS (SCHEDULE 'M') EXISTS OR NOT.
                                 // IF SCHEDULE 'M' EXISTS FOR EITHER SCHEDULE 'A', SCHEUDLE 'B', OR SCHEDULE 'C'...
                                 // THEN SHOULD NOT DELETE UNTIL CHILD RECORDS DELETE.
                                 $.post("@Url.Content("~/ContributionsCandIndFamily/ContributionsRefundSchedMExists/")", {
                                     strTransNumber: dataTrans[42].toString()
                                 }, function (resultDelSchedABC) {
                                     // CHECK THE VALIDATION IF ANY EXPENDITURE REFUNDS (SCHEDULE 'L') EXISTS OR NOT.
                                     // IF SCHEDULE 'L' EXITS THEN SCHEDULE 'F' SHOULD NOT DELETE UNTLI CHILD DELETE ALL.
                                     $.post("@Url.Content("~/ExpenditurePaymentsSchedF/ExpenditureRefundSchedLExists/")", {
                                         strTransNumber: dataTrans[42].toString()
                                     }, function (resultDelSchedF) {
                                         var deleteData = {
                                             resultDeleteFlagSchedI: resultDeleteFlagSchedI,
                                             resultDelSchedABC: resultDelSchedABC,
                                             resultDelSchedF: resultDelSchedF
                                         }

                                         var resultsDelete = "Are you sure you want to delete this transaction?";
                                         var deleteURL = "";

                                         //Determine if you can
                                         var veredict = appCommonEFS_DetermineScheduleDelete(dataTrans, deleteData);
                                         if (!veredict || !bUtilIsObject(veredict)) {
                                             $("#divLoading").hide();
                                             return false;
                                         } else {
                                             var resultsDelete = veredict.alertMessageForOperation;
                                             var deleteURL = veredict.deleteURL;
                                         }

                                         // DELETE FUNCTIONALITY.
                                         $m('#modal_dialog').text(resultsDelete);
                                         $m("#modal_dialog").dialog({
                                             resizable: false,
                                             width: '400px',
                                             height: 'auto',
                                             bgiframe: false,
                                             closeOnEscape: false,
                                             open: function (event, ui) {
                                                 $("#divLoading").hide();
                                                 hideDialogXButton(this);
                                             },
                                             buttons: {
                                                 "Ok": function () {
                                                     // Close Confirm Box.
                                                     $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                                     $("#divLoading").show();
                                                     var options = {};
                                                     options.url = deleteURL;
                                                     options.type = "GET";
                                                     options.data = {
                                                         strLoanLiabNumberOrg: dataTrans[41].toString(),
                                                         strTransNumber: dataTrans[42].toString(),
                                                         strRLiability: dataTrans[6].toString()
                                                     };
                                                     options.dataType = "json";
                                                     options.contentType = "application/json";
                                                     options.success = function (results) {
                                                         window.status = "Record deleted successfully";
                                                         var doneFunction = function () {
                                                             $("#divLoading").hide();
                                                             ShowDialogBox('EFS', 'Record deleted successfully', 'Ok', '');
                                                         }
                                                         // Refresh the Data on Grid...
                                                         GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                                                     };
                                                     options.error = function () {
                                                         $("#divLoading").hide();
                                                         ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                                     };
                                                     $.ajax(options);
                                                 },
                                                 "Cancel": function () {
                                                     // Close Confirm Box.
                                                     $m(this).dialog("close");
                                                 }
                                             }
                                         });
                                     }).fail(function () {
                                         $("#divLoading").hide();// ExpenditureRefundSchedLExists failed.
                                     });
                                 }).fail(function () {
                                     $("#divLoading").hide();// ContributionsRefundSchedMExists failed.
                                 });
                             }).fail(function () {
                                 $("#divLoading").hide();// ValidateDelete_LoanReceived failed.
                             });
                         } else {//When resultDeleteFlag != "TRUE"
                             $("#divLoading").hide();
                             ShowDialogBox('EFS', 'The last transaction cannot be deleted.  To delete the Disclosure report, a deletion request must be submitted to cfinfo@elections.ny.gov', 'Ok', '');
                         }
                    }).fail(function () {
                        $("#divLoading").hide();// GetDeleteFlag failed.
                    });
                 } else {//When resultEditFlag != "TRUE"
                     $("#divLoading").hide();
                     ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before deleting this Transaction.', 'Ok', '');
                 }
             }).fail(function () {
                 $("#divLoading").hide();// GetEditFlag failed.
             });
        });
        //Delete - End

         //==============================================================================================================================================
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.

         //Bind Search Click
         $m(".clsCommonSearch").bind('click', function (searchCustomers) {
             $("#divGridInKind").show();
             sessionStorage.setDataTable = "true";
             $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
             $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");

             sessionStorage.setItem("FilerId", $("#txtFilerID option:selected").val());
             sessionStorage.setItem("CommitteeName", $("#txtCommitteeName option:selected").val());
             sessionStorage.setItem("ElectionCycle", $("#lstElectionCycle option:selected").val());
             sessionStorage.setItem("ElectionType", $("#lstElectionType option:selected").val());
             sessionStorage.setItem("ElectionDate", $("#lstElectionDate option:selected").val());
             sessionStorage.setItem("DisclosureType", $("#lstDisclosureType option:selected").val());
             sessionStorage.setItem("DisclosurePeriod", $("#lstDisclosurePeriod option:selected").val());
             sessionStorage.setItem("CutOffDate", $("#txtReportPeriodDatesFrom").val());
             sessionStorage.setItem("FilingDate", $("#txtReportPeriodDatesTo").val());
             sessionStorage.setItem("TransactionType", $("#lstTransactionType option:selected").val());
             sessionStorage.setItem("TransactionTypeId", "true");

             var urlContrHome = "../ContributionsMonetary/ContributionsMonetary";
             window.location.href = urlContrHome;
         });

        //==============================================================================================================================================
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //Bind Clear Click
        $(".clsCommonClear").bind('click', function () {
            $("#divGridMonetary").show();
            sessionStorage.setDataTable = "true";
            $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
            $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");

            sessionStorage.setItem("FilerId", $("#txtFilerID option:selected").val());
            sessionStorage.setItem("CommitteeName", $("#txtCommitteeName option:selected").val());
            sessionStorage.setItem("ElectionCycle", $("#lstElectionCycle option:selected").val());
            sessionStorage.setItem("ElectionType", $("#lstElectionType option:selected").val());
            sessionStorage.setItem("ElectionDate", $("#lstElectionDate option:selected").val());
            sessionStorage.setItem("DisclosureType", $("#lstDisclosureType option:selected").val());
            sessionStorage.setItem("DisclosurePeriod", $("#lstDisclosurePeriod option:selected").val());
            sessionStorage.setItem("CutOffDate", $("#txtReportPeriodDatesFrom").val());
            if ($("#lstElectionType option:selected").val() == "6") {
                sessionStorage.setItem("FilingDate", $("#txtNewFilingDate").val());
            }
            else {
                sessionStorage.setItem("FilingDate", $("#txtReportPeriodDatesTo").val());
            }
            sessionStorage.setItem("TransactionType", $("#lstTransactionType option:selected").val());
            sessionStorage.setItem("lstResigTermType", $("#lstResigTermType option:selected").val());
            sessionStorage.setItem("lstFilingDate", $("#lstFilingDate option:selected").val());

            sessionStorage.setItem("TransactionTypeId", "true");

            var urlContrHome = "@Url.Content("~/ContributionsMonetary/ContributionsMonetary/")";

            window.location.href = urlContrHome;
        });
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //==============================================================================================================================================

         $m("#btnUpdateDialog").button().on("click", function () {
             $m('#DialogBoxSchedRForm').valid();
             if ($m('#DialogBoxSchedRForm').valid()) {
                 // SHOW THE PROCESSING....
                 $("#divLoading").show();
                 var url = '@Url.Action("UpdateExpensesAllocationScheRData", "ExpensesAllocationScheR")';
                 $m.post(url, {
                     transNumber: sessionStorage.getItem("TransNumber").toString(),
                     strFilingSchedDate: $m("#txtCurrentDateAllocatedSchedR").val().toString(),
                     strOrgAmt: $m("#txtAmtExpensesAllocation").val().toString(),
                     strTransExplanation: $m("#txtExplanationCommonScheR").val().toString(),
                     strSupportOppose: ""
                 }, function (data) {
                    // Close Dialogbox.
                    dialog.dialog("close");
                    // Saved
                    window.status = "Transaction saved successfully";
                    $("#txtLenderMIName").prop("disabled", false);
                    $("#txtLenderLastName").prop("disabled", false);
                    $('#lstElectionCycleAllocated').attr('disabled', false);
                    $('#lstOffice').attr('disabled', false);
                    $('#lstDistrict').attr('disabled', false);
                    var doneFunction = function () {
                        $m("#divLoading").hide();
                        ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                    };
                    // Refresh the Data on Grid...
                    GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                 }).fail(function () {
                     $("#divLoading").hide();// UpdateExpensesAllocationScheRData failed.
                     ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                 });
             }
        });

        $m("#btnClearDialog").button().on("click", function () {
            ClearDialog();
            sessionStorage.setItem("ValidateAutoComplete", "false");
         });

        $m("#btnClearDialogEdit").button().on("click", function () {
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $(".divWidthSchedABC .error").removeClass("error");
            $("#txtCurrentDateAllocatedSchedR").focus();
            $("#txtCurrentDateAllocatedSchedR").val("");
            $("#txtAmtExpensesAllocation").val("");
            $("#txtExplanationCommonScheR").val("");
            $("#txtCurrentDateLoanReceived").focus();
            $m("label[for=txtCurrentDateLoanReceived]").text('');
            sessionStorage.setItem("ValidateAutoComplete", "false");
        });

        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================
        // CALL LOAD DATA FUNCTION
        LoadData();
        var tableFilingTransactions;
        // FUNCTION LOAD DATA
        function LoadData() {
            $("#divLoading").show();
            tableFilingTransactions = $m('#gridFilingTransactions').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 3, 4, 5, 6, 7, 38, 39, 41, 42, 43, 44],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [9],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridFilingTransactions').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    if (aaData[1] == "18") {
                        $m('td:eq(1)', nRow).html('<a class="editor_edit" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                    else if (aaData[1] == "14") {
                        $m('td:eq(1)', nRow).html('');
                    }
                    else if (aaData[1] == "11") {
                        $m('td:eq(1)', nRow).html('<a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                    else {
                        if (aaData[1] != "15") {
                            $m('td:eq(1)', nRow).html('<a class="editor_edit" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                        }
                        else { // SCHEDULE 15 LEGACY DATA NOT EDIT NO ADD ONLY DELETE.
                            $m('td:eq(1)', nRow).html('<a class="editor_remove" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                        }
                    }
                    return nRow;
                },
                "fnDrawCallback": function () {
                    //Don't add functions here unless you wanto to execute them on every draw call.
                },
                "fnServerData": function (url, data, callback) {
                    var doneFunction = function () { $("#divLoading").hide(); }
                    //Refresh the Data on Grid.
                    GetAllTransactionTypesData(false, callback, false, doneFunction);
                }
            });
            $m('#gridFilingTransactions').DataTable().ajax.reload();
            if (@Session["COMM_TYPE_ID"] == "23") {
                tableFilingTransactions.column(46).visible(true);
                tableFilingTransactions.column(47).visible(true);
                tableFilingTransactions.column(48).visible(true);
                tableFilingTransactions.column(49).visible(true);
                tableFilingTransactions.column(50).visible(true);
                tableFilingTransactions.column(51).visible(true);
                tableFilingTransactions.column(52).visible(true);
                tableFilingTransactions.column(53).visible(true);
                tableFilingTransactions.column(54).visible(true);
            }
            else {
                tableFilingTransactions.column(46).visible(false);
                tableFilingTransactions.column(47).visible(false);
                tableFilingTransactions.column(48).visible(false);
                tableFilingTransactions.column(49).visible(false);
                tableFilingTransactions.column(50).visible(false);
                tableFilingTransactions.column(51).visible(false);
                tableFilingTransactions.column(52).visible(false);
                tableFilingTransactions.column(53).visible(false);
                tableFilingTransactions.column(54).visible(false);
            }

            if (@Session["COMM_TYPE_ID"] == "19") {
                tableFilingTransactions.column(55).visible(true);
            }
            else {
                tableFilingTransactions.column(55).visible(false);
            }

            tableFilingTransactions.columns.adjust().draw(false);
            tableFilingTransactions.order([0, $("#lstSortColumnNameOrder option:selected").val()]).draw();
            tableFilingTransactions.columns.adjust().responsive.recalc();
            tableFilingTransactions.responsive.recalc();
        }
        //Common Code for Set Preferences - Start
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------
        $('#btnSetPreferences').click(function () {
            appCommonEFS_btnSetPrefrencesCommonCode($m("#ddlViewableColumn").multipleSelect("getSelects").toString(), tableFilingTransactions, "ddlViewableColumn", GetTableFilingTransactionsAjaxOptionsData());
        });

        //Commonly used values in this particular page.
        function GetTableFilingTransactionsAjaxOptionsData() {
            return {
                txtFilerID: $("#txtFilerID").val(),
                lstElectionCycle: $("#lstElectionCycle option:selected").val(),
                lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                lstElectionType: $("#lstElectionType option:selected").val(),
                lstElectionDateId: $("#lstElectionDate option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }
        }
        /**
         * Common code for invoking GetAllTransactionTypesData from controller.
         * reloadAndRecalc { boolean } reloads and recalculates the table. When we reload we will display the "divLoading" image until the ajax reload call is completed. This was created for ALM Defect 707 where users were intertacting with the table while the "Processing..." text was still visible.
         * dataTableInstanceToReload { function } The referecne to the datatable we will reload in the success callback.
         * dataOverides { ajax data params } pass to overwrite data values when making ajax call.
         * doneFunction { function } A function to be called if the ajax call is completed.
         */
        function GetAllTransactionTypesData(reloadAndRecalc, dataTableInstanceToReload, dataOverides, doneFunction) {
            var callback = dataTableInstanceToReload ? dataTableInstanceToReload : tableFilingTransactions;
            //Determine what data to use.
            var optionsData = bUtilIsObject(dataOverides) ? dataOverides : GetTableFilingTransactionsAjaxOptionsData();
            appCommonEFS_GetAllTransactionTypesDataCommon(reloadAndRecalc, callback, optionsData, doneFunction);
        }

        $.post("@Url.Content("~/_UC_GridCommonControl/GetSortName/")", {
        }, function (results) {
            HideColumn(results.toString().split(","));
        });

        /**
         * Use to adjust visible columns.
         * param {array} results an array of column names to help determine which columns to show or hide.
         */
        function HideColumn(results) {
            var rules = {
                "indexesToStartHidden": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
                "indexesToAlwaysKeepUnhidden": [8, 9], //Will always unhide.
                "columnNamesToUnhide": results,//String to match.
                "columnNamesIndexMappings": appCommonEFS_GetGridColumnSettings("UC_GridCommonControl") //String in header, index to unhide
            }
            appCommonEFS_HideTableColumn(tableFilingTransactions, rules);
        }
        //Common Code for Set Preferences - End
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------

        $m('#gridFilingTransactions tbody').on('click', 'tr', function (e) {
            if ($(this).hasClass('selected') != true) {
                tableFilingTransactions.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });

         // Partnership Name Auto Complete.
        $m("#txtLenderFirstName").autocomplete({
            source: function (request, response) {
                if ($("#lstAllocationExisting option:selected").val() == "2")
                {
                    $.post("@Url.Content("~/ExpensesAllocationScheR/AutoCompleteEntityName/")", request, response);
                }
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();
                var selectedValue = ui.item.label;

                    $.ajax({
                    url: "@Url.Content("~/ExpensesAllocationScheR/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                        success: function (results) {
                            $("#txtAmtAllReport").val('');
                            $.each(results, function (i, item) {
                                sessionStorage.setItem("ValidateAutoComplete","true");
                            $("#txtLenderFirstName").val(item.FirstName.toString());
                                $("#txtLenderMIName").val(item.MiddleName.toString());
                                $("#txtLenderMIName").prop("disabled", true);
                                $("#txtLenderLastName").val(item.LastName.toString());
                                $("#txtLenderLastName").prop("disabled", true);
                                if ($("#txtAmtAllReport").val() == '') {
                                    var amtVal = parseFloat(item.Org_Amt.toString());
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }
                                }
                                else {
                                    var amtVal = parseFloat($("#txtAmtAllReport").val()) + parseFloat(item.Org_Amt);
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }
                                }
                                sessionStorage.setItem("txtAmtAllReport", $("#txtAmtAllReport").val());
                            $("#lstElectionCycleAllocated option").each(function () {
                                if ($(this).text() == item.ElectionYear.toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                                });
                                $('#lstElectionCycleAllocated').attr('disabled', true);

                            $("#lstOffice option").each(function () {
                                if ($(this).val() == item.Office_ID.toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                                });
                                $('#lstOffice').attr('disabled', true);
                                if (item.Dist_ID == '') {
                                    item.Dist_ID = 'None';
                                }
                                sessionStorage.setItem("districtData", item.Dist_ID.toString());
                                $("#lstDistrict option").each(function () {
                                    if ($(this).text() == item.Dist_ID.toString()) {
                                        $("#tdDistrict").show();
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                                $('#lstDistrict').attr('disabled', true);
                            if ($("#lstDistrict").val().toString() == "0")
                            {
                                $("#tdDistrict").hide();
                                }

                                $("#txtAmtExpensesAllocation").val("");
                                $("#txtLenderFirstName").focus();
                                autoNameFound = true;
                        });
                    }
                    });

            }
        });

        $("#lstAllocationExisting").change(function () {
            var valAllocationExisting = $("#lstAllocationExisting option:selected").val();
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
            $(".divWidthSchedABC .error").removeClass("error");
            $("#txtCurrentDateAllocatedSchedR").addClass("watermarkHTMLTextBox");
            $("#txtAmtExpensesAllocation").addClass("watermarkHTMLTextBox");
            $("#lstAllocationExisting").val(valAllocationExisting);

            $("#txtLenderMIName").prop("disabled", false);
            $("#txtLenderLastName").prop("disabled", false);
            $('#lstElectionCycleAllocated').attr('disabled', false);
            $('#lstOffice').attr('disabled', false);
            $('#lstDistrict').attr('disabled', false);

         });


         $("#lstOffice").change(function () {

            if ($("#lstOffice").val().toString() != "0")
            {
                var options = {};
                options.url = "@Url.Content("~/ExpensesAllocationScheR/GetDistrict/")";
                options.type = "POST";
                options.data = JSON.stringify(
                    {
                        strOfficeID: $("#lstOffice").val().toString()
                    });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                    if (results.length != "0")
                    {
                        $("#tdDistrict").show();
                        $("#lstDistrict").empty();
                        $("#lstDistrict").append("<option>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstDistrict").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                        if (sessionStorage.getItem("districtData") != null)
                        {
                            $m("#lstDistrict option").each(function () {
                                if ($(this).val() == sessionStorage.getItem("districtData").toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                            });
                            sessionStorage.setItem("districtData", null);
                        }
                    }
                    else
                    {
                        $("#lstDistrict").empty();
                        $("#lstDistrict").append("<option>" + "- Select -" + "</option>");
                        $("#tdDistrict").hide();
                    }
                };
                options.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                };
                $.ajax(options);
            }
            else
            {
                $("#tdDistrict").hide();
                $("#lstDistrict").empty();
            }
        });

        $("#txtLenderFirstName").focusout(function () {            
            if ($("#lstAllocationExisting option:selected").val() == "2")
            {
                $.post("@Url.Content("~/ExpensesAllocationScheR/ValidateEntityName/")", {
                term: $("#txtLenderFirstName").val()
                }, function (result) {
                    if (result == "") {
                        ShowDialogBox('EFS', 'Name entered is not available in database. Either enter an existing name or change “Is Allocation Existing" to No', 'Ok', '');
                        $("#txtLenderMIName").val("");
                        $("#txtLenderFirstName").val("");
                        $("#txtLenderLastName").val("");
                        $("#txtAmtAllReport").val("");
                        $("#lstElectionCycleAllocated")[0].selectedIndex = 0;
                        $("#lstOffice")[0].selectedIndex = 0;
                        $("#lstDistrict")[0].selectedIndex = 0;
                        $("#txtLenderMIName").prop("disabled", false);
                        $("#txtLenderLastName").prop("disabled", false);
                        $('#lstElectionCycleAllocated').attr('disabled', false);
                        $('#lstOffice').attr('disabled', false);
                        $('#lstDistrict').attr('disabled', false);
                        $("#txtLenderFirstName").focus();
                    }
                });
            }
            else
            {
                $("#txtAmtAllReport").val("");
            }
        });

        $("#txtAmtExpensesAllocation").focusout(function () {

            // MOVED THIS CODE FROM DOWN TO HERE. NO CHANGES.
            // ONLY CHANGES WHEN TXTAMT ZERO THEN TXTAMTALLREPORT SHOULD NOT FILL.
            // ADDED ONLY ABOVE CONDITION - ON 06.02.2021.
            if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                if ($("#txtAmtAllReport").val().toString().length <= 9) {
                    var regExpNumbers = /^(-{1}?(?:([0-9]{0,10})))/;
                    if (regExpNumbers.test($("#txtAmtAllReport").val().toString())) {
                        var strAmount = $("#txtAmtAllReport").val().toString();
                        var indexAmount = strAmount.indexOf(".");
                        if (indexAmount != -1) {
                            var amountDecimal = strAmount.substr(indexAmount + 1, strAmount.length);
                            if (amountDecimal.toString().length == "1" || amountDecimal.toString().length == "2") {
                                var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                        }
                        else {
                            var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                            if (amtVal == Math.floor(amtVal)) {
                                amtVal = amtVal + ".00";
                                $m("#txtAmtAllReport").val(amtVal);
                            }
                            else {
                                $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                            }
                        }
                    }
                }
                else {
                    var strAmount = $("#txtAmtAllReport").val().toString();
                    var indexAmount = strAmount.indexOf(".");
                    var varPeriod = strAmount.indexOf(".");
                    var newStrAmount = strAmount.substr(0, varPeriod);
                    if (indexAmount != -1) {
                        if (newStrAmount.length <= 9) {
                            var amountDecimal = strAmount.substr(indexAmount + 1, strAmount.length);
                            if (amountDecimal.toString().length == "1" || amountDecimal.toString().length == "2") {
                                var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                        }
                    }
                }
            }
            if (sessionStorage.getItem("AmountEdit") == "EDIT") {
                if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                    var amtVal;
                    if (parseFloat($("#txtAmtExpensesAllocation").val()) > parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit")) + (parseFloat($("#txtAmtExpensesAllocation").val()) - parseFloat(sessionStorage.getItem("txtAmtEdit")));
                    }
                    else if (parseFloat($("#txtAmtExpensesAllocation").val()) < parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit")) - (parseFloat(sessionStorage.getItem("txtAmtEdit")) - parseFloat($("#txtAmtExpensesAllocation").val()));
                    }
                    else if (parseFloat($("#txtAmtExpensesAllocation").val()) == parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit"));
                    }

                    if (amtVal == Math.floor(amtVal)) {
                        amtVal = amtVal + ".00";
                        $m("#txtAmtAllReport").val(amtVal);
                    }
                    else {
                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                    }
                }
            }
            else {
                var tempVal = $("#txtAmtAllReport").val();
                if ($("#lstAllocationExisting option:selected").val() == "1") {
                    if ($.isNumeric($("#txtAmtExpensesAllocation").val())) {
                        $("#txtAmtAllReport").val($("#txtAmtExpensesAllocation").val());
                    }
                    else {
                        $("#txtAmtAllReport").val("");
                    }
                }
                else {
                    if ($("#txtAmtAllReport").val() != '') {
                        if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                            if ($("#txtAmtExpensesAllocation").val().toString() != "0.00") {
                                var amtVal;
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReport")) + parseFloat($("#txtAmtExpensesAllocation").val());
                                }
                                else {
                                    amtVal = parseFloat($("#txtAmtExpensesAllocation").val());
                                }
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                            else {
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    var amtVal;
                                    amtVal = sessionStorage.getItem("txtAmtAllReport");
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }

                                }
                                else {
                                    $("#txtAmtAllReport").val("");
                                }

                            }
                        }
                        else {
                            $("#txtAmtAllReport").val("");
                        }
                    }
                    else {
                        if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                            if ($("#txtAmtExpensesAllocation").val().toString() != "0.00") {
                                $("#txtAmtAllReport").val($("#txtAmtExpensesAllocation").val());
                            }
                            else {
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    var amtVal;
                                    amtVal = sessionStorage.getItem("txtAmtAllReport");
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }

                                }
                                else {
                                    $("#txtAmtAllReport").val("");
                                }
                            }
                        }
                        else {
                            $("#txtAmtAllReport").val("");
                        }
                    }
                }


                if ($.isNumeric($("#txtAmtExpensesAllocation").val()) != true) {
                    if (tempVal.toString() != "" && tempVal.toString() != "0.00") {
                         $("#txtAmtAllReport").val(tempVal);
                    } else {
                        $("#txtAmtAllReport").val("");
                    }
                }
            }
        });

         function ClearDialog() {
             var validator = $m("#DialogBoxSchedRForm").validate();
             validator.resetForm();  // clear out the validation errors
             $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
             $(".divWidthSchedABC .error").removeClass("error");

             $("#lblExplanation").text("Explanation");
             $("#txtCurrentDateAllocatedSchedR").blur();
             $("#txtAmtExpensesAllocation").blur();
             $("#txtCurrentDateAllocatedSchedR").focus();
             $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
             $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
             $("#tdDistrict").hide();
             $("#txtLenderMIName").prop("disabled", false);
             $("#txtLenderLastName").prop("disabled", false);
             $('#lstElectionCycleAllocated').attr('disabled', false);
             $('#lstOffice').attr('disabled', false);
             $('#lstOffice').attr('disabled', false);
             autoNameFound = false;
         }
    });
</script>