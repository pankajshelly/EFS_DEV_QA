@{
    ViewBag.Title = ": OutStanding Liability Loans Schedule N";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

<form id="OutstandingLibLoansSchedN">

    @Html.Partial("UserControls/_UC_Alert_Message")
    @Html.Partial("UserControls/_UC_Delete_Message")

    <div id="divMainNew" class="mainDiv">
        <div class="mainLowerDivCSSDesktop">
            <div id="divhide" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonShowHide1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Collapse/Hide Filter" /></button>
            </div>
            <div id="divshow" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonHideShow1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Expand/Show Filter" /></button>
            </div>
        </div>
        <div class="mainLowerDivCSS">
            <div id="divhideForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonShowHide2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Collapse/Hide Filter" /></button>
                </div>
            </div>
            <div id="divshowForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonHideShow2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Expand/Show Filter" /></button>
                </div>
            </div>
        </div>
        <div id="divTopSection">
            <div id="selectorItsRpt">
                <div class="divWidth">
                    <fieldset>
                        <legend class="visibleToScreenReaderOnly">Filter Controls Top</legend>
                        <div class="floatRightNew clsShowButtonClass">
                            <input type="button" id="btnCommonSearch1" class="btn btn-default clsCommonSearch clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Apply" title="Apply" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear1" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp1" /></button>
                        </div>
                    </fieldset>
                    <div class="requiredTextFilter">* marks required fields</div>
                    <div id="divFilerID">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerID">* Filer ID</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtFilerID", ViewData["txtFilerID"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblFilerID" })
                        </div>
                    </div>
                    <div id="divFilerType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerType">* Filer Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("txtFilerType", null, new { id = "txtFilerType", @class = "txtWidth txtReportPeriodDatesFrom", aria_labelledby = "lblFilerType" })
                        </div>
                    </div>
                    <div id="divCommitteeName">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCommitteeName">* Candidate/Committee Name</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtCommitteeName", ViewData["txtCommitteeName"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblCommitteeName" })
                        </div>
                    </div>
                    <div id="divElectionCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionCycle">* Report Year</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionCycle", ViewData["lstElectionCycle"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionCycle" })
                        </div>
                    </div>
                    <div id="divOfficeType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblOfficeType">* Election Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCOfficeType", null, "- Select -", new { id = "lstUCOfficeType", @class = "spanMobileWidth", aria_labelledby = "lblOfficeType" })
                        </div>
                    </div>
                    <div id="divCounty">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCounty">* County</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCCounty", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblCounty" })
                        </div>
                    </div>
                    <div id="divMunicipality">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblMunicipality">* Municipality</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCMuncipality", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblMunicipality" })
                        </div>
                    </div>
                    <div id="divElectionType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionType">* Report Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionType", ViewData["lstElectionType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionType" })
                        </div>
                    </div>
                    <div id="divElectionDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionDate">* Election Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionDate", ViewData["lstElectionDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionDate" })
                        </div>
                    </div>
                    <div id="divDisclosureType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosureType">* Disclosure Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosureType", ViewData["lstDisclosureType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosureType" })
                        </div>
                    </div>
                    <div id="divDisclosurePeriod">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosurePeriod">* Disclosure Period</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosurePeriod", null, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosurePeriod" })
                        </div>
                    </div>
                    <div id="divReportPeriodDates">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesFrom">* Cut off Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesFrom", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesFrom" })
                        </div>
                    </div>
                    <div id="divFilingDateDropDown">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDate">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstFilingDate", ViewData["lstFilingDate"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstFilingDate", aria_labelledby = "lblFilingDate" })
                        </div>
                    </div>
                    <div id="divReportPeriodDatesTo">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesTo">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesTo", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesTo" })
                        </div>
                    </div>

                    @* OFFICE CYCLE FILING DATE *@
                    <div id="divFilingDateOffCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDateOffCycle">* New Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            <input type="text" id="txtNewFilingDate" name="txtNewFilingDate" class="txtWidth txtCurrentDateCls" maxlength="10" aria-labelledby="lblFilingDateOffCycle" />
                        </div>
                    </div>
                    @* OFFICE CYCLE FILING DATE *@

                    <div id="divFilingReason">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReasonforFiling">Resignation/Termination</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstResigTermType", ViewData["lstResigTermType"] as SelectList, "- Not Applicable -", new { @class = "spanMobileWidth lstResigTermType", aria_labelledby = "lblReasonforFiling" })
                        </div>
                    </div>
                    <div class="floatRightNew" style="padding-bottom: 2em;">
                        <fieldset>
                            <legend class="visibleToScreenReaderOnly">Filter Controls Bottom</legend>
                            <input type="button" id="btnCommonSearch2" class="btn btn-default clsCommonSearch ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Apply" title="Search" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear2" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp2" /></button>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="floatRight paddingRight3em paddingTop0pt6em">
        <p><button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelpSchedN();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help Schedule N" id="imgHelp3" /></button></p>
    </div>

    <div id="divBreadCrumb" class="breadCrumbDivCSS">
        <nav aria-label="Breadcrumbs" id="pBreadCrumb" class="FontSizeCss">
            <ol class="breadcrumb">
                @*<li>@Html.ActionLink("Home", "Home", "Home", null, new { @class = "" })</li>*@
                <li>@Html.ActionLink("File a Disclosure Report", "ContributionsMonetary", "ContributionsMonetary", null, new { @class = "lnkLogout" })</li>
                <li class="active">Outstanding Liabilities/Loans</li>
            </ol>
        </nav>
        <div class="paddingtop3pt5">
            <h1>
                <span id="lblHeader1">File a Disclosure Report</span> -
                <span id="lblHEleYear">File a Disclosure Report</span> -
                <span id="lblHDisclPer">File a Disclosure Report</span>
            </h1>
        </div>
        <br />
        <div>
            <div class="paddingbottom1pt5em paddingtoppt5TS">
                <h2><span id="lblHeader2">Outstanding Liabilities/Loans</span></h2>
            </div>
        </div>
    </div>
    @Html.Partial("UserControls/_UC_Loding")
    <div id="divGrid" class="divGridCSSTransferin">
        @Html.Partial("UserControls/_UC_GridCommonControl")
    </div>

    @*COMMON GRIDS FOR LIABILITY DETAILS*@
    <div id="divLiabilityDetailsGrid" class="divGridCSSTransferin">
        @* ORIGINAL SCHEDULE 'N' *@
        <div id="divUCOrigLiab" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_OrgLiab_Grid")
        </div>
        @* EXPENDITURE PAYMENT SCHEDUL 'F' *@
        <div id="divUCExpPayments" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_ExpPayments_Grid")
        </div>
        @* OUTSTANDING LIABILITY SCHEDULE 'N' *@
        <div id="divUCOutLiab" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_OutLiab_Grid")
        </div>
        @* OUTSTANDING LIABILITY FORGIVEN SCHEDULE 'K' *@
        <div id="divUCLiabForgiven" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_LiabilityForgiven_Grid")
        </div>
    </div>
    @*COMMON GRIDS FOR LIABILITY DETAILS*@

    @*// Grid Sched R - Amount Allocation*@
    <div id="divShowAllocation" class="divGridCSS">
        <div class="paddingLeft2em paddingBottom2em paddingtop2em">
            <div class="row">
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-3">
                    <h3 style="padding-top: 0.5em;">Expense Allocation Among Candidates</h3>
                </div>
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <div>
                        <input type="button" id="btnAddNewAllocation" class="btn btn-default" name="Command" value="Add Allocation" title="Add Allocation" style="font-size:12px;" />
                    </div>
                </div>
            </div>
        </div>
        <div id="divgridAmountAllocationSchedR" class="paddingTop0pt6em">
            <table id="gridAmountAllocationSchedR" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead id="thdGrid2" class="header">
                    <tr>
                        <th class="never">FilingTransId</th> @* 0 *@
                        <th class="never">TransNumber</th> @* 1 *@
                        <th class="never">Filing Entity Id</th> @* 2 *@
                        <th>Expand</th> @* 3 *@
                        <th>Action</th> @* 4 *@
                        <th>Support/Oppose</th> @* 5 *@
                        <th>Transaction Date</th> @* 6 *@
                        <th>First Name</th> @* 7 *@
                        <th>Middle Name</th> @* 8 *@
                        <th>Last Name</th> @* 9 *@
                        <th>Amount</th> @* 10 *@
                        <th>Election Year</th> @* 11 *@
                        <th>Office</th> @* 12 *@
                        <th>District</th> @* 13 *@
                        <th>Explanation</th> @* 14 *@
                        <th>Itemized</th> @* 15 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</form>

<div id="dialog-form_Sched_N" title="Add/Edit Transaction">
    <form id="DialogBoxSchedNForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%;">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>                
                <div id="divSuppOrOpps">
                    <div id="lstSuppOrOpps_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblSuppOrOpps">Is this in Support or Opposition to a Candidate?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstSuppOrOpps", ViewData["lstSuppOrOpps"] as SelectList, "- Select -", new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblSuppOrOpps" })
                    </div>
                </div>
                <div id="divWidth">
                    <div id="txtCurrentDateSchedN_validate" class="verticalCSSDestopForError" role="alert">
                    </div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDatePaid">* Date Incurred</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDateSchedN" name="txtCurrentDateSchedN" class="datepicker txtWidthForDateSched_ABC txtCurrentDateSchedN" maxlength="10" aria-labelledby="lblDatePaid" />
                    </div>
                </div>
                <div id="tdPayorNameOutstandingLiability">
                    <div id="txtCreditorName_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCreditorName">* Creditor Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCreditorName", null, new { id = "txtCreditorName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "40", aria_labelledby = "lblCreditorName" })
                    </div>
                </div>
                <div id="tdCountryContributionChk">
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblOtherCountry">Other Country</span>
                    </div>
                    <div class="verticalCSSDestopForCheckBoxSched_ABC DDLCSSAdd">
                        @Html.CheckBox("chkCountry", false, new { @class = "txtWidthForDialogSched_ABC_CountryChkbox", aria_labelledby = "lblOtherCountry" })
                    </div>
                </div>
                <div id="tdCountryContributionTxt">
                    <div id="txtCountry_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblCountry">* Country</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSched_ABC DDLCSSAdd">
                        @Html.TextBox("txtCountry", null, new { id = "txtCountry", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCountry" })
                    </div>
                </div>
                <div id="divStreetAddress">
                    <div id="txtStreetName_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblStreetName">* Street Address</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStreetName", null, new { id = "txtStreetName", @class = "txtWidthForDialogSched_A", @maxlength = "60", aria_labelledby = "lblStreetName" })
                    </div>
                </div>

                <div id="divCity">
                    <div id="txtCity_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCity">* City</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCity", null, new { id = "txtCity", @class = "txtWidthForDialogSched_A", @maxlength = "30", aria_labelledby = "lblCity" })
                    </div>
                </div>

                <div id="divState">
                    <div id="txtState_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblState">* State</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtState", null, new { id = "txtState", @class = "txtWidthForDialogSched_A", @maxlength = "2", aria_labelledby = "lblState" })
                    </div>
                </div>

                <div id="divZip5">
                    <div id="txtZipCode_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblZip5">* Zip Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtZipCode", null, new { id = "txtZipCode", @class = "txtWidthForDialogSched_A", @maxlength = "10", aria_labelledby = "lblZip5" })
                    </div>
                </div>
                <div id="tdPurposeCodeOutstandingLiability">
                    <div id="lstPurposeCode_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPurposeName">* Purpose Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstPurposeCode", ViewData["lstPurposeCode"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblPurposeName" })
                    </div>
                </div>
                <div id="tdMethod">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblMethod">* Method</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstMethod", ViewData["lstMethod"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblMethod" })
                    </div>
                </div>
                <div id="tdCheck">
                    <div id="txtCheck_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCheck">* Check #</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCheck", null, new { id = "txtCheck", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCheck" })
                    </div>
                </div>
                <div id="tdAmt">
                    <div id="txtAmtSchedN_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmount">* Original Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtSchedN", null, new { id = "txtAmtSchedN", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_labelledby = "lblAmount" })
                    </div>
                </div>
                <div id="dvOutstandingAmt">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblOutstandingAmt">Outstanding Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtOutstandingAmt", null, new { id = "txtOutstandingAmt", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_labelledby = "lblOutstandingAmt" })
                    </div>
                </div>
                <div id="divExplanation">
                    <div id="txtExplanationCommon_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanation">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationCommon", null, new { id = "txtExplanationCommon", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanation" })
                    </div>
                </div>

                <div id="AddUpdateBtnIdSchedA" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnUpdateDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnAddDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>
            </div>
        </div>
    </form>
</div>

@* SCHED R DIALOG *@
<div id="dialog-form_Sched_R" title="Add/Edit Transaction">
    <form id="DialogBoxSchedRForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%;">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="divDiaSupportOppose">
                    <div id="lstDiaSupportOppose_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDiaSupportOppose">* Support or Oppose?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstDiaSupportOppose", ViewData["ViewDiaSupportOppose"] as SelectList, "- Select -", new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblDiaSupportOppose" })
                    </div>
                </div>
                <div id="dvIsAllocationExist">
                    <div id="lstAllocationExisting_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAllocationExisting">* Is Allocation Existing?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstAllocationExisting", ViewData["lstAllocationExisting"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblAllocationExisting" })
                    </div>
                </div>
                <div id="tdDateRcvd">
                    <div id="txtCurrentDateAllocatedSchedR_validate" class="verticalCSSDestopForError">
                    </div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDateReceived">* Date Allocated</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDateAllocatedSchedR" name="txtCurrentDateAllocatedSchedR" class="datepicker txtWidthForDateSched_ABC txtCurrentDateSchedN" maxlength="10" aria-labelledby="lblDateReceived" />
                    </div>
                </div>
                <div id="divLenderFirstName">
                    <div id="txtLenderFirstName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderFirstName">* First Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderFirstName", null, new { id = "txtLenderFirstName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "30", aria_labelledby = "lblLenderFirstName" })
                    </div>
                </div>
                <div id="divLenderMiddleName">
                    <div id="txtLenderMIName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderMiddleName">Middle Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderMIName", null, new { id = "txtLenderMIName", @class = "txtWidthForDialogSched_A", @maxlength = "30", aria_labelledby = "lblLenderMiddleName" })
                    </div>
                </div>
                <div id="divLenderLastName">
                    <div id="txtLenderLastName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderLastName">* Last Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderLastName", null, new { id = "txtLenderLastName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "30", aria_labelledby = "lblLenderLastName" })
                    </div>
                </div>
                <div id="tdElectYearAllocation">
                    <div id="lstElectionCycleAllocated_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblElectionCycleAllocated">* Election Year Allocated</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstElectionCycleAllocated", ViewData["lstElectionCycle"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblElectionCycleAllocated" })
                    </div>
                </div>
                <div id="tdOffice">
                    <div id="lstOffice_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblOffice">* Office</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstOffice", ViewData["lstOffice"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblOffice" })
                    </div>
                </div>
                <div id="tdDistrict">
                    <div id="lstDistrict_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDistrict">* District</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstDistrict", ViewData["lstDistrict"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblDistrict" })
                    </div>
                </div>
                <div id="divAmount">
                    <div id="txtAmtExpensesAllocation_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmountAltAllReport">* Amount Allocated this report $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtExpensesAllocation", null, new { id = "txtAmtExpensesAllocation", @class = "txtWidthForDialogSched_A required", @maxlength = "13", aria_labelledby = "lblAmountAltAllReport" })
                    </div>
                </div>
                <div id="divAmountAllReport">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmountAllReport">* Amount Allocated all reports $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtAllReport", null, new { id = "txtAmtAllReport", @class = "txtWidthForDialogSched_A required", @maxlength = "13", aria_labelledby = "lblAmountAllReport" })
                    </div>
                </div>
                <div id="divExplanation">
                    <div id="txtExplanationCommonScheR_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanation">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationCommonScheR", null, new { id = "txtExplanationCommonScheR", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanation" })
                    </div>
                </div>
                <div id="AddUpdateBtnIdSchedA" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnUpdateDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnAddDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogEditSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>
            </div>
        </div>
    </form>
</div>

<script>
    $m = jQuery.noConflict();

    function CallHelpSchedN() {

        var myWidth = 1050;
        var myHeight = 550;

        var left = (screen.width - myWidth) / 2;
        var top = (screen.height - myHeight) / 4;

        window.open("../../OutStandingLiabilityLoansSchedN/GetScheduleNHelpPopUp", "Help", 'width=550, height=600,scrollbars=1, width=' + myWidth + ', height=' + myHeight + ', top=' + top + ', left=' + left);
    }

    var autoNameFound = false;
    var amountAllReports = '';

    $('#menuNav').css('opacity', 0);
    $('#DialogBoxSchedNForm').css('opacity', 0);
    $('#dialog-form_Sched_N').css('opacity', 0);
    $('#divWelcomeBanner').css('opacity', 0);
    $(window).on('load', function () {
        $('#menuNav').css('opacity', 1);
        $('#DialogBoxSchedNForm').css('opacity', 1);
        $('#dialog-form_Sched_N').css('opacity', 1);
        $('#divWelcomeBanner').css('opacity', 1);
    });

    $m(document).ready(function () {

        //var tableFilingTransactions = '';

        $m("#txtAmtSchedN").attr('aria-required', true);
        $("#txtOutstandingAmt").prop("disabled", true);
        $("#main").addClass("SetHeightTransferIn");
        $("#main").removeClass("SetHeight");

        $("#lblAllTransText").text("All Transactions: " + sessionStorage.getItem("ElectionCycleText").toString() + " - " + sessionStorage.getItem("DisclosurePeriodText").toString());

        $("#divLiabilityDetailsGrid").hide();
        $("#divShowAllocation").hide();

        // Common Function in EFS-Validation.js file - Start
        validatePage("DialogBoxSchedNForm");
        LefthandFilterValues();
        ValidateAmountAllocationItemization("DialogBoxSchedRForm");
        // Common Function in EFS-Validation.js file - ENd

        $("#tdMethod").hide();

        var tableAmountAllocationSchedR = '';

        /// Dialog Box Code /////////////////////////////////////////////////////////////////////

        var dialog_SchedN;
        var dialog;
        dialog_SchedN = $m("#dialog-form_Sched_N").dialog({
            autoOpen: false,
            resizable: true,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+200"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialog_SchedN = $m("#dialog-form_Sched_N").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialog_SchedN = $m("#dialog-form_Sched_N").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialog_SchedN = $m("#dialog-form_Sched_N").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyle',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        /// Dialog Box Code /////////////////////////////////////////////////////////////////////
        dialog = $m("#dialog-form_Sched_R").dialog({
            autoOpen: false,
            resizable: true,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+200"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();


        $("#main").addClass("SetHeightAssignReview");
        $("#main").removeClass("SetHeight");
        sessionStorage.setDataTable = "true";


        $m("#btnAddNewTransaction").button().on("click", function () {

            $("#divLiabilityDetailsGrid").hide();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    sessionStorage.setItem("AddEditCloseStatusSchedN", "Add");
                    dialog_SchedN.dialog("open");

                    var validator = $m("#DialogBoxSchedNForm").validate();
                    validator.resetForm();  // clear out the validation errors
                    $m("#DialogBoxSchedNForm")[0].reset();   // clear out the form data
                    $(".divWidthSchedABC .error").removeClass("error");

                    $m("#lstSuppOrOpps").removeClass("error");
                    $("#btnUpdateDialog").hide();
                    $("#btnAddDialog").show();
                    $("#divShowAllocation").hide();

                    $("#lblExplanation").text("Explanation");
                    $("#txtCurrentDateSchedN").blur();
                    $("#txtZipCode").blur();
                    $("#txtAmtSchedN").blur();

                    $("#txtCountry").val("United States");
                    $("#txtCountry").prop("disabled", true);
                    $("#chkCountry").prop('checked', false);
                    $("#txtState").prop('maxLength', '2');
                    $("#lstMethod")[0].selectedIndex = 0;
                    $("#tdCheck").hide();
                    //$("#txtCurrentDateSchedN").focus();
                    $m("label[for=txtCurrentDateSchedN]").text('');
                    $m("#txtCurrentDateSchedN").removeClass("error");

                    
                    if (@Session["COMM_TYPE_ID"] == "19") {
                        $("#divSuppOrOpps").show();
                        sessionStorage.setItem("ValidateAutoComplete", "false");                        
                        var validator = $m("#DialogBoxSchedRForm").validate();
                        validator.resetForm();  // clear out the validation errors
                        $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                        sessionStorage.setItem("AddEditCloseStatus", "Add");
                        $(".divWidthSchedABC .error").removeClass("error");
                        sessionStorage.setItem("AmountEdit", "ADD");
                        $("#btnUpdateDialogSchedR").hide();
                        $("#btnAddDialogSchedR").show();
                        $("#btnClearDialogSchedR").show();
                        $("#btnClearDialogEditSchedR").hide();
                        $("#txtCurrentDateAllocatedSchedR").blur();
                        $("#txtAmtExpensesAllocation").blur();
                        //$("#txtCurrentDateAllocatedSchedR").focus();
                        $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                        $m("#txtCurrentDateAllocatedSchedR").removeClass("error");

                        $("#lstAllocationExisting").prop("disabled", false);
                        $("#txtLenderFirstName").prop("disabled", false);
                        $("#txtLenderMIName").prop("disabled", false);
                        $("#txtLenderLastName").prop("disabled", false);
                        $("#lstElectionCycleAllocated").prop("disabled", false);
                        $("#lstOffice").prop("disabled", false);
                        $("#lstDistrict").prop("disabled", false);
                        $("#tdDistrict").hide();
                        $("#dvIsAllocationExist").show();
                        $("#divAmountAllReport").show();
                    }
                    else {
                        $("#divSuppOrOpps").hide();
                    }

                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before adding this Transaction.', 'Ok', '');
                }
            }).always(function () {
                $("#divLoading").hide();
            });

        });

        // Foucus Out.///////////////////////////////
        $("#txtAmtSchedN").focusout(function () {
            if ($("#txtAmtSchedN").val().toString() != "") {
                $("#txtOutstandingAmt").val($("#txtAmtSchedN").val().toString());
            }
            else {
                $("#txtOutstandingAmt").val("");
            }
        });

        $m("#btnCloseDialog").button().on("click", function () {//UpdateFlag AddEditClose
            //By default we do not require close dialog confirmation for this form.
            var requireCloseConfirm = false;
            if (sessionStorage.getItem("AddEditCloseStatusSchedN") != null && sessionStorage.getItem("AddEditCloseStatusSchedN").toString() == "Add") {
                //"ADD" operation will chech the fields. IF there's any data the close confirmation will be required.
                if ( $("#txtCurrentDateSchedN").val().toString().length >= 1
                    || $("#txtCreditorName").val().toString().length >= 1
                    || ($('#chkCountry').is(':checked') && $("#txtCountry").val().toString().length >= 1)/* Other COUNTRY */
                    || $("#txtStreetName").val().toString().length >= 1
                    || $("#txtCity").val().toString().length >= 1
                    || $("#txtState").val().toString().length >= 1
                    || $("#txtZipCode").val().toString().length >= 1
                    || ($("#lstMethod option:selected").val().toString() == "1" && $("#txtCheck").val().toString().length >= 1)
                    || $("#txtAmtSchedN").val().toString().length >= 1
                    || $("#txtExplanationCommon").val().toString().length >= 1) {
                    requireCloseConfirm = true;
                }
            }
            if (!requireCloseConfirm) {
                dialog_SchedN.dialog("close");
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
            }
            else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?"; //window.confirm("All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?");

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "OK": function () {
                            //Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the DialogBox
                            dialog_SchedN.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
            }
        });

        // Method Change
        // ------------------------------------------------------------------------------------------------------------------------------------------
        $("#lstMethod").change(function () {

            $("#txtCheck").val("");

            if ($("#lstMethod option:selected").val().toString() == "1") { // CHECK
                $("#tdCheck").show();
                $("#lblExplanation").text("Explanation");
            }
            else if ($("#lstMethod option:selected").val().toString() == "7") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
                $("#tdCheck").hide();
            }
            else if ($("#lstPurposeCode option:selected").val().toString() == "8") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
            }
            else {
                $("#tdCheck").hide();
                $("#lblExplanation").text("Explanation");

                $m("label[for=txtExplanationCommon]").text('');
                $m("#txtExplanationCommon").removeClass("error");
            }

            $m("label[for=txtExplanationCommon]").text('');
            $m("#txtExplanationCommon").removeClass("error");
        });

        // INITIALIZE THE LIABILITIES DETAILS GRIDS.
        //=========================================================================================================================================
        /**
         * Common code for invoking anyone rest call from the controller.
         * If it fails it displays the Error fetching data dialog.
         * controllerUrl { string } the controller url.
         * ajaxData { object } These are the params that we send to the controller..
         * successCallback { callback } Call back on the successful ajax call.
         * doneFunction { function } Function to be called if the ajax call is completed.
         */
        function GenericAjaxDataFetch(controllerUrl, ajaxData, successCallback, doneFunction) {
            var dFunction = bUtilIsFunction(doneFunction) ? doneFunction : function () { /*If no function was given we provide an empty function.*/ };
            $.ajax({
                "url": controllerUrl,
                "data": ajaxData,
                "success": successCallback,
                "dataType": "json",
                "type": "POST",
                "error": function () {
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                }
            }).done(function () {
                dFunction();
            });
        }

        //====================================================================================================================
        // Date picker validation based on Filing Type.
        if ($("#lstElectionType option:selected").val().toString() == "6") { // Off-Cycle
            if ($("#lstFilingDate option:selected").text().toString() == "- New Filing Date -") {
                sessionStorage.setItem("CuttOffDateForFiling", sessionStorage.getItem("FilingDate").toString());
            }
            else {
                sessionStorage.setItem("CuttOffDateForFiling", $("#lstFilingDate option:selected").text().toString());
            }
        }
        else {
            sessionStorage.setItem("CuttOffDateForFiling", sessionStorage.getItem("CutOffDate").toString());
        }

        $m(".txtCurrentDateSchedN").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png", //"@Url.Content("~/Content/Images/Calendar.png")",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: sessionStorage.getItem("CuttOffDateForFiling").toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDateSchedN").valid();
            },
        }).datepicker();

        $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();
        $("#txtCurrentDateSchedN").addClass("watermarkHTMLTextBox");
        $("#txtCurrentDateSchedN").focusin(function () {
            $("#txtCurrentDateSchedN").removeClass("watermarkHTMLTextBox");
        });

        $m(".txtCurrentDateAllocatedSchedR").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: bUtilSanitizeString(sessionStorage.getItem("CuttOffDateForFiling")).toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDateAllocatedSchedR").valid();
            },
        }).datepicker();
        

        // Watermark TextBox. ////////////////////////////////////////////////////

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDateSchedN").focusout(function () {
            if ($("#txtCurrentDateSchedN").val().toString() != "") {
                if ($("#txtCurrentDateSchedN").val().toString() != "MM/DD/YYYY") {
                    var results = GetValidDateForCommon("txtCurrentDateSchedN", "Transferred");

                    if (results == "") {
                        var MyDate = new Date($("#txtCurrentDateSchedN").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDateSchedN").val("");
                        $("#txtCurrentDateSchedN").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDateSchedN").addClass("watermarkHTMLTextBox");
            }
        });
        // DATE FORMATE....///////////////////////////////////////////////
        //====================================================================================================================

        $m("#btnAddDialog").click(function () {
            $m('#DialogBoxSchedNForm').valid();
            if ($m('#DialogBoxSchedNForm').valid()) {
                $("#divLoading").show();
                sessionStorage.setItem("lstSuppOpps", $m("#lstSuppOrOpps option:selected").val());
                $.post("@Url.Content("~/OutStandingLiabilityLoansSchedN/SaveOutstandingLiabilityData/")", {
                    txtFilerId: $("#txtFilerID").val(),
                    lstElectionCycle: $("#lstElectionCycle option:selected").text(),
                    lstElectionCycleId: $("#lstElectionCycle option:selected").val(),
                    lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                    lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                    lstElectionType: $("#lstElectionType option:selected").val(),
                    lstElectionDate: $("#lstElectionDate option:selected").text(),
                    strFilingTransId: $("#lstContributorAmount option:selected").val(),
                    lstTransactionType: sessionStorage.getItem("TransactionType").toString(),
                    txtDateRcvd: $m("#txtCurrentDateSchedN").val().toString(),
                    txtCreditorName: $m("#txtCreditorName").val(),
                    txtCountry: $m("#txtCountry").val(),
                    txtStreetName: $m("#txtStreetName").val(),
                    txtCity: $m("#txtCity").val(),
                    txtState: $m("#txtState").val(),
                    txtZipCode: $m("#txtZipCode").val(),
                    lstPurposeCode: $m("#lstPurposeCode option:selected").val(),
                    lstMethod: $m("#lstMethod option:selected").val(),
                    txtCheckOutstandingLiability: $m("#txtCheck").val(),
                    txtAmtOutstandingLiability: $m("#txtAmtSchedN").val(),
                    txtOutstandingAmt: $m("#txtOutstandingAmt").val(),
                    txtExplanationOutstandingLiability: $m("#txtExplanationCommon").val(),
                    lstElectionDateId: $("#lstElectionDate option:selected").val(),
                    lstResigTermType: $m("#lstResigTermType option:selected").val(),
                    lstFilingDate: $m("#lstFilingDate option:selected").text(),
                    txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                    txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                    chkCountry: $('#chkCountry').is(':checked').toString(),
                    lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                    lstSuppOrOpps: $m("#lstSuppOrOpps option:selected").val()
                }, function (results) {

                        if (results.Errors == null) {
                            if (results == "Custom Error") {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                                window.location.reload();
                            }
                            else {
                                if (results == "0") {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'System Error Found. Please try again.', 'Ok', '');
                                    window.location.reload();
                                }
                                else {
                                    sessionStorage.setItem("TransactionID", results.toString());
                                    results = "Custom Error";
                                    $("#txtCurrentDateSchedN").focus();

                                    window.status = "Transaction saved successfully";

                                    var validator = $m("#DialogBoxSchedNForm").validate();
                                    validator.resetForm();  // clear out the validation errors
                                    $m("#DialogBoxSchedNForm")[0].reset();   // clear out the form data
                                    $(".divWidthSchedABC .error").removeClass("error");

                                    $("#txtCurrentDateSchedN").blur();
                                    $("#txtZipCode").blur();
                                    $("#txtAmtSchedN").blur();

                                    $("#txtCountry").val("United States");
                                    $("#txtCountry").prop("disabled", true);
                                    $("#lstMethod")[0].selectedIndex = 0;
                                    $("#lblExplanation").text("Explanation");
                                    $("#tdCheck").hide();

                                    $m("label[for=txtCurrentDateSchedN]").text('');
                                    $m("#txtCurrentDateSchedN").removeClass("error");
                                    $m("#lstDiaSupportOppose").removeClass("error");

                                    var doneFunction = function () {
                                        $("#divLoading").hide();
                                        $m("#btnClearDialog").trigger("click");  // clear out the form data
                                        ShowDialogBox('EFS', 'Transaction saved successfully. The liability balance will automatically be adjusted on any subsequent disclosure reports with the add/edit/delete of this liability transaction. Make sure to submit all amended disclosure reports to show the liability balance accurately.', 'Ok', '');
                                    }

                                    var selectedSuppOpps = sessionStorage.getItem("lstSuppOpps").toString();
                                    if (selectedSuppOpps == "Y") {
                                        dialog.dialog("open");

                                        ClearDialogBoxValidationSchedR();
                                        ClearErrorsAmountAllocationSchedRDialogBox();

                                        // Add/Edit
                                        $("#btnAddDialogSchedR").show();
                                        $("#btnUpdateDialogSchedR").hide();

                                        $("#btnClearDialogSchedR").show();
                                        $("#btnClearDialogEditSchedR").hide();   
                                    }
                                    else if (selectedSuppOpps == "N") {
                                        dialog.dialog("close");
                                    }
                                    else {
                                        dialog.dialog("close");
                                    }

                                    // Refresh the Data on Grid... Hides the loading too!
                                    GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                                    $m("label[for=txtCurrentDateSchedN]").text('');
                                    $m("#txtCurrentDateSchedN").removeClass("error");
                                }
                            }
                    } else if (results.Errors.length >= 0) {
                        $("#divLoading").hide();
                        ClearServerSideErrors(); // Server Side Validation Clear
                        AppendCustomErrorLabels(results.Errors);
                    } else {
                        $("#divLoading").hide();
                    }
                }).fail(function () {
                    $("#divLoading").hide();//SaveOutstandingLiabilityData Failed
                });
            }
            else {//Was not valid
                $("#divLoading").hide();
            }
        });

        // EDIT COMMON ...................
        //.......................................................................................................
        if (sessionStorage.getItem("EditFlag") != null) {
            if (sessionStorage.getItem("EditFlag").toString() == "True") {
                setTimeout(
                    function () {
                        // CHECK THAT IF EXISTING PAYMENTS FOR ORIGINAL LIABILITY...
                        // ... IF EXISTS THEN DON'T ALOW TO
                        $("#tdMethod").hide();

                        var validator = $m("#DialogBoxSchedNForm").validate();
                        validator.resetForm();  // clear out the validation errors
                        $m("#DialogBoxSchedNForm")[0].reset();   // clear out the form data

                        $("#lstTransactionType option").each(function () {
                            if ($(this).val() == sessionStorage.getItem("ScheduleId").toString()) {
                                //$(this).attr('selected', 'selected');
                                $(this).prop("selected", true);
                            }
                        });

                        // BIND COMMON SESSION VARIABLE.
                        sessionStorage.setItem("TransactionType", sessionStorage.getItem("ScheduleId").toString());
                        sessionStorage.setItem("AddEditCloseStatusSchedN", "Edit");
                        dialog_SchedN.dialog("open");
                        $.post("@Url.Content("~/_UC_GridCommonControl/GetEditTransactionData/")", {
                            strTransNumber: sessionStorage.getItem("TransNumberEdit").toString()
                        }, function (resultsEditData) {
                            $.each(resultsEditData, function (i, item) {

                                $("#btnUpdateDialog").show();
                                $("#btnAddDialog").hide();

                                sessionStorage.setItem("FilingTransId", item.TransNumber.toString());
                                sessionStorage.setItem("FilingEntityId", item.FilingEntityId.toString());
                                $("#txtCurrentDateSchedN").val(item.SchedDate.toString());
                                if ($("#txtCurrentDateSchedN").val().toString() != "MM/DD/YYYY") {
                                    $("#txtCurrentDateSchedN").removeClass('watermark');
                                }

                                if (@Session["COMM_TYPE_ID"] == "19") {
                                    $("#divSuppOrOpps").show();
                                    if (item.RIESupported.toString() != null || item.RLiability.toString() != "") {
                                        $("#lstSuppOrOpps option").each(function () {
                                            if ($(this).val() == item.RIESupported.toString()) {
                                                $(this).prop("selected", true);
                                            }
                                        });
                                    }
                                }
                                else {
                                    $("#divSuppOrOpps").hide();
                                }
                                $("#txtCreditorName").val(item.FilingEntityName.toString());
                                $("#txtStreetName").val(item.FilingStreetName.toString());
                                $("#txtCity").val(item.FilingCity.toString());
                                $("#txtState").val(item.FilingState.toString());
                                $("#txtZipCode").val(item.FilingZip.toString());
                                if ($("#txtZipCode").val().toString() != "00000-0000") {
                                    $("#txtZipCode").removeClass('watermark');
                                }
                                /// Country
                                $("#txtCountry").val(item.FilingCountry.toString());
                                if (item.FilingCountry.toString() == "United States") {
                                    $("#chkCountry").prop('checked', false);
                                    $("#txtCountry").prop("disabled", true);
                                    $("#txtState").prop('maxLength', '2');
                                }
                                else { // Other Country
                                    $("#chkCountry").prop('checked', true);
                                    $("#txtCountry").prop("disabled", false);
                                    $("#txtState").prop('maxLength', '30');
                                    $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                    $m('#txtZipCode').attr("placeholder", "");
                                }
                                $("#lstMethod option").each(function () {
                                    if ($(this).text() == item.PaymentTypeDesc.toString()) {
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });

                                if (item.PaymentTypeId.toString() == "1") {
                                    $("#tdCheck").show();
                                    $("#txtCheck").val(item.PayNumber.toString());
                                }
                                else {
                                    $("#tdCheck").hide();
                                }

                                var varAmt = item.OriginalAmount.toString();
                                $("#txtAmtSchedN").val(varAmt);
                                $("#txtOutstandingAmt").val(data[25].toString());
                                $("#txtExplanationCommon").val(item.TransExplanation.toString());

                                $("#txtCurrentDateSchedN").select();

                                // Common Code
                                sessionStorage.setItem("EditFlag", "False");
                            });
                        });
                    }, 3000);
            }
        }

        // EDIT COMMON ...................
        //...............................................................................................................

        $m('#gridFilingTransactions tbody').on('click', 'a.editor_edit_Sched_N', function (e) {
            event.preventDefault();
            $("#divLiabilityDetailsGrid").hide();
            $("#divShowAllocation").hide();
            var data = tableFilingTransactions.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    var selectedTransactionType = data[1].toString();
                    var validator = $m("#DialogBoxSchedNForm").validate();
                    validator.resetForm(); // clear out the validation errors
                    $m("#DialogBoxSchedNForm")[0].reset(); // clear out the form data
                    $(".divWidthSchedABC .error").removeClass("error");

                    if (selectedTransactionType == "14") { // OUTSTANDING LIABILITY/LOAN EDIT
                        if (data[24].toString() == data[25].toString()) { // Original Amount and Outstanding Amount should be equal to update Schedule 'N' Original Transaction
                            $.post("@Url.Content("~/OutStandingLiabilityLoansSchedN/GetOutstandingLiabilityExists/")", {
                                strTransNumber: data[42].toString(),
                                strScheduleId: data[1].toString()
                            }, function (results) {
                                if (results.toString() == "FALSE") {
                                    $("#divLoading").hide();
                                    sessionStorage.setItem("AddEditCloseStatusSchedN", "Edit");
                                    dialog_SchedN.dialog("open");
                                    var validator = $m("#DialogBoxSchedNForm").validate();
                                    validator.resetForm();  // clear out the validation errors                                    
                                    $("#btnUpdateDialog").show();
                                    $("#btnAddDialog").hide();
                                    $("#divShowAllocation").hide();

                                    sessionStorage.setItem("FilingTransId", data[42].toString());
                                    sessionStorage.setItem("FilingEntityId", data[2].toString());
                                    $("#txtCurrentDateSchedN").val(data[10].toString());
                                    $("#txtCurrentDateSchedN").removeClass("watermarkHTMLTextBox");
                                    if (data[10].toString() != "" || data[10].toString() != null) {
                                        var MyDate = new Date($("#txtCurrentDateSchedN").val().toString());
                                        var MyDateString;
                                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                                            + MyDate.getFullYear();
                                        $("#txtCurrentDateSchedN").val("");
                                        $("#txtCurrentDateSchedN").val(MyDateString);
                                        $("#txtCurrentDateSchedN").removeClass("watermarkHTMLTextBox");
                                    }
                                    $("#txtCurrentDateSchedN").select();
                                    $m("#lstSuppOrOpps").focus();             
                                    $m("label[for=lstSuppOrOpps]").text('');
                                    $m("#lstSuppOrOpps").removeClass("error");                                    
                                    $("#txtCreditorName").val(data[13].toString());
                                    $("#txtCountry").val(data[17].toString());
                                    if (data[17].toString() == "United States") {
                                        $("#chkCountry").prop('checked', false);
                                        $("#txtCountry").prop("disabled", true);
                                        $("#txtState").prop('maxLength', '2');
                                    }
                                    else { // Other Country
                                        $("#chkCountry").prop('checked', true);
                                        $("#txtCountry").prop("disabled", false);
                                        $("#txtState").prop('maxLength', '30');
                                        $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                        $m('#txtZipCode').attr("placeholder", "");
                                    }
                                    $("#txtStreetName").val(data[18].toString());
                                    $("#txtCity").val(data[19].toString());
                                    $("#txtState").val(data[20].toString());
                                    $("#txtZipCode").val(data[21].toString());
                                    if ($("#txtZipCode").val().toString() != "00000-0000") {
                                        $("#txtZipCode").removeClass('watermark');
                                    }

                                    if (data[21].toString() != "") {
                                        $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                    }
                                    else {
                                        $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                        if (data[17].toString() == "United States") {
                                            $("#txtZipCode").blur();
                                        }
                                    }
                                    var originalAmount = data[24].toString();
                                    $("#txtAmtSchedN").val(originalAmount);
                                    $("#txtOutstandingAmt").val(data[25].toString());
                                    if ($("#txtAmtSchedN").val().toString() != "" || $("#txtAmtSchedN").val().toString() != "999999999.99") {
                                        $("#txtAmtSchedN").removeClass("watermarkHTMLTextBox");
                                    }

                                    $m("#lstMethod option").each(function () {
                                        if ($(this).text() == data[22].toString()) {
                                            $(this).prop('selected', true).trigger('change');
                                        }
                                    });
                                    if ($("#lstMethod option:selected").val().toString() == "1") { // CHECK
                                        $("#tdCheck").show();
                                        $("#lblExplanation").text("Explanation");
                                    }
                                    else if ($("#lstMethod option:selected").val().toString() == "7") { // OTHER
                                        // EXPLANATION MANADATORY
                                        $("#lblExplanation").text("* Explanation");
                                        $("#tdCheck").hide();
                                    }
                                    else {
                                        $("#lblExplanation").text("Explanation");
                                        $("#tdCheck").hide();
                                    }
                                    $("#txtCheck").val(data[23].toString());

                                    $m("#lstPurposeCode option").each(function () {
                                        if ($(this).text() == data[29].toString()) {
                                            $(this).prop('selected', true).trigger('change');
                                        }
                                    });

                                    if (@Session["COMM_TYPE_ID"] == "19") {
                                        $("#divSuppOrOpps").show();
                                        $(".divSuppOrOpps .error").removeClass("error");
                                        $m("#lstSuppOrOpps option").each(function () {
                                            if ($(this).text() == data[59].toString()) {
                                                $(this).prop('selected', true).trigger('change');
                                            }
                                        });
                                    }
                                    else {
                                        $("#divSuppOrOpps").hide();
                                    }

                                    // PURPOSE CODE.
                                    if (data[29].toString() == "Other: Must Provide Explanation") {
                                        $("#lblExplanation").text("* Explanation");
                                    }

                                    $("#txtExplanationCommon").val(data[36].toString());
                                }
                                else if (results.toString() == "TRUE") {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'This outstanding original liability is linked with either Schedule F or Schedule K transaction(s). This cannot be edited', 'Ok', '');
                                } else {
                                    $("#divLoading").hide();
                                }
                            }).fail(function () {
                                $("#divLoading").hide();// GetOutstandingLiabilityExists failed.
                            });
                        }
                    }  // Other Schedules
                    else if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17", "18", "19", "20", "21"].includes(data[1].toString())) {
                         //Common code to determine redirect url and set session varialbes. Also hides $("#divLoading") on fail.
                         //Uses window.location.href
                         appCommonEFS_DetermineScheduleRedirect(data[1].toString(), data[42].toString());
                     }
                 }
                else {
                    //resultEditFlag != "TRUE"
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });

        //Delete - Start
        // Delete Record FILING TRANSACTIONS.
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_remove_Sched_N', function (e) {
            e.preventDefault();
            $("#divLiabilityDetailsGrid").hide();
            $("#divShowAllocation").hide();
            var dataTrans = tableFilingTransactions.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    $.post("@Url.Content("~/_UC_GridCommonControl/GetDeleteFlag/")", {
                    }, function (resultDeleteFlag) {
                        if (resultDeleteFlag == "True") {

                            // LOAN RECEIVED DELETE CHECK
                            $.post("@Url.Content("~/LoanReceivedSchedI/ValidateDelete_LoanReceived/")", {
                                loan_Lib_Number: dataTrans[41].toString(),
                            }, function (resultDeleteFlagSchedI) {

                                // CHECK THE VALIDATION IF ANY CONTRIBUTION REFUNDS (SCHEDULE 'M') EXISTS OR NOT.
                                // IF SCHEDULE 'M' EXISTS FOR EITHER SCHEDULE 'A', SCHEUDLE 'B', OR SCHEDULE 'C'...
                                // THEN SHOULD NOT DELETE UNTIL CHILD RECORDS DELETE.
                                $.post("@Url.Content("~/ContributionsCandIndFamily/ContributionsRefundSchedMExists/")", {
                                    strTransNumber: dataTrans[42].toString()
                                }, function (resultDelSchedABC) {

                                    // CHECK THE VALIDATION IF ANY EXPENDITURE REFUNDS (SCHEDULE 'L') EXISTS OR NOT.
                                    // IF SCHEDULE 'L' EXITS THEN SCHEDULE 'F' SHOULD NOT DELETE UNTLI CHILD DELETE ALL.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/ExpenditureRefundSchedLExists/")", {
                                        strTransNumber: dataTrans[42].toString()
                                    }, function (resultDelSchedF) {

                                        // BEFORE DELETING ORIGINAL LIABILITY IT SHOULD NOT LINK WITH ANY PAYMENTS OR FORGIVEN SCHEDULE F OR SCHECULE K
                                        // THEN WE CAN ABLE TO DELETE THE ORIGINAL LIABILITY TRANSACTION IF LINKED WITH PAYMENT/FORGIVEN THEN WE ARE NOT DELETING....
                                        $.post("@Url.Content("~/OutStandingLiabilityLoansSchedN/GetOutstandingLiabilityExists/")", {
                                            strTransNumber: dataTrans[42].toString(),
                                            strScheduleId: dataTrans[1].toString()
                                        }, function (resultSchedNExists) {
                                            var deleteData = {
                                                resultDeleteFlagSchedI: resultDeleteFlagSchedI,
                                                resultDelSchedABC: resultDelSchedABC,
                                                resultDelSchedF: resultDelSchedF,
                                                resultSchedNExists: resultSchedNExists
                                            }
                                            var resultsDelete = "Are you sure you want to delete this transaction?";
                                            var deleteURL = "";
                                            //Determine if you can delete
                                            var veredict = appCommonEFS_DetermineScheduleDelete(dataTrans, deleteData);
                                            if (!veredict || !bUtilIsObject(veredict)) {
                                                $("#divLoading").hide();
                                                return false;
                                            } else {
                                                var resultsDelete = veredict.alertMessageForOperation;
                                                var deleteURL = veredict.deleteURL;
                                            }

                                            $m('#modal_dialog').text(resultsDelete);
                                            $m("#modal_dialog").dialog({
                                                resizable: false,
                                                width: '400px',
                                                height: 'auto',
                                                bgiframe: false,
                                                modal: true,
                                                closeOnEscape: false,
                                                open: function (event, ui) {
                                                    $("#divLoading").hide();
                                                    hideDialogXButton(this);
                                                },
                                                buttons: {
                                                    "OK": function () {
                                                        //Close Confirm Box.
                                                        $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                                        // DELETE TRANSACTION.
                                                        var options = {};
                                                        options.url = deleteURL;
                                                        options.type = "GET";
                                                        options.data = {
                                                            strLoanLiabNumberOrg: dataTrans[41].toString(),
                                                            strTransNumber: dataTrans[42].toString(),
                                                            strRLiability: dataTrans[6].toString()
                                                        };
                                                        options.dataType = "json";
                                                        options.contentType = "application/json";
                                                        options.success = function (results) {
                                                            if (results) {
                                                                // Successfully Deleted.
                                                                window.status = "Transaction deleted successfully";

                                                                var doneFunction = function () {
                                                                    $("#divLoading").hide();
                                                                    ShowDialogBox('EFS', 'Transaction deleted successfully. The liability balance will automatically be adjusted on any subsequent disclosure reports with the add/edit/delete of this liability transaction. Make sure to submit all amended disclosure reports to show the liability balance accurately.', 'Ok', '');
                                                                }
                                                                // Refresh the Data on Grid... Hides the loading too!
                                                                GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                                                            }
                                                            else {
                                                                // SHOW MESSAGE SAYING THAT ORIGINAL ASSOCIATION IN FEATURE FILING...
                                                                // AND IN THAT FILING ONLY ONE RECROD SUBMITTED SO YOU CAN'T DELETE..
                                                                // LAST TRANSACTION SO YOU HAVE TO CONTACT BOARD OF ELECTION....
                                                                $("#divLoading").hide();
                                                                ShowDialogBox('EFS', 'The last transaction exists in feature Disclosure report, so you cannot be deleted.  To delete that Disclosure report, a deletion request must be submitted to cfinfo@elections.ny.gov ', 'Ok', '');
                                                            }
                                                        };
                                                        options.error = function () {
                                                            $("#divLoading").hide();
                                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                                        };
                                                        $.ajax(options);
                                                    },
                                                    "Cancel": function () {
                                                        $m(this).dialog("close");
                                                    }
                                                }
                                            });
                                        }).always(function () {//Allways hide at this level /GetOutstandingLiabilityExists/
                                            $("#divLoading").hide();
                                        });
                                    }).fail(function () {
                                        //Hide if we fail at ExpenditureRefundSchedLExists/
                                        $("#divLoading").hide();
                                    });
                                }).fail(function () {
                                    //Hide if we fail at ContributionsRefundSchedMExists/
                                    $("#divLoading").hide();
                                });
                            }).fail(function () {
                                //Hide if we fail at /ValidateDelete_LoanReceived/
                                $("#divLoading").hide();
                            });
                        }
                        else {//When resultDeleteFlag != "True"
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'The last transaction cannot be deleted.  To delete the Disclosure report, a deletion request must be submitted to cfinfo@elections.ny.gov', 'Ok', '');
                        }
                    }).fail(function () {
                        $("#divLoading").hide(); //Hide if we fail at /GetDeleteFlag/
                    });
                }
                else {//When GetEditFlag != "True"
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before removing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();//Hide if we fail at /GetEditFlag/
            });
        });
        //Delete - End

        $m("#btnUpdateDialog").button().on("click", function () {

            // UPDATE.
            $m('#DialogBoxSchedNForm').valid();
            if ($m('#DialogBoxSchedNForm').valid()) {
                // SHOW THE PROCESSING....
                $("#divLoading").show();
                $.post("@Url.Content("~/OutStandingLiabilityLoansSchedN/UpdateOutstandingLiabilitySchedN/")", {
                    strTransNumber: sessionStorage.getItem("FilingTransId").toString(),
                    strFilingEntId: sessionStorage.getItem("FilingEntityId").toString(),
                    txtDateRcvd: $m("#txtCurrentDateSchedN").val().toString(),
                    txtCreditorName: $m("#txtCreditorName").val(),
                    txtCountry: $m("#txtCountry").val(),
                    txtStreetName: $m("#txtStreetName").val(),
                    txtCity: $m("#txtCity").val(),
                    txtState: $m("#txtState").val(),
                    txtZipCode: $m("#txtZipCode").val(),
                    lstPurposeCode: $m("#lstPurposeCode option:selected").val(),
                    lstMethod: $m("#lstMethod option:selected").val(),
                    txtCheckOutstandingLiability: $m("#txtCheck").val(),
                    txtAmtOutstandingLiability: $m("#txtAmtSchedN").val(),
                    txtOutstandingAmt: $m("#txtOutstandingAmt").val(),
                    txtExplanationOutstandingLiability: $m("#txtExplanationCommon").val(),
                    lstFilingDate: $m("#lstFilingDate option:selected").text(),
                    txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                    txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                    chkCountry: $('#chkCountry').is(':checked').toString(),
                    lstElectionType: $("#lstElectionType option:selected").val(),
                    lstSuppOrOpps: $m("#lstSuppOrOpps option:selected").val()
                }, function (results) {
                    if (results.Errors == null) {
                        // Close Dialogbox.
                        dialog_SchedN.dialog("close");
                        // Saved
                        window.status = "Transaction saved successfully";
                        var doneFunction = function () {
                            $("#divLoading").hide();
                            $m("#btnClearDialog").trigger("click");  // clear out the form data
                            ShowDialogBox('EFS', 'Transaction saved successfully. The liability balance will automatically be adjusted on any subsequent disclosure reports with the add/edit/delete of this liability transaction. Make sure to submit all amended disclosure reports to show the liability balance accurately.', 'Ok', '');
                        }
                        // Refresh the Data on Grid... Hides the loading too!
                        GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                        $m('#gridFilingTransactions').DataTable().ajax.reload();
                        tableFilingTransactions.responsive.recalc();
                    } else if (results.Errors.length >= 0) {
                        $("#divLoading").hide();
                        ClearServerSideErrors(); // Server Side Validation Clear
                        AppendCustomErrorLabels(results.Errors);
                    }
                }).fail(function () {
                    $m("#divLoading").hide();//UpdateOutstandingLiabilitySchedN failed
                });
            }// IF VALIDATION FAILED.
            else {
                // HIDE THE PROCESSING....
                $("#divLoading").hide();
            }
        });

        // Purpose Code Change
        $("#lstPurposeCode").change(function (e) {

            if ($("#lstMethod option:selected").val().toString() == "7") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
            }
            else if ($("#lstPurposeCode option:selected").val().toString() == "8") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
            }
            else {
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("Explanation");

                $m("label[for=txtExplanationCommon]").text('');
                $m("#txtExplanationCommon").removeClass("error");
            }

            $m("label[for=txtExplanationCommon]").text('');
            $m("#txtExplanationCommon").removeClass("error");

        });

        $m("#btnClearDialog").button().on("click", function () {
            var validator = $m("#DialogBoxSchedNForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedNForm")[0].reset();   // clear out the form data

            $(".divWidthSchedABC .error").removeClass("error");

            $("#lblExplanation").text("Explanation");
            $("#txtCurrentDateSchedN").blur();
            $("#txtZipCode").blur();
            $("#txtAmtSchedN").blur();

            $("#txtCountry").val("United States");
            $("#txtCountry").prop("disabled", true);
            $("#chkCountry").prop('checked', false);
            $("#txtState").prop('maxLength', '2');
            $("#lstPurposeCode")[0].selectedIndex = 0;
            $("#lstMethod")[0].selectedIndex = 0;
            $("#tdCheck").hide();
            $("#txtCurrentDateSchedN").focus();
            $m("label[for=txtCurrentDateSchedN]").text('');
            $m("#txtCurrentDateSchedN").removeClass("error");
        });

        // Partnership Name Auto Complete.
        $m("#txtCreditorName").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/OutStandingLiabilityLoansSchedN/AutoCompleteEntityName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();
                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/OutStandingLiabilityLoansSchedN/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        // SESSION VALUE USER SELECTED NAME LIST OR NOT.
                        sessionStorage.setItem("ItemFound", "True");
                        $.each(results, function (i, item) {
                            $("#txtCreditorName").val(item.FilingEntityName.toString());
                            $("#txtStreetName").val(item.FilingEntityStreetName.toString());
                            $("#txtCity").val(item.FilingEntityCity.toString());
                            $("#txtState").val(item.FilingEntityState.toString());
                            $("#txtZipCode").val(item.FilingEntityZip.toString());
                            $("#txtCountry").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountry").val().toString() == "United States") {
                                $("#chkCountry").prop('checked', false);
                                $("#txtCountry").prop("disabled", true);
                                $("#txtState").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                    $("#txtZipCode").blur();
                                }
                            } else {
                                $("#chkCountry").prop('checked', true);
                                $("#txtCountry").prop("disabled", false);
                                $("#txtState").prop('maxLength', '30');

                                $m('#txtZipCode').attr("placeholder", "");
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            }
                            // Address validation
                            $m("#txtCountry").valid();
                            $m("#txtStreetName").valid();
                            $m("#txtCity").valid();
                            $m("#txtState").valid();
                            $m("#txtZipCode").valid();
                            $m("#txtCreditorName").valid();
                        });
                    }
                });
                $("#lstPurposeCode").focus();
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtCreditorName]").text('');
                    $m("#txtCreditorName").removeClass("error");
                }
                else {
                    $m("label[for=txtCreditorName]").text('');
                    $m("#txtCreditorName").removeClass("error");
                }
            }
        });

        // EDIT FILING TRANSACTIONS GRID - LIABILITY
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_LiabilitySchedF', function (e) {
            event.preventDefault();

            $("#divLoading").show();
            $("#divShowAllocation").hide();
            //$("#divShowLiability").hide();
            $("#divShowSubcontroctor").hide();
            $("#divShowReimbursement").hide();
            $("#divShowCreditCardPayment").hide();

            // SHOW THE LIABILITY DETAILS GRIDS.
            $("#divLiabilityDetailsGrid").show();

            var data = tableFilingTransactions.row($(this).parents('tr')).data();

            sessionStorage.setItem("LiabilityDetailsId", data[41].toString());

            //=========================================================================================================================================
            // LOAD ORIGINAL SCHEDULE 'N' TRANSACTION.
            tableLiabDetOriginalSchedN = $m('#gridExpPayOrgLiab').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayOrgLiab').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": "@Url.Content("~/ExpenditurePaymentsSchedF/GetOriginalLiabilityData/")",
                        "data": {
                            strTransNumber: sessionStorage.getItem("LiabilityDetailsId").toString()
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                        }
                    });
                }
            });
            $m('#gridExpPayOrgLiab').DataTable().ajax.reload();
            tableLiabDetOriginalSchedN.search('').columns().search('').draw();
            tableLiabDetOriginalSchedN.columns.adjust().responsive.recalc();
            tableLiabDetOriginalSchedN.responsive.recalc();
            // LOAD ORIGINAL SCHEDULE 'N' TRANSACTION.
            //=========================================================================================================================================

            //=========================================================================================================================================
            // LOAD EXPENDITURE PAYMENT SCHEDULE 'F' TRANSACTION.
            tableExpPaySchedF = $m('#gridExpPayPayments').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayOrgLiab').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": "@Url.Content("~/ExpenditurePaymentsSchedF/GetExpenditurePaymentLiabilityData/")",
                        "data": {
                            strTransNumber: sessionStorage.getItem("LiabilityDetailsId").toString()
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                        }
                    });
                }
            });
            $m('#gridExpPayPayments').DataTable().ajax.reload();
            tableExpPaySchedF.search('').columns().search('').draw();
            tableExpPaySchedF.columns.adjust().responsive.recalc();
            tableExpPaySchedF.responsive.recalc();
            // LOAD EXPENDITURE PAYMENT SCHEDULE 'F' TRANSACTION.
            //=========================================================================================================================================
            //=========================================================================================================================================
            // LOAD OUTSTANDING LIABILITY SCHEDULE 'N' TRANSACTIONS.
            tableOutLiabSchedN = $m('#gridExpPayOutstandingLiab').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayOutstandingLiab').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": "@Url.Content("~/ExpenditurePaymentsSchedF/GetOutstandingLiabilityData/")",
                        "data": {
                            strTransNumber: sessionStorage.getItem("LiabilityDetailsId").toString()
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                        }
                    });
                }
            });
            $m('#gridExpPayOutstandingLiab').DataTable().ajax.reload();
            tableOutLiabSchedN.search('').columns().search('').draw();
            tableOutLiabSchedN.columns.adjust().responsive.recalc();
            tableOutLiabSchedN.responsive.recalc();
            // LOAD OUTSTANDING LIABILITY SCHEDULE 'N' TRANSACTIONS.
            //=========================================================================================================================================

            //=========================================================================================================================================
            // LOAD OUTSTANDING LIABILITY FORGIVEN SCHEDULE 'K' TRANSACTION.
            tableLiabForgivenSchedK = $m('#gridExpPayLiabForgiven').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayLiabForgiven').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    $.ajax({
                        "url": "@Url.Content("~/ExpenditurePaymentsSchedF/GetLiabilityForgivenData/")",
                        "data": {
                            strTransNumber: sessionStorage.getItem("LiabilityDetailsId").toString()
                        },
                        "success": callback,
                        "dataType": "json",
                        "type": "POST",
                        "error": function () {
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                        }
                    });
                }
            });
            $m('#gridExpPayLiabForgiven').DataTable().ajax.reload();
            tableLiabForgivenSchedK.search('').columns().search('').draw();
            tableLiabForgivenSchedK.columns.adjust().responsive.recalc();
            tableLiabForgivenSchedK.responsive.recalc();
            // LOAD OUTSTANDING LIABILITY FORGIVEN SCHEDULE 'K' TRANSACTION.
            //=========================================================================================================================================
            $('html, body').animate({ scrollTop: $("#divLiabilityDetailsGrid").offset().top }, 500);

        });

        //==============================================================================================================================================
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //Bind Clear Click
        $(".clsCommonClear").bind('click', function () {
            $("#divGridMonetary").show();
            sessionStorage.setDataTable = "true";
            $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
            $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");

            sessionStorage.setItem("FilerId", $("#txtFilerID option:selected").val());
            sessionStorage.setItem("CommitteeName", $("#txtCommitteeName option:selected").val());
            sessionStorage.setItem("ElectionCycle", $("#lstElectionCycle option:selected").val());
            sessionStorage.setItem("ElectionType", $("#lstElectionType option:selected").val());
            sessionStorage.setItem("ElectionDate", $("#lstElectionDate option:selected").val());
            sessionStorage.setItem("DisclosureType", $("#lstDisclosureType option:selected").val());
            sessionStorage.setItem("DisclosurePeriod", $("#lstDisclosurePeriod option:selected").val());
            sessionStorage.setItem("CutOffDate", $("#txtReportPeriodDatesFrom").val());
            if ($("#lstElectionType option:selected").val() == "6") {
                sessionStorage.setItem("FilingDate", $("#txtNewFilingDate").val());
            }
            else {
                sessionStorage.setItem("FilingDate", $("#txtReportPeriodDatesTo").val());
            }
            sessionStorage.setItem("TransactionType", $("#lstTransactionType option:selected").val());
            sessionStorage.setItem("lstResigTermType", $("#lstResigTermType option:selected").val());
            sessionStorage.setItem("lstFilingDate", $("#lstFilingDate option:selected").val());

            sessionStorage.setItem("TransactionTypeId", "true");

            var urlContrHome = "@Url.Content("~/ContributionsMonetary/ContributionsMonetary/")";

            window.location.href = urlContrHome;
        });
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //==============================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        tableFilingTransactions = $m('#gridFilingTransactions').DataTable({
            "bProcessing": true,
            "responsive": true,
            "deferRender": true,
            "retrieve": true,
            "columnDefs": [
                {
                    "targets": [0, 1, 2, 3, 4, 5, 6, 7, 38, 39, 41, 42, 43, 44],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [9],
                    "fnCreatedCell": function (cell) {
                        cell.setAttribute('aria-label', "Row Actions");
                    }
                }
            ],
            "initComplete": function (settings, json) {
                //Accessibility: Applies various Accessibility features to this dataTable.
                makeDataTableAccessible($m('#gridFilingTransactions').DataTable());
            },
            "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                if (aaData[1].toString() == "14") {
                    if ((aaData[24].toString() == aaData[25].toString()) && (aaData[6].toString() == "Y")) {
                        // CHECK HERE IF ITS AUTO CREATED FROM PREVIOUS FILING...
                        // THEN WE SHOULD NOT SHOW EDIT/DELETE BUTTONS SHOULD NOT SHOW.
                        // IF ITS ORIGINAL CREATED IN SAME FILING THEN IT WILL SHOW...
                        // EDIT/DELETE BUTTONS.
                        $.post("@Url.Content("~/OutStandingLiabilityLoansSchedN/LiabilityPrevFlngsOrgAutoCreatedExts/")", {
                            strTransNumber: aaData[42].toString(),
                            strFilingsId: aaData[44].toString()
                        }, function (results) {
                            if (results.toString() == "TRUE") {
                                if (aaData[1] == "14" && aaData[6] == "Y") {
                                    if (aaData[24] != aaData[25]) {
                                        if (aaData[59] == "Yes") {
                                            $m('td:eq(1)', nRow).html('<a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                        }
                                        else {
                                            $m('td:eq(1)', nRow).html('<a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>');
                                        }
                                    }
                                    else if (aaData[24] == aaData[25]) {
                                        if (aaData[59] == "Yes") {
                                            $m('td:eq(1)', nRow).html('<a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                        }
                                        else {
                                            $m('td:eq(1)', nRow).html('<a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>');
                                        }
                                    }
                                }
                                else {
                                    if (aaData[1] == "14" && aaData[59] == "Yes") {
                                        $m('td:eq(1)', nRow).html('<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                    }
                                    else {
                                        $m('td:eq(1)', nRow).html('');
                                    }
                                    
                                }
                            }
                            else {
                                if (aaData[1] == "14" && aaData[6] == "Y") {
                                    if (aaData[24] != aaData[25]) {
                                        if (aaData[59] == "Yes") {
                                            $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                        }
                                        else {
                                            $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>');
                                        }
                                    }
                                    else if (aaData[24] == aaData[25]) {
                                        if (aaData[59] == "Yes") {
                                            $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                        }
                                        else {
                                            $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>');
                                        }

                                    }
                                }
                                else {
                                    if (aaData[1] == "14" && aaData[59] == "Yes") {
                                        $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                    }
                                    else
                                    {
                                        $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                                    }
                                }
                            }
                        });
                    }
                    else {
                        // ADD FOR LEGACY LOAN OUTSTANDING RECORD WE HAVE TO ADD DELETE BUTTON.
                        // R_LIABILITY = N & LOAN_LIAB_NUMBER = NULL & TRANS_MAPPING = NULL
                        // THEN IT SHOULD BE LEGACY RECORD THEN WE HAVE TO ADD DELETE BUTTON.
                        // AS DISCUSSED, ON 03.23.2021 REMOVED THE CONDITION TO CHECK...
                        // ORIGINAL AMOUNT EAUQAL TO OUTSTANDING AMOUNT CONDITION REMOVED FOR LOAN OUTSTANDING SCHEDULE N RECORDS.
                        if (aaData[6].toString() == "N") {
                            if (aaData[41].toString() == "" && aaData[43].toString() == "") {
                                if (aaData[1] == "14" && aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html('<a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                }
                                else {
                                    $m('td:eq(1)', nRow).html('<a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                                }
                                
                            }
                            else {
                                if (aaData[1] == "14" && aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html('<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                                }
                                else {
                                    $m('td:eq(1)', nRow).html('');
                                }
                            }
                        }
                        else {
                            if (aaData[1] == "14" && aaData[59] == "Yes") {
                                $m('td:eq(1)', nRow).html('<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                            }
                            else {
                                $m('td:eq(1)', nRow).html('');
                            }
                        }

                    }
                }
                else if (aaData[1] == "11") { // LIABILITY/LOANS FORGIVEN
                    $m('td:eq(1)', nRow).html('<a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                }
                else {
                    if (aaData[1] != "15") {
                        if (aaData[1] == "14" && aaData[59] == "Yes") {
                            $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                        }
                        else {
                            $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                        }
                    }
                    else { // SCHEDULE 15 LEGACY DATA NOT EDIT NO ADD ONLY DELETE.
                        if (aaData[1] == "14" && aaData[59] == "Yes") {
                            $m('td:eq(1)', nRow).html('<a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>&nbsp;&nbsp;<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>');
                        }
                        else {
                            $m('td:eq(1)', nRow).html('<a class="editor_remove_Sched_N" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                        }
                    }
                }
                return nRow;
            },
            "fnDrawCallback": function () {
                $("#divLoading").hide();
            },
            "fnServerData": function (url, data, callback) {
                //Bind Grid hides the loading too!
                GetAllTransactionTypesData(false, callback, false, false);
            }
        });
        tableFilingTransactions.columns.adjust().draw(true);
        $m('#gridFilingTransactions').DataTable().ajax.reload();
        if (@Session["COMM_TYPE_ID"] == "23") {
                tableFilingTransactions.column(46).visible(true);
                tableFilingTransactions.column(47).visible(true);
                tableFilingTransactions.column(48).visible(true);
                tableFilingTransactions.column(49).visible(true);
                tableFilingTransactions.column(50).visible(true);
                tableFilingTransactions.column(51).visible(true);
                tableFilingTransactions.column(52).visible(true);
                tableFilingTransactions.column(53).visible(true);
                tableFilingTransactions.column(54).visible(true);
            }
            else {
                tableFilingTransactions.column(46).visible(false);
                tableFilingTransactions.column(47).visible(false);
                tableFilingTransactions.column(48).visible(false);
                tableFilingTransactions.column(49).visible(false);
                tableFilingTransactions.column(50).visible(false);
                tableFilingTransactions.column(51).visible(false);
                tableFilingTransactions.column(52).visible(false);
                tableFilingTransactions.column(53).visible(false);
                tableFilingTransactions.column(54).visible(false);
        }

        if (@Session["COMM_TYPE_ID"] == "19") {
                tableFilingTransactions.column(55).visible(true);
            }
            else {
                tableFilingTransactions.column(55).visible(false);
        }

        tableFilingTransactions.columns.adjust().draw(false);
        tableFilingTransactions.order([40, 'desc']).draw();
        tableFilingTransactions.columns.adjust().responsive.recalc();

        //Common Code for Set Preferences - Start
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------
        $('#btnSetPreferences').click(function () {
            $("#divLoading").show();
            var options = {};
            options.url = "@Url.Content("~/_UC_GridCommonControl/UpdateColumnValue/")";
            options.type = "GET";
            options.data = {
                uniqueValue: $m("#ddlViewableColumn").multipleSelect("getSelects").toString()
            };
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                window.status = "Transaction saved successfully";
                //Bind Grid hides the loading too!
                GetAllTransactionTypesData(true, tableFilingTransactions, false, false);
                HideColumn($m("#ddlViewableColumn").multipleSelect("getSelects", "text").toString().split(","));
                $("#divLoading").hide();
            };
            options.error = function () {
                $("#divLoading").hide();
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ?(518) 474-8200 ', 'Ok', '');
            };
            $.ajax(options);
        });


        $.post("@Url.Content("~/_UC_GridCommonControl/GetSortName/")", {
        }, function (results) {
            HideColumn(results.toString().split(","));
        });

        function HideColumn(results) {
            var rules = {
                "indexesToStartHidden": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
                "indexesToAlwaysKeepUnhidden": [8, 9], //Will always unhide.
                "columnNamesToUnhide": results,//String to match.
                "columnNamesIndexMappings": appCommonEFS_GetGridColumnSettings("UC_GridCommonControl") //String in header, index to unhide
            }
            appCommonEFS_HideTableColumn(tableFilingTransactions, rules);
        }

        /**
        * Appends label text to _validate elementys based on a list of custom errors returned from the server.
        * It won't do anyting to handle "AmmountError" keys but it will return true if it sees one in the list.
        * param {reuslt.Errors} errorList
        * Replaces this type of code basically:
        for (var i = 0; i < results.Errors.length; i++) {
            if (results.Errors[i].Key == "txtPartAmt") {
                $("#txtPartAmtSchedD_validate").append('<label for="txtPartAmtSchedD" class="error">' + results.Errors[i].Value + '</label>');
            }
            if (results.Errors[i].Key == "txtPartExplanationInKind") {
                $("#txtPartExplanationInKind_validate").append('<label for="txtPartExplanationInKind" class="error">' + results.Errors[i].Value + '</label>');
            }
            if (results.Errors[i].Key == "AmountError") {
                ShowDialogBox('EFS', 'Partnership Amount cannot be more than Outstanding Amount $' + parseFloat(expPartAmount).toFixed(2).toString(), 'Ok', '');
            }
        }
        */
        function AppendCustomErrorLabels(errorList) {
            //Define special error conditions
            var errorLabelDiscrepancies = new Map([["txtAmt", "txtAmtSchedN"]]);
            return appCommonEFS_AppendCustomErrorLabelsForAmmountError(errorList, errorLabelDiscrepancies);
        }

        //Commonly used values in this particular page.
        function GetTableFilingTransactionsAjaxOptionsData() {
            return {
                txtFilerID: $("#txtFilerID").val(),
                lstElectionCycle: $("#lstElectionCycle option:selected").val(),
                lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                lstElectionType: $("#lstElectionType option:selected").val(),
                lstElectionDateId: $("#lstElectionDate option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }
        }

        /**Common code for invoking GetAllTransactionTypesData from controller.
         * reloadAndRecalc { boolean } reloads and recalculates the table. When we reload we will display the "divLoading" image until the ajax reload call is completed. This was created for ALM Defect 707 where users were intertacting with the table while the "Processing..." text was still visible.
         * dataTableInstanceToReload { function } The referecne to the datatable we will reload in the success callback..
         * dataOverides { ajax data params } pass to overwrite data values when making ajax call.
         * doneFunction { function } A function to be called if the ajax call is completed.
         */
        function GetAllTransactionTypesData(reloadAndRecalc, dataTableInstanceToReload, dataOverides, doneFunction) {
            var callback = dataTableInstanceToReload ? dataTableInstanceToReload : tableFilingTransactions;
            //Determine what data to use.
            var optionsData = bUtilIsObject(dataOverides) ? dataOverides : GetTableFilingTransactionsAjaxOptionsData();
            appCommonEFS_GetAllTransactionTypesDataCommon(reloadAndRecalc, callback, optionsData, doneFunction);
        }
        //Common Code for Set Preferences - End
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------

        function ClearServerSideErrors() {
            //removing error class and error messages in search form
            $("#txtCurrentDate_validate").empty();
            $("#lstContributionName_validate").empty();
            $("#txtPartnerShipName_validate").empty();
            $("#txtFirstName_validate").empty();
            $("#txtMI_validate").empty();
            $("#txtLastName_validate").empty();
            $("#txtCountry_validate").empty();
            $("#txtStreetName_validate").empty();
            $("#txtCity_validate").empty();
            $("#txtState_validate").empty();
            $("#txtZipCode_validate").empty();
            $("#txtCheck_validate").empty();
            $("#txtAmtSchedN_validate").empty();
            $("#txtExplanation_validate").empty();
        }

        /**Common function
         * Used to clear the erros in the creditcard payment dialog box. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsAmountAllocationSchedRDialogBox() {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtCurrentDateAllocatedSchedR",
                "txtLenderFirstName",
                "txtLenderMIName",
                "txtLenderLastName",
                "txtAmtExpensesAllocation",
                "txtAmtAllReport",
                "txtExplanationCommonScheR"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }

        $m('#gridFilingTransactions tbody').on('click', 'tr', function (e) {
            if ($(this).hasClass('selected') != true) {
                tableFilingTransactions.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }
        });

        // EDIT FILING TRANSACTIONS GRID - AMOUNT ALLOCATION SCHED-R
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_AmountAllocationSchedR', function (e) {
            e.preventDefault();

            $("#divShowLiability").hide();
            $("#divShowSubcontroctor").hide();
            $("#divShowReimbursement").hide();
            $("#divLiabilityDetailsGrid").hide();

            $("#divShowCreditCardPayment").hide();
            $("#gridCreditCardPaymentSchedF").hide();

            $("#divShowAllocation").show();

            // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
            sessionStorage.removeItem("WithoutDetailsClose");
            sessionStorage.setItem("HideDetailsGrids", "Yes");

            $("#btnSaveSchedF").val("Save");

            var dataTransReim = tableFilingTransactions.row($(this).parents('tr')).data();
            
            // Original Payee Name Credit Card Payment
            sessionStorage.setItem("PayeeNameReimCCI", dataTransReim[13].toString());
            sessionStorage.setItem("SchedFPopuUpCloseMessageCCI", "No");
            sessionStorage.setItem("CCITransID", dataTransReim[42].toString());
            sessionStorage.setItem("FilingTransIdReim", dataTransReim[42].toString());
            sessionStorage.setItem("FilingSchedId", dataTransReim[1].toString());
            sessionStorage.setItem("FilingSchedDate", dataTransReim[10].toString());
            sessionStorage.setItem("CreditCardPayOrgAmt", dataTransReim[24].toString());
            sessionStorage.setItem("TransactionID", dataTransReim[42].toString());            
            
            // AMOUNT ALLOCATION FOR SCHED-R FOR SCHEDULE 'F' TRANSACTIONS.
            tableAmountAllocationSchedR = '';
            tableAmountAllocationSchedR = $m('#gridAmountAllocationSchedR').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [4],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridAmountAllocationSchedR').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    $m('td:eq(1)', nRow).html('<a class="editor_edit_AmountAllocationSchedR" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_AmountAllocationSchedR" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetFilingTransSchedR_ChildData/")",
                        {
                            strTransNumberReimb: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                        },
                        callback);
                },
                "order": [[0, "desc"]]
            });
            $m('#gridAmountAllocationSchedR').DataTable().ajax.reload();
            tableAmountAllocationSchedR.search('').columns().search('').draw();
            tableAmountAllocationSchedR.columns.adjust().responsive.recalc();
            tableAmountAllocationSchedR.responsive.recalc();

            $('html, body').animate({ scrollTop: $("#divShowAllocation").offset().top }, 400);
        });

         // Schedule 'F' - Amount Allocation Sched-R
        function ClearDialogBoxValidationSchedR() {

            // Clear Form Validation. Schedule 'D'
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
            $("#txtAmtAllReport").prop("disabled", true);

            // Set the default values for form.
            $("#lstDiaSupportOppose")[0].selectedIndex = 0;
            $("#lstAllocationExisting")[0].selectedIndex = 0;
            $("#lstElectionCycleAllocated")[0].selectedIndex = 0;
            $("#lstOffice")[0].selectedIndex = 0;
            $("#lstDistrict")[0].selectedIndex = 0;

            // Set the default values for form.
            $("#txtCurrentDateAllocatedSchedR").blur();
            $("#txtAmtExpensesAllocation").blur();
        }

        $("#tdDistrict").hide();
        $("#txtAmtAllReport").prop("disabled", true);

        $m("#btnAddNewAllocation").button().on("click", function () {
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                 txtFilerId: $("#txtFilerID").val(),
                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                 txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
             }, function (resultEditFlag) {
                 if (resultEditFlag == "TRUE") {
                     sessionStorage.setItem("ValidateAutoComplete", "false");
                     var validator = $m("#DialogBoxSchedRForm").validate();
                     validator.resetForm();  // clear out the validation errors
                     $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                     sessionStorage.setItem("AddEditCloseStatus", "Add");                     

                     $(".divWidthSchedABC .error").removeClass("error");
                     sessionStorage.setItem("AmountEdit", "ADD");
                     $("#btnUpdateDialogSchedR").hide();
                     $("#btnAddDialogSchedR").show();
                     $("#btnClearDialogSchedR").show();
                     $("#btnClearDialogEditSchedR").hide();
                     $("#txtCurrentDateAllocatedSchedR").blur();
                     $("#txtAmtExpensesAllocation").blur();
                     //$("#txtCurrentDateAllocatedSchedR").focus();
                     $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                     $m("#txtCurrentDateAllocatedSchedR").removeClass("error");

                     $("#lstAllocationExisting").prop("disabled", false);
                     $("#txtLenderFirstName").prop("disabled", false);
                     $("#txtLenderMIName").prop("disabled", false);
                     $("#txtLenderLastName").prop("disabled", false);
                     $("#lstElectionCycleAllocated").prop("disabled", false);
                     $("#lstOffice").prop("disabled", false);
                     $("#lstDistrict").prop("disabled", false);
                     $("#tdDistrict").hide();
                     $("#dvIsAllocationExist").show();
                     $("#divAmountAllReport").show();
                } else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before adding this Transaction.', 'Ok', '');
                }
            });
        });

        $m("#btnCloseDialogSchedR").button().on("click", function () {
            var valid = true;
            if (sessionStorage.getItem("AddEditCloseStatus") != null) {
                if (sessionStorage.getItem("AddEditCloseStatus").toString() == "Edit") {
                    if ($("#txtCurrentDateAllocatedSchedR").val().toString().length >= 1
                        || $("#txtLenderFirstName").val().toString().length >= 1
                        || $("#txtLenderMIName").val().toString().length >= 1
                        || $("#txtLenderLastName").val().toString().length >= 1
                        || $("#lstOffice option:selected").val().toString() != "0"
                        || $("#lstDistrict option:selected").val().toString() != "0"
                        || $("#txtAmtExpensesAllocation").val().toString().length >= 1
                        || $("#txtExplanationCommonScheR").val().toString().length >= 1) {
                        valid = false;
                    }
                }
            }
            if (valid) {
                dialog.dialog("close");
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
            } else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?";

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "Ok": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the DialogBox
                            dialog.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
            }

        });

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDateAllocatedSchedR").focusout(function () {
            if ($("#txtCurrentDateAllocatedSchedR").val().toString() != "") {
                if ($("#txtCurrentDateAllocatedSchedR").val().toString() != "MM/DD/YYYY") {
                    var results = GetValidDateForCommon("txtCurrentDateAllocatedSchedR", "Transferred");

                    if (results == "") {
                        var MyDate = new Date($("#txtCurrentDateAllocatedSchedR").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDateAllocatedSchedR").val("");
                        $("#txtCurrentDateAllocatedSchedR").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDateAllocatedSchedR").addClass("watermarkHTMLTextBox");
            }
        });
        // DATE FORMATE....



         /////////////////////////////////////////////////////////////////////////////////////
        $("#btnAddDialogSchedR").click(function (e) {
            $m('#DialogBoxSchedRForm').valid();
            if ($m('#DialogBoxSchedRForm').valid()) {
                 $m("#divLoading").show();
                 ////////////////////////////// DETERMINE IF A SCHEDULE R ALREADY EXISTS ////////////////////////////////////////////////////
                 var url = '@Url.Action("ScheduleRAlreadyExists", "ExpensesAllocationScheR")';
                 $.post(url, {
                     strFirstName: $m("#txtLenderFirstName").val().toString(),
                     strLastName: $m("#txtLenderLastName").val().toString(),
                     strMiddleName: $m("#txtLenderMIName").val().toString(),
                     strElectionYearID: $m("#lstElectionCycleAllocated option:selected").val(),
                     strOfficeID: $m("#lstOffice option:selected").val(),
                     strDistrictID: $m("#lstDistrict option:selected").val(),
                     strAllocationExists: $m("#lstAllocationExisting option:selected").val(),
                     validateCheck: sessionStorage.getItem("ValidateAutoComplete").toString()
                 }, function (resultsVal) {   
                        ///////////////////////// DO THE INSERT IF THERE IS NO EXISTING SCHEDULE R //////////////////////////////
                     if (resultsVal == "NO") {                         
                             var url = '@Url.Action("AddExpensesAllocationScheRData", "ExpensesAllocationScheR")';
                             $.post(url, {
                                 txtFilerId: $("#txtFilerID").val(),
                                 strFilingSchedId: $m("#lstTransactionType option:selected").val(),
                                 strFilingSchedDate: $m("#txtCurrentDateAllocatedSchedR").val().toString(),
                                 strFlngEntFirstName: $m("#txtLenderFirstName").val().toString(),
                                 strFlngEntMiddleName: $m("#txtLenderMIName").val().toString(),
                                 strFlngEntLastName: $m("#txtLenderLastName").val().toString(),
                                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                                 lstElectYear: $m("#lstElectionCycleAllocated option:selected").text(),
                                 lstOfficeID: $m("#lstOffice option:selected").val(),
                                 lstDistrictID: $m("#lstDistrict option:selected").val(),
                                 strOrgAmt: $m("#txtAmtExpensesAllocation").val().toString(),
                                 strTransExplanation: $m("#txtExplanationCommonScheR").val().toString(),
                                 lstFilingEntId: "",
                                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                                 strFilingDate: $m("#txtReportPeriodDatesTo").val().toString(),
                                 txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                                 electionDateId: $m("#lstElectionDate").val(),
                                 lstResigTermType: $m("#lstResigTermType option:selected").val(),
                                 txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                                 lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                                 lstDiaSupportOppose: $m("#lstDiaSupportOppose option:selected").val(),
                                 parentTranID: sessionStorage.getItem("TransactionID").toString()
                             }, function (results) {
                                 if (results.Errors == null) {
                                     if (results == "Custom Error") {
                                         $m("#divLoading").hide();
                                         ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                                         window.location.reload();
                                     } else {
                                         if (results == "0") {
                                             $m("#divLoading").hide();
                                             ShowDialogBox('EFS', 'System Error Found. Please try again.', 'Ok', '');
                                             window.location.reload();
                                         } else {
                                             results = "Custom Error";
                                             window.status = "Transaction saved successfully";
                                             sessionStorage.setItem("ValidateAutoComplete", "false");
                                             $("#txtLenderMIName").prop("disabled", false);
                                             $("#txtLenderLastName").prop("disabled", false);
                                             $('#lstElectionCycleAllocated').attr('disabled', false);
                                             $('#lstOffice').attr('disabled', false);
                                             $('#lstDistrict').attr('disabled', false);

                                             var validator = $m("#DialogBoxSchedRForm").validate();
                                             validator.resetForm();  // clear out the validation errors
                                             $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                                             $(".divWidthSchedABC .error").removeClass("error");

                                             //$("#txtCurrentDateAllocatedSchedR").blur();
                                             //$("#txtAmtExpensesAllocation").blur();
                                             $("#lblExplanation").text("Explanation");
                                             $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                                             //$m("#txtCurrentDateAllocatedSchedR").removeClass("error");
                                             //$("#txtCurrentDateAllocatedSchedR").focus();
                                             $("#lstAllocationExisting")[0].selectedIndex = 0;
                                             $("#tdDistrict").hide();
                                             $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                                             $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
                                             var doneFunction = function () {
                                                 $m("#divLoading").hide();
                                                 ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                             };
                                             // Refresh the Data on Grid... Hides the loading too!
                                             GetAllTransactionTypesData(true, tableAmountAllocationSchedR, false, doneFunction);
                                         }
                                     }
                                 } else if (results.Errors.length >= 0) {
                                     $m("#divLoading").hide();//AddExpensesAllocationScheRData failed.
                                     ClearServerSideErrors(); // Server Side Validation Clear
                                     appCommonEFS_AppendCustomErrorLabelsForAmmountError(results.Errors, false);
                                 }
                             }).fail(function () {
                                 $m("#divLoading").hide();//AddExpensesAllocationScheRData failed.
                             });
                         }
                         else if (resultsVal == "DUPLICATE") {
                             //The resultsVal could also be "DPULICATE" or "EXISTS" but we don't treat each case differently right now.
                             $m("#divLoading").hide();
                             // IF THERE WAS ALREADY AN ELECTION FOR THAT DATE, PRESENT DIALOG AND EXIT
                             ShowDialogBox('EFS', 'Schedule R has already filed for the entered combination. Either enter new allocation or select Yes in the Is Allocation Existing question', 'Ok', '');
                         }
                         else {
                             //The resultsVal could also be "DPULICATE" or "EXISTS" but we don't treat each case differently right now.
                             $m("#divLoading").hide();
                             // IF THERE WAS ALREADY AN ELECTION FOR THAT DATE, PRESENT DIALOG AND EXIT
                             ShowDialogBox('EFS', 'Name entered is not available in database. Either enter an existing name or change "Is Allocation Existing?" to "No"', 'Ok', '');
                         }
                }).fail(function () {
                    $m("#divLoading").hide();//ScheduleRAlreadyExists Failed.
                    ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                });
             }
         });
         /////////////////////////////////////////////////////////////////////////////////////

        function ClearServerSideErrors() {
            //removing error class and error messages in search form
            $("#txtCurrentDateAllocatedSchedR_validate").empty();
            $("#txtLenderFirstName_validate").empty();
            $("#txtLenderMIName_validate").empty();
            $("#txtLenderLastName_validate").empty();
            $("#txtAmtExpensesAllocation_validate").empty();
            $("#txtExplanationCommonScheR_validate").empty();
        }

        // EDIT COMMON SCHED-R ...................
        //...............................................................................................................
        $m('#gridAmountAllocationSchedR tbody').on('click', 'a.editor_edit_AmountAllocationSchedR', function (e) {
            event.preventDefault();
            var data = tableAmountAllocationSchedR.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    //if (data[1].toString() == "18") { // Schedule R
                        var validator = $m("#DialogBoxSchedRForm").validate();
                        validator.resetForm();  // clear out the validation errors
                        $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                        $(".divWidthSchedABC .error").removeClass("error");
                        //$("#txtCurrentDateAllocatedSchedR").focus();

                    dialog.dialog("open");
                        sessionStorage.setItem("AddEditCloseStatus", "Edit");
                        $("#lstAllocationExisting")[0].selectedIndex = 1;
                        $("#dvIsAllocationExist").hide();
                    $("#btnUpdateDialogSchedR").show();
                    $("#btnAddDialogSchedR").hide();
                    $("#btnClearDialogSchedR").hide();
                    $("#btnClearDialogEditSchedR").show();
                        sessionStorage.setItem("TransNumber", data[1].toString());
                    sessionStorage.setItem("FilingEntityId", data[2].toString());

                    $m("#lstDiaSupportOppose option").each(function () {
                        if ($(this).text() == data[5].toString()) {
                            $(this).prop('selected', true).trigger('change');
                        }
                    });

                        $("#txtCurrentDateAllocatedSchedR").val(data[6].toString());
                        $("#txtCurrentDateAllocatedSchedR").removeClass("watermarkHTMLTextBox");
                        if (data[6].toString() != "" || data[6].toString() != null) {
                            var MyDate = new Date($("#txtCurrentDateAllocatedSchedR").val().toString());
                            var MyDateString;
                            MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                + ('0' + MyDate.getDate()).slice(-2) + '/'
                                + MyDate.getFullYear();
                            $("#txtCurrentDateAllocatedSchedR").val("");
                            $("#txtCurrentDateAllocatedSchedR").val(MyDateString);
                            $("#txtCurrentDateAllocatedSchedR").removeClass("watermarkHTMLTextBox");
                        }


                        //$("#txtCurrentDateAllocatedSchedR").focus();

                        $("#txtLenderFirstName").val(data[7].toString());
                        $("#txtLenderMIName").val(data[8].toString());
                        $("#txtLenderLastName").val(data[9].toString());

                        var originalAmount = data[10].toString();
                        $("#txtAmtExpensesAllocation").val(originalAmount);
                        if ($("#txtAmtExpensesAllocation").val().toString() != "" || $("#txtAmtExpensesAllocation").val().toString() != "999999999.99") {
                            $("#txtAmtExpensesAllocation").removeClass("watermarkHTMLTextBox");
                        }
                        $("#divAmountAllReport").show();

                        $m("#lstElectionCycleAllocated option").each(function () {
                            if ($(this).text() == data[11].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });

                    $m("#lstOffice option").each(function () {
                        if ($(this).text() == data[12].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });

                        if (data[13].toString() == '') {
                            data[13] = 'None';
                        }

                        sessionStorage.setItem("districtData", data[13].toString());
                        $m("#lstDistrict option").each(function () {
                            if ($(this).val() == data[13].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });
                        $("#txtExplanationCommonScheR").val(data[14].toString());
                        sessionStorage.setItem("AmountEdit", "EDIT");
                    $.post("@Url.Content("~/ExpensesAllocationScheR/CaluclateAllAmount/")", {
                        firstName: $("#txtLenderFirstName").val(),
                        middleName: $("#txtLenderMIName").val(),
                        lastName: $("#txtLenderLastName").val(),
                        electYear: $m("#lstElectionCycleAllocated option:selected").text(),
                        officeID: $m("#lstOffice option:selected").val(),
                        distID: data[13].toString()
                    }, function (result) {
                        if (result != "") {
                            var amtVal = parseFloat(result);
                            if (amtVal == Math.floor(amtVal)) {
                                amtVal = amtVal + ".00";
                                $m("#txtAmtAllReport").val(amtVal);
                            }
                            else {
                                $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                            }

                            sessionStorage.setItem("txtAmtAllReportEdit", result);
                            sessionStorage.setItem("txtAmtEdit", $("#txtAmtExpensesAllocation").val());
                        }
                    }).always(function () {
                        $("#divLoading").hide();
                    });

                    $("#lstAllocationExisting").prop("disabled", true);
                    $("#txtLenderFirstName").prop("disabled", true);
                    $("#txtLenderMIName").prop("disabled", true);
                    $("#txtLenderLastName").prop("disabled", true);
                    $("#lstElectionCycleAllocated").prop("disabled", true);
                    $("#lstOffice").prop("disabled", true);
                    $("#lstDistrict").prop("disabled", true);
                    $("#txtAmtAllReport").prop("disabled", true);

                    //} // Other Schedules
                    //else if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17", "18", "19", "20", "21"].includes(data[1].toString())) {
                    //    //Common code to determine redirect url and set session varialbes. Also hides $("#divLoading") on fail.
                    //    //Uses window.location.href
                    //    appCommonEFS_DetermineScheduleRedirect(data[1].toString(), data[42].toString());
                    //}
                } else { // When resultEditFlag != "TRUE"
                    $("#divLoading").hide();// GetEditFlag failed.
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });

        //Delete - Start
        // Delete Record FILING TRANSACTIONS.
        $m('#gridAmountAllocationSchedR tbody').on('click', 'a.editor_remove_AmountAllocationSchedR', function (e) {
            e.preventDefault();
            var dataTrans = tableAmountAllocationSchedR.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    $.post("@Url.Content("~/_UC_GridCommonControl/GetDeleteFlag/")", {
                    }, function (resultDeleteFlag) {
                        if (resultDeleteFlag == "True") {
                            var resultsDelete = "Are you sure you want to delete this transaction?";
                            // DELETE FUNCTIONALITY.
                            $m('#modal_dialog').text(resultsDelete);
                            $m("#modal_dialog").dialog({
                                resizable: false,
                                width: '400px',
                                height: 'auto',
                                bgiframe: false,
                                closeOnEscape: false,
                                open: function (event, ui) {
                                    $("#divLoading").hide();
                                    hideDialogXButton(this);
                                },
                                buttons: {
                                    "Ok": function () {
                                        // Close Confirm Box.
                                        $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                        $("#divLoading").show();
                                        var options = {};
                                        options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteSchedFSubcontractorData/")";
                                        options.type = "GET";
                                        options.data = {
                                            strTransNumber: dataTrans[1].toString()
                                        };
                                        options.dataType = "json";
                                        options.contentType = "application/json";
                                        options.success = function (results) {
                                            window.status = "Record deleted successfully";
                                            var doneFunction = function () {
                                                $("#divLoading").hide();
                                                ShowDialogBox('EFS', 'Record deleted successfully', 'Ok', '');
                                            }
                                            // Refresh the Data on Grid...
                                            GetAllTransactionTypesData(true, tableAmountAllocationSchedR, false, doneFunction);
                                        };
                                        options.error = function () {
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                        };
                                        $.ajax(options);
                                    },
                                    "Cancel": function () {
                                        // Close Confirm Box.
                                        $m(this).dialog("close");
                                    }
                                }
                            });
                        } else {//When resultEditFlag != "TRUE"
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before deleting this Transaction.', 'Ok', '');
                        }
                    }).fail(function () {
                        $("#divLoading").hide();// GetEditFlag failed.
                    });
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });  
        });
        //Delete - End

        $m("#btnUpdateDialogSchedR").button().on("click", function () {
             $m('#DialogBoxSchedRForm').valid();
            if ($m('#DialogBoxSchedRForm').valid()) {
                 // SHOW THE PROCESSING....
                 $("#divLoading").show();
                 var url = '@Url.Action("UpdateExpensesAllocationScheRData", "ExpensesAllocationScheR")';
                 $m.post(url, {
                     transNumber: sessionStorage.getItem("TransNumber").toString(),
                     strFilingSchedDate: $m("#txtCurrentDateAllocatedSchedR").val().toString(),
                     strOrgAmt: $m("#txtAmtExpensesAllocation").val().toString(),
                     strTransExplanation: $m("#txtExplanationCommonScheR").val().toString(),
                     strSupportOppose: $m("#lstDiaSupportOppose").val().toString()
                 }, function (data) {
                    // Close Dialogbox.
                    dialog.dialog("close");
                    // Saved
                    window.status = "Transaction saved successfully";
                    $("#txtLenderMIName").prop("disabled", false);
                    $("#txtLenderLastName").prop("disabled", false);
                    $('#lstElectionCycleAllocated').attr('disabled', false);
                    $('#lstOffice').attr('disabled', false);
                    $('#lstDistrict').attr('disabled', false);
                    var doneFunction = function () {
                        $m("#divLoading").hide();
                        ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                    };
                    // Refresh the Data on Grid...
                     GetAllTransactionTypesData(true, tableAmountAllocationSchedR, false, doneFunction);
                 }).fail(function () {
                     $("#divLoading").hide();// UpdateExpensesAllocationScheRData failed.
                     ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                 });
             }
        });

        $m("#btnClearDialogSchedR").button().on("click", function () {
            ClearDialog();
            sessionStorage.setItem("ValidateAutoComplete", "false");
        });

        function ClearDialog() {
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
            $(".divWidthSchedABC .error").removeClass("error");
            $("#lstDiaSupportOppose")[0].selectedIndex = 0;
            $("#lblExplanation").text("Explanation");
            $("#txtCurrentDateAllocatedSchedR").blur();
            $("#txtAmtExpensesAllocation").blur();
            $("#lstDiaSupportOppose").focus();
            $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
            $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
            $("#tdDistrict").hide();
            $("#txtLenderMIName").prop("disabled", false);
            $("#txtLenderLastName").prop("disabled", false);
            $('#lstElectionCycleAllocated').attr('disabled', false);
            $('#lstOffice').attr('disabled', false);
            $('#lstOffice').attr('disabled', false);
            autoNameFound = false;
        }

        $m("#btnClearDialogEditSchedR").button().on("click", function () {
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $(".divWidthSchedABC .error").removeClass("error");
            $("#lstDiaSupportOppose")[0].selectedIndex = 0;
            $("#lstDiaSupportOppose").focus();
            $("#txtCurrentDateAllocatedSchedR").val("");
            $("#txtAmtExpensesAllocation").val("");
            $("#txtExplanationCommonScheR").val("");
            //$("#txtCurrentDateLoanReceived").focus();
            $m("label[for=txtCurrentDateLoanReceived]").text('');
            sessionStorage.setItem("ValidateAutoComplete", "false");
        });

         // Partnership Name Auto Complete.
        $m("#txtLenderFirstName").autocomplete({
            source: function (request, response) {
                if ($("#lstAllocationExisting option:selected").val() == "2")
                {
                    $.post("@Url.Content("~/ExpensesAllocationScheR/AutoCompleteEntityName/")", request, response);
                }
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();
                var selectedValue = ui.item.label;

                    $.ajax({
                    url: "@Url.Content("~/ExpensesAllocationScheR/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                        success: function (results) {
                            $("#txtAmtAllReport").val('');
                            $.each(results, function (i, item) {
                                sessionStorage.setItem("ValidateAutoComplete","true");
                            $("#txtLenderFirstName").val(item.FirstName.toString());
                                $("#txtLenderMIName").val(item.MiddleName.toString());
                                $("#txtLenderMIName").prop("disabled", true);
                                $("#txtLenderLastName").val(item.LastName.toString());
                                $("#txtLenderLastName").prop("disabled", true);
                                if ($("#txtAmtAllReport").val() == '') {
                                    var amtVal = parseFloat(item.Org_Amt.toString());
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }
                                }
                                else {
                                    var amtVal = parseFloat($("#txtAmtAllReport").val()) + parseFloat(item.Org_Amt);
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }
                                }
                                sessionStorage.setItem("txtAmtAllReport", $("#txtAmtAllReport").val());
                            $("#lstElectionCycleAllocated option").each(function () {
                                if ($(this).text() == item.ElectionYear.toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                                });
                                $('#lstElectionCycleAllocated').attr('disabled', true);

                            $("#lstOffice option").each(function () {
                                if ($(this).val() == item.Office_ID.toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                                });
                                $('#lstOffice').attr('disabled', true);
                                if (item.Dist_ID == '') {
                                    item.Dist_ID = 'None';
                                }
                                sessionStorage.setItem("districtData", item.Dist_ID.toString());
                                $("#lstDistrict option").each(function () {
                                    if ($(this).text() == item.Dist_ID.toString()) {
                                        $("#tdDistrict").show();
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                                $('#lstDistrict').attr('disabled', true);
                            if ($("#lstDistrict").val().toString() == "0")
                            {
                                $("#tdDistrict").hide();
                                }

                                $("#txtAmtExpensesAllocation").val("");
                                $("#txtLenderFirstName").focus();
                                autoNameFound = true;
                        });
                    }
                    });

            }
        });

        $("#lstAllocationExisting").change(function () {
            var valAllocationExisting = $("#lstAllocationExisting option:selected").val();
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
            $(".divWidthSchedABC .error").removeClass("error");
            $("#txtCurrentDateAllocatedSchedR").addClass("watermarkHTMLTextBox");
            $("#txtAmtExpensesAllocation").addClass("watermarkHTMLTextBox");
            $("#lstAllocationExisting").val(valAllocationExisting);

            $("#txtLenderMIName").prop("disabled", false);
            $("#txtLenderLastName").prop("disabled", false);
            $('#lstElectionCycleAllocated').attr('disabled', false);
            $('#lstOffice').attr('disabled', false);
            $('#lstDistrict').attr('disabled', false);

        });

        $("#lstOffice").change(function () {

            if ($("#lstOffice").val().toString() != "0")
            {
                var options = {};
                options.url = "@Url.Content("~/ExpensesAllocationScheR/GetDistrict/")";
                options.type = "POST";
                options.data = JSON.stringify(
                    {
                        strOfficeID: $("#lstOffice").val().toString()
                    });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                    if (results.length != "0")
                    {
                        $("#tdDistrict").show();
                        $("#lstDistrict").empty();
                        $("#lstDistrict").append("<option>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstDistrict").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                        if (sessionStorage.getItem("districtData") != null)
                        {
                            $m("#lstDistrict option").each(function () {
                                if ($(this).val() == sessionStorage.getItem("districtData").toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                            });
                            sessionStorage.setItem("districtData", null);
                        }
                    }
                    else
                    {
                        $("#lstDistrict").empty();
                        $("#lstDistrict").append("<option>" + "- Select -" + "</option>");
                        $("#tdDistrict").hide();
                    }
                };
                options.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                };
                $.ajax(options);
            }
            else
            {
                $("#tdDistrict").hide();
                $("#lstDistrict").empty();
            }
        });

        $("#txtLenderFirstName").focusout(function () {            
            if ($("#lstAllocationExisting option:selected").val() == "2")
            {
                $.post("@Url.Content("~/ExpensesAllocationScheR/ValidateEntityName/")", {
                term: $("#txtLenderFirstName").val()
                }, function (result) {
                    if (result == "") {
                        ShowDialogBox('EFS', 'Name entered is not available in database. Either enter an existing name or change “Is Allocation Existing" to No', 'Ok', '');
                        $("#txtLenderMIName").val("");
                        $("#txtLenderFirstName").val("");
                        $("#txtLenderLastName").val("");
                        $("#txtAmtAllReport").val("");
                        $("#lstElectionCycleAllocated")[0].selectedIndex = 0;
                        $("#lstOffice")[0].selectedIndex = 0;
                        $("#lstDistrict")[0].selectedIndex = 0;
                        $("#txtLenderMIName").prop("disabled", false);
                        $("#txtLenderLastName").prop("disabled", false);
                        $('#lstElectionCycleAllocated').attr('disabled', false);
                        $('#lstOffice').attr('disabled', false);
                        $('#lstDistrict').attr('disabled', false);
                        $("#txtLenderFirstName").focus();
                    }
                });
            }
            else
            {
                $("#txtAmtAllReport").val("");
            }
        });

        $("#txtAmtExpensesAllocation").focusout(function () {

            // MOVED THIS CODE FROM DOWN TO HERE. NO CHANGES.
            // ONLY CHANGES WHEN TXTAMT ZERO THEN TXTAMTALLREPORT SHOULD NOT FILL.
            // ADDED ONLY ABOVE CONDITION - ON 06.02.2021.
            if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                if ($("#txtAmtAllReport").val().toString().length <= 9) {
                    var regExpNumbers = /^(-{1}?(?:([0-9]{0,10})))/;
                    if (regExpNumbers.test($("#txtAmtAllReport").val().toString())) {
                        var strAmount = $("#txtAmtAllReport").val().toString();
                        var indexAmount = strAmount.indexOf(".");
                        if (indexAmount != -1) {
                            var amountDecimal = strAmount.substr(indexAmount + 1, strAmount.length);
                            if (amountDecimal.toString().length == "1" || amountDecimal.toString().length == "2") {
                                var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                        }
                        else {
                            var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                            if (amtVal == Math.floor(amtVal)) {
                                amtVal = amtVal + ".00";
                                $m("#txtAmtAllReport").val(amtVal);
                            }
                            else {
                                $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                            }
                        }
                    }
                }
                else {
                    var strAmount = $("#txtAmtAllReport").val().toString();
                    var indexAmount = strAmount.indexOf(".");
                    var varPeriod = strAmount.indexOf(".");
                    var newStrAmount = strAmount.substr(0, varPeriod);
                    if (indexAmount != -1) {
                        if (newStrAmount.length <= 9) {
                            var amountDecimal = strAmount.substr(indexAmount + 1, strAmount.length);
                            if (amountDecimal.toString().length == "1" || amountDecimal.toString().length == "2") {
                                var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                        }
                    }
                }
            }
            if (sessionStorage.getItem("AmountEdit") == "EDIT") {
                if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                    var amtVal;
                    if (parseFloat($("#txtAmtExpensesAllocation").val()) > parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit")) + (parseFloat($("#txtAmtExpensesAllocation").val()) - parseFloat(sessionStorage.getItem("txtAmtEdit")));
                    }
                    else if (parseFloat($("#txtAmtExpensesAllocation").val()) < parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit")) - (parseFloat(sessionStorage.getItem("txtAmtEdit")) - parseFloat($("#txtAmtExpensesAllocation").val()));
                    }
                    else if (parseFloat($("#txtAmtExpensesAllocation").val()) == parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit"));
                    }

                    if (amtVal == Math.floor(amtVal)) {
                        amtVal = amtVal + ".00";
                        $m("#txtAmtAllReport").val(amtVal);
                    }
                    else {
                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                    }
                }
            }
            else {
                var tempVal = $("#txtAmtAllReport").val();
                if ($("#lstAllocationExisting option:selected").val() == "1") {
                    if ($.isNumeric($("#txtAmtExpensesAllocation").val())) {
                        $("#txtAmtAllReport").val($("#txtAmtExpensesAllocation").val());
                    }
                    else {
                        $("#txtAmtAllReport").val("");
                    }
                }
                else {
                    if ($("#txtAmtAllReport").val() != '') {
                        if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                            if ($("#txtAmtExpensesAllocation").val().toString() != "0.00") {
                                var amtVal;
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReport")) + parseFloat($("#txtAmtExpensesAllocation").val());
                                }
                                else {
                                    amtVal = parseFloat($("#txtAmtExpensesAllocation").val());
                                }
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                            else {
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    var amtVal;
                                    amtVal = sessionStorage.getItem("txtAmtAllReport");
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }

                                }
                                else {
                                    $("#txtAmtAllReport").val("");
                                }

                            }
                        }
                        else {
                            $("#txtAmtAllReport").val("");
                        }
                    }
                    else {
                        if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                            if ($("#txtAmtExpensesAllocation").val().toString() != "0.00") {
                                $("#txtAmtAllReport").val($("#txtAmtExpensesAllocation").val());
                            }
                            else {
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    var amtVal;
                                    amtVal = sessionStorage.getItem("txtAmtAllReport");
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }

                                }
                                else {
                                    $("#txtAmtAllReport").val("");
                                }
                            }
                        }
                        else {
                            $("#txtAmtAllReport").val("");
                        }
                    }
                }


                if ($.isNumeric($("#txtAmtExpensesAllocation").val()) != true) {
                    if (tempVal.toString() != "" && tempVal.toString() != "0.00") {
                         $("#txtAmtAllReport").val(tempVal);
                    } else {
                        $("#txtAmtAllReport").val("");
                    }
                }
            }
        });        

        // BUTTON ADD NEW CREDIT CARD ITEMIZATION
        // Add New Credit Card Itemization
        $m("#btnAddNewAllocation").button().on("click", function () {

            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("UpdateFlagSchedFCCI", "No");

                    dialog.dialog("open");
                    
                    ClearDialogBoxValidationSchedR();
                    ClearErrorsAmountAllocationSchedRDialogBox();

                    // Add/Edit
                    $("#btnAddDialogSchedR").show();
                    $("#btnUpdateDialogSchedR").hide();    

                    $("#btnClearDialogSchedR").show();
                    $("#btnClearDialogEditSchedR").hide();   
                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            });

        });
    });
</script>
