@{
    ViewBag.Title = ": Other Receipts Received Schedule E";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

<form id="OtherReceiptsReceivedForm">

    @Html.Partial("UserControls/_UC_Alert_Message")
    @Html.Partial("UserControls/_UC_Delete_Message")

    <div id="divMainNew" class="mainDiv">
        <div class="mainLowerDivCSSDesktop">
            <div id="divhide" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonShowHide1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Collapse/Hide Filter" /></button>
            </div>
            <div id="divshow" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonHideShow1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Expand/Show Filter" /></button>
            </div>
        </div>
        <div class="mainLowerDivCSS">
            <div id="divhideForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonShowHide2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonShowHide"><img src="~/Content/Images/up20.png" alt="Collapse/Hide Filter" /></button>
                </div>
            </div>
            <div id="divshowForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonHideShow2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS  clsbtnCommonHideShow"><img src="~/Content/Images/down20.png" alt="Expand/Show Filter" /></button>
                </div>
            </div>
        </div>
        <div id="divTopSection">
            <div id="selectorItsRpt">
                <div class="divWidth">
                    <fieldset>
                        <legend class="visibleToScreenReaderOnly">Filter Controls Top</legend>

                        <div class="floatRightNew clsShowButtonClass">
                            <input type="button" id="btnCommonSearch" class="btn btn-default clsCommonSearch clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Apply" title="Apply" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp" /></button>
                        </div>
                    </fieldset>
                    <div class="requiredTextFilter">* marks required fields</div>
                    <div id="divFilerID">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerID">* Filer ID</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtFilerID", ViewData["txtFilerID"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblFilerID" })
                        </div>
                    </div>
                    <div id="divFilerType">
                        <div class="verticalCSSDestop lblCSS"><span id="lblFilerType">* Filer Type</span></div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("txtFilerType", null, new { id = "txtFilerType", @class = "txtWidth txtReportPeriodDatesFrom", aria_labelledby = "lblFilerType" })
                        </div>
                    </div>
                    <div id="divCommitteeName">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCommitteeName">* Candidate/Committee Name</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtCommitteeName", ViewData["txtCommitteeName"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblCommitteeName" })
                        </div>
                    </div>
                    <div id="divElectionCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionCycle">* Report Year</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionCycle", ViewData["lstElectionCycle"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionCycle" })
                        </div>
                    </div>
                    <div id="divOfficeType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblOfficeType">* Election Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCOfficeType", null, "- Select -", new { id = "lstUCOfficeType", @class = "spanMobileWidth", aria_labelledby = "lblOfficeType" })
                        </div>
                    </div>
                    <div id="divCounty">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCounty">* County</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCCounty", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblCounty" })
                        </div>
                    </div>
                    <div id="divMunicipality">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblMunicipality">* Municipality</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCMuncipality", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblMunicipality" })
                        </div>
                    </div>
                    <div id="divElectionType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionType">* Report Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionType", ViewData["lstElectionType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionType" })
                        </div>
                    </div>
                    <div id="divElectionDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionDate">* Election Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionDate", ViewData["lstElectionDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionDate" })
                        </div>
                    </div>
                    <div id="divDisclosureType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosureType">* Disclosure Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosureType", ViewData["lstDisclosureType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosureType" })
                        </div>
                    </div>
                    <div id="divDisclosurePeriod">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosurePeriod">* Disclosure Period</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosurePeriod", null, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosurePeriod" })
                        </div>
                    </div>
                    <div id="divReportPeriodDates">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesFrom">* Cut off Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesFrom", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesFrom" })
                        </div>
                    </div>
                    <div id="divFilingDateDropDown">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDate">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstFilingDate", ViewData["lstFilingDate"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstFilingDate", aria_labelledby = "lblFilingDate" })
                        </div>
                    </div>
                    <div id="divReportPeriodDatesTo">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesTo">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesTo", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesTo" })
                        </div>
                    </div>

                    @* OFFICE CYCLE FILING DATE *@
                    <div id="divFilingDateOffCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDateOffCycle">* New Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            <input type="text" id="txtNewFilingDate" name="txtNewFilingDate" class="txtWidth txtCurrentDateCls" maxlength="10" aria-labelledby = "lblFilingDateOffCycle"/>
                        </div>
                    </div>
                    @* OFFICE CYCLE FILING DATE *@

                    <div id="divFilingReason">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReasonforFiling">Resignation/Termination</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstResigTermType", ViewData["lstResigTermType"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstResigTermType", aria_labelledby = "lblReasonforFiling" })
                        </div>
                    </div>
                    <fieldset style="clear:both;">
                        <legend class="visibleToScreenReaderOnly">Filter Controls Bottom</legend>
                        <div class="floatRightNew" style="padding-bottom: 2em;">
                            <input type="button" id="btnCommonSearch2" class="btn btn-default clsCommonSearch ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Apply" title="Search" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear2" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help2" id="imgHelp2" /></button>
                        </div>
                    </fieldset>
                </div>
            </div>
        </div>
    </div>

    <div class="floatRight paddingRight3em paddingTop0pt6em">
        <p><button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelpSchedE();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp3" /></button></p>
    </div>
    <div id="divBreadCrumb" class="breadCrumbDivCSS" style="width: 46em;">
        <nav aria-label="Breadcrumbs" id="pBreadCrumb" class="FontSizeCss">
            <ol class="breadcrumb">
                @*<li>@Html.ActionLink("Home", "Home", "Home", null, new { @class = "" })</li>*@
                <li>@Html.ActionLink("File a Disclosure Report", "ContributionsMonetary", "ContributionsMonetary", null, new { @class = "lnkLogout" })</li>
                <li class="active">Other Receipts Received</li>
            </ol>
        </nav>
        <div id="divHeader2" class="paddingtoppt5 clsHeaderWidth">
            <h1>
                <span id="lblHeader">File a Disclosure Report</span> -
                <span id="lblHEleYear">File a Disclosure Report</span> -
                <span id="lblHDisclPer">File a Disclosure Report</span>
            </h1>
        </div>
        <div id="divHeader" class="paddingtoppt5">
            <div class="paddingTop0em2em DisplayInlineBlock">
                <h2><span id="lblHeader2">Other Receipts Received</span></h2>
            </div>
        </div>
    </div>
    <div id="divGrid" class="divGridCSSTransferin">
        @Html.Partial("UserControls/_UC_Loding")
        @Html.Partial("UserControls/_UC_GridCommonControl")
    </div>
</form>

<div id="dialog-form_Sched_E" title="Add/Edit Transaction">
    <form id="DialogBoxSchedEForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%;">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="dvUnitemized">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblDatePaid">Is Transaction Itemized?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstItemized", ViewData["lstItemized"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblDatePaid" })
                    </div>
                </div>
                <div id="tdDateRcvd">
                    <div id="txtCurrentDate_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDateReceived">* Date Received</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDate" name="txtCurrentDate" class="datepicker txtWidthForDateSched_ABC txtCurrentDateCls" maxlength="10" aria-labelledby = "lblDateReceived"/>
                    </div>
                </div>

                <div id="dvReceiptSource">
                    <div id="txtReceiptSource_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblContributionName">* Receipt Source</span> @*Defect - 1022 Receipt Name - Receipt Source *@
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtReceiptSource", null, new { id = "txtReceiptSource", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "40", aria_labelledby = "lblContributionName" })
                    </div>
                </div>

                @*<div id="dvReceiptSource">
        <div class="verticalCSSDestopForLable lblCSSAdd">
            @Html.Label("Receipt Source", new { @id = "lblContributionName" })
        </div>
        <div class="verticalCSSDestopForTextbox DDLCSSAdd">
            @Html.TextBox("searchTerm", null, new { id = "txtReceiptSource", @class = "txtWidthForDialog", @maxlength = "30" })
        </div>
        </div>*@

                <div id="tdCountryContributionChk">
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblOtherCountry">Other Country</span>
                    </div>
                    <div class="verticalCSSDestopForCheckBoxSched_ABC DDLCSSAdd">
                        @Html.CheckBox("chkCountry", false, new { @class = "txtWidthForDialogSched_ABC_CountryChkbox", aria_labelledby = "lblOtherCountry" })
                    </div>
                </div>
                <div id="tdCountryContributionTxt" class="divClearBoth">
                    <div id="txtCountry_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblCountry">* Country</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSched_ABC DDLCSSAdd">
                        @Html.TextBox("txtCountry", null, new { id = "txtCountry", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCountry" })
                    </div>
                </div>

                @*@Html.Partial("UserControls/_UC_Address")*@

                <div id="divStreetAddress">
                    <div id="txtStreetName_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblStreetName">* Street Address</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStreetName", null, new { id = "txtStreetName", @class = "txtWidthForDialogSched_A", @maxlength = "60", aria_labelledby = "lblStreetName" })
                    </div>
                </div>

                <div id="divCity">
                    <div id="txtCity_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCity">* City</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCity", null, new { id = "txtCity", @class = "txtWidthForDialogSched_A", @maxlength = "30", aria_labelledby = "lblCity" })
                    </div>
                </div>

                <div id="divState">
                    <div id="txtState_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblState">* State</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtState", null, new { id = "txtState", @class = "txtWidthForDialogSched_A", @maxlength = "2", aria_labelledby = "lblState" })
                    </div>
                </div>

                <div id="divZip5">
                    <div id="txtZipCode_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblZip5">* Zip Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtZipCode", null, new { id = "txtZipCode", @class = "txtWidthForDialogSched_A", @maxlength = "10", aria_labelledby = "lblZip5" })
                    </div>
                </div>

                <div id="dvReceiptType">
                    <div id="lstReceiptType_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblReceiptType">* Receipt Type</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstReceiptType", ViewData["lstReceiptType"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblReceiptType" })
                    </div>
                </div>

                <div id="tdMethod">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblMethod">* Method</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstMethod", ViewData["lstMethod"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblMethod" })
                    </div>
                </div>

                <div id="tdCheck">
                    <div id="txtCheck_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCheck">* Check #</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCheck", null, new { id = "txtCheck", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCheck" })
                    </div>
                </div>

                <div id="tAmt" class="divClearBoth">
                    <div id="txtAmtSchedE_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmount">* Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtSchedE", null, new { id = "txtAmtSchedE", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblAmount" })
                    </div>
                </div>

                <div id="tdExplanation">
                    <div id="txtExplanationSchedE_validate" class="verticalCSSDestopForError" role="alert"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanation">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationSchedE", null, new { id = "txtExplanationSchedE", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanation" })
                    </div>
                </div>

                <div id="AddUpdateBtnIdSchedE" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnSaveSchedE" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>
            </div>
        </div>
    </form>
</div>

<script>
    $m = jQuery.noConflict();

    function CallHelpSchedE() {

        var myWidth = 1050;
        var myHeight = 550;

        var left = (screen.width - myWidth) / 2;
        var top = (screen.height - myHeight) / 4;

        window.open("../../OtherReceiptsReceivedSchedE/GetScheduleEHelpPopUp", "Help", 'width=550, height=600,scrollbars=1, width=' + myWidth + ', height=' + myHeight + ', top=' + top + ', left=' + left);
    }

    $('#menuNav').css('opacity', 0);
    $('#OtherReceiptsReceivedForm').css('opacity', 0);
    $('#DialogBoxSchedEForm').css('opacity', 0);
    $('#divWelcomeBanner').css('opacity', 0);
    $(window).on('load', function () {
        $('#menuNav').css('opacity', 1);
        $('#OtherReceiptsReceivedForm').css('opacity', 1);
        $('#DialogBoxSchedEForm').css('opacity', 1);
        $('#divWelcomeBanner').css('opacity', 1);
    });

    $m(document).ready(function () {

        $m("#txtAmtSchedE").attr('aria-required', true);

        // FORM VALIDATION SCHEDULE 'A' JQUERY VALIDATOR
        //----------------------------------------------------------------------------------------------------------------------------------------------

        // Common Function in EFS-Validation.js file - Start
        validatePage("DialogBoxSchedEForm"); // UNCOMMENT ONCE SERVER SIDE VALIDATION DONE.
        LefthandFilterValues();
        // Common Function in EFS-Validation.js file - ENd
        // JQUERY VALIDATITON REGULAR EXPRESSIONS.
        //----------------------------------------------------------------------------------------------------------------------------------------------

        //// ADDED CODE FOR TESTING SERVERSIDE VALIDATION REMOVE THIS BELOW CODE AFTER TESTING DONE.
        //// Country Check Box......
        //// Checkbox Checked or Not
        //$("#chkCountry").click(function () {
        //    if ($('#chkCountry').is(':checked')) { // Other COUNTRY
        //        $("#txtCountry").val("");
        //        $("#txtCountry").prop("disabled", false);
        //        $("#txtCountry").focus();
        //        $("#txtState").prop('maxLength', '30');
        //        $("#txtZipCode").val('').removeClass('watermark');
        //        $m('#txtZipCode').attr("placeholder", "");

        //        // Clear Address
        //        $("#txtStreetName").val("");
        //        $("#txtCity").val("");
        //        $("#txtState").val("");
        //        $("#txtZipCode").val("");
        //        // Validate
        //        $m("#txtStreetName").valid();
        //        $m("#txtCity").valid();
        //        $m("#txtState").valid();
        //        $m("#txtZipCode").valid();

        //        $m('#txtZipCode').attr("placeholder", "");
        //    }
        //    else { // United States Country
        //        $("#txtCountry").val("United States");
        //        $m("#txtCountry").valid();
        //        $("#txtCountry").prop("disabled", true);
        //        $("#txtState").prop('maxLength', '2');
        //        $("#txtState").val("");

        //        // Clear Address
        //        $("#txtStreetName").val("");
        //        $("#txtCity").val("");
        //        $("#txtState").val("");
        //        $("#txtZipCode").val("");
        //        //$("#txtZipCode").blur();

        //        $("#txtZipCode").val('').removeClass('watermark');
        //        $m('#txtZipCode').attr("placeholder", "");

        //        // Validate
        //        $m("#txtStreetName").valid();
        //        $m("#txtCity").valid();
        //        $m("#txtState").valid();
        //        $m("#txtZipCode").valid();

        //        $m("#txtState").valid();

        //        //$m('#txtZipCode').attr("placeholder", "00000-0000");
        //    }
        //});
        //// ADDED CODE FOR TESTING SERVERSIDE VALIDATION REMOVE THIS BELOW CODE AFTER TESTING DONE.

        //// ADDED CODE FOR TESTING SERVERSIDE VALIDATION REMOVE THIS BELOW CODE AFTER TESTING DONE.
        ////------------------------------------------------------------------------------------------------------------------------------------------------

        //====================================================================================================================
        // Date picker validation based on Filing Type.
        if ($("#lstElectionType option:selected").val().toString() == "6") { // Off-Cycle
            if ($("#lstFilingDate option:selected").text().toString() == "- New Filing Date -") {
                sessionStorage.setItem("CuttOffDateForFiling", sessionStorage.getItem("FilingDate").toString());
            }
            else {
                sessionStorage.setItem("CuttOffDateForFiling", $("#lstFilingDate option:selected").text().toString());
            }
        }
        else {
            sessionStorage.setItem("CuttOffDateForFiling", sessionStorage.getItem("CutOffDate").toString());
        }
        // DATE CONTROL AND WATERMARK
        //----------------------------------------------------------------------------------------------------------------------------------------------
        $m("#txtCurrentDate").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: sessionStorage.getItem("CuttOffDateForFiling").toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDate").valid();
            },
        }).datepicker();

        $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();
        $("#txtCurrentDate").addClass("watermarkHTMLTextBox");
        $("#txtCurrentDate").focusin(function () {
            $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
        });

        // Watermark TextBox. ////////////////////////////////////////////////////

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDate").focusout(function () {
            if ($("#txtCurrentDate").val().toString() != "") {
                if ($("#txtCurrentDate").val().toString() != "MM/DD/YYYY") {
                    var results = GetValidDate();

                    if (results == "") {
                        var MyDate = new Date($("#txtCurrentDate").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDate").val("");
                        $("#txtCurrentDate").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDate").addClass("watermarkHTMLTextBox");
            }
        });
        // DATE FORMATE....///////////////////////////////////////////////
        // DATE CONTROL AND WATERMARK
        //--------------------------------------------------------------------------------------------------------------
        //====================================================================================================================

        /// Dialog Box Code /////////////////////////////////////////////////////////////////////

        var dialog_Sched_E;

        dialog_Sched_E = $m("#dialog-form_Sched_E").dialog({
            autoOpen: false,
            resizable: true,
            height: 'auto',
            width: 456,
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialog_Sched_E = $m("#dialog-form_Sched_E").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialog_Sched_E = $m("#dialog-form_Sched_E").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialog_Sched_E = $m("#dialog-form_Sched_E").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyle',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        /// Dialog Box Code /////////////////////////////////////////////////////////////////////


        // Receipt Source - Auto Complete
        $m("#txtReceiptSource").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/OtherReceiptsReceivedSchedE/AutoCompleteEntityName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/OtherReceiptsReceivedSchedE/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        $.each(results, function (i, item) {
                            $("#txtReceiptSource").val(item.FilingEntityName.toString());
                            $("#txtStreetName").val(item.FilingEntityStreetName.toString());
                            $("#txtCity").val(item.FilingEntityCity.toString());
                            $("#txtState").val(item.FilingEntityState.toString());
                            $("#txtZipCode").val(item.FilingEntityZip.toString());
                            $("#txtCountry").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountry").val().toString() == "United States") {
                                $("#chkCountry").prop('checked', false);
                                $("#txtCountry").prop("disabled", true);
                                $("#txtState").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                    $("#txtZipCode").blur();
                                }
                            } else {
                                $("#chkCountry").prop('checked', true);
                                $("#txtCountry").prop("disabled", false);
                                $("#txtState").prop('maxLength', '30');

                                $m('#txtZipCode').attr("placeholder", "");
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            }
                            $m("#txtReceiptSource").valid();
                            // Address validation
                            $m("#txtCountry").valid();
                            $m("#txtStreetName").valid();
                            $m("#txtCity").valid();
                            $m("#txtState").valid();
                            $m("#txtZipCode").valid();
                        });
                    }
                });
                $("#lstReceiptType").focus();
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtReceiptSource]").text('');
                    $m("#txtReceiptSource").removeClass("error");
                }
                else {
                    // do whatever you want to when the item is not found
                    //$m("#txtReceiptSource").val("");
                    $m("label[for=txtReceiptSource]").text('');
                    $m("#txtReceiptSource").removeClass("error");
                }
            }
        });



        // Get Filing Transactions Data....
        $m("#btnCloseDialog").button().on("click", function () {

            var valid = true;

            if (sessionStorage.getItem("UpdateFlagSchedE").toString() == "No") { // Only New Transactions
                if ($("#lstItemized option:selected").val().toString() == "N") {
                    valid = false;
                }

                if ($("#txtCurrentDate").val().toString().length >= 1) {
                    valid = false;
                }

                if ($("#txtReceiptSource").val().toString().length >= 1) {
                    valid = false;
                }
                if ($('#chkCountry').is(':checked')) { // Other COUNTRY
                    if ($("#txtCountry").val().toString().length >= 1) {
                        valid = false;
                    }
                }
                if ($("#txtStreetName").val().toString().length >= 1) {
                    valid = false;
                }
                if ($("#txtCity").val().toString().length >= 1) {
                    valid = false;
                }
                if ($("#txtState").val().toString().length >= 1) {
                    valid = false;
                }

                if ($("#txtZipCode").val().toString().length >= 1) {
                    valid = false;
                }

                if ($("#lstMethod option:selected").val().toString() != "0") {
                    valid = false;
                }
                if ($("#lstReceiptType option:selected").val().toString() != "0") {
                    valid = false;
                }
                if ($("#lstMethod option:selected").val().toString() == "1") {
                    if ($("#txtCheck").val().toString().length >= 1) {
                        valid = false;
                    }
                }
                if ($("#txtAmtSchedE").val().toString().length >= 1) {
                    valid = false;
                }
                if ($("#txtExplanationSchedE").val().toString().length >= 1) {
                    valid = false;
                }
            }
            else {
                valid = false;
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?"; //window.confirm("All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?");

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    modal: true, 
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "OK": function () {
                            //Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the DialogBox
                            dialog_Sched_E.dialog("close");

                            // Refresh the Data on Grid...
                            GetAllTransactionTypesData(true, tableFilingTransactions, false, false);
                        }, // confirm close
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
            }
            //A valid form indicates that the user has not made changes to the form therefore we don't need to refresh the grid.
            if (valid) {
                // Close Dialogbox.
                dialog_Sched_E.dialog("close");
            }
            else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?"; //window.confirm("All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?");

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "OK": function () {
                            //Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close Dialogbox.
                            dialog_Sched_E.dialog("close");
                            // You don't Refresh the Data on Grid because you just canceled the edit or save function.
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
            }
        });

        // Add Newt Transaction DialobBox.
        $m("#btnAddNewTransaction").button().on("click", function () {
            event.preventDefault();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                 txtFilerId: $("#txtFilerID").val(),
                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
             }, function (resultEditFlag) {
                 if (resultEditFlag == "TRUE") {
                     dialog_Sched_E.dialog("open");

                     ClearDialogBoxValidationSchedE();

                     $m("label[for=txtCurrentDate]").text('');
                     $m("#txtCurrentDate").removeClass("error");

                     $m("label[for=txtFirstName]").text('');
                     $m("#txtFirstName").removeClass("error");

                     $m("label[for=txtLastName]").text('');
                     $m("#txtLastName").removeClass("error");

                     $m("label[for=txtAmtSchedE]").text('');
                     $m("#txtAmtSchedE").removeClass("error");

                     // Hide/Show
                     // Show All Fileds
                     $("#dvReceiptSource").show();
                     $("#divStreetAddress").show();
                     $("#divCity").show();
                     $("#divState").show();
                     $("#divZip5").show();
                     $("#dvReceiptType").show();
                     $("#tdMethod").show();
                     $("#dvCheck").show();
                     // Hide Check Number
                     $("#tdCheck").hide();
                     $("#tdCountryContributionChk").show("slow");
                     $("#tdCountryContributionTxt").show("slow");

                     if (@Session["COMM_TYPE_ID"] == "23") {
                         $("#lstItemized").prop("disabled", true);
                     }
                     else {
                         $("#lstItemized").prop("disabled", false);
                     }

                     sessionStorage.setItem("UpdateFlagSchedE", "No");
                    }
                    else {
                        ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before adding this Transaction.', 'Ok', '');
                    }
                });
        });

        // Itemzied On Change.
        $("#lstItemized").change(function () {

            var selectedUnitemzied = $("#lstItemized option:selected").val().toString();

            ClearDialogBoxValidationSchedE();

            if (selectedUnitemzied == "N") { // Unitemized.

                $("#txtCountry").val("United States");
                $("#lstItemized")[0].selectedIndex = 1;

                $("#lstMethod")[0].selectedIndex = 0;
                $("#lblExplanation").text("Explanation");

                //Hide/Show Controls
                $("#dvReceiptSource").hide("slow");
                $("#divStreetAddress").hide("slow");
                $("#divCity").hide("slow");
                $("#divState").hide("slow");
                $("#divZip5").hide("slow");
                $("#dvReceiptType").hide("slow");
                $("#tdMethod").hide("slow");
                //$("#dvCheck").hide("slow");
                $("#tdCheck").hide();
                $("#tdCountryContributionChk").hide("slow");
                $("#tdCountryContributionTxt").hide("slow");


                // Focus
                //$("#lstItemized").select();
            }
            else { // 'Y' Itemized.

                $("#txtCountry").val("United States");
                $("#lblExplanation").text("Explanation");

                // Hide/Show Controls
                $("#dvReceiptSource").show("slow");
                $("#divStreetAddress").show("slow");
                $("#divCity").show("slow");
                $("#divState").show("slow");
                $("#divZip5").show("slow");
                $("#dvReceiptType").show("slow");
                $("#tdMethod").show("slow");
                //$("#dvCheck").show("slow");
                $("#tdCheck").hide();
                $("#tdCountryContributionChk").show("slow");
                $("#tdCountryContributionTxt").show("slow");

                $("#txtCountry").val("United States");
                $("#txtCountry").prop("disabled", true);
                $("#chkCountry").prop('checked', false);
                $("#txtState").prop('maxLength', '2');

                $("#lstItemized")[0].selectedIndex = 0;
                $("#lstReceiptType")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;

                $m("label[for=txtFirstName]").text('');
                $m("#txtFirstName").removeClass("error");

                $m("label[for=txtLastName]").text('');
                $m("#txtLastName").removeClass("error");

                $m("label[for=txtAmtSchedE]").text('');
                $m("#txtAmtSchedE").removeClass("error");

                $("#lstItemized").select();
            }
        });

        // Receipt Type Change.
        $("#lstReceiptType").change(function () {
            if ($("#lstReceiptType option:selected").val().toString() == "3") {
                $("#lblExplanation").text("* Explanation");
            }
            else {
                $("#lblExplanation").text("Explanation");

                $m("label[for=txtExplanationSchedE]").text('');
                $m("#txtExplanationSchedE").removeClass("error");
            }

            if ($("#lstMethod option:selected").val().toString() == "7") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
            }
        });

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Add Other Receipt Received
        $("#btnSaveSchedE").click(function (e) {
            e.preventDefault();
            // SHOW THE PROCESSING....
            $("#divLoading").show();

            // Save Schedule 'D' Transactions.
            $m('#DialogBoxSchedEForm').valid();
            if ($m('#DialogBoxSchedEForm').valid()) { // UNCOMMENT ONCE SERVER SIDE VALIDATION DONE.
                if (sessionStorage.getItem("UpdateFlagSchedE").toString() == "No") { // Save
                    // Add Other Receipts Received Transactions.
                    var options = {};
                    options.url = "@Url.Content("~/OtherReceiptsReceivedSchedE/SaveFlngTransOtherReceiptsReceived/")";
                    options.type = "GET";
                    options.data = {
                        txtFilerId: $("#txtFilerID").val(),
                        lstElectionCycle: $("#lstElectionCycle option:selected").text(),
                        lstElectionCycleId: $("#lstElectionCycle option:selected").val(),
                        lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                        lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                        lstElectionType: $("#lstElectionType option:selected").val(),
                        lstElectionDate: $("#lstElectionDate option:selected").text(),
                        lstElectionDateId: $("#lstElectionDate option:selected").val(),
                        lstTransactionType: sessionStorage.getItem("TransactionType").toString(),
                        txtDateRcvd: $m("#txtCurrentDate").val().toString(),
                        txtReceiptSource: $m("#txtReceiptSource").val(),
                        txtCountry: $m("#txtCountry").val(),
                        txtStreetName: $m("#txtStreetName").val(),
                        txtCity: $m("#txtCity").val(),
                        txtState: $m("#txtState").val(),
                        txtZipCode: $m("#txtZipCode").val(),
                        lstReceiptType: $m("#lstReceiptType option:selected").val(),
                        lstMethod: $m("#lstMethod option:selected").val(),
                        txtCheck: $m("#txtCheck").val(),
                        txtAmtReceiptSourceScheE: $m("#txtAmtSchedE").val(),
                        txtExplanationSchedE: $m("#txtExplanationSchedE").val(),
                        lstItemized: $("#lstItemized option:selected").val(),
                        txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                        chkCountry: $('#chkCountry').is(':checked').toString(),
                        lstFilingDate: $m("#lstFilingDate option:selected").text(),
                        txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                        lstResigTermType: $m("#lstResigTermType option:selected").val(),
                        lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                    };
                    options.dataType = "json";
                    options.contentType = "application/json";
                    options.success = function (results) {
                        if (results.Errors == null) {
                            if (results == "Custom Error") {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                                window.location.reload();
                            }
                            else {
                                if (results == "0") {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'System Error Found. Please try again.', 'Ok', '');
                                    window.location.reload();
                                }
                                else {
                                    results = "Custom Error";
                                    $("#lstItemized").focus();

                                    // Data Added Sucussfully.
                                    window.status = "Transaction saved successfully";
                                    doneFunction = function () {

                                        ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                        ClearDialogBoxValidationSchedE();

                                        $m("label[for=txtFirstName]").text('');
                                        $m("#txtFirstName").removeClass("error");

                                        $m("label[for=txtLastName]").text('');
                                        $m("#txtLastName").removeClass("error");

                                        $m("label[for=txtAmtSchedE]").text('');
                                        $m("#txtPartAmt").removeClass("error");

                                        // Hide/Show
                                        // Show All Fileds
                                        $("#dvReceiptSource").show();
                                        $("#divStreetAddress").show();
                                        $("#divCity").show();
                                        $("#divState").show();
                                        $("#divZip5").show();
                                        $("#dvReceiptType").show();
                                        $("#tdMethod").show();
                                        //$("#dvCheck").show();
                                        // Hide Check Number
                                        $("#tdCheck").hide();
                                        $("#tdCountryContributionChk").show("slow");
                                        $("#tdCountryContributionTxt").show("slow");

                                        if (@Session["COMM_TYPE_ID"] == "23") {
                                            $("#lstItemized").prop("disabled", true);
                                        }
                                        else {
                                            $("#lstItemized").prop("disabled", false);
                                        }
                                    };
                                    //New feature. Always refresh the grid when save is successful.
                                    GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                                }
                            }
                        }
                        else if (results.Errors.length >= 0) {

                            $("#divLoading").hide();
                            ClearServerSideErrors(); // Server Side Validation Clear
                            AppendCustomErrorLabels(results.Errors);
                        }

                    };
                    options.error = function () {
                        $m("#divLoading").hide();
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                    };
                    $m.ajax(options);
                }
                else if (sessionStorage.getItem("UpdateFlagSchedE").toString() == "Yes") { // Update
                    // Update Other Receipts Received Transactions.
                    var options = {};
                    options.url = "@Url.Content("~/OtherReceiptsReceivedSchedE/UpdateOtherReceiptsReceived/")";
                    options.type = "GET";
                    options.data = {
                        strTransNumber: sessionStorage.getItem("FilingTransId").toString(),
                        strFilingEntId: sessionStorage.getItem("FilingEntityId").toString(),
                        txtDateRcvd: $m("#txtCurrentDate").val(),
                        txtReceiptSource: $m("#txtReceiptSource").val(),
                        txtCountry: $m("#txtCountry").val(),
                        txtStreetName: $m("#txtStreetName").val(),
                        txtCity: $m("#txtCity").val(),
                        txtState: $m("#txtState").val(),
                        txtZipCode: $m("#txtZipCode").val(),
                        lstReceiptType: $m("#lstReceiptType option:selected").val(),
                        lstMethod: $m("#lstMethod option:selected").val(),
                        txtCheck: $m("#txtCheck").val(),
                        txtAmtReceiptSourceScheE: $m("#txtAmtSchedE").val(),
                        txtExplanationSchedE: $m("#txtExplanationSchedE").val(),
                        lstItemized: $("#lstItemized option:selected").val(),
                        chkCountry: $('#chkCountry').is(':checked').toString(),
                        txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                        strFilingDate: $("#txtNewFilingDate").val(),
                    };
                    options.dataType = "json";
                    options.contentType = "application/json";
                    options.success = function (results) {

                        if (results.Errors == null) {
                            $m("#divLoading").hide();
                            // Close Dialog Box.
                            dialog_Sched_E.dialog("close");

                            var doneFunction = function () {
                                ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                window.status = "Transaction saved successfully";
                            }

                            if (@Session["COMM_TYPE_ID"] == "23") {
                                $("#lstItemized").prop("disabled", true);
                            }
                            else {
                                $("#lstItemized").prop("disabled", false);
                            }
                            //New feature. Always refresh the grid when save is successful.
                            GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                        }
                        else if (results.Errors.length >= 0) {

                            $("#divLoading").hide();

                            ClearServerSideErrors(); // Server Side Validation Clear
                            AppendCustomErrorLabels(errorList);
                        }
                    };
                    options.error = function () {
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                    };
                    $m.ajax(options);
                }
            }
            // IF VALIDATION FAILED.
            else {
                // HIDE THE PROCESSING....
                $("#divLoading").hide();
            }
        });
        // Add Other Receipt Received
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // ROW SELECT YELLOW HIGHLIGHTED...
        $m('#gridFilingTransactions tbody').on('click', 'tr', function (e) {
            e.preventDefault();

            var scheduleID = tableFilingTransactions.cell(this, 1).data();
            var selectedAttribution = tableFilingTransactions.cell(this, 3).data();

            if ($(this).hasClass('selected')) {
                //$(this).removeClass('selected');
            }
            else {
                tableFilingTransactions.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
                // Bind Data
            }
        });

        //==============================================================================================================================================
        // EDIT COMMON
        // ---------------------------------------------------------------------------------------------------------------------------------------------
        // Edit from Other Schedule functionality        
        if (sessionStorage.getItem("EditFlag") != null) {
            if (sessionStorage.getItem("EditFlag").toString() == "True") {

                //$("#lstTransactionType")[0].selectedIndex = 0;
                //$("#lstTransactionType")[0].selectedIndex = parseInt(sessionStorage.getItem("ScheduleId").toString());

                $("#lstTransactionType option").each(function () {
                    if ($(this).val() == sessionStorage.getItem("ScheduleId").toString()) {
                        //$(this).attr('selected', 'selected');
                        $(this).prop("selected", true);
                    }
                });                                

                // BIND COMMON SESSION VARIABLE.
                sessionStorage.setItem("TransactionType", sessionStorage.getItem("ScheduleId").toString());        

                sessionStorage.setItem("UpdateFlagSchedE", "Yes");

                // Hide Error Messages.//////////////////
                $("#dvErrorDateRcvd").hide();
                $("#txtCurrentDate").removeClass("ui-state-error");
                $("#dvErrorRecieptSource").hide();
                $("#txtReceiptSource").removeClass("ui-state-error");
                $("#divErrorStreetName").hide();
                $("#txtStreetName").removeClass("ui-state-error");
                $("#divErrorCity").hide();
                $("#txtCity").removeClass("ui-state-error");
                $("#divErrorState").hide();
                $("#txtState").removeClass("ui-state-error");
                $("#divErrorZip5").hide();
                $("#txtZipCode").removeClass("ui-state-error");
                $("#dvErrorCheck").hide();
                $("#txtCheck").removeClass("ui-state-error");
                $("#dvErrorAmount").hide();
                $("#txtAmtSchedE").removeClass("ui-state-error");
                $("#dvErrorExplanation").hide();
                $("#txtExplanationSchedE").removeClass("ui-state-error");
                // Hide Error Messages.//////////////////

                $.post("@Url.Content("~/_UC_GridCommonControl/GetEditTransactionData/")", {
                    strTransNumber: sessionStorage.getItem("TransNumberEdit").toString()
                }, function (resultsEditData) {
                    $.each(resultsEditData, function (i, item) {

                        //$("#btnSaveSchedE").val("Update");              

                        dialog_Sched_E.dialog("open");

                        $("#lstItemized").prop("disabled", true);

                        sessionStorage.setItem("FilingTransId", item.TransNumber.toString());
                        sessionStorage.setItem("FilingEntityId", item.FilingEntityId.toString());

                        if (item.RItemized.toString() == "Yes") { // Itemized Transactions

                            if (item.RItemized.toString() != null || item.RItemized.toString() != "") {
                                //$("#lstItemized option")
                                //    .filter(function () { return $.trim($(this).text()) = item.RItemized.toString(); })
                                //    .attr("selected", "selected");
                                $("#lstItemized option").each(function () {
                                    if ($(this).text() == item.RItemized.toString()) {
                                        //$(this).attr('selected', 'selected');
                                        $(this).prop("selected", true);
                                    }
                                });
                            }
                            $("#txtCurrentDate").val(item.SchedDate.toString());
                            $("#txtCurrentDate").focus();
                            if ($("#txtCurrentDate").val().toString() != "MM/DD/YYYY") {
                                $("#txtCurrentDate").removeClass('watermark');
                            }
                            if (item.ReceiptTypeDesc.toString() != null || item.ReceiptTypeDesc.toString() != "") {
                                //$("#lstReceiptType option")
                                //    .filter(function () { return $.trim($(this).text()) == item.ReceiptTypeDesc.toString(); })
                                //    .attr("selected", "selected");
                                $("#lstReceiptType option").each(function () {
                                    if ($(this).text() == item.ReceiptTypeDesc.toString()) {
                                        //$(this).attr('selected', 'selected');
                                        $(this).prop("selected", true);
                                    }
                                });
                            }
                            $("#txtReceiptSource").val(item.FilingEntityName.toString());
                            $("#txtStreetName").val(item.FilingStreetName.toString());
                            $("#txtCity").val(item.FilingCity.toString());
                            $("#txtState").val(item.FilingState.toString());
                            $("#txtZipCode").val(item.FilingZip.toString());
                            if ($("#txtZipCode").val().toString() != "00000-0000") {
                                $("#txtZipCode").removeClass('watermark');
                            }
                            if (item.FilingZip.toString() != "") {
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            }
                            /// Country
                            $("#txtCountry").val(item.FilingCountry.toString());
                            if (item.FilingCountry.toString() == "United States") {
                                $("#chkCountry").prop('checked', false);
                                $("#txtCountry").prop("disabled", true);
                                $("#txtState").prop('maxLength', '2');
                            }
                            else { // Other Country
                                $("#chkCountry").prop('checked', true);
                                $("#txtCountry").prop("disabled", false);
                                $("#txtState").prop('maxLength', '30');
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                $m('#txtZipCode').attr("placeholder", "");
                            }
                            if (item.PaymentTypeDesc.toString() != null || item.PaymentTypeDesc.toString() != "") {
                                //$("#lstMethod option")
                                //    .filter(function () { return $.trim($(this).text()) == item.PaymentTypeDesc.toString(); })
                                //    .attr("selected", "selected");
                                $("#lstMethod option").each(function () {
                                    if ($(this).text() == item.PaymentTypeDesc.toString()) {
                                        //$(this).attr('selected', 'selected');
                                        $(this).prop("selected", true);
                                    }
                                });
                            }
                            if (item.PaymentTypeId.toString() == "1") {
                                $("#tdCheck").show();
                                $("#txtCheck").val(item.PayNumber.toString());
                            }
                            else {
                                $("#tdCheck").hide();
                            }
                            //$("#txtCheck").val(item.PayNumber.toString());
                            var otherReceiptsAmt = item.OriginalAmount.toString()
                            //otherReceiptsAmt = otherReceiptsAmt.substr(1, otherReceiptsAmt.length);
                            $("#txtAmtSchedE").val(otherReceiptsAmt);
                            if (item.OriginalAmount.toString() != "") {
                                $("#txtAmtSchedE").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtExplanationSchedE").val(item.TransExplanation.toString());

                            // Show/Hide Fields
                            $("#dvReceiptSource").show("slow");
                            $("#divStreetAddress").show("slow");
                            $("#divCity").show("slow");
                            $("#divState").show("slow");
                            $("#divZip5").show("slow");
                            $("#dvReceiptType").show("slow");
                            $("#tdMethod").show("slow");
                            //$("#dvCheck").show("slow");
                            $("#tdCheck").hide();
                            $("#tdCountryContributionChk").show("slow");
                            $("#tdCountryContributionTxt").show("slow");

                        }
                        else { // Unitemized Transactions.
                            $("#lstItemized option").each(function () {
                                if ($(this).text() == item.RItemized.toString()) {
                                    //$(this).attr('selected', 'selected');
                                    $(this).prop("selected", true);
                                }
                            });
                            $("#txtCurrentDate").val(item.SchedDate.toString());
                            $("#txtCurrentDate").focus();
                            if ($("#txtCurrentDate").val().toString() != "MM/DD/YYYY") {
                                $("#txtCurrentDate").removeClass('watermark');
                            }
                            var otherReceiptsAmt = item.OriginalAmount.toString()
                            //otherReceiptsAmt = otherReceiptsAmt.substr(1, otherReceiptsAmt.length);
                            $("#txtAmtSchedE").val(otherReceiptsAmt);
                            if (item.OriginalAmount.toString() != "") {
                                $("#txtAmtSchedE").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtExplanationSchedE").val(item.TransExplanation.toString());

                            // Show/Hide Fields
                            $("#dvReceiptSource").hide("slow");
                            $("#divStreetAddress").hide("slow");
                            $("#divCity").hide("slow");
                            $("#divState").hide("slow");
                            $("#divZip5").hide("slow");
                            $("#dvReceiptType").hide("slow");
                            $("#tdMethod").hide("slow");
                            //$("#dvCheck").hide("slow");
                            $("#tdCheck").hide();                            
                            $("#tdCountryContributionChk").hide("slow");
                            $("#tdCountryContributionTxt").hide("slow");
                        }

                        // Payment Type = Other Explanation Manadatory
                        if (item.PaymentTypeId.toString() == "7") {
                            $("#lblExplanation").text("* Explanation");
                        }

                        // Receipt Type Other Explanation Manadatory
                        if (item.ReceiptTypeDesc.toString() == "Other") {
                            $("#lblExplanation").text("* Explanation");
                        }

                        // Common Code
                        sessionStorage.setItem("EditFlag", "False");
                    });
                });
            }
        }
        // ---------------------------------------------------------------------------------------------------------------------------------------------
        // EDIT COMMON        
        //==============================================================================================================================================

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Edit Other Receipt Received
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_edit_Sched_E', function (e) {
            e.preventDefault();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            var data = tableFilingTransactions.row($(this).parents('tr')).data();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    // Bind Receipt Type Data
                    appCommonEFS_BindAndPopulateDLL("@Url.Content("~/OtherReceiptsReceivedSchedE/GetReceiptTypeData/")", data[26].toString(), "#lstReceiptType", "Receipt Type");

                    // Bind Method Data
                    appCommonEFS_BindAndPopulateDLL("@Url.Content("~/ContributionsCandIndFamily/GetPaymentMethodData/")", data[5].toString(), "#lstMethod", "Payment Method");

                    ClearDialogBoxValidationSchedE();

                    $m("label[for=txtCurrentDate]").text('');
                    $m("#txtCurrentDate").removeClass("error");

                    $m("label[for=txtFirstName]").text('');
                    $m("#txtFirstName").removeClass("error");

                    $m("label[for=txtLastName]").text('');
                    $m("#txtLastName").removeClass("error");

                    $m("label[for=txtAmtSchedE]").text('');
                    $m("#txtPartAmt").removeClass("error");

                    $("#lblExplanation").text("Explanation");

                    if (data[1].toString() == "5") { // Schedule E
                        $("#divLoading").hide();
                        dialog_Sched_E.dialog("open");

                        sessionStorage.setItem("UpdateFlagSchedE", "Yes");

                        sessionStorage.setItem("FilingTransId", data[42].toString());
                        sessionStorage.setItem("FilingEntityId", data[2].toString());

                        if (data[37].toString() == "Yes") { // Itemized Transactions

                            $("#lstItemized")[0].selectedIndex = 0;
                            $("#lstItemized").prop("disabled", true);

                            $("#txtCurrentDate").val(data[10].toString());
                            if (data[10].toString() != "" || data[10].toString() != null) {
                                var MyDate = new Date($("#txtCurrentDate").val().toString());
                                var MyDateString;
                                MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                    + ('0' + MyDate.getDate()).slice(-2) + '/'
                                    + MyDate.getFullYear();
                                $("#txtCurrentDate").val("");
                                $("#txtCurrentDate").val(MyDateString);
                                $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
                            }                           
                            $("#txtReceiptSource").val(data[13].toString());
                            $("#txtStreetName").val(data[18].toString());
                            $("#txtCity").val(data[19].toString());
                            $("#txtState").val(data[20].toString());
                            $("#txtZipCode").val(data[21].toString());
                            /// Country
                            $("#txtCountry").val(data[17].toString());
                            if (data[17].toString() == "United States") {
                                $("#chkCountry").prop('checked', false);
                                $("#txtCountry").prop("disabled", true);
                                $("#txtState").prop('maxLength', '2');
                            }
                            else { // Other Country
                                $("#chkCountry").prop('checked', true);
                                $("#txtCountry").prop("disabled", false);
                                $("#txtState").prop('maxLength', '30');
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                $m('#txtZipCode').attr("placeholder", "");
                            }
                            if (data[21].toString() != "") {
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            }
                            else {
                                $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                if (data[17].toString() == "United States") {
                                    $("#txtZipCode").blur();
                                }
                            }

                            if (data[5].toString() == "1") {
                                $("#tdCheck").show();
                                $("#txtCheck").val(data[23].toString());
                            }
                            else {
                                $("#tdCheck").hide();
                            }

                            // Payment Type = Other Explanation Manadatory
                            if (data[5].toString() == "7") {
                                $("#lblExplanation").text("* Explanation");
                            }

                            // Receipt Type Other Explanation Manadatory
                            if (data[26].toString() == "Other") {
                                $("#lblExplanation").text("* Explanation");
                            }

                            var originalAmount = data[24].toString();

                            $("#txtAmtSchedE").val(originalAmount);
                            if ($("#txtAmtSchedE").val().toString() != "" || $("#txtAmtSchedE").val().toString() != "999999999.99") {
                                $("#txtAmtSchedE").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtExplanationSchedE").val(data[36].toString());

                            // Show/Hide Fields
                            $("#dvReceiptSource").show("slow");
                            $("#divStreetAddress").show("slow");
                            $("#divCity").show("slow");
                            $("#divState").show("slow");
                            $("#divZip5").show("slow");
                            $("#dvReceiptType").show("slow");
                            $("#tdMethod").show("slow");
                            //$("#dvCheck").show("slow");
                            //$("#tdCheck").hide();
                            $("#tdCountryContributionChk").show("slow");
                            $("#tdCountryContributionTxt").show("slow");

                        }
                        else { // Unitemized Transactions.

                            $("#lstItemized")[0].selectedIndex = 1;
                            $("#lstItemized").prop("disabled", true);

                            $("#txtCurrentDate").val(data[10].toString());
                            if ($("#txtCurrentDate").val().toString() != "MM/DD/YYYY") {
                                $("#txtCurrentDate").removeClass('watermark');
                            }

                            var originalAmount = data[24].toString();

                            $("#txtAmtSchedE").val(originalAmount);
                            if ($("#txtAmtSchedE").val().toString() != "" || $("#txtAmtSchedE").val().toString() != "999999999.99") {
                                $("#txtAmtSchedE").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtExplanationSchedE").val(data[36].toString());

                            // Show/Hide Fields
                            $("#dvReceiptSource").hide("slow");
                            $("#divStreetAddress").hide("slow");
                            $("#divCity").hide("slow");
                            $("#divState").hide("slow");
                            $("#divZip5").hide("slow");
                            $("#dvReceiptType").hide("slow");
                            $("#tdMethod").hide("slow");
                            $("#tdCheck").hide();
                            $("#tdCountryContributionChk").hide("slow");
                            $("#tdCountryContributionTxt").hide("slow");
                        }

                        $("#txtCurrentDate").select();

                    } // Other Schedules
                    else if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17", "18", "19", "20", "21"].includes(data[1].toString())) {
                        //Common code to determine redirect url and set session varialbes. Also hides $("#divLoading") on fail.
                        //Uses window.location.href
                        appCommonEFS_DetermineScheduleRedirect(data[1].toString(), data[42].toString());
                    }
                }
                else {
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                //Hide if getEditFlag fails othewise let the dialogs or location changes do it.
                $("#divLoading").hide();
            });
        });
        // Edit Other Receipt Received
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Method Change
        // ------------------------------------------------------------------------------------------------------------------------------------------
        $("#lstMethod").change(function () {

            $("#txtCheck").val("");

            if ($("#lstMethod option:selected").val().toString() == "1") { // CHECK
                $("#tdCheck").show();
                if ($("#lstReceiptType option:selected").val().toString() == "3") {
                    $("#lblExplanation").text("* Explanation");
                }
                else {
                    $("#lblExplanation").text("Explanation");

                    $m("label[for=txtExplanationSchedE]").text('');
                    $m("#txtExplanationSchedE").removeClass("error");
                }
            }
            else if ($("#lstMethod option:selected").val().toString() == "7") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
                $("#tdCheck").hide();
            }
            else {
                $("#lblExplanation").text("Explanation");
                $("#tdCheck").hide();

                $m("label[for=txtExplanationSchedE]").text('');
                $m("#txtExplanationSchedE").removeClass("error");
            }

            if ($("#lstReceiptType option:selected").val().toString() == "3") {
                $("#lblExplanation").text("* Explanation");
            }

            $m("label[for=txtCheck]").text('');
            $m("#txtCheck").removeClass("error");
        });
        // Method Change
        // ------------------------------------------------------------------------------------------------------------------------------------------

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Delete Other Receipt Received
        // Delete Record FILING TRANSACTIONS.
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_remove_Sched_E', function (e) {
            e.preventDefault();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            var dataTrans = tableFilingTransactions.row($(this).parents('tr')).data();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    $.post("@Url.Content("~/_UC_GridCommonControl/GetDeleteFlag/")", {
                    }, function (resultDeleteFlag) {
                        if (resultDeleteFlag == "True") {

                            // LOAN RECEIVED DELETE CHECK.
                            $.post("@Url.Content("~/LoanReceivedSchedI/ValidateDelete_LoanReceived/")", {
                                loan_Lib_Number: dataTrans[41].toString(),
                            }, function (resultDeleteFlagSchedI) {

                                // CHECK THE VALIDATION IF ANY CONTRIBUTION REFUNDS (SCHEDULE 'M') EXISTS OR NOT.
                                // IF SCHEDULE 'M' EXISTS FOR EITHER SCHEDULE 'A', SCHEUDLE 'B', OR SCHEDULE 'C'...
                                // THEN SHOULD NOT DELETE UNTIL CHILD RECORDS DELETE.
                                $.post("@Url.Content("~/ContributionsCandIndFamily/ContributionsRefundSchedMExists/")", {
                                    strTransNumber: dataTrans[42].toString()
                                }, function (resultDelSchedABC) {

                                    // CHECK THE VALIDATION IF ANY EXPENDITURE REFUNDS (SCHEDULE 'L') EXISTS OR NOT.
                                    // IF SCHEDULE 'L' EXITS THEN SCHEDULE 'F' SHOULD NOT DELETE UNTLI CHILD DELETE ALL.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/ExpenditureRefundSchedLExists/")", {
                                        strTransNumber: dataTrans[42].toString()
                                    }, function (resultDelSchedF) {

                                        var resultsDelete = false;
                                        var deleteURL = "";

                                        if (dataTrans[1].toString() == "1") {
                                            if (resultDelSchedABC.toString() != "TRUE") {
                                                if (dataTrans[3].toString() == "5") {
                                                    resultsDelete = "Deleting this transaction will also delete the partnership details added for this transaction. Are you sure you want to delete?"; //window.confirm("Deleting this transaction will also delete the partnership details added for this transaction. Are you sure you want to delete?");
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                                else {
                                                    resultsDelete = "Are you sure you want to delete this transaction?";
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                            }
                                            else {
                                                ShowDialogBox('EFS', 'Monetary Contributions Received From Ind. & Part. transaction cannot be deleted as corresponding Contribution Refunds transaction(s) exist.', 'Ok', '');
                                                return false;
                                            }
                                        }
                                        else if (dataTrans[1].toString() == "2") {
                                            if (resultDelSchedABC.toString() != "TRUE") {
                                                resultsDelete = "Are you sure you want to delete this transaction?";
                                                deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                            }
                                            else {
                                                ShowDialogBox('EFS', 'Monetary Contributions Received From Corporate transaction cannot be deleted as corresponding Contribution Refunds transaction(s) exist.', 'Ok', '');
                                                return false;
                                            }
                                        }
                                        else if (dataTrans[1].toString() == "3") {
                                            if (resultDelSchedABC.toString() != "TRUE") {
                                                if (dataTrans[3].toString() == "11") {
                                                    resultsDelete = "Deleting this transaction will also delete the attribution details added for this transaction. Are you sure you want to delete?"; //window.confirm("Deleting this transaction will also delete the partnership details added for this transaction. Are you sure you want to delete?");
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                                else {
                                                    resultsDelete = "Are you sure you want to delete this transaction?";
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                            }
                                            else {
                                                ShowDialogBox('EFS', 'Monetary Contributions Received From All Other transaction cannot be deleted as corresponding Contribution Refunds transaction(s) exist.', 'Ok', '');
                                                return false;
                                            }
                                        }
                                        else if (dataTrans[1].toString() == "6") {
                                            if (resultDelSchedF.toString() != "TRUE") {
                                                if (dataTrans[29].toString() == "Reimbursement") { // Reimbursement Details
                                                    resultsDelete = "Deleting this transaction will also delete the reimbursement details added for this transaction. Are you sure you want to delete this transaction?"; //window.confirm("Deleting this contribution will also delete the partnership details entered for this contribution. Are you sure you want to delete this contribution?");
                                                    deleteURL = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteFilingTransactions/")";
                                                }
                                                else if (dataTrans[29].toString() == "Credit Card Payment") { // Credit Card Itemization
                                                    resultsDelete = "Deleting this transaction will also delete the credit card itemization added for this transaction. Are you sure you want to delete this transaction?"; //window.confirm("Deleting this contribution will also delete the partnership details entered for this contribution. Are you sure you want to delete this contribution?");
                                                    deleteURL = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteFilingTransactions/")";
                                                }
                                                else if (dataTrans[7].toString() == "Y") { // Subcontractor
                                                    resultsDelete = "Deleting this transaction will also delete the subcontractor details added for this transaction. Are you sure you want to delete this transaction?";
                                                    deleteURL = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteFilingTransactions/")";
                                                }
                                                else if (dataTrans[6].toString() == "Y") { // Liability
                                                    resultsDelete = "Deleting this transaction will also delete the outstanding liability of this transaction. Are you sure you want to delete this transaction?";
                                                    deleteURL = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteFilingTransactions/")";
                                                }
                                                else {
                                                    resultsDelete = "Are you sure you want to delete this transaction?"; //window.confirm("Are you sure do you want to delete this transaction?");
                                                    deleteURL = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteFilingTransactions/")";
                                                }
                                            }
                                            else {
                                                ShowDialogBox('EFS', 'Expenditures/Payments transaction cannot be deleted as corresponding Expenditure Refunds transaction(s) exist.', 'Ok', '');
                                                return false;
                                            }
                                        }
                                        else if (dataTrans[1].toString() == "4") {
                                            if (resultDelSchedABC.toString() != "TRUE") {
                                                if (dataTrans[3].toString() == "5") {
                                                    resultsDelete = "Deleting this transaction will also delete the partnership details added for this transaction. Are you sure you want to delete this transaction?"; //window.confirm("Deleting this contribution will also delete the partnership details entered for this contribution. Are you sure you want to delete this contribution?");
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                                else {
                                                    resultsDelete = "Are you sure you want to delete this transaction?"; //window.confirm("Are you sure do you want to delete this transaction?");
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                            }
                                            else {
                                                ShowDialogBox('EFS', 'In-Kind (Non-Monetary) Contributions Received transaction cannot be deleted as corresponding Contribution Refunds transaction(s) exist.', 'Ok', '');
                                                return false;
                                            }
                                        }
                                        else if (dataTrans[1].toString() == "5") {
                                            resultsDelete = "Are you sure you want to delete this transaction?";
                                            deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                        }
                                        else if (dataTrans[1].toString() == "12") {
                                            resultsDelete = "Are you sure you want to delete this transaction?";
                                            deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                        }
                                        else if (dataTrans[1].toString() == "13") {
                                            resultsDelete = "Are you sure you want to delete this transaction?";
                                            deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                        }
                                        else if (dataTrans[1].toString() == "14") {
                                            resultsDelete = "Are you sure you want to delete this transaction?";
                                            deleteURL = "@Url.Content("~/OutStandingLiabilityLoansSchedN/DeleteOutstandingLiability/")";
                                        }
                                        else if (dataTrans[1].toString() == "16") {
                                            if (dataTrans[30].toString() == "Partnership including LLPs") {
                                                resultsDelete = "Deleting this transaction will also delete the partnership details added for this transaction. Are you sure you want to delete?"; //window.confirm("Deleting this transaction will also delete the partnership details added for this transaction. Are you sure you want to delete?");
                                                deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                            }
                                            else {
                                                resultsDelete = "Are you sure you want to delete this transaction?"; //window.confirm("Are you sure do you want to delete this transaction?");
                                                deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                            }
                                        }
                                        else if (dataTrans[1].toString() == "17") {
                                            if (resultDelSchedF.toString() != "TRUE") {
                                                if (dataTrans[29].toString() == "Reimbursement") { // Reimbursement Details
                                                    resultsDelete = "Deleting this transaction will also delete the reimbursement details added for this transaction. Are you sure you want to delete this transaction?"; //window.confirm("Deleting this contribution will also delete the partnership details entered for this contribution. Are you sure you want to delete this contribution?");
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                                else if (dataTrans[29].toString() == "Credit Card Payment") { // Credit Card Itemization
                                                    resultsDelete = "Deleting this transaction will also delete the credit card itemization added for this transaction. Are you sure you want to delete this transaction?"; //window.confirm("Deleting this contribution will also delete the partnership details entered for this contribution. Are you sure you want to delete this contribution?");
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                                else {
                                                    resultsDelete = "Are you sure you want to delete this transaction?"; //window.confirm("Are you sure do you want to delete this transaction?");
                                                    deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                                }
                                            }
                                            else {
                                                ShowDialogBox('EFS', 'Non-Campaign Housekeeping Expenses transaction cannot be deleted as corresponding Expenditure Refunds transaction(s) exist.', 'Ok', '');
                                                return false;
                                            }
                                        }
                                        else if (dataTrans[1].toString() == "9") {
                                            if (resultDeleteFlagSchedI == "FALSE") {
                                                resultsDelete = "Deleting Loan Received will delete all loan repayments, loan forgiven and outstanding loans records associated with this loan. Are you sure you want to delete?";
                                                deleteURL = "@Url.Content("~/LoanReceivedSchedI/DeleteLoanReceived/")";
                                            }
                                            else {
                                                ShowDialogBox('EFS', 'Either Liabilities/Loans Forgiven or Loan Payments exists against this Loan. Delete these transactions before deleting the Loan.', 'Ok', '');
                                                return false;
                                            }
                                        }
                                        else if (dataTrans[1].toString() == '10') {
                                            resultsDelete = "Deleting Loan Repayment will delete the outstanding loan record and associated with this loan repayment. Are you sure you want to delete?";
                                            deleteURL = "@Url.Content("~/LoanRepaymentsSchedJ/DeleteLoanRepayment/")";
                                        }
                                        else if (dataTrans[1].toString() == '11') {
                                            resultsDelete = "If you Delete Liabilities/Loans Forgiven then Outstanding Liabilities/Loans will also deleted. Do you want to be continue?";
                                            deleteURL = "@Url.Content("~/LiabilitiesLoansForgivenSchedK/DeleteLoanForgiven/")";
                                        }
                                        else { // SCHEDULE '7','8','18'
                                            resultsDelete = "Are you sure you want to delete this transaction?";
                                            deleteURL = "@Url.Content("~/ContributionsCandIndFamily/DeleteFilingTransactions/")";
                                        }

                                        $m('#modal_dialog').text(resultsDelete);
                                        $m("#modal_dialog").dialog({
                                            resizable: false,
                                            width: '400px',
                                            height: 'auto',
                                            bgiframe: false,
                                            closeOnEscape: false,
                                            open: function (event, ui) {
                                                hideDialogXButton(this);
                                                $("#divLoading").hide();
                                            },
                                            buttons: {
                                                "OK": function () {
                                                    //Close Confirm Box.
                                                    $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                                    $("#divLoading").show();
                                                    var options = {};
                                                    options.url = deleteURL;
                                                    options.type = "GET";
                                                    options.data = {
                                                        strLoanLiabNumberOrg: dataTrans[41].toString(),
                                                        strTransNumber: dataTrans[42].toString(),
                                                        strRLiability: dataTrans[6].toString()
                                                    };
                                                    options.dataType = "json";
                                                    options.contentType = "application/json";
                                                    options.success = function (results) {
                                                        window.status = "Record deleted successfully";
                                                        GetAllTransactionTypesData(true, tableFilingTransactions, false, false);
                                                    };
                                                    options.error = function () {
                                                        $("#divLoading").hide();
                                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                                    };
                                                    $.ajax(options);
                                                },
                                                "Cancel": function () {
                                                    $m(this).dialog("close");
                                                }
                                            }
                                        });
                                    });
                                });
                            });
                        }
                        else {
                            ShowDialogBox('EFS', 'The last transaction cannot be deleted.  To delete the Disclosure report, a deletion request must be submitted to cfinfo@elections.ny.gov', 'Ok', '');
                            $("#divLoading").hide();
                        }
                    });
                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before deleting this Transaction.', 'Ok', '');
                    $("#divLoading").hide();
                }
            }).fail(function () {
                $("#divLoading").hide();
            });
        });
        // Delete Other Receipt Received
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        // Clear DialogBox.
        // Clear Attribution Dialog Box..
        $("#btnClearDialog").click(function () {

            sessionStorage.setItem("CountryValSchedE", $("#txtCountry").val().toString());
            sessionStorage.setItem("ItemizedYorNSchedE", $("#lstItemized option:selected").val().toString());

            ClearDialogBoxValidationSchedE();

            if (sessionStorage.getItem("UpdateFlagSchedE").toString() != "Yes") { // Add New transactions

                $("#lblExplanation").text("Explanation");

                $("#dvReceiptSource").show("slow");
                $("#divStreetAddress").show("slow");
                $("#divCity").show("slow");
                $("#divState").show("slow");
                $("#divZip5").show("slow");
                $("#dvReceiptType").show("slow");
                $("#tdMethod").show("slow");
                //$("#dvCheck").show("slow");
                $("#tdCheck").hide();
                $("#tdCountryContributionChk").show("slow");
                $("#tdCountryContributionTxt").show("slow");
            }
            else {
                if (sessionStorage.getItem("ItemizedYorNSchedE").toString() == "N") { // Unitemized

                    $("#txtCurrentDate").blur();
                    $("#txtAmtSchedE").blur();

                    $("#lstItemized")[0].selectedIndex = 1;
                    $("#lstItemized").prop("disabled", true);

                    $("#lblExplanation").text("Explanation");

                    $("#dvReceiptSource").hide("slow");
                    $("#divStreetAddress").hide("slow");
                    $("#divCity").hide("slow");
                    $("#divState").hide("slow");
                    $("#divZip5").hide("slow");
                    $("#dvReceiptType").hide("slow");
                    $("#tdMethod").hide("slow");
                    //$("#dvCheck").hide("slow");
                    $("#tdCheck").hide();
                }
                else { // Itemized

                    $("#txtCurrentDate").blur();
                    $("#txtAmtSchedE").blur();

                    $("#lstMethod")[0].selectedIndex = 0;
                    $("#lstItemized").prop("disabled", true);
                    $("#tdCheck").hide();

                    $("#lblExplanation").text("Explanation");

                    $("#txtCountry").val("United States");
                    $("#txtCountry").prop("disabled", true);
                    $("#chkCountry").prop('checked', false);
                    $("#txtState").prop('maxLength', '2');
                    $("#txtZipCode").blur();

                    //Hide/Show Controls
                    $("#dvReceiptSource").show("slow");
                    $("#divStreetAddress").show("slow");
                    $("#divCity").show("slow");
                    $("#divState").show("slow");
                    $("#divZip5").show("slow");
                    $("#dvReceiptType").show("slow");
                    $("#tdMethod").show("slow");
                    //$("#dvCheck").show("slow");
                    $("#tdCheck").hide();

                    $("#tdCountryContributionChk").show("slow");
                    $("#tdCountryContributionTxt").show("slow");
                }
            }
        });

        //==============================================================================================================================================
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //Bind Clear Click
        $(".clsCommonClear").bind('click', function () {
            $("#divGridMonetary").show();
            sessionStorage.setDataTable = "true";
            $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
            $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");

            sessionStorage.setItem("FilerId", $("#txtFilerID option:selected").val());
            sessionStorage.setItem("CommitteeName", $("#txtCommitteeName option:selected").val());
            sessionStorage.setItem("ElectionCycle", $("#lstElectionCycle option:selected").val());
            sessionStorage.setItem("ElectionType", $("#lstElectionType option:selected").val());
            sessionStorage.setItem("ElectionDate", $("#lstElectionDate option:selected").val());
            sessionStorage.setItem("DisclosureType", $("#lstDisclosureType option:selected").val());
            sessionStorage.setItem("DisclosurePeriod", $("#lstDisclosurePeriod option:selected").val());
            sessionStorage.setItem("CutOffDate", $("#txtReportPeriodDatesFrom").val());
            if ($("#lstElectionType option:selected").val() == "6") {
                sessionStorage.setItem("FilingDate", $("#txtNewFilingDate").val());
            }
            else {
                sessionStorage.setItem("FilingDate", $("#txtReportPeriodDatesTo").val());
            }
            sessionStorage.setItem("TransactionType", $("#lstTransactionType option:selected").val());
            sessionStorage.setItem("lstResigTermType", $("#lstResigTermType option:selected").val());
            sessionStorage.setItem("lstFilingDate", $("#lstFilingDate option:selected").val());

            sessionStorage.setItem("TransactionTypeId", "true");

            //var urlContrHome = "../ContributionsMonetary/ContributionsMonetary";
            var urlContrHome = "@Url.Content("~/ContributionsMonetary/ContributionsMonetary/")";

            window.location.href = urlContrHome;
        });
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //==============================================================================================================================================


        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================
        // CALL LOAD DATA FUNCTION
        var tableFilingTransactions = null;

        LoadData();

        // FUNCTION LOAD DATA
        function LoadData() {
            $("#divLoading").show();
            tableFilingTransactions = $m('#gridFilingTransactions').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                        {
                            "targets": [0, 1, 2, 3, 4, 5, 6, 7, 38, 39, 41, 42, 43, 44],
                            "visible": false,
                            "searchable": false
                        },
                        {
                            "targets": [9],
                            "fnCreatedCell": function (cell) {
                                cell.setAttribute('aria-label', "Row Actions");
                            }
                        }
                    ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridFilingTransactions').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    if (aaData[1] == "5") {
                        $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_E" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_E" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                    else if (aaData[1] == "14") {
                        $m('td:eq(1)', nRow).html('');
                    }
                    else if (aaData[1] == "11") { // LIABILITY/LOANS FORGIVEN 
                        $m('td:eq(1)', nRow).html('<a class="editor_remove_Sched_E" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                    }
                    else {
                        if (aaData[1] != "15") {
                            $m('td:eq(1)', nRow).html('<a class="editor_edit_Sched_E" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_Sched_E" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                        }
                        else { // SCHEDULE 15 LEGACY DATA NOT EDIT NO ADD ONLY DELETE.
                            $m('td:eq(1)', nRow).html('<a class="editor_remove_Sched_E" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>');
                        }
                    }
                    return nRow;
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    GetAllTransactionTypesData(false, callback, false, false);
                }
            });
            tableFilingTransactions.columns.adjust().draw(true);
            $m('#gridFilingTransactions').DataTable().ajax.reload();
            if (@Session["COMM_TYPE_ID"] == "23") {
                tableFilingTransactions.column(46).visible(true);
                tableFilingTransactions.column(47).visible(true);
                tableFilingTransactions.column(48).visible(true);
                tableFilingTransactions.column(49).visible(true);
                tableFilingTransactions.column(50).visible(true);
                tableFilingTransactions.column(51).visible(true);
                tableFilingTransactions.column(52).visible(true);
                tableFilingTransactions.column(53).visible(true);
                tableFilingTransactions.column(54).visible(true);
            }
            else {
                tableFilingTransactions.column(46).visible(false);
                tableFilingTransactions.column(47).visible(false);
                tableFilingTransactions.column(48).visible(false);
                tableFilingTransactions.column(49).visible(false);
                tableFilingTransactions.column(50).visible(false);
                tableFilingTransactions.column(51).visible(false);
                tableFilingTransactions.column(52).visible(false);
                tableFilingTransactions.column(53).visible(false);
                tableFilingTransactions.column(54).visible(false);
            }

            if (@Session["COMM_TYPE_ID"] == "19") {
                tableFilingTransactions.column(55).visible(true);
            }
            else {
                tableFilingTransactions.column(55).visible(false);
            }

            tableFilingTransactions.columns.adjust().draw(false);
            tableFilingTransactions.order([40, 'desc']).draw();
            tableFilingTransactions.columns.adjust().responsive.recalc();
            $("#divLoading").show();
        }

        //Common Code for Set Preferences - Start
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------
        $('#btnSetPreferences').click(function () {
            appCommonEFS_btnSetPrefrencesCommonCode($m("#ddlViewableColumn").multipleSelect("getSelects").toString(), tableFilingTransactions, "ddlViewableColumn", GetTableFilingTransactionsAjaxOptionsData());
        });

        //Commonly used values in this particular page.
        function GetTableFilingTransactionsAjaxOptionsData() {
            return {
                txtFilerID: $("#txtFilerID").val(),
                lstElectionCycle: $("#lstElectionCycle option:selected").val(),
                lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                lstElectionType: $("#lstElectionType option:selected").val(),
                lstElectionDateId: $("#lstElectionDate option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }
        }

        /**
         * Common code for invoking GetAllTransactionTypesData from controller.
         * reloadAndRecalc { boolean } reloads and recalculates the table. When we reload we will display the "divLoading" image until the ajax reload call is completed. This was created for ALM Defect 707 where users were intertacting with the table while the "Processing..." text was still visible.
         * dataTableInstanceToReload { function } The referecne to the datatable we will reload in the success callback.
         * dataOverides { ajax data params } pass to overwrite data values when making ajax call.
         * doneFunction { function } A function to be called if the ajax call is completed.
         */
        function GetAllTransactionTypesData(reloadAndRecalc, dataTableInstanceToReload, dataOverides, doneFunction) {
            var callback = dataTableInstanceToReload ? dataTableInstanceToReload : tableFilingTransactions;
            //Determine what data to use.
            var optionsData = bUtilIsObject(dataOverides) ? dataOverides : GetTableFilingTransactionsAjaxOptionsData();
            appCommonEFS_GetAllTransactionTypesDataCommon(reloadAndRecalc, callback, optionsData, doneFunction); 
        }



        $.post("@Url.Content("~/_UC_GridCommonControl/GetSortName/")", {
        }, function (results) {
            HideColumn(results.toString().split(","));
        });

        /**
         * Use to adjust visible columns.
         * param {array} results an array of column names to help determine which columns to show or hide.
         */
        function HideColumn(results) {
            var rules = {
                "indexesToStartHidden": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
                "indexesToAlwaysKeepUnhidden": [8, 9], //Will always unhide.
                "columnNamesToUnhide": results,//String to match.
                "columnNamesIndexMappings": appCommonEFS_GetGridColumnSettings("UC_GridCommonControl") //String in header, index to unhide
            }
            appCommonEFS_HideTableColumn(tableFilingTransactions, rules);
        }
        //Common Code for Set Preferences - End
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------

        // Fucntion to Clear the Jquery Validation and Reset the Form.
        function ClearDialogBoxValidationSchedE() {

            // Clear form Validation Schedule 'E'
            var validator = $m("#DialogBoxSchedEForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedEForm")[0].reset();   // clear out the form data

            // Set the default values for form.
            $("#txtCountry").val("United States");
            $("#txtCountry").prop("disabled", true);
            $("#chkCountry").prop('checked', false);
            $("#txtState").prop('maxLength', '2');
            $m("#txtCountry").valid();

            // Set the default values for form.
            $("#lblExplanation").text("Explanation");

            // Set the default values for form.
            //$("#lstItemized").prop("disabled", false);
            if (@Session["COMM_TYPE_ID"] == "23") {
                $("#lstItemized").prop("disabled", true);
            }
            else {
                $("#lstItemized").prop("disabled", false);
            }

            // Set the default values for form.
            $("#lstItemized")[0].selectedIndex = 0;
            $("#lstReceiptType")[0].selectedIndex = 0;
            $("#lstMethod")[0].selectedIndex = 0;

            // Set the default values for form.
            $("#txtCurrentDate").blur();
            $("#txtZipCode").blur();
            $("#txtAmtSchedE").blur();

            // On focus
            //$("#lstItemized")[0].focus();
        }

        /**
         * Appends label text to _validate elementys based on a list of custom errors returned from the server.
         * It won't do anyting to handle "AmmountError" keys but it will return true if it sees one in the list.
         * param {reuslt.Errors} errorList
         * Replaces this type of code basically:
            for (var i = 0; i < results.Errors.length; i++) {
                if (results.Errors[i].Key == "txtPartAmt") {
                    $("#txtPartAmtSchedD_validate").append('<label for="txtPartAmtSchedD" class="error">' + results.Errors[i].Value + '</label>');
                }
                if (results.Errors[i].Key == "txtPartExplanationInKind") {
                    $("#txtPartExplanationInKind_validate").append('<label for="txtPartExplanationInKind" class="error">' + results.Errors[i].Value + '</label>');
                }
                if (results.Errors[i].Key == "AmountError") {
                    ShowDialogBox('EFS', 'Partnership Amount cannot be more than Outstanding Amount $' + parseFloat(expPartAmount).toFixed(2).toString(), 'Ok', '');
                }
            }
         */
        function AppendCustomErrorLabels(errorList) {
            //Define special error conditions 
            var errorLabelDiscrepancies = new Map([["txtAmt", "txtAmtSchedE"]]);
            return appCommonEFS_AppendCustomErrorLabelsForAmmountError(errorList, errorLabelDiscrepancies);
        }

        function ClearServerSideErrors() {
            //removing error class and error messages in search form
            $("#txtCurrentDate_validate").empty();
            $("#txtReceiptSource_validate").empty();
            $("#txtReceiptSource_validate").empty();
            $("#txtCountry_validate").empty();
            $("#txtStreetName_validate").empty();
            $("#txtCity_validate").empty();
            $("#txtState_validate").empty();
            $("#txtZipCode_validate").empty();
            $("#txtCheck_validate").empty();
            $("#txtAmtSchedE_validate").empty();
            $("#txtExplanationSchedE_validate").empty();
        }


    }); // Document END>>>> END>>>>>>
</script>



