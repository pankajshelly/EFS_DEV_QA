@*
    // ============================================================
    // AUTHOR     : SATHEESH BASIREDDY
    // CREATE DATE     : 08/10/2017
    // PURPOSE     : EXPENDITURE PAYMENTS SCHEDULE F,N, AND O
    // SPECIAL NOTES:
    // ============================================================
    // Change History:
    //
    // ============================================================
*@

@{
    ViewBag.Title = ": Expenditure Payments Schedule F";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

<form id="ExpenditurePaymentsSchedFForm">

    @Html.Partial("UserControls/_UC_Alert_Message")
    @Html.Partial("UserControls/_UC_Delete_Message")

    <div id="divMainNew" class="mainDiv">
        <div class="mainLowerDivCSSDesktop">
            <div id="divhide" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonShowHide1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonShowHide">
                    <img src="~/Content/Images/up20.png" alt="Up/Hide Filter Arrow" />
                </button>
            </div>
            <div id="divshow" class="hideShowButtonCSS">
                Filter
                <button id="btnCommonHideShow1" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonHideShow">
                    <img src="~/Content/Images/down20.png" alt="Down/Show Filter Arrow" />
                </button>
            </div>
        </div>
        <div class="mainLowerDivCSS">
            <div id="divhideForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonShowHide2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonShowHide">
                        <img src="~/Content/Images/up20.png" alt="Up/Hide Filter Arrow" />
                    </button>
                </div>
            </div>
            <div id="divshowForMobile" class="hideShowButtonCSS">
                File a New Disclosure Report
                <div class="paddingleft6emcss floatRight">
                    Filter
                    <button id="btnCommonHideShow2" type="button" class="btn btn-sm buttonTransparent  paddingLeft6emCSS clsbtnCommonHideShow">
                        <img src="~/Content/Images/down20.png" alt="Down/Show Filter Arrow" />
                    </button>
                </div>
            </div>
        </div>
        <div id="divTopSection">
            <div id="selectorItsRpt">
                <div class="divWidth">
                    <fieldset>
                        <legend class="visibleToScreenReaderOnly">Filter Controls Top</legend>
                        <div class="floatRightNew clsShowButtonClass">
                            <input type="button" id="btnCommonSearch1" class="btn btn-default clsCommonSearch clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Apply" title="Apply" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear1" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp1" /></button>
                        </div>
                    </fieldset>
                    <div class="requiredTextFilter">* marks required fields</div>
                    <div id="divFilerID">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerID">* Filer ID</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtFilerID", ViewData["txtFilerID"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblFilerID" })
                        </div>
                    </div>
                    <div id="divFilerType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilerType">* Filer Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("txtFilerType", null, new { id = "txtFilerType", @class = "txtWidth txtReportPeriodDatesFrom", aria_labelledby = "lblFilerType" })
                        </div>
                    </div>
                    <div id="divCommitteeName">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCommitteeName">* Candidate/Committee Name</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("txtCommitteeName", ViewData["txtCommitteeName"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblCommitteeName" })
                        </div>
                    </div>
                    <div id="divElectionCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionCycle">* Report Year</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionCycle", ViewData["lstElectionCycle"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionCycle" })
                        </div>
                    </div>
                    <div id="divOfficeType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblOfficeType">* Election Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCOfficeType", null, "- Select -", new { id = "lstUCOfficeType", @class = "spanMobileWidth", aria_labelledby = "lblOfficeType" })
                        </div>
                    </div>
                    <div id="divCounty">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblCounty">* County</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCCounty", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblCounty" })
                        </div>
                    </div>
                    <div id="divMunicipality">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblMunicipality">* Municipality</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstUCMuncipality", null, "- Select -", new { @class = "spanMobileWidth", aria_labelledby = "lblMunicipality" })
                        </div>
                    </div>
                    <div id="divElectionType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionType">* Report Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionType", ViewData["lstElectionType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionType" })
                        </div>
                    </div>
                    <div id="divElectionDate">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblElectionDate">* Election Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstElectionDate", ViewData["lstElectionDate"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblElectionDate" })
                        </div>
                    </div>
                    <div id="divDisclosureType">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosureType">* Disclosure Type</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosureType", ViewData["lstDisclosureType"] as SelectList, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosureType" })
                        </div>
                    </div>
                    <div id="divDisclosurePeriod">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblDisclosurePeriod">* Disclosure Period</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstDisclosurePeriod", null, new { @class = "spanMobileWidth", aria_labelledby = "lblDisclosurePeriod" })
                        </div>
                    </div>
                    <div id="divReportPeriodDates">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesFrom">* Cut off Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesFrom", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesFrom" })
                        </div>
                    </div>
                    <div id="divFilingDateDropDown">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDate">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstFilingDate", ViewData["lstFilingDate"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstFilingDate", aria_labelledby = "lblFilingDate" })
                        </div>
                    </div>
                    <div id="divReportPeriodDatesTo">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReportPeriodDatesTo">* Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.TextBox("searchTerm", null, new { id = "txtReportPeriodDatesTo", @class = "txtWidth", aria_labelledby = "lblReportPeriodDatesTo" })
                        </div>
                    </div>

                    @* OFFICE CYCLE FILING DATE *@
                    <div id="divFilingDateOffCycle">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblFilingDateOffCycle">* New Filing Date</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            <input type="text" id="txtNewFilingDate" name="txtNewFilingDate" class="txtWidth txtCurrentDateCls" maxlength="10" aria-labelledby="lblFilingDateOffCycle" />
                        </div>
                    </div>
                    @* OFFICE CYCLE FILING DATE *@

                    <div id="divFilingReason">
                        <div class="verticalCSSDestop lblCSS">
                            <span id="lblReasonforFiling">Resignation/Termination</span>
                        </div>
                        <div class="verticalCSSDestop DDLCSS">
                            @Html.DropDownList("lstResigTermType", ViewData["lstResigTermType"] as SelectList, "- Select -", new { @class = "spanMobileWidth lstResigTermType", aria_labelledby = "lblReasonforFiling" })
                        </div>
                    </div>
                    <div class="floatRightNew" style="padding-bottom: 2em;">
                        <fieldset>
                            <legend class="visibleToScreenReaderOnly">Filter Controls Bottom</legend>
                            <input type="button" id="btnCommonSearch2" class="btn btn-default clsCommonSearch ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Apply" title="Search" style="font-size:12px;" />&nbsp;
                            <input type="button" id="btnCommonClear2" class="btn btn-default clsCommonClear ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />&nbsp;
                            <button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelp();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help" id="imgHelp2" /></button>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="floatRight paddingRight3em paddingTop0pt6em">
        <p><button type="button" class="btn btn-sm buttonTransparent" onclick="CallHelpSchedF();"><img src="~/Content/Images/help.png" alt="Question/Help Icon (Opens in new window)" class="ButtonImageCSS" title="Help Schedule F" id="imgHelp3" /></button></p>
    </div>

    <div id="divBreadCrumb" class="breadCrumbDivCSS" style="width: 46em;">
        <nav aria-label="Breadcrumbs" id="pBreadCrumb" class="FontSizeCss displayInline">
            <ol class="breadcrumb">
                @*<li>@Html.ActionLink("Home", "Home", "Home", null, new { @class = "" })</li>*@
                <li>@Html.ActionLink("File a Disclosure Report", "ContributionsMonetary", "ContributionsMonetary", null, new { @class = "lnkLogout" })</li>
                <li class="active">Expenditures/Payments</li>
            </ol>
        </nav>
        <div id="divHeader1" class="paddingtoppt5" style="width: 170%;">
            <h1>
                <span class="jquerySelectorGridHeader">File a Disclosure Report</span> -
                <span id="lblHEleYear">File a Disclosure Report</span> -
                <span id="lblHDisclPer">File a Disclosure Report</span>
            </h1>
        </div>
        <div id="divHeader2" class="paddingtoppt5 PageHeaderWidth">
            <div class="paddingTop0em2em DisplayInlineBlock">
                <h3><span class="jquerySelectorGridHeader">Expenditures/Payments</span></h3>
            </div>
        </div>
    </div>
    <div id="divGrid" class="divGridCSSTransferin">
        @Html.Partial("UserControls/_UC_Loding")
        @Html.Partial("UserControls/_UC_GridCommonControl")
    </div>

    @*COMMON GRIDS FOR LIABILITY DETAILS*@
    <div id="divLiabilityDetailsGrid" class="divGridCSSTransferin">
        @* ORIGINAL SCHEDULE 'N' *@
        <div id="divUCOrigLiab" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_OrgLiab_Grid")
        </div>
        @* EXPENDITURE PAYMENT SCHEDUL 'F' *@
        <div id="divUCExpPayments" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_ExpPayments_Grid")
        </div>
        @* Qualified Expenditures SCHEDUL 'T' *@
        <div id="divUCExpPaymentsT" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_SchtT_Grid")
        </div>
        @* OUTSTANDING LIABILITY SCHEDULE 'N' *@
        <div id="divUCOutLiab" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_OutLiab_Grid")
        </div>
        @* OUTSTANDING LIABILITY FORGIVEN SCHEDULE 'K' *@
        <div id="divUCLiabForgiven" class="paddingTop1em">
            @Html.Partial("UserControls/_UC_Expenditure_Payments_LiabilityForgiven_Grid")
        </div>
    </div>
    @*COMMON GRIDS FOR LIABILITY DETAILS*@

    @*// Grid Attribution (Subcontractor)*@
    <div id="divShowSubcontroctor" class="divGridCSS">
        <div class="paddingLeft2em paddingBottom2em paddingtop2em">
            <div class="row">
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <h3 style="padding-top: 0.5em;">Subcontractor</h3>
                </div>
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <div>
                        <input type="button" id="btnAddNewAttribution" class="btn btn-default" name="Command" value="Add Subcontractor" title="Add Subcontractor" style="font-size:12px;" />
                    </div>
                </div>
            </div>
        </div>
        <div style="float: right; margin-right: 4em;">
            <span id="lblSubContractorAmt" class="clsOutstandingAmt">Outstanding Amount: </span>
        </div>
        <div id="divGridSubcontractor">
            <table id="gridSubcontractorSchedF" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead id="thdGrid1" class="header">
                    <tr>
                        <th class="never">Filing Trans Id</th> @* 0 *@
                        <th class="never">Filing Entity Id</th> @* 1 *@
                        <th>Expand</th> @* 2 *@
                        <th>Action</th> @* 3 *@
                        <th>Payee Name</th> @* 4 *@
                        <th>Subcontractor Name</th> @* 5 *@
                        <th>First Name</th> @* 6 *@
                        <th>Middle Name</th> @* 7 *@
                        <th>Last Name</th> @* 8 *@
                        <th>Country</th> @* 9 *@
                        <th>Street Address</th> @* 10 *@
                        <th>City</th> @* 11 *@
                        <th>State</th> @* 12 *@
                        <th>Zip Code</th> @* 13 *@
                        <th>Amount Attributed $</th> @* 14 *@
                        <th>Explanation</th> @* 15 *@
                        <th>Itemized</th> @* 16 *@
                        <th class="never">Trans Number</th> @* 17 *@
                        <th class="never">Trans Mapping</th> @* 18 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    @*// Grid Reimbursement Details Data.*@
    <div id="divShowReimbursement" class="divGridCSS">
        <div class="paddingLeft2em paddingBottom2em paddingtop2em">
            <div class="row">
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <h3 style="padding-top: 0.5em;">Reimbursement Details</h3>
                </div>
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <div>
                        <input type="button" id="btnAddNewReimbursement" class="btn btn-default" name="Command" value="Add Reimbursement Details" title="Add Reimbursement Details" style="font-size:12px;" />
                    </div>
                </div>
            </div>
        </div>
        <div style="float: right; margin-right: 4em;">
            <span id="lblReimbursementAmt" class="clsOutstandingAmt">Outstanding Amount: </span>
        </div>
        <div id="divGridReimbursement" class="paddingTop0pt6em">
            <table id="gridReimbursementSchedF" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead id="thdGrid2" class="header">
                    <tr>
                        <th class="never">Filing Trans Id</th> @* 0 *@
                        <th class="never">Filing Entity Id</th> @* 1 *@
                        <th class="never">PurposeCodeId</th> @* 2 *@
                        <th>Expand</th> @* 3 *@
                        <th>Action</th> @* 4 *@
                        <th>Date Paid</th> @* 5 *@
                        <th>Original Payee Name</th> @* 6 *@
                        <th>Details Payee Name</th> @* 7 *@
                        <th>Country</th> @* 8 *@
                        <th>Street Address</th> @* 9 *@
                        <th>City</th> @* 10 *@
                        <th>State</th> @* 11 *@
                        <th>Zip Code</th> @* 12 *@
                        <th>Purpose Code</th> @* 13 *@
                        <th>Amount</th> @* 14 *@
                        <th>Explanation</th> @* 15 *@
                        <th>Itemized</th> @* 16 *@
                        <th class="never">Trans Number</th> @* 17 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    @*// Grid Credit Card Payment Data.*@
    <div id="divShowCreditCardPayment" class="divGridCSS">
        <div class="paddingLeft2em paddingBottom2em paddingtop2em">
            <div class="row">
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <h3 style="padding-top: 0.5em;">Credit Card Itemization</h3>
                </div>
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <div>
                        <input type="button" id="btnAddNewCreditCardPayment" class="btn btn-default" name="Command" value="Add Itemization" title="Add Itemization" style="font-size:12px;" />
                    </div>
                </div>
            </div>
        </div>
        <div style="float: right; margin-right: 4em; font-weight: bold;">
            <span id="lblBalanceCCIAmt" class="clsOutstandingAmt">Outstanding Amount: </span>
        </div>
        <div id="divGridCreditCardPayment">
            <table id="gridCreditCardPaymentSchedF" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead id="thdGrid3" class="header">
                    <tr>
                        <th class="never">Filing Trans Id</th> @* 0 *@
                        <th class="never">Filing Entity Id</th> @* 1 *@
                        <th class="never">Purpose Code Id</th> @* 2 *@
                        <th>Expand</th> @* 3 *@
                        <th>Action</th> @* 4 *@
                        <th>Date Paid</th> @* 5 *@
                        <th>Original Payee Name</th> @* 6 *@
                        <th>Detail Payee Name</th> @* 7 *@
                        <th>Country</th> @* 8 *@
                        <th>Street Address</th> @* 9 *@
                        <th>City</th> @* 10 *@
                        <th>State</th> @* 11 *@
                        <th>Zip Code</th> @* 12 *@
                        <th>Purpose Code</th> @* 13 *@
                        <th>Amount</th> @* 14 *@
                        <th>Explanation</th> @* 15 *@
                        <th>Itemized</th> @* 16 *@
                        <th class="never">Trans Number</th> @* 17 *@
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    @*// Grid Sched R - Amount Allocation*@
    <div id="divShowAllocation" class="divGridCSS">
        <div class="paddingLeft2em paddingBottom2em paddingtop2em">
            <div class="row">
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-3">
                    <h3 style="padding-top: 0.5em;">Expense Allocation Among Candidates</h3>
                </div>
                <div class="col-6 col-sm-4 col-md-3 col-lg-2 col-xl-2">
                    <div>
                        <input type="button" id="btnAddNewAllocation" class="btn btn-default" name="Command" value="Add Allocation" title="Add Allocation" style="font-size:12px;" />
                    </div>
                </div>
            </div>
        </div>
        <div id="divgridAmountAllocationSchedR" class="paddingTop0pt6em">
            <table id="gridAmountAllocationSchedR" class="table-bordered display nowrap" style="width:100%; border-spacing: 0px;">
                <thead id="thdGrid2" class="header">
                    <tr>
                        <th class="never">FilingTransId</th> @* 0 *@
                        <th class="never">TransNumber</th> @* 1 *@
                        <th class="never">Filing Entity Id</th> @* 2 *@
                        <th>Expand</th> @* 3 *@
                        <th>Action</th> @* 4 *@
                        <th>Support/Oppose</th> @* 5 *@
                        <th>Transaction Date</th> @* 6 *@                        
                        <th>First Name</th> @* 7 *@
                        <th>Middle Name</th> @* 8 *@
                        <th>Last Name</th> @* 9 *@
                        <th>Amount</th> @* 10 *@
                        <th>Election Year</th> @* 11 *@
                        <th>Office</th> @* 12 *@
                        <th>District</th> @* 13 *@
                        <th>Explanation</th> @* 14 *@
                        <th>Itemized</th> @* 15 *@                        
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</form>

@* EXPENDITURE PAYMENTS FORM *@
<div id="dialog-form_Sched_F" title="Add/Edit Transaction">
    <form id="DialogBoxSchedFForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%;">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="dvUnitemized">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblItemized">Is Transaction Itemized?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstItemized", ViewData["lstItemized"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblItemized" })
                    </div>
                </div>

                <div id="dvSubcontractorExpenditurePayments" class="divClearBoth">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblSubcontractor">Is Expenditure Subcontracted?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstSubcontractor", ViewData["lstSubcontractor"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblSubcontractor" })
                    </div>
                </div>

                <div id="dvLiabilityxpenditurePayments" class="divClearBoth">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        @* UPDATED QUESTIONS LIABILITY 03/12/2020 *@
                        <span id="lblLiability">Is this a Partial Payment OR Payment on an Outstanding Liability?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstLiability", ViewData["lstLiability"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblLiability" })
                    </div>
                </div>

                <div id="dvLiabilityExists" class="divClearBoth">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        @* UPDATED QUESTIONS LIABILITY 03/12/2020 *@
                        <span id="lblLiabilityExists">Has This Liability Been Previously Reported?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstLiabilityExists", ViewData["lstLiabilityExists"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblLiabilityExists" })
                    </div>
                </div>

                <div id="divSuppOrOpps" class="divClearBoth">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblSuppOrOpps">* Is this in Support or Opposition to a Candidate?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstSuppOrOpps", ViewData["lstSuppOrOpps"] as SelectList, "- Select -", new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblSuppOrOpps" })
                    </div>
                </div>

                <div id="tdDateRcvdExpenditurePayments">
                    <div id="txtCurrentDate_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDatePaid">* Date Paid</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDate" name="txtCurrentDate" class="datepicker txtWidthForDateSchedDateF txtCurrentDateSchedQCls" maxlength="10" aria-labelledby="lblDatePaid" />
                    </div>
                </div>

                <div id="tdPayorNameExpenditurePayments">
                    <div id="txtPayeeName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPayeeName_txtPayeeName">* Payee Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtPayeeName", null, new { id = "txtPayeeName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "40", aria_labelledby = "lblPayeeName_txtPayeeName" })
                    </div>
                </div>

                <div id="tdCountryContributionChk">
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblOtherCountry_chkCountry">Other Country</span>
                    </div>
                    <div class="verticalCSSDestopForCheckBoxSched_ABC DDLCSSAdd">
                        @Html.CheckBox("chkCountry", false, new { @class = "txtWidthForDialogSched_ABC_CountryChkbox", aria_labelledby = "lblOtherCountry_chkCountry" })
                    </div>
                </div>
                <div id="tdCountryContributionTxt" class="divClearBoth">
                    <div id="txtCountry_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblCountry_txtCountry">* Country</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSched_ABC DDLCSSAdd">
                        @Html.TextBox("txtCountry", null, new { id = "txtCountry", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCountry_txtCountry" })
                    </div>
                </div>

                <div id="divStreetAddress">
                    <div id="txtStreetName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblStreetName_txtStreetName">* Street Address</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStreetName", null, new { id = "txtStreetName", @class = "txtWidthForDialogSched_A", @maxlength = "60", aria_labelledby = "lblStreetName_txtStreetName" })
                    </div>
                </div>

                <div id="divCity">
                    <div id="txtCity_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCity_txtCity">* City</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCity", null, new { id = "txtCity", @class = "txtWidthForDialogSched_A", @maxlength = "30", aria_labelledby = "lblCity_txtCity" })
                    </div>
                </div>

                <div id="divState">
                    <div id="txtState_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblState_txtState">* State</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtState", null, new { id = "txtState", @class = "txtWidthForDialogSched_A", @maxlength = "2", aria_labelledby = "lblState_txtState" })
                    </div>
                </div>

                <div id="divZip5">
                    <div id="txtZipCode_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblZip5_txtZipCode">* Zip Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtZipCode", null, new { id = "txtZipCode", @class = "txtWidthForDialogSched_A", @maxlength = "10", aria_labelledby = "lblZip5_txtZipCode" })
                    </div>
                </div>

                <div id="tdPurposeCodeExpenditurePayments">
                    <div id="lstPurposeCode_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPurposeName_lstPurposeCode">* Purpose Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstPurposeCode", ViewData["lstPurposeCode"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblPurposeName_lstPurposeCode" })
                    </div>
                </div>

                <div id="dvDateIncurred">
                    <div id="lstDateIncurred_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDateIncurred">* Date Incurred & Original Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstDateIncurred", ViewData["lstDateIncurred"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblDateIncurred" })
                    </div>
                </div>

                <div id="tdMethodExpenditurePayments">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblMethod">* Method</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstMethod", ViewData["lstMethod"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblMethod" })
                    </div>
                </div>

                <div id="tdCheck">
                    <div id="txtCheckExpenditurePayments_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCheck">* Check #</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCheckExpenditurePayments", null, new { id = "txtCheckExpenditurePayments", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCheck" })
                    </div>
                </div>

                <div id="dvOriginalAmtTxt" class="divClearBoth">
                    <div id="txtOriginalAmount_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblOriginalAmountTxt">* Original Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtOriginalAmount", null, new { id = "txtOriginalAmount", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblOriginalAmountTxt" })
                    </div>
                </div>

                <div id="tdAmt">
                    <div id="txtAmtExpenditurePayments_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmount_txtAmtExpenditurePayments" class="jqueryClassSelectorForLblAmount">* Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtExpenditurePayments", null, new { id = "txtAmtExpenditurePayments", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblAmount_txtAmtExpenditurePayments" })
                    </div>
                </div>

                <div id="dvOriginalAmt">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblOriginalAmt">Original Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtOriginalAmt", null, new { id = "txtOriginalAmt", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblOriginalAmt" })
                    </div>
                </div>

                <div id="dvOutstandingAmt">
                    <div id="txtOutstandingAmt_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblOutstandingAmt">Outstanding Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtOutstandingAmt", null, new { id = "txtOutstandingAmt", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblOutstandingAmt" })
                    </div>
                </div>

                <div id="tdExplanation">
                    <div id="txtExplanationSchedF_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanation">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationSchedF", null, new { id = "txtExplanationSchedF", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanation" })
                    </div>
                </div>



                <div id="AddUpdateBtnIdSchedP_SchedF" class="AddLeftCSSSchedABC">
                    <br />
                    <input type="button" id="btnSaveSchedF" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialog" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>

            </div>
        </div>
    </form>
</div>

@* SUBCONTRACTOR FORM *@
<div id="dialog-form_SubContractor" title="Add/Edit Subcontractor">
    <form id="DialogBoxSchedFSubcontrForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="dvItemized_DialogBoxSchedFSubcontrForm">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblItemizedSubcontr">Is Transaction Itemized?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstItemizedSubcontr", ViewData["lstItemizedSubcontr"] as SelectList, new { @class = "txtWidthForDialogSched_APartner", aria_labelledby = "lblItemizedSubcontr" })
                    </div>
                </div>
                <div id="dvPartIndividual" class="divClearBoth">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblIndividualSubcontr">Is Subcontractor name an individual?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstIndividualSubcontr", ViewData["lstIndividualSubcontr"] as SelectList, new { @class = "txtWidthForDialogSched_APartner", aria_labelledby = "lblIndividualSubcontr" })
                    </div>
                </div>
                <div id="tdPartnershipNamePartner">
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblPartnershipName">Payee Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartshiptName", null, new { id = "txtPartshiptName", @class = "txtWidthForDialogSched_APartner", aria_labelledby = "lblPartnershipName" })
                    </div>
                </div>
                <div id="tdSubcontractorName">
                    <div id="txtSubcontractorName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblSubcontractorName">* Subcontractor Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtSubcontractorName", null, new { id = "txtSubcontractorName", @class = "txtWidthForDialogSched_APartner", @maxlength = "40", aria_labelledby = "lblSubcontractorName" })
                    </div>
                </div>

                <div id="tdPartFirstName">
                    <div id="txtPartFirstName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblFirstName">* First Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartFirstName", null, new { id = "txtPartFirstName", @class = "txtWidthForDialogSched_APartner", @maxlength = "30", aria_labelledby = "lblFirstName" })
                    </div>
                </div>

                <div id="tdPartMI">
                    <div id="txtPartMI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblMiddleName">Middle Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartMI", null, new { id = "txtPartMI", @class = "txtWidthForDialogSched_APartner", @maxlength = "30", aria_labelledby = "lblMiddleName" })
                    </div>
                </div>

                <div id="tdPartLastName">
                    <div id="txtPartLastName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblLastName">* Last Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartLastName", null, new { id = "txtPartLastName", @class = "txtWidthForDialogSched_APartner", @maxlength = "30", aria_labelledby = "lblLastName" })
                    </div>
                </div>

                <div id="tdCountryPartnershipChk">
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblOtherCountryPartnership">Other Country</span>
                    </div>
                    <div class="verticalCSSDestopForCheckBoxSched_ABC DDLCSSAdd">
                        @Html.CheckBox("chkCountryPartnership", false, new { @class = "txtWidthForDialogSched_ABC_CountryChkbox", aria_labelledby = "lblOtherCountryPartnership" })
                    </div>
                </div>
                <div id="tdCountryPartnershipTxt" class="divClearBoth">
                    <div id="txtCountryPartnership_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblCountryPartnership">* Country</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtCountryPartnership", null, new { id = "txtCountryPartnership", @class = "txtWidthForDialogSched_APartner", @maxlength = "30", aria_labelledby = "lblCountryPartnership" })
                    </div>
                </div>

                <div id="tdPartStreetName">
                    <div id="txtPartStreetName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblStreetAddress">* Street Address</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartStreetName", null, new { id = "txtPartStreetName", @class = "txtWidthForDialogSched_APartner required", @maxlength = "60", aria_labelledby = "lblStreetAddress", required = "required" })
                    </div>
                </div>

                <div id="tdPartCity">
                    <div id="txtPartCity_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblCity_txtPartCity">* City</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartCity", null, new { id = "txtPartCity", @class = "txtWidthForDialogSched_APartner required", @maxlength = "30", aria_labelledby = "lblCity_txtPartCity", required = "required" })
                    </div>
                </div>
                <div id="tdPartState">
                    <div id="txtPartState_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblState_txtPartState">* State</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartState", null, new { id = "txtPartState", @class = "txtWidthForDialogSched_APartner required", @maxlength = "2", aria_labelledby = "lblState_txtPartState", required = "required" })
                    </div>
                </div>
                <div id="tdPartZip5">
                    <div id="txtPartZip5_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblZip5_txtPartZip5">* Zip Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartZip5", null, new { id = "txtPartZip5", @class = "txtWidthForDialogSched_APartner required", @maxlength = "10", aria_labelledby = "lblZip5_txtPartZip5", required = "required" })
                    </div>
                </div>
                <div id="tdPartAmt" class="divClearBoth">
                    <div id="txtPartAmtSchedF_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblAmtAttributed_txtPartAmtSchedF">* Amount Attributed $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartAmtSchedF", null, new { id = "txtPartAmtSchedF", @class = "txtWidthForDialogSched_APartner", @maxlength = "12", aria_labelledby = "lblAmtAttributed_txtPartAmtSchedF" })
                    </div>
                </div>

                <div id="tdPartExplanation">
                    <div id="txtPartExplanationEP_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLablePartnerSchedA lblCSSAdd">
                        <span id="lblExplanationSubContr">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxPartnerSchedA DDLCSSAdd">
                        @Html.TextBox("txtPartExplanationEP", null, new { id = "txtPartExplanationEP", @class = "txtWidthForDialogSched_APartner", @maxlength = "250", aria_labelledby = "lblExplanationSubContr" })
                    </div>
                </div>

                <div id="AddUpdateBtnIdSchedAPart" class="AddLeftCSSPartnerSchedA">
                    <input type="button" id="btnSaveSchedFSubcontractor" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogPartner" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialogSubcontractor" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>

                <div id="dvHideShowMsg" style="clear: both; padding-left: 2em; padding-right: 1em; padding-top: 0.5em; padding-bottom: 1em;">
                    <div style="text-align: right; padding-bottom: 0.2em;">
                        <input type="button" id="btnHideShowMessage" class="btn btn-default clsSetPreserences" name="Command" value="Hide" title="Hide/Show" style="font-size:12px;" />
                    </div>
                    <div id="dvHide" style="text-align: left; padding-bottom: 0.2em;">
                        <P>Information on subcontractors is required for...</P>
                    </div>
                    <div id="dvMessage">
                        <p style="text-align: justify;">
                            Information on subcontractors is required for any subcontracted amount greater than $10,000 in the case of statewide candidates and $5,000 for other offices.
                        </p>
                    </div>
                </div>

            </div>
        </div>
    </form>
</div>

@* CREDIT CARD ITEMIZATION FORM *@
<div id="dialog-form_CreditCardItem" title="Add/Edit Credit Card Itemization">
    <form id="DialogBoxSchedFCCIForm">
        <div class="divWidthSchedABC">
            <div class="dvWidth100pt">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="dvItemizedCCI">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblItemizedCCItem_lstItemizedCCI">Is Transaction itemized?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstItemizedCCI", ViewData["lstItemizedCCI"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblItemizedCCItem_lstItemizedCCI" })
                    </div>
                </div>

                <div id="tdDatePaidCCI">
                    <div id="txtCurrentDateSchedQCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDateReceived_txtCurrentDateSchedQCCI">* Date Paid</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDateSchedQCCI" name="txtCurrentDateSchedQCCI" class="datepicker txtWidthForDateSched_ABC txtCurrentDateSchedQCls" maxlength="10" aria-labelledby="lblDateReceived_txtCurrentDateSchedQCCI" />
                    </div>
                </div>

                <div id="tdPayeeNameOrgCCI">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPayeeNameOrg">Original Payee Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtOriginalPayeeNameCCI", null, new { id = "txtOriginalPayeeNameCCI", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "40", aria_labelledby = "lblPayeeNameOrg" })
                    </div>
                </div>
                <div id="tdPayeeNameCCI">
                    <div id="txtDetailsPayeeNameCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPayeeName_txtDetailsPayeeNameCCI">* Detail Payee Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtDetailsPayeeNameCCI", null, new { id = "txtDetailsPayeeNameCCI", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "40", aria_labelledby = "lblPayeeName_txtDetailsPayeeNameCCI" })
                    </div>
                </div>

                <div id="tdCountryContributionChkCCI">
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblOtherCountry_chkCountryCCI">Other Country</span>
                    </div>
                    <div class="verticalCSSDestopForCheckBoxSched_ABC DDLCSSAdd">
                        @Html.CheckBox("chkCountryCCI", false, new { @class = "txtWidthForDialogSched_ABC_CountryChkbox", aria_labelledby = "lblOtherCountry_chkCountryCCI" })
                    </div>
                </div>
                <div id="tdCountryContributionTxtCCI" class="divClearBoth">
                    <div id="txtCountryCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblCountry_txtCountryCCI">* Country</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSched_ABC DDLCSSAdd">
                        @Html.TextBox("txtCountryCCI", null, new { id = "txtCountryCCI", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCountry_txtCountryCCI" })
                    </div>
                </div>

                <div id="divStreetAddressCCI">
                    <div id="txtStreetNameCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblStreetName_txtStreetNameCCI">* Street Address</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStreetNameCCI", null, new { id = "txtStreetNameCCI", @class = "txtWidthForDialogSched_A required", @maxlength = "60", aria_labelledby = "lblStreetName_txtStreetNameCCI", required = "required" })
                    </div>
                </div>

                <div id="divCityCCI">
                    <div id="txtCityCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCity_txtCityCCI">* City</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCityCCI", null, new { id = "txtCityCCI", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCity_txtCityCCI", required = "required" })
                    </div>
                </div>

                <div id="divStateCCI">
                    <div id="txtStateCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblState_txtStateCCI">* State</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStateCCI", null, new { id = "txtStateCCI", @class = "txtWidthForDialogSched_A required", @maxlength = "2", aria_labelledby = "lblState_txtStateCCI", required = "required" })
                    </div>
                </div>

                <div id="divZip5CCI">
                    <div id="txtZipCodeCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblZip5_txtZipCodeCCI">* Zip Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtZipCodeCCI", null, new { id = "txtZipCodeCCI", @class = "txtWidthForDialogSched_A required", @maxlength = "10", aria_labelledby = "lblZip5_txtZipCodeCCI", required = "required" })
                    </div>
                </div>

                <div id="tdPurposeCodeItemization">
                    <div id="lstPurposeCodeCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPurposeName_lstPurposeCodeCCI">* Purpose Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstPurposeCodeCCI", ViewData["lstPurposeCodeCCI"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblPurposeName_lstPurposeCodeCCI" })
                    </div>
                </div>
                <div id="tdAmtCCI">
                    <div id="txtAmountCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmtAttributed_txtAmountCCI">* Amount</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmountCCI", null, new { id = "txtAmountCCI", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblAmtAttributed_txtAmountCCI" })
                    </div>
                </div>

                <div id="tdExplanationCCI">
                    <div id="txtExplanationCCI_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanationCCI">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationCCI", null, new { id = "txtExplanationCCI", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanationCCI" })
                    </div>
                </div>

                <div id="AddUpdateBtnIdSchedP_SchedFCCItem" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnSaveSchedFCCItem" class="btn btn-default clsSetPreserences clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnUpdateSchedFCCItem" class="btn btn-default clsSetPreserences clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogSchedFCCItem" class="btn btn-default clsSetPreserences clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialogSchedFCCItem" class="btn btn-default clsSetPreserences clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>

            </div>
        </div>
    </form>
</div>

@* REIMBURSEMENT DETAILS FORM *@
<div id="dialog-form_ReimbursementDetails" title="Add/Edit Reimbursement Details">
    <form id="DialogBoxSchedFReimForm">
        <div class="divWidthSchedABC">
            <div class="dvWidth100pt">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="dvItemized_DialogBoxSchedFReimForm">
                    <div class="verticalCSSDestopForLblLSC lblCSSAdd">
                        <span id="lblItemizedCCItem_lstItemizedReim">Is Transaction Itemized?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxLSC DDLCSSAdd">
                        @Html.DropDownList("lstItemizedReim", ViewData["lstItemizedReim"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblItemizedCCItem_lstItemizedReim" })
                    </div>
                </div>

                <div id="tdDatePaidReim">
                    <div id="txtCurrentDateReimDetSchedF_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDateReceived_txtCurrentDateReimDetSchedF">* Date Paid</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDateReimDetSchedF" name="txtCurrentDateReimDetSchedF" class="datepicker txtWidthForDateSched_ABC txtCurrentDateSchedQCls" maxlength="10" aria-labelledby="lblDateReceived_txtCurrentDateReimDetSchedF" />
                    </div>
                </div>

                <div id="tdOriginalPayeeName">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPayeeName_txtOriginalPayeeNameReimDet">Original Payee Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtOriginalPayeeNameReimDet", null, new { id = "txtOriginalPayeeNameReimDet", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "40", aria_labelledby = "lblPayeeName_txtOriginalPayeeNameReimDet" })
                    </div>
                </div>

                <div id="tdDetailsPayeeNameReim">
                    <div id="txtDetailsPayeeNameReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDetailsPayeeNameReim">* Details Payee Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtDetailsPayeeNameReim", null, new { id = "txtDetailsPayeeNameReim", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "40", aria_labelledby = "lblDetailsPayeeNameReim" })
                    </div>
                </div>

                <div id="tdCountryContributionChkReim">
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblOtherCountry_chkCountryReim">Other Country</span>
                    </div>
                    <div class="verticalCSSDestopForCheckBoxSched_ABC DDLCSSAdd">
                        @Html.CheckBox("chkCountryReim", false, new { @class = "txtWidthForDialogSched_ABC_CountryChkbox", aria_labelledby = "lblOtherCountry_chkCountryReim" })
                    </div>
                </div>
                <div id="tdCountryContributionTxtReim" class="divClearBoth">
                    <div id="txtCountryReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSched_ABC lblCSSAdd">
                        <span id="lblCountry_txtCountryReim">* Country</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSched_ABC DDLCSSAdd">
                        @Html.TextBox("txtCountryReim", null, new { id = "txtCountryReim", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCountry_txtCountryReim" })
                    </div>
                </div>


                <div id="divStreetAddressReim">
                    <div id="txtStreetNameReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblStreetName_txtStreetNameReim">* Street Address</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStreetNameReim", null, new { id = "txtStreetNameReim", @class = "txtWidthForDialogSched_A required", @maxlength = "60", aria_labelledby = "lblStreetName_txtStreetNameReim", required = "required" })
                    </div>
                </div>

                <div id="divCityReim">
                    <div id="txtCityReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblCity_txtCityReim">* City</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtCityReim", null, new { id = "txtCityReim", @class = "txtWidthForDialogSched_A required", @maxlength = "30", aria_labelledby = "lblCity_txtCityReim", required = "required" })
                    </div>
                </div>

                <div id="divStateReim">
                    <div id="txtStateReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblState_txtStateReim">* State</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtStateReim", null, new { id = "txtStateReim", @class = "txtWidthForDialogSched_A required", @maxlength = "2", aria_labelledby = "lblState_txtStateReim", required = "required" })
                    </div>
                </div>

                <div id="divZip5Reim">
                    <div id="txtZipCodeReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblZip5_txtZipCodeReim">* Zip Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtZipCodeReim", null, new { id = "txtZipCodeReim", @class = "txtWidthForDialogSched_A required", @maxlength = "10", aria_labelledby = "lblZip5_txtZipCodeReim", required = "required" })
                    </div>
                </div>

                <div id="tdPurposeCodeReim">
                    <div id="lstPurposeCodeReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblPurposeName_lstPurposeCodeReim">* Purpose Code</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstPurposeCodeReim", ViewData["lstPurposeCodeReim"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblPurposeName_lstPurposeCodeReim" })
                    </div>
                </div>

                <div id="tdAmtReim" class="divClearBoth">
                    <div id="txtAmtReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmount_txtAmtReim">* Amount $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtReim", null, new { id = "txtAmtReim", @class = "txtWidthForDialogSched_A required", @maxlength = "12", aria_required = "true", aria_labelledby = "lblAmount_txtAmtReim" })
                    </div>
                </div>

                <div id="tdExplanationReim">
                    <div id="txtExplanationSchedQReim_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanationReim">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationSchedQReim", null, new { id = "txtExplanationSchedQReim", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanationReim" })
                    </div>
                </div>

                <div id="AddUpdateBtnIdSchedP_SchedFReim" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnSaveSchedFReim" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnUpdateSchedFReim" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogReim" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialogReim" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>

            </div>
        </div>
    </form>
</div>

@* LIABILITY SAVE MESSAGE BOX FORM *@
<div id="dialog-form_LiabSaveMessage" title="EFS">
    <p id="messageWithLiability">
        Transaction saved successfully. The liability balance will automatically be adjusted on any subsequent disclosure reports with the add/edit/delete of this liability transaction. Make sure to submit all amended disclosure reports to show the liability balance accurately.
    </p>
    <p id="messageWithOutLiability">
        Transaction saved successfully.
    </p>
    <div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix">
        <div class="ui-dialog-buttonset">
            <input type="button" id="btnLiabSaveMessageOk" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Ok" title="Ok" style="font-size:12px;" />
        </div>
    </div>
</div>

@* SCHED R DIALOG *@
<div id="dialog-form_Sched_R" title="Add/Edit Transaction">
    <form id="DialogBoxSchedRForm">
        <div class="divWidthSchedABC">
            <div style="width: 100%;">
                <div class="requiredTextDialogs">Required fields are marked with an *</div>
                <div id="divDiaSupportOppose">
                    <div id="lstDiaSupportOppose_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDiaSupportOppose">* Support or Oppose?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstDiaSupportOppose", ViewData["ViewDiaSupportOppose"] as SelectList, "- Select -", new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblDiaSupportOppose" })
                    </div>
                </div>
                <div id="dvIsAllocationExist">
                    <div id="lstAllocationExisting_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAllocationExisting">* Is Allocation Existing?</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstAllocationExisting", ViewData["lstAllocationExisting"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblAllocationExisting" })
                    </div>
                </div>
                <div id="tdDateRcvd">
                    <div id="txtCurrentDateAllocatedSchedR_validate" class="verticalCSSDestopForError">
                    </div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDateReceived">* Date Allocated</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        <input type="text" id="txtCurrentDateAllocatedSchedR" name="txtCurrentDateAllocatedSchedR" class="datepicker txtWidthForDateSched_ABC txtCurrentDateSchedQCls" maxlength="10" aria-labelledby="lblDateReceived" />
                    </div>
                </div>
                <div id="divLenderFirstName">
                    <div id="txtLenderFirstName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderFirstName">* First Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderFirstName", null, new { id = "txtLenderFirstName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "30", aria_labelledby = "lblLenderFirstName" })
                    </div>
                </div>
                <div id="divLenderMiddleName">
                    <div id="txtLenderMIName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderMiddleName">Middle Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderMIName", null, new { id = "txtLenderMIName", @class = "txtWidthForDialogSched_A", @maxlength = "30", aria_labelledby = "lblLenderMiddleName" })
                    </div>
                </div>
                <div id="divLenderLastName">
                    <div id="txtLenderLastName_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblLenderLastName">* Last Name</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtLenderLastName", null, new { id = "txtLenderLastName", @class = "txtWidthForDialogSched_A required zIndexCSS", @maxlength = "30", aria_labelledby = "lblLenderLastName" })
                    </div>
                </div>
                <div id="tdElectYearAllocation">
                    <div id="lstElectionCycleAllocated_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblElectionCycleAllocated">* Election Year Allocated</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstElectionCycleAllocated", ViewData["lstElectionCycle"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblElectionCycleAllocated" })
                    </div>
                </div>
                <div id="tdOffice">
                    <div id="lstOffice_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblOffice">* Office</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstOffice", ViewData["lstOffice"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblOffice" })
                    </div>
                </div>
                <div id="tdDistrict">
                    <div id="lstDistrict_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblDistrict">* District</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.DropDownList("lstDistrict", ViewData["lstDistrict"] as SelectList, new { @class = "txtWidthForDialogSched_A", aria_labelledby = "lblDistrict" })
                    </div>
                </div>
                <div id="divAmount">
                    <div id="txtAmtExpensesAllocation_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmountAltAllReport">* Amount Allocated this report $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtExpensesAllocation", null, new { id = "txtAmtExpensesAllocation", @class = "txtWidthForDialogSched_A required", @maxlength = "13", aria_labelledby = "lblAmountAltAllReport" })
                    </div>
                </div>
                <div id="divAmountAllReport">
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblAmountAllReport">* Amount Allocated all reports $</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtAmtAllReport", null, new { id = "txtAmtAllReport", @class = "txtWidthForDialogSched_A required", @maxlength = "13", aria_labelledby = "lblAmountAllReport" })
                    </div>
                </div>
                <div id="divExplanation">
                    <div id="txtExplanationCommonScheR_validate" class="verticalCSSDestopForError"></div>
                    <div class="verticalCSSDestopForLableSchedABC lblCSSAdd">
                        <span id="lblExplanation">Explanation</span>
                    </div>
                    <div class="verticalCSSDestopForTextboxSchedABC DDLCSSAdd">
                        @Html.TextBox("txtExplanationCommonScheR", null, new { id = "txtExplanationCommonScheR", @class = "txtWidthForDialogSched_A", @maxlength = "250", aria_labelledby = "lblExplanation" })
                    </div>
                </div>
                <div id="AddUpdateBtnIdSchedA" class="AddLeftCSSSchedABC">
                    <input type="button" id="btnUpdateDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnAddDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Save" title="Save" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnClearDialogEditSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Clear" title="Clear" style="font-size:12px;" />
                    <input type="button" id="btnCloseDialogSchedR" class="btn btn-default clsSetPreserences ui-button ui-widget ui-state-default ui-corner-all" name="Command" value="Close" title="Close" style="font-size:12px;" />
                </div>
            </div>
        </div>
    </form>
</div>
<script>
    $m = jQuery.noConflict();

    var autoNameFound = false;
    var amountAllReports = '';

    function CallHelpSchedF() {

        var myWidth = 1050;
        var myHeight = 550;

        var left = (screen.width - myWidth) / 2;
        var top = (screen.height - myHeight) / 4;

        window.open("../../ExpenditurePaymentsSchedF/GetScheduleFHelpPopUp", "Help", 'width=550, height=600,scrollbars=1, width=' + myWidth + ', height=' + myHeight + ', top=' + top + ', left=' + left);
    }

    $('#menuNav').css('opacity', 0);
    $('#ExpenditurePaymentsSchedFForm').css('opacity', 0);
    $('#DialogBoxSchedFForm').css('opacity', 0);
    $('#DialogBoxSchedFSubcontrForm').css('opacity', 0);
    $('#DialogBoxSchedFCCIForm').css('opacity', 0);
    $('#DialogBoxSchedFReimForm').css('opacity', 0);
    // LIABILITY DETAILS
    $('#divExpPayOutLiability').css('opacity', 0);
    $('#divExpPayPayments').css('opacity', 0);
    $('#divExpPayLiabilityForgiven').css('opacity', 0);
    $('#divExpPayOriginalLiability').css('opacity', 0);
    $('#divWelcomeBanner').css('opacity', 0);
    $(window).on('load', function () {
        $('#menuNav').css('opacity', 1);
        $('#ExpenditurePaymentsSchedFForm').css('opacity', 1);
        $('#DialogBoxSchedFForm').css('opacity', 1);
        $('#DialogBoxSchedFSubcontrForm').css('opacity', 1);
        $('#DialogBoxSchedFCCIForm').css('opacity', 1);
        $('#DialogBoxSchedFReimForm').css('opacity', 1);
        // LIABILITY DETAILS
        $('#divExpPayOutLiability').css('opacity', 1); 
        $('#divExpPayPayments').css('opacity', 1);
        $('#divExpPayLiabilityForgiven').css('opacity', 1);
        $('#divExpPayOriginalLiability').css('opacity', 1);
        $('#divWelcomeBanner').css('opacity', 1);
    });


    $m(document).ready(function () {
        // FORM VALIDATION SCHEDULE 'A' JQUERY VALIDATOR
        //----------------------------------------------------------------------------------------------------------------------------------------------

        // Common Function in EFS-Validation.js file - Start
        validatePage("DialogBoxSchedFForm");
        ValidateReimburesementDetails("DialogBoxSchedFReimForm");
        ValidateCreditCardItemization("DialogBoxSchedFCCIForm");
        PartnershipValidation("DialogBoxSchedFSubcontrForm");
        ValidateAmountAllocationItemization("DialogBoxSchedRForm");
        LefthandFilterValues();        
        
        // Common Function in EFS-Validation.js file - ENd
        // JQUERY VALIDATITON REGULAR EXPRESSIONS.
        //----------------------------------------------------------------------------------------------------------------------------------------------

        $("#tdButtonUpdate").hide();

        $("#dvOriginalAmt").hide();

        $("#divLiabilityDetailsGrid").hide();

        $("#lblBalanceAmt").hide();
        $("#lblSubContractorAmt").hide();
        $("#lblBalanceCCIAmt").hide();

        $("#dvDateIncurred").hide();
        $("#dvOriginalAmtTxt").hide();
        $("#dvOutstandingAmt").hide();

        $("#txtOutstandingAmt").prop("disabled", true);

        sessionStorage.setItem("SubContractor", "No");
        sessionStorage.setItem("Reimbursement", "No");

        $("#divShowSubcontroctor").hide();
        $("#divGridSubcontractor").hide();

        $("#divShowLiability").hide();
        $("#divGridLiability").hide();

        $("#divShowReimbursement").hide();
        $("#divGridReimbursement").hide();

        $("#divShowCreditCardPayment").hide();
        $("#gridCreditCardPaymentSchedF").hide();
        $("#divShowAllocation").hide();

        var tableSubcotractor = '';
        var tableLiability = '';
        var tableReimbursement = '';
        var tableCreditCardPayment = '';
        var tableAmountAllocationSchedR = '';

        //----------------------------------------------------------------------------------------------------------------------
        /// Dialog Box Code /////////////////////////////////////////////////////////////////////

        var dialog;
        var dialog_Sched_F;
        var dialogSubcontractor;
        var dialogLiability;
        var dialogCreditCardItemization;
        var dialogReimbursementDetails;

        // FILING TRANSACTIONS DIALOG BOX
        dialog_Sched_F = $m("#dialog-form_Sched_F").dialog({
            autoOpen: false,
            resizable: false,
            draggable: false,
            height: 'auto',
            width: 620,
            position: {
                my: "center top",
                at: "center top+250"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        // SUBCONTRACTOR DIALOG BOX
        dialogSubcontractor = $m("#dialog-form_SubContractor").dialog({
            autoOpen: false,
            resizable: false,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+220"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        // OUTSTANDING LIABILITY DIALOG BOX
        dialogLiability = $m("#dialog-form_Liability").dialog({
            autoOpen: false,
            resizable: false,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+220"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        // CREDIT CARD ITEMIZATION DAILOG BOX.
        dialogCreditCardItemization = $m("#dialog-form_CreditCardItem").dialog({
            autoOpen: false,
            resizable: false,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+220"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        // REIMBURSEMENT DETAILS DAILOG BOX.
        dialogReimbursementDetails = $m("#dialog-form_ReimbursementDetails").dialog({
            autoOpen: false,
            resizable: false,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+220"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        // LIABILITY SAVE MESSAGE DIALOG BOX.
        dialogLiabSaveMessage = $m("#dialog-form_LiabSaveMessage").dialog({
            autoOpen: false,
            resizable: false,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+220"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) {
                $(".ui-dialog-titlebar-close", ui.dialog | ui).hide();
            }
        });

        // FILING TRANSACTION DIALOG BOX
        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialog_Sched_F = $m("#dialog-form_Sched_F").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialog_Sched_F = $m("#dialog-form_Sched_F").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialog_Sched_F = $m("#dialog-form_Sched_F").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 620,
                    modal: true,
                    dialogClass: 'DialogCustomStyle',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        // SUBCONTRACTOR DIALOG BOX
        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialogSubcontractor = $m("#dialog-form_SubContractor").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogSubcontractor = $m("#dialog-form_SubContractor").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialogSubcontractor = $m("#dialog-form_SubContractor").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyleSchedFDet',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        // OUTSTANDING LIABILITY DIALOG BOX
        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialogLiability = $m("#dialog-form_Liability").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogLiability = $m("#dialog-form_Liability").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialogLiability = $m("#dialog-form_Liability").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyle',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        // CREDIT CARD ITEMIZATION DIALOB BOX.
        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialogCreditCardItemization = $m("#dialog-form_CreditCardItem").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogCreditCardItemization = $m("#dialog-form_CreditCardItem").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialogCreditCardItemization = $m("#dialog-form_CreditCardItem").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyleSchedFDet',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        // REIMBURSEMENT DETAILS DIALOB BOX.
        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialogReimbursementDetails = $m("#dialog-form_ReimbursementDetails").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogReimbursementDetails = $m("#dialog-form_ReimbursementDetails").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialogReimbursementDetails = $m("#dialog-form_ReimbursementDetails").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyleSchedFDet',
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();

        // LIABILITY SAVE MESSAGE DIALOG BOX.
        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialogLiabSaveMessage = $m("#dialog-form_LiabSaveMessage").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialogLiabSaveMessage = $m("#dialog-form_LiabSaveMessage").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                });
            }
            else if ($(window).width() > 900) {
                dialogLiabSaveMessage = $m("#dialog-form_LiabSaveMessage").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    dialogClass: 'DialogCustomStyleSchedFDet'
                });
            }
        }).resize();

        /// Dialog Box Code /////////////////////////////////////////////////////////////////////
        dialog = $m("#dialog-form_Sched_R").dialog({
            autoOpen: false,
            resizable: true,
            height: 'auto',
            width: 456,
            position: {
                my: "center top",
                at: "center top+200"
            },
            modal: true,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) { hideDialogXButton(this); }
        });

        $(window).resize(function () {
            //// get the screen height and width
            if ($(window).width() < 500) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 300,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 500 && $(window).width() <= 900) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
            else if ($(window).width() > 900) {
                dialog = $m("#dialog-form_Sched_R").dialog({
                    autoOpen: false,
                    resizable: false,
                    height: 'auto',
                    width: 456,
                    modal: true,
                    open: function (event, ui) { hideDialogXButton(this); }
                });
            }
        }).resize();



        /// Dialog Box Code /////////////////////////////////////////////////////////////////////
        //----------------------------------------------------------------------------------------------------------------------

        // Subcontractor Message Hide/Show.....
        $("#dvHide").hide();

        // Subcontractor Message Hide/Show....
        $("#btnHideShowMessage").click(function () {

            var btnText = $(this).attr("value");

            if (btnText == "Hide") {
                $("#dvHide").show();
                $("#dvMessage").hide();
                $("#btnHideShowMessage").val("Show");
            }
            else if (btnText == "Show") {
                $("#dvHide").hide();
                $("#dvMessage").show();
                $("#btnHideShowMessage").val("Hide");
            }
        });



        //====================================================================================================================
        // Date picker validation based on Filing Type.
        if ($("#lstElectionType option:selected").val().toString() == "6") { // Off-Cycle
            if ($("#lstFilingDate option:selected").text().toString() == "- New Filing Date -") {
                sessionStorage.setItem("CuttOffDateForFiling", bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString());
            }
            else {
                sessionStorage.setItem("CuttOffDateForFiling", $("#lstFilingDate option:selected").text().toString());
            }
        }
        else {
            sessionStorage.setItem("CuttOffDateForFiling", bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString());
        }
        // Date picker validation based on Filing Type.
        //====================================================================================================================


        //========================================================================================================================================
        // DATE CONTROL CODE........
        // DATE FOR SCHEDULE 'F' DIALOG BOX.
        $m(".txtCurrentDateSchedQCls").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: bUtilSanitizeString(sessionStorage.getItem("CuttOffDateForFiling")).toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDate").valid();
            },
        }).datepicker();

        $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();
        $("#txtCurrentDate").addClass("watermarkHTMLTextBox");
        $("#txtCurrentDate").focusin(function () {
            $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
        });

        // Watermark TextBox. ////////////////////////////////////////////////////

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDate").focusout(function () {
            if ($("#txtCurrentDate").val().toString() != "") {
                if ($("#txtCurrentDate").val().toString() != "MM/DD/YYYY") {
                    if ($m("#txtCurrentDate").valid()) {
                        var MyDate = new Date($("#txtCurrentDate").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDate").val("");
                        $("#txtCurrentDate").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDate").addClass("watermarkHTMLTextBox");
            }
        });

        //-------------------------------------------------------------------------------------------------------
        // DATE FOR SCHEDULE 'F' - CREDIT CARD ITEMIZATION
        $m(".txtCurrentDateSchedQCls").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: bUtilSanitizeString(sessionStorage.getItem("CuttOffDateForFiling")).toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDateSchedQCCI").valid();
            },
        }).datepicker();

        $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();
        $("#txtCurrentDateSchedQCCI").addClass("watermarkHTMLTextBox");
        $("#txtCurrentDateSchedQCCI").focusin(function () {
            $("#txtCurrentDateSchedQCCI").removeClass("watermarkHTMLTextBox");
        });

        // Watermark TextBox. ////////////////////////////////////////////////////

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDateSchedQCCI").focusout(function () {
            if ($("#txtCurrentDateSchedQCCI").val().toString() != "") {
                if ($("#txtCurrentDateSchedQCCI").val().toString() != "MM/DD/YYYY") {
                    if ($m("#txtCurrentDateSchedQCCI").valid()) {
                        var MyDate = new Date($("#txtCurrentDateSchedQCCI").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDateSchedQCCI").val("");
                        $("#txtCurrentDateSchedQCCI").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDateSchedQCCI").addClass("watermarkHTMLTextBox");
            }
        });
        //-------------------------------------------------------------------------------------------------------
        // DATE FOR SCHEDULE 'F' - REIMBURSEMENT DETAILS
        $m(".txtCurrentDateSchedQCls").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: bUtilSanitizeString(sessionStorage.getItem("CuttOffDateForFiling")).toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDateReimDetSchedF").valid();
            },
        }).datepicker();

        $m('.datepicker').attr("placeholder", "MM/DD/YYYY").datepicker();
        $("#txtCurrentDateReimDetSchedF").addClass("watermarkHTMLTextBox");
        $("#txtCurrentDateReimDetSchedF").focusin(function () {
            $("#txtCurrentDateReimDetSchedF").removeClass("watermarkHTMLTextBox");
        });

        // Watermark TextBox. ////////////////////////////////////////////////////

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDateReimDetSchedF").focusout(function () {
            if ($("#txtCurrentDateReimDetSchedF").val().toString() != "") {
                if ($("#txtCurrentDateReimDetSchedF").val().toString() != "MM/DD/YYYY") {
                    if ($m("#txtCurrentDateReimDetSchedF").valid()) {
                        var MyDate = new Date($("#txtCurrentDateReimDetSchedF").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDateReimDetSchedF").val("");
                        $("#txtCurrentDateReimDetSchedF").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDateReimDetSchedF").addClass("watermarkHTMLTextBox");
            }
        });

        // DATE FOR SCHEDULE 'F' DIALOG BOX.
        $m(".txtCurrentDateSchedQCls").datepicker({
            showOn: "button",
            buttonImage: "../../Content/Images/Calendar.png",
            buttonImageOnly: false,
            buttonText: "Select From Date",
            changeMonth: true,
            changeYear: true,
            numberOfMonths: 1,
            maxDate: bUtilSanitizeString(sessionStorage.getItem("CuttOffDateForFiling")).toString(),
            dateFormat: 'mm/dd/yy',
            onChange: function () {
                $m("#txtCurrentDate").valid();
            },
        }).datepicker();
        // DATE CONTROL CODE........
        //========================================================================================================================================

        // Payment Method change.
        $("#lstMethod").change(function () {
            $("#txtCheckExpenditurePayments").val("");

            var selectedMethod = $("#lstMethod option:selected").val().toString();

            if (selectedMethod == "1") {
                $("#tdCheck").show();
                $("#lblExplanation").text("Explanation");

                $m("label[for=txtExplanationSchedF]").text('');
                $m("#txtExplanationSchedF").removeClass("error");

                if ($("#lstPurposeCode option:selected").val().toString() == "8"
                    || $("#lstPurposeCode option:selected").val().toString() == "51") { // OTHER
                    // EXPLANATION MANADATORY
                    $("#lblExplanation").text("* Explanation");

                    $m("label[for=txtExplanationSchedF]").text('');
                    $m("#txtExplanationSchedF").removeClass("error");
                }
                else {
                    $("#lblExplanation").text("Explanation");

                    $m("label[for=txtExplanationSchedF]").text('');
                    $m("#txtExplanationSchedF").removeClass("error");
                }
            }
            else if (selectedMethod == "7") {
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
                $("#tdCheck").hide();
            }
            else if ($("#lstPurposeCode option:selected").val().toString() == "8"
                    || $("#lstPurposeCode option:selected").val().toString() == "51") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");

                $m("label[for=txtExplanationSchedF]").text('');
                $m("#txtExplanationSchedF").removeClass("error");
            }
            else {
                $("#lblExplanation").text("Explanation");

                $m("label[for=txtExplanationSchedF]").text('');
                $m("#txtExplanationSchedF").removeClass("error");
                $("#tdCheck").hide();
            }

            $m("label[for=txtCheckExpenditurePayments]").text('');
            $m("#txtCheckExpenditurePayments").removeClass("error");
        });

        // DIALOG BOX FOR OUTSTANDING LIABILITY - SEARCH
        $m("#btnAddNewLiability").button().on("click", function () {
            event.preventDefault();

            $("#btnNextSchedFLiability").val("Next >> ");

            dialogLiability.dialog("open");

            $("#btnSaveSchedFLiability").hide();

            $("#dvExplLiabilityError").hide();
            $("#dvCreditorNameError").hide();

            // Hide Fields
            $("#dvDateIncurredTxt").hide();
            $("#dvOriginalAmtTxt").hide();
            $("#dvOutstandingAmt").hide();
            $("#dvCreditorNameTxt").hide();
            $("#dvStreetName").hide();
            $("#dvCity").hide();
            $("#dvState").hide();
            $("#dvZipCode").hide();
            $("#dvAmount").hide();
            $("#dvExplanationLiab").hide();

            // Show
            $("#dvCreditorName").show();
            $("#dvDateIncurred").show();
            $("#dvOriginalAmt").show();

            $("#txtCreditorName").val(sessionStorage.getItem("EntityName").toString());
            $("#txtCreditorName").prop("disabled", true);
            $("#lstDateIncurred")[0].selectedIndex = 0;

            // Bind Creditor Name and Address Data.


            // Bind Date Incurred
            var options = {};
            options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetDateIncurred/")";
            options.type = "POST";
            options.data = JSON.stringify(
                {
                    strFilingEntityId: sessionStorage.getItem("FilingEntityId"),
                    strFilerId: $("#txtFilerID option:selected").text().toString()
                });
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                $("#lstDateIncurred").empty();
                $("#lstDateIncurred").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                for (var i = 0; i < results.length; i++) {
                    $("#lstDateIncurred").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                }
            };
            options.error = function () {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
            };
            $.ajax(options);

        });

        $("#txtCreditorName").focusin(function () {
            $("#dvCreditorNameError").hide();
            $("#txtCreditorName").removeClass("ui-state-error");
        });

        // DIALOG BOX FOR OUTSTANDING LIABILITY - SAVE
        $m("#btnNextSchedFLiability").button().on("click", function () {

            if ($("#btnNextSchedFLiability").val().toString() == "Next >> ") { // Next

                var valid = true;

                // Validation - Date Incurred + Amount
                if ($("#lstDateIncurred option:selected").text().toString() == "- Select -") {
                    ShowDialogBox('EFS', 'Select Date Incurred ', 'Ok', '');
                    valid = false;
                    $("#lstDateIncurred").focus();
                }

                if (valid) {

                    var originalAmt = $("#lstOriginalAmount option:selected").text().toString();
                    var originalAmtIndex = originalAmt.indexOf("$");
                    var originalAmtCount = originalAmt.length;
                    var originalAmt = originalAmt.substring(originalAmtIndex, originalAmtCount - 1).toString();

                    $("#txtDateIncurred").val($("#lstDateIncurred option:selected").text().toString());
                    $("#txtOriginalAmount").val("$" + originalAmt);

                    var strUpdateStatus = "N";
                    // Outstanding Amount
                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetOutstandingAmount/")", {
                        strFlngEntityId: sessionStorage.getItem("EntityName"),
                        strUpdateStatusVal: strUpdateStatus.toString(),
                        strSchedFAmt: sessionStorage.getItem("SchedFAmount")
                    }, function (result) {
                        $("#txtOutstandingAmt").val("$" + parseFloat(result).toFixed(2).toString());
                    });

                    $("#btnSaveSchedFLiability").show();

                    $("#btnNextSchedFLiability").val("Back");

                    $("#lblLiabilityHeader").text("Outstanding Liability");

                    // Hide Fields
                    $("#dvCreditorName").hide();
                    $("#dvDateIncurred").hide();
                    $("#dvOriginalAmt").hide();

                    // Show Fields
                    $("#dvDateIncurredTxt").show();
                    $("#txtDateIncurred").prop("disabled", true);
                    $("#dvOutstandingAmt").show();
                    $("#txtOutstandingAmt").prop("disabled", true);
                    $("#dvCreditorNameTxt").show();
                    $("#txtCreditorNameTxt").prop("disabled", true);
                    $("#dvStreetName").show();
                    $("#txtLiabStreetAddress").prop("disabled", true);
                    $("#dvCity").show();
                    $("#txtLiabCity").prop("disabled", true);
                    $("#dvState").show();
                    $("#txtLiabState").prop("disabled", true);
                    $("#dvZipCode").show();
                    $("#txtLiabZipCode").prop("disabled", true);
                    $("#dvAmount").hide();
                    $("#txtLiabilityAmt").prop("disabled", true);
                    $("#dvExplanationLiab").show();
                    $("#txtLiabExplanation").val("");

                    // Focus
                    $("#txtLiabExplanation").focus();
                }
            }
            else { // Back
                $("#btnNextSchedFLiability").val("Next >> ");

                $("#dvCreditorName").show();
                $("#dvDateIncurred").show();
                $("#dvOriginalAmt").show();

                $("#dvDateIncurredTxt").hide();
                //$("#dvOriginalAmtTxt").hide();
                $("#dvOutstandingAmt").hide();
                $("#dvCreditorNameTxt").hide();
                $("#dvStreetName").hide();
                $("#dvCity").hide();
                $("#dvState").hide();
                $("#dvZipCode").hide();
                $("#dvAmount").hide();
                $("#dvExplanationLiab").hide();

                $("#txtCreditorName").focus();

                $("#btnSaveSchedFLiability").hide();

                $("#lblLiabilityHeader").text("Search Liability");
            }

        });

        // DIALOG BOX FOR ATTRIBUTIONS (SUBCONTRACTOR)
        $m("#btnAddNewAttribution").button().on("click", function () {
            //event.preventDefault();

            // Subcontractor Message Hide/Show.....
            $("#dvHide").hide();
            $("#dvMessage").show();
            $("#btnHideShowMessage").val("Hide");
            // Subcontractor Message Hide/Show.....

            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    //$("#btnSaveSchedFSubcontractor").val("Save");
                    sessionStorage.setItem("UpdateFlagSchedFSubcont", "No");

                    // Clear Values...
                    ClearDialogBoxValidationSchedFSubcont();

                    // Hide/Show controls
                    $("#tdSubcontractorName").hide();

                    $("#tdPartFirstName").show("slow");
                    $("#tdPartMI").show("slow");
                    $("#tdPartLastName").show("slow");

                    $("#dvPartIndividual").show("slow");
                    $("#tdPartnershipNamePartner").show("slow");
                    $("#tdPartStreetName").show("slow");
                    $("#tdPartCity").show("slow");
                    $("#tdPartState").show("slow");
                    $("#tdPartZip5").show("slow");
                    $("#tdPartCity").show("slow");
                    $("#tdCountryPartnershipChk").show("slow");
                    $("#tdCountryPartnershipTxt").show("slow");
                    // Hide/Show controls

                    ClearErrorsSubcontractorDialogBox();

                   if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedSubcontr").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedSubcontr").prop("disabled", false);
                    }

                    dialogSubcontractor.dialog("open");

                    $('#lstItemizedSubcontr').focus();

                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            });

        });

        // Add New Reimbursement
        $m("#btnAddNewReimbursement").button().on("click", function () {

            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("UpdateFlagSchedFReim", "No");

                    sessionStorage.setItem("LiabilityExpAmt", "null");
                    sessionStorage.setItem("LibFlngEntyId", "null");
                    sessionStorage.setItem("flagUpdate", "null");
                    sessionStorage.setItem("Reimbursement", "Yes");

                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedReim").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedReim").prop("disabled", false);
                    }

                    dialogReimbursementDetails.dialog("open");

                    ClearDialogBoxValidationSchedQReim();

                    ClearErrorsReimbursementDialogBox() ;

                    // Add/Edit
                    $("#btnSaveSchedFReim").show();
                    $("#btnUpdateSchedFReim").hide();

                    $("#txtOriginalPayeeNameReimDet").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                    // Hide/Show
                    $("#tdDatePaidReim").show();
                    $("#tdOriginalPayeeName").show();
                    $("#tdDetailsPayeeNameReim").show();
                    $("#divStreetAddressReim").show();
                    $("#divCityReim").show();
                    $("#divStateReim").show();
                    $("#divZip5Reim").show();
                    $("#tdPurposeCodeReim").show();
                    $("#tdAmtReim").show();
                    $("#tdExplanationReim").show();
                    $("#tdCountryContributionChkReim").show();
                    $("#tdCountryContributionTxtReim").show();

                    // Hide/Show

                    // Get Purpose Code for Reimbursement Details./////////////////////////////////
                    var options = {};
                    options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeReimDetails/")";
                    options.type = "POST";
                    options.data = null;
                    options.dataType = "json";
                    options.contentType = "application/json";
                    options.success = function (results) {
                        $("#lstPurposeCodeReim").empty();
                        $("#lstPurposeCodeReim").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstPurposeCodeReim").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                    };
                    options.error = function () {
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                    };
                    $.ajax(options);
                    // Get Purpose Code for Reimbursement Details./////////////////////////////////

                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            });

        });

        // BUTTON ADD NEW CREDIT CARD ITEMIZATION
        // Add New Credit Card Itemization
        $m("#btnAddNewCreditCardPayment").button().on("click", function () {

            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("UpdateFlagSchedFCCI", "No");
                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedCCI").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedCCI").prop("disabled", false);
                    }

                    dialogCreditCardItemization.dialog("open");

                    ClearDialogBoxValidationSchedQCCI();
                    ClearErrorsCreditCardInformationDialogBox();

                    // Add/Edit
                    $("#btnSaveSchedFCCItem").show();
                    $("#btnUpdateSchedFCCItem").hide();

                    $("#txtOriginalPayeeNameCCI").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                    // Hide/Show
                    $("#tdDatePaidCCI").show();
                    $("#tdPayeeNameOrgCCI").show();
                    $("#tdPayeeNameCCI").show();
                    $("#divStreetAddressCCI").show();
                    $("#divCityCCI").show();
                    $("#divStateCCI").show();
                    $("#divZip5CCI").show();
                    $("#tdPurposeCodeItemization").show();
                    $("#tdAmtCCI").show();
                    $("#tdExplanationCCI").show();
                    $("#tdCountryContributionChkCCI").show();
                    $("#tdCountryContributionTxtCCI").show();
                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedCCI").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedCCI").prop("disabled", false);
                    }
                    // Hide/Show

                    // Get Purpose Code for Credit Card Itemization /////////////////////////////////
                    var options = {};
                    options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeReimDetails/")";
                    options.type = "POST";
                    options.data = null;
                    options.dataType = "json";
                    options.contentType = "application/json";
                    options.success = function (results) {
                        $("#lstPurposeCodeCCI").empty();
                        $("#lstPurposeCodeCCI").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstPurposeCodeCCI").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                    };
                    options.error = function () {
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                    };
                    $.ajax(options);
                    // Get Purpose Code for Credit Card Itemization /////////////////////////////////

                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            });

        });


        // Get Filing Transactions Data....
        $m("#btnCloseDialog").button().on("click", function () {
            var valid = true;
            //Part 1: Validates a form
            if (sessionStorage.getItem("UpdateFlagSchedF").toString() == "No") { // Only New Transactions
                if ($("#lstItemized option:selected").val().toString() == "N"
                    || $("#lstSubcontractor option:selected").val().toString() == "Y"
                    || $("#lstLiability option:selected").val().toString() == "Y"
                    || $("#lstLiabilityExists option:selected").val().toString() == "Y"
                    || $("#txtPayeeName").val().toString().length >= 1
                    || $("#txtStreetName").val().toString().length >= 1
                    || $("#txtCity").val().toString().length >= 1
                    || $("#txtState").val().toString().length >= 1
                    || $("#lstPurposeCode option:selected").val().toString() != "0"
                    || $("#lstMethod option:selected").val().toString() != "0"
                    || $("#txtAmtExpenditurePayments").val().toString().length >= 1
                    || $("#txtExplanationSchedF").val().toString().length >= 1
                    || $("#txtCurrentDate").val().toString().length >= 1
                    || $('#chkCountry').is(':checked')
                    || ($('#chkCountry').is(':checked') && $("#txtCountry").val().toString().length >= 1)
                    || $("#txtZipCode").val().toString().length >= 1
                    || ($("#lstMethod option:selected").val().toString() == "1" && $("#txtCheckExpenditurePayments").val().toString().length >= 1)) {
                    valid = false;
                }
            } else {
                valid = false;
            }
            //Part 2: When valid evaluates if it can close the dialog.
            if (valid) {
                // Close the Dialogbox.
                dialog_Sched_F.dialog("close");
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                // tableFilingTransactions
            }
            else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?";

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    modal: true,
                    bgiframe: false,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "OK": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the Dialogbox.
                            dialog_Sched_F.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                            // tableFilingTransactions
                        },
                        "Cancel": function () {
                            // CLEAR ERROR MESSAGES.
                            ClearErrorsBtnCloseDialogClickEvent(false);
                            $m(this).dialog("close");
                        }
                    }
                });
            }
        });

        /**Common function
         * Used to clear the erros in the btnCloseDialog click event. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsBtnCloseDialogClickEvent(excludeOutstandingAmt) {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtCurrentDate",
                "txtPayeeName",
                "txtCountry",
                "txtStreetName",
                "txtCity",
                "txtState",
                "txtZipCode",
                "lstPurposeCode",
                "lstDateIncurred",
                "txtCheckExpenditurePayments",
                "txtAmtExpenditurePayments",
                "txtOriginalAmt",
                "txtExplanationSchedF"];
            if (!excludeOutstandingAmt) {
                inputIdArray.push("txtOutstandingAmt");
            }
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }
        /**Common function
         * Used to clear the erros in the subcontractor dialog box. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsSubcontractorDialogBox() {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtSubcontractorName",
                "txtPartFirstName",
                "txtPartMI",
                "txtPartLastName",
                "txtCountryPartnership",
                "txtPartStreetName",
                "txtPartCity",
                "txtPartState",
                "txtPartZip5",
                "txtPartAmtSchedF",
                "txtPartExplanationEP"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }
        /**Common function
         * Used to clear the erros in the creditcard payment dialog box. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsCreditCardInformationDialogBox() {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtCurrentDateSchedQCCI",
                "txtDetailsPayeeNameCCI",
                "txtCountryCCI",
                "txtStreetNameCCI",
                "txtCityCCI",
                "txtStateCCI",
                "txtZipCodeCCI",
                "lstPurposeCodeCCI",
                "txtAmountCCI",
                "txtExplanationCCI"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }
        /**Common function
         * Used to clear the erros in the creditcard payment dialog box. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsReimbursementDialogBox() {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtCurrentDateReimDetSchedF",
                "txtDetailsPayeeNameReim",
                "txtCountryReim",
                "txtStreetNameReim",
                "txtCityReim",
                "txtStateReim",
                "txtZipCodeReim",
                "lstPurposeCodeReim",
                "txtAmtReim",
                "txtExplanationSchedQReim"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }
        /**Common function
         * Used to clear the erros in the "Partnership" in a dialog box. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsPartnershipAddressInDialogBox() {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtPartStreetName",
                "txtPartCity",
                "txtPartState",
                "txtPartZip5"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }

        /**Common function
         * Used to clear the erros in the "SchedQCCI" in a dialog box. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsSchedQCCIDialogBox() {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtCurrentDateSchedQCCI",
                "txtDetailsPayeeNameCCI",
                "lstPurposeCodeCCI",
                "txtAmountCCI"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }
        /**Common function
         * Used to clear the erros in the creditcard payment dialog box. Basically does this to all inputs in the array.
         * $m("label[for=<inputID>]").text('');
         * $m("#<inputID>").removeClass("error");
         */
        function ClearErrorsAmountAllocationSchedRDialogBox() {
            // Subcontractor input fields to clrear.
            var inputIdArray = [
                "txtCurrentDateAllocatedSchedR",
                "txtLenderFirstName",
                "txtLenderMIName",
                "txtLenderLastName",
                "txtAmtExpensesAllocation",
                "txtAmtAllReport",
                "txtExplanationCommonScheR"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
        }


        /**
         * Common function for show,hide and label changes which happen often in the click event of buttons to close dialogs. This includes:
         * "#btnAddNewTransaction", "#btnCloseDialogSubcontractor", "#btnCloseDialogSchedFCCItem" and "#btnCloseDialogReim".
         */
        function CommonShowHideAndSetLabelActionsForDialogButtons() {
            // Hide/Show Values
            $("#dvDateIncurred").hide();
            $("#dvOriginalAmtTxt").hide();
            $("#dvOutstandingAmt").hide();

            $(".jqueryClassSelectorForLblAmount").text("* Amount $");

            // Hide/Show fields
            $("#dvLiabilityExists").show("slow");
            $("#tdPayorNameExpenditurePayments").show("slow");
            $("#divStreetAddress").show("slow");
            $("#divCity").show("slow");
            $("#divState").show("slow");
            $("#divZip5").show("slow");
            $("#tdPurposeCodeExpenditurePayments").show("slow");
            $("#tdMethodExpenditurePayments").show("slow");
            $("#dvLiabilityxpenditurePayments").show("slow");
            $("#dvSubcontractorExpenditurePayments").show("slow");
            $("#tdCountryContributionChk").show();
            $("#tdCountryContributionTxt").show();
            // Hide/Show fields
            $("#tdCheck").hide();
            // Hide/Show fields
            $("#dvOriginalAmtTxt").hide();
            $("#dvOutstandingAmt").hide();
            // Hide/Show fields
            $("#dvDateIncurred").hide();

            $("#lblExplanation").text("Explanation");

            $("#lstItemized").focus();
        }

        /**
         * Uses GetSchedFSubcontractorData and session TransIdSubContr and txtFilerID to update tableSubcotractor
         * doneFunction { function } Function to be called if the ajax call is completed (optional).
         * */
        function TableSubcotractorUpdate(doneFunction) {
            // Refresh the Data on Grid
            GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetSchedFSubcontractorData/")",
                {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("TransIdSubContr")).toString(),
                    strFilerId: $("#txtFilerID").val()
                },
                tableSubcotractor, doneFunction);
            $m('#gridSubcontractorSchedF').DataTable().ajax.reload();
            tableSubcotractor.responsive.recalc();
        }

        /**
         * Show the Balance Amount for Sub Contractor Expenditure Payments.
         */
        function GetExpSubContrTotAmtShowBalances() {
            $("#lblSubContractorAmt").text("Fetching Outstanding Amount...");
            $("#lblSubContractorAmt").show();
            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpSubContrTotAmt/")", {
                strTransNumber: sessionStorage.getItem("TransIdSubContr")
            }, function (result) {
                if (result != "") {
                    var subContTotalAmt = result.toString();
                    var expSubContrAmount = sessionStorage.getItem("ExpSubContrAmt").toString();
                    var resBalAmt = parseFloat(expSubContrAmount) - parseFloat(subContTotalAmt);
                    $("#lblSubContractorAmt").text("Outstanding Amount: $" + resBalAmt.toFixed(2).toString());
                } else {
                    var expSubContrAmount = sessionStorage.getItem("ExpSubContrAmt").toString();
                    $("#lblSubContractorAmt").text("Outstanding Amount: $" + expSubContrAmount.toString());
                }
            }).fail(function () {
                $("#lblSubContractorAmt").text("Error calculating outstanding Amount");// GetExpSubContrTotAmt failed.
            });
        }

        // BUTTON CLOSE DAALOG.
        // CLOSE SUBCONTRACTOR DIALOGBOX.
        $m("#btnCloseDialogSubcontractor").button().on("click", function () {
            //Something to know about this button is that it was originally coded using two independent 'click' events which is why we have Part 1 and Part 2.
            //PART:1 Gets the details and decides if it needs to alert the user the requirements of subcontractors.
            if (sessionStorage.getItem("SchedFPopuUpCloseMessage").toString() == "Yes") {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpSubContrTotAmt/")", {
                    strTransNumber: sessionStorage.getItem("TransIdSubContr")
                }, function (results) {
                    if (results == "0.00") {
                        // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                        sessionStorage.setItem("WithoutDetailsClose", "Yes");
                        var resultsCloseUpdate = "You have reported that all or part of this expenditure was subcontracted.  Please provide the required Subcontractor details expended to each person or entity providing such goods or services the cost of which exceeds, in the case of a committee supporting candidates for statewide office, $10,000 and all other committees, $5,000. Failure to provide subcontractor details may be cited as a Deficiency by Compliance Review staff. Do you want to continue?";
                        $m('#modal_dialog').text(resultsCloseUpdate);
                        $m("#modal_dialog").dialog({
                            resizable: false,
                            width: '400px',
                            height: 'auto',
                            bgiframe: false,
                            modal: true,
                            closeOnEscape: false,
                            open: function (event, ui) {
                                hideDialogXButton(this);
                            },
                            buttons: {
                                "OK": function () {
                                    // Close Confirm Box.
                                    $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                    // Close Dialogbox.
                                    dialogSubcontractor.dialog("close");
                                    // Clear the Values Schedule F
                                    ClearDialogBoxValidationSchedF();
                                    // Hide/Show Values
                                    CommonShowHideAndSetLabelActionsForDialogButtons();
                                    ClearErrorsSubcontractorDialogBox();
                                }, // confirm close
                                "Cancel": function () {
                                    ClearErrorsSubcontractorDialogBox();
                                    $m(this).dialog("close");
                                }
                            }
                        });
                    }
                    else {
                        // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                        sessionStorage.setItem("WithoutDetailsClose", "No");
                        // Clear the Values Schedule F
                        ClearDialogBoxValidationSchedF();
                        // Hide/Show Values
                        CommonShowHideAndSetLabelActionsForDialogButtons();
                        ClearErrorsSubcontractorDialogBox();
                    }
                });
            }
            //Part 2: Validates a form
            var valid = true;
            if (sessionStorage.getItem("UpdateFlagSchedFSubcont").toString() == "No") {
                if ($("#lstItemizedSubcontr option:selected").val().toString() == "N"
                    || $("#lstIndividualSubcontr option:selected").val().toString() == "N"
                    || $("#txtPartStreetName").val().toString().length >= 1
                    || $("#txtPartCity").val().toString().length >= 1
                    || $("#txtPartState").val().toString().length >= 1
                    || $("#txtPartAmtSchedF").val().toString().length >= 1
                    || $("#txtPartExplanationEP").val().toString().length >= 1
                    || ($("#lstIndividualSubcontr option:selected").val().toString() == "N" && $("#txtSubcontractorName").val().toString().length >= 1)
                    || ($("#lstIndividualSubcontr option:selected").val().toString() == "Y" && $("#txtPartFirstName").val().toString().length >= 1)
                    || ($("#lstIndividualSubcontr option:selected").val().toString() == "Y" && $("#txtPartMI").val().toString().length >= 1)
                    || ($("#lstIndividualSubcontr option:selected").val().toString() == "Y" && $("#txtPartLastName").val().toString().length >= 1)
                    || $('#chkCountryPartnership').is(':checked') /*Other COUNTRY Partnership*/
                    || ($('#chkCountryPartnership').is(':checked') && $("#txtCountryPartnership").val().toString().length >= 1)
                    || $("#txtPartZip5").val().toString().length >= 1) {
                    valid = false;
                }
            } else {
                valid = false;
            }
            //Part 3: When valid evaluates if it can close the dialog.
            if (valid) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpSubContrTotAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                }, function (results) {
                        //Determine if we set a session variable
                        if (sessionStorage.getItem("SchedFPopuUpCloseMessage") != null) {
                            if (sessionStorage.getItem("SchedFPopuUpCloseMessage").toString() == "Yes") {
                                // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                                if (results == "0.00") {
                                    sessionStorage.setItem("WithoutDetailsClose", "Yes");
                                } else {
                                    sessionStorage.setItem("WithoutDetailsClose", "No");
                                }
                            }
                        }
                        //Determine if we close dialogSubcontractor
                    if (sessionStorage.getItem("WithoutDetailsClose") == null) {
                        // Close Dialogbox.
                        dialogSubcontractor.dialog("close");
                    } else {
                        if (sessionStorage.getItem("WithoutDetailsClose").toString() == "No") {
                            // Close Dialogbox.
                            dialogSubcontractor.dialog("close");
                        }
                    }
                });
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                //tableSubcotractor
            } else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSubcontractor = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?";
                $m('#modal_dialog').text(resultsCloseSubcontractor);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) {
                        hideDialogXButton(this);
                    },
                    buttons: {
                        "OK": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close Dialogbox.
                            dialogSubcontractor.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                            // tableSubcotractor
                            // Show the Balance Amount for Sub Contractor Expenditure Payments.
                            GetExpSubContrTotAmtShowBalances();
                        }, // confirm close
                        "Cancel": function () {
                            ClearErrorsSubcontractorDialogBox();
                            $m(this).dialog("close");
                        }
                    }
                });
            }
        });
        /**
         * Uses GetReimbursementData and session FilingTransId to update tableReimbursement
         * doneFunction { function } Function to be called if the ajax call is completed (optional).
         * */
        function GetReimbursementData(doneFunction) {
            // Refresh Rimbursement Details Grid.
            GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementData/")",
                {
                    strTransNumberReimb: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                },
                tableReimbursement, doneFunction);
            $m('#gridReimbursementSchedF').DataTable().ajax.reload();
            tableReimbursement.responsive.recalc();
        }
        /**
         * Uses GetReimbursementDetailsTotalAmt and session FilingTransId to check the Credit Card  Amount Balance - Hide/Show Add Details Button.
         * */
        function GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein() {
            $("#lblReimbursementAmt").text("Fetching Outstanding Amount...");
            $("#lblReimbursementAmt").show();
            // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
            }, function (results) {
                if (results && results != "") {
                    // Get the Total Reimbursement Amount.
                    var totalReimDetailsAmt = results.toString();
                    var reimbOrgAmt = sessionStorage.getItem("ReimbursementOrgAmt").toString();
                    var resAmount = parseFloat(reimbOrgAmt) - parseFloat(totalReimDetailsAmt);
                    $("#lblReimbursementAmt").text("Outstanding Amount: $" + resAmount.toFixed(2).toString());
                } else {
                    var reimbOrgAmt = sessionStorage.getItem("ReimbursementOrgAmt").toString();
                    $("#lblReimbursementAmt").text("Outstanding Amount: $" + parseFloat(reimbOrgAmt).toFixed(2).toString());
                    $("#btnAddNewReimbursement").show();
                }
            }).fail(function () {
                $("#btnAddNewReimbursement").text("Error calculating outstanding Amount");// GetReimbursementDetailsTotalAmt failed.
            });
        }

        // CLOSE SUBCONTRACTOR DIALOGBOX.
        $m("#btnCloseDialogSchedFCCItem").button().on("click", function () {
            //Something to know about this button is that it was originally coded using two independent 'click' events which is why we have Click event 1 and Click event 2.
            //Click event 1
            //PART:1 Gets the details and decides if it needs to alert the user the requirements of credit cards.
            if (sessionStorage.getItem("SchedFPopuUpCloseMessageCCI").toString() == "Yes") {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                }, function (results) {
                    if (results == "0.00") {
                        // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                        sessionStorage.setItem("WithoutDetailsClose", "Yes");

                        var resultsCloseSchedA = "You have reported an expenditure as a credit card payment. Credit card itemization is required to itemize the expenditures the credit card was used to pay for. Failure to provide credit card itemization may be cited as a Deficiency by Compliance Review staff. Do you want to continue?";

                        $m('#modal_dialog').text(resultsCloseSchedA);
                        $m("#modal_dialog").dialog({
                            resizable: false,
                            width: '400px',
                            height: 'auto',
                            bgiframe: false,
                            closeOnEscape: false,
                            open: function (event, ui) { hideDialogXButton(this); },
                            buttons: {
                                "OK": function () {
                                    // Close Confirm Box.
                                    $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                    // Close the Dialogbox.
                                    dialogCreditCardItemization.dialog("close");
                                    // Clear the Values Schedule F
                                    ClearDialogBoxValidationSchedF();
                                    // Hide/Show Values
                                    CommonShowHideAndSetLabelActionsForDialogButtons();
                                },
                                "Cancel": function () {
                                    ClearErrorsCreditCardInformationDialogBox();
                                    $m(this).dialog("close");
                                }
                            }
                        });
                    } else {
                        // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                        sessionStorage.setItem("WithoutDetailsClose", "No");
                        // Clear the Values Schedule F
                        ClearDialogBoxValidationSchedF();
                        // Hide/Show Values
                        CommonShowHideAndSetLabelActionsForDialogButtons();
                    }
                });
            }
            //Click event 2
            //Part 2: Validates a form
            var valid = true;
            if (sessionStorage.getItem("UpdateFlagSchedFCCI").toString() == "No") { // Only New Transactions
                if ($("#txtCurrentDateSchedQCCI").val().toString().length >= 1
                    || $('#chkCountryCCI').is(':checked') /*Other COUNTRY*/
                    || $('#chkCountryCCI').is(':checked') && $("#txtCountryCCI").val().toString().length >= 1 /*Other COUNTRY*/
                    || $("#lstItemizedCCI option:selected").val().toString() == "N"
                    || $("#txtDetailsPayeeNameCCI").val().toString().length >= 1
                    || $("#txtStreetNameCCI").val().toString().length >= 1
                    || $("#txtCityCCI").val().toString().length >= 1
                    || $("#txtStateCCI").val().toString().length >= 1
                    || $("#lstPurposeCodeCCI option:selected").val().toString() != "0"
                    || $("#txtAmountCCI").val().toString().length >= 1
                    || $("#txtExplanationCCI").val().toString().length >= 1
                    || $("#txtZipCodeCCI").val().toString().length >= 1) {
                    valid = false;
                }
            } else {
                valid = false;
            }
            //Part 3: When valid evaluates if it can close the dialog.
            if (valid) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                }, function (results) {
                    //Determine if we set a session variable
                    if (sessionStorage.getItem("SchedFPopuUpCloseMessageCCI") != null) {
                        if (sessionStorage.getItem("SchedFPopuUpCloseMessageCCI").toString() == "Yes") {
                            // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                            if (results == "0.00") {
                                sessionStorage.setItem("WithoutDetailsClose", "Yes");
                            }
                        }
                    }
                    //Determine if we close dialogCreditCardItemization
                    if (sessionStorage.getItem("WithoutDetailsClose") == null) {
                        // Close Dialogbox.
                        dialogCreditCardItemization.dialog("close");
                    } else {
                        if (sessionStorage.getItem("WithoutDetailsClose").toString() == "No") {
                            // Close the Dialogbox.
                            dialogCreditCardItemization.dialog("close");
                        }
                    }
                });
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                //tableCreditCardPayment
            } else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?";

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    modal: true,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    closeOnEscape: false,
                    open: function (event, ui) {
                        $("#divLoading").hide();
                        hideDialogXButton(this);
                    },
                    buttons: {
                        "OK": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the Dialogbox.
                            dialogCreditCardItemization.dialog("close");
                            // For Defect 707 You don't Refresh the Data on the Grid because you just canceled the edit or save function.
                            // tableCreditCardPayment
                            // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
                            GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_CCI();
                        },
                        "Cancel": function () {
                            ClearErrorsCreditCardInformationDialogBox();
                            $m(this).dialog("close");
                        }
                    }
                });
            }
        });

         /**
         * Uses GetReimbursementData and session CCITransID to update tableCreditCardPayment
         * *doneFunction { function } Function to be called if the ajax call is completed (optional).
         * */
        function TableCreditCardPaymentUpdate(doneFunction) {
            // Refresh Rimbursement Details Grid.
            GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementData/")",
                {
                    strTransNumberReimb: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                },
                tableCreditCardPayment, doneFunction);
            $m('#gridCreditCardPaymentSchedF').DataTable().ajax.reload();
            tableCreditCardPayment.responsive.recalc();
        }
        /**
         * Uses GetReimbursementDetailsTotalAmt and session CCITransID to check the Reimbursement Amount Balance - Hide/Show Add Details Button.
         * */
        function GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_CCI() {
            $("#lblBalanceCCIAmt").text("Fetching Outstanding Amount...");
            $("#lblBalanceCCIAmt").show();
            // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
            }, function (results) {
                if (results && results != "") {
                    // Get the Total Reimbursement Amount.
                    var totalReimDetailsAmt = results.toString();
                    var reimbOrgAmt = bUtilSanitizeString(sessionStorage.getItem("CreditCardPayOrgAmt")).toString();
                    var resAmount = parseFloat(reimbOrgAmt) - parseFloat(totalReimDetailsAmt);
                    $("#lblBalanceCCIAmt").text("Outstanding Amount: $" + resAmount.toFixed(2).toString());
                }
                else {
                    var reimbOrgAmt = bUtilSanitizeString(sessionStorage.getItem("CreditCardPayOrgAmt")).toString();
                    $("#lblBalanceCCIAmt").text("Outstanding Amount: $" + parseFloat(reimbOrgAmt).toFixed(2).toString());
                    $("#btnAddNewCreditCardPayment").show();
                }
            }).fail(function () {
                $("#lblBalanceCCIAmt").text("Error calculating outstanding Amount");// GetReimbursementDetailsTotalAmt failed.
            });
        }

        // Reimbursement Details
        $m("#btnCloseDialogReim").button().on("click", function () {
            //Something to know about this button is that it was originally coded using two independent 'click' events which is why we have Part 1 and Part 2.
            //PART:1 Gets the details and decides if it needs to alert the user the requirements of expenditures.
            if (sessionStorage.getItem("SchedFPopuUpCloseMessageReim").toString() == "Yes") {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                }, function (results) {
                    if (results == "0.00") {
                        // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                        sessionStorage.setItem("WithoutDetailsClose", "Yes");

                        var resultsCloseSchedA = "You have reported an expenditure as a reimbursement. Reimbursement details are required to disclose where the person/entity being reimbursed spent funds on behalf of the committee. Failure to provide reimbursement details or incomplete reimbursement details may be cited as a Deficiency by Compliance Review staff. Do you want to continue?";

                        $m('#modal_dialog').text(resultsCloseSchedA);
                        $m("#modal_dialog").dialog({
                            resizable: false,
                            modal: true,
                            width: '400px',
                            height: 'auto',
                            bgiframe: false,
                            closeOnEscape: false,
                            open: function (event, ui) { hideDialogXButton(this); },
                            buttons: {
                                "OK": function () {
                                    // Close Confirm Box.
                                    $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                    // Close Dialogbox.
                                    dialogReimbursementDetails.dialog("close");
                                    // Clear the Values Schedule F
                                    ClearDialogBoxValidationSchedF();
                                    // Hide/Show Values
                                    CommonShowHideAndSetLabelActionsForDialogButtons();
                                }, // confirm close
                                "Cancel": function () {
                                    ClearErrorsReimbursementDialogBox();
                                    $("#lstItemized").focus();
                                    $m(this).dialog("close");
                                }
                            }
                        });
                    } else {
                        // CREATE A SESSION FOR IF CLOSING POPUP WITH ADDED DETAILS.
                        sessionStorage.setItem("WithoutDetailsClose", "No");
                        // Clear the Values Schedule F
                        ClearDialogBoxValidationSchedF();
                        // Hide/Show Values
                        CommonShowHideAndSetLabelActionsForDialogButtons();
                    }
                });
            }
            //Part 2: Validates a form
            var valid = true;
            if (sessionStorage.getItem("UpdateFlagSchedFReim").toString() == "No") { // Only New Transactions
                if ($("#lstItemizedReim option:selected").val().toString() == "N"
                    || $("#txtStreetNameReim").val().toString().length >= 1
                    || $("#txtCityReim").val().toString().length >= 1
                    || $("#txtStateReim").val().toString().length >= 1
                    || $("#lstPurposeCodeReim option:selected").val().toString() != "0"
                    || $("#txtAmtReim").val().toString().length >= 1
                    || $("#txtExplanationSchedQReim").val().toString().length >= 1
                    || $("#txtDetailsPayeeNameReim").val().toString().length >= 1
                    || $("#txtCurrentDateReimDetSchedF").val().toString().length >= 1
                    || $('#chkCountryReim').is(':checked')
                    || ($('#chkCountryReim').is(':checked') && $("#txtCountryReim").val().toString().length >= 1)
                    || $("#txtZipCodeReim").val().toString().length >= 1 ) {
                    valid = false;
                }
            } else {
                valid = false;
            }
            //Part 3: When valid evaluates if it can close the dialog.
            if (valid) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                }, function (results) {
                    //Determine if we set a session variable
                    if (sessionStorage.getItem("SchedFPopuUpCloseMessageReim") != null) {
                        if (sessionStorage.getItem("SchedFPopuUpCloseMessageReim").toString() == "Yes") {
                            // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                            if (results == "0.00") {
                                sessionStorage.setItem("WithoutDetailsClose", "Yes");
                            } else {
                                sessionStorage.setItem("WithoutDetailsClose", "No");
                            }
                        }
                    }
                    //Determine if we close dialogReimbursementDetails
                    if (sessionStorage.getItem("WithoutDetailsClose") == null) {
                        // Close Dialogbox.
                        dialogReimbursementDetails.dialog("close");
                    } else {
                        if (sessionStorage.getItem("WithoutDetailsClose").toString() == "No") {
                            // Close Dialogbox.
                            dialogReimbursementDetails.dialog("close");
                        }
                    }
                });
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                //tableReimbursement
                // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
                GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein();
            } else {
                //When valid = false we post a warning.
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?";

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    modal: true,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    focus: function () {
                        $(this).siblings('.ui-dialog-buttonpane').find("button:contains('OK')").focus();
                    },
                    buttons: {
                        "OK": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close Dialogbox.
                            dialogReimbursementDetails.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                            //tableReimbursement
                            // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
                            GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein();
                        },
                        "Cancel": function () {
                            ClearErrorsReimbursementDialogBox();
                            $m(this).dialog("close");
                        }
                    }
                });
            }
        });

        // ORIGINAL AMOUNT FOCUS OUT THEN IT HAS TO CALCUALTE OUTSTANDING AMOUNT IF ALEARY THEY PUT IT PARTIAL AMOUNT.
        $("#txtOriginalAmount").focusout(function () {
            if ($("#lstLiabilityExists option:selected").val() == "N") {
                if ($("#txtOriginalAmount").val().toString() != "" && $("#txtOriginalAmount").val().toString() != "999999999.99") {
                    if ($("#txtAmtExpenditurePayments").val().toString() != "" && $("#txtAmtExpenditurePayments").val().toString() != "999999999.99") {
                        var varOriginalAmount = $("#txtOriginalAmount").val().toString();
                        var varPartialAmount = $("#txtAmtExpenditurePayments").val().toString();
                        if (parseFloat(varOriginalAmount) < parseFloat(varPartialAmount)) {
                            $("#txtOriginalAmount").val("");
                            $("#txtOriginalAmount").blur();
                            $("#txtOutstandingAmt").val("");
                            $("#txtOutstandingAmt").blur();
                            ShowDialogBox('EFS', 'Original Amount cannot be less than Partial Amount $' + parseFloat(varPartialAmount).toFixed(2).toString(), 'Ok', '');
                        }
                        else {
                            var newOwedAmount = parseFloat(varOriginalAmount) - parseFloat(varPartialAmount);
                            $("#txtOutstandingAmt").val(newOwedAmount.toFixed(2).toString());
                        }
                    }
                }
                else {
                    $("#txtAmtExpenditurePayments").val("");
                    $("#txtOutstandingAmt").val("");
                }
            }
        });

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Display Outstanding Amount.........///////////////////////////////////
        $("#txtAmtExpenditurePayments").on('focusout', function () {

            // CHECK IF NEW LIABILITY OR EXISTING LIABILITY
            var vrFlag = false;

            if ($("#lstLiabilityExists option:selected").val() != "Y") {
                vrFlag = true;
            }
            else {
                if ($("#txtOutstandingAmt").val().toString() != "")
                    vrFlag = true;
                else
                    vrFlag = false;
            }

            if (vrFlag) {

                if (sessionStorage.getItem("flagUpdate").toString() == "true") { // ON UPDATE UPDATING EXISTING RECROD
                    if ($("#lstLiability option:selected").val() == "Y") {

                        // If Liability Payment Edit then check if Liability with Reimbursement or Credit Card Payment then if details added then we should not update Amount less than that.
                        var updateOwedAmt = sessionStorage.getItem("UpdateOwedAmount").toString();

                        if ($("#txtAmtExpenditurePayments").val() != "") {
                            if ($m("#txtAmtExpenditurePayments").valid()) {
                                if ($("#lstPurposeCode option:selected").val().toString() == "11") { // If Reimbursement Edit Check Reimbursement Details Added or not if details added then Amount should not be less than the total details amount.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                                        strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                                    }, function (resultReim) {
                                        if (resultReim.toString() != "0") {
                                            var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                            if (parseFloat(updatedAmount) < parseFloat(resultReim.toString())) {
                                                $("#txtAmtExpenditurePayments").val("");
                                                $("#txtAmtExpenditurePayments").blur();
                                                ShowDialogBox('EFS', 'Reimbursement Details Added for Expenditure Payment Amount should not be less than Reimbursement Details Amount $' + parseFloat(resultReim).toFixed(2).toString(), 'Ok', '');
                                            }
                                        }
                                    });
                                }
                                else if ($("#lstPurposeCode option:selected").val().toString() == "29") { // If Credit Cared Payment Edit check Credit Card Itemization details added or not if added then Amount should not be less than the toatl Itemization Amount.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                                        strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                                    }, function (resultCCItem) {
                                        if (resultCCItem.toString() != "0") {
                                            var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                            if (parseFloat(updatedAmount) < parseFloat(resultCCItem.toString())) {
                                                $("#txtAmtExpenditurePayments").val("");
                                                $("#txtAmtExpenditurePayments").blur();
                                                ShowDialogBox('EFS', 'Credit Card Itemization Added for Expenditure Payment Amount should not be less than Credit Card Itemization Amount $' + parseFloat(resultCCItem).toFixed(2).toString(), 'Ok', '');
                                            }
                                        }
                                    });
                                }
                                // Check the Outstaning Amount and we should not pay more than Outstanding Amount for Expenditure Payment while Update.
                                if ($("#txtAmtExpenditurePayments").val() != "") {
                                    var outstandingAmount = parseFloat(sessionStorage.getItem("LiabilityExpAmt").toString()) + parseFloat(updateOwedAmt);

                                    if (parseFloat($("#txtAmtExpenditurePayments").val().toString()) <= parseFloat(outstandingAmount)) {
                                        var liabExpAmt = sessionStorage.getItem("LiabilityExpAmt").toString();
                                        var newUpdateAmount = $("#txtAmtExpenditurePayments").val().toString();
                                        var owedAmount = parseFloat(updateOwedAmt) + parseFloat(liabExpAmt);
                                        var newOwedAmount = parseFloat(owedAmount) - parseFloat(newUpdateAmount);
                                        $("#txtOutstandingAmt").val(newOwedAmount.toFixed(2).toString());
                                    }
                                    else {
                                        $("#txtAmtExpenditurePayments").val("");
                                        $("#txtAmtExpenditurePayments").blur();
                                        ShowDialogBox('EFS', 'Amount should not be more than Outstanding Amount.', 'Ok', '');
                                    }
                                }
                            }
                        }
                        else {
                            var liabExpAmt = sessionStorage.getItem("LiabilityExpAmt").toString();
                            var owedAmount = parseFloat(updateOwedAmt) + parseFloat(liabExpAmt);
                            $("#txtOutstandingAmt").val(owedAmount.toFixed(2).toString());
                        }
                    }
                    else if ($("#lstSubcontractor option:selected").val().toString() == "Y") { // If Subcontractor Edit Check Subcontractor Details Added Or Not If added then Check Balance.
                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpSubContrTotAmt/")", {
                            strTransNumber: sessionStorage.getItem("FilingTransId")
                        }, function (resultSubcont) {
                            if (resultSubcont != "") {
                                var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                if (parseFloat(updatedAmount) < parseFloat(resultSubcont.toString())) {
                                    $("#txtAmtExpenditurePayments").val("");
                                    $("#txtAmtExpenditurePayments").blur();
                                    ShowDialogBox('EFS', 'Subcontractor added for Expenditure Payment Amount should not be less than Subcontracor Amount $' + parseFloat(resultSubcont).toFixed(2).toString(), 'Ok', '');
                                }
                            }
                        });
                    }
                    else if ($("#lstPurposeCode option:selected").val().toString() == "11") { // If Reimbursement Edit Check Reimbursement Details Added or not if details added then Amount should not be less than the total details amount.
                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                        }, function (resultReim) {
                            if (resultReim.toString() != "0") {
                                var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                if (parseFloat(updatedAmount) < parseFloat(resultReim.toString())) {
                                    $("#txtAmtExpenditurePayments").val("");
                                    $("#txtAmtExpenditurePayments").blur();
                                    ShowDialogBox('EFS', 'Reimbursement Details Added for Expenditure Payment Amount should not be less than Reimbursement Details Amount $' + parseFloat(resultReim).toFixed(2).toString(), 'Ok', '');
                                }
                            }
                        });
                    }
                    else if ($("#lstPurposeCode option:selected").val().toString() == "29") { // If Credit Cared Payment Edit check Credit Card Itemization details added or not if added then Amount should not be less than the toatl Itemization Amount.
                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                        }, function (resultCCItem) {
                            if (resultCCItem.toString() != "0") {
                                var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                if (parseFloat(updatedAmount) < parseFloat(resultCCItem.toString())) {
                                    $("#txtAmtExpenditurePayments").val("");
                                    $("#txtAmtExpenditurePayments").blur();
                                    ShowDialogBox('EFS', 'Credit Card Itemization Added for Expenditure Payment Amount should not be less than Credit Card Itemization Amount $' + parseFloat(resultCCItem).toFixed(2).toString(), 'Ok', '');
                                }
                            }
                        });
                    }
                }
                else { // ON SAVE ADDING NEW RECORD  /////////////////////////////////////
                    if ($("#lstLiability option:selected").val() == "Y") {
                        if ($("#lstLiabilityExists option:selected").val() != "Y") {
                            if ($("#txtAmtExpenditurePayments").val() != "") {
                                if ($m("#txtAmtExpenditurePayments").valid()) {
                                    if ($("#txtOriginalAmount").val() != "") {
                                        if ($m("#txtOriginalAmount").valid()) {
                                            var orginalAmount = $("#txtOriginalAmount").val().toString();
                                            var partialAmount = $("#txtAmtExpenditurePayments").val().toString();
                                            if (parseFloat(partialAmount) > parseFloat(orginalAmount)) {
                                                $("#txtAmtExpenditurePayments").val("");
                                                $("#txtAmtExpenditurePayments").blur();
                                                ShowDialogBox('EFS', 'Partial Amount cannot be more than Original Amount $' + parseFloat(orginalAmount).toFixed(2).toString(), 'Ok', '');
                                            }
                                            else {
                                                var outstandingAmount = parseFloat(orginalAmount) - parseFloat(partialAmount);
                                                $("#txtOutstandingAmt").val(outstandingAmount.toFixed(2).toString());
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                $("#txtOutstandingAmt").val("");
                            }
                        }
                        else {
                            if ($("#txtAmtExpenditurePayments").val() != "") {
                                if ($m("#txtAmtExpenditurePayments").valid()) {
                                    var outstandingAmount = $("#txtOutstandingAmt").val().toString();
                                    var amount = $("#txtAmtExpenditurePayments").val().toString();
                                    if (parseFloat(amount) > parseFloat(outstandingAmount)) {
                                        $("#txtAmtExpenditurePayments").val("");
                                        $("#txtAmtExpenditurePayments").blur();
                                        ShowDialogBox('EFS', 'Amount should not be more than Outstanding Amount $' + parseFloat(outstandingAmount).toFixed(2).toString(), 'Ok', '');
                                    }
                                    else {
                                        var newOutstandingAmount = parseFloat(outstandingAmount) - parseFloat(amount);
                                        $("#txtOutstandingAmt").val(newOutstandingAmount.toFixed(2).toString());
                                    }
                                }
                            }
                            else {
                                if ($("#lstDateIncurred option:selected").text().toString() != "- Select -") {
                                    var outAmtPartExts = sessionStorage.getItem("OutstandingAmountPartialExists").toString();
                                    $("#txtOutstandingAmt").val(parseFloat(outAmtPartExts).toFixed(2).toString());
                                }
                            }
                        }
                    }
                }
            }
        });
        // Display Outstanding Amount.........///////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /** Excutes an ajax call to GetPurposeCodeExpenditure
         *  This gets Purpose Code for Reimbursement Details.
         */
        function GetPurposeCodeExpenditure() {
            var options = {};
            options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeExpenditure/")";
            options.type = "POST";
            options.data = null;
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                $("#lstPurposeCode").empty();
                $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                for (var i = 0; i < results.length; i++) {
                    $("#lstPurposeCode").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                }
            };
            options.error = function () {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
            };
            $.ajax(options);
        }


        $m("#btnAddNewTransaction").button().on("click", function () {

            $("#divLiabilityDetailsGrid").hide();

            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("UpdateFlagSchedF", "No");

                    sessionStorage.setItem("LiabilityExpAmt", "null");
                    sessionStorage.setItem("LibFlngEntyId", "null");
                    sessionStorage.setItem("flagUpdate", "null");
                    sessionStorage.setItem("Reimbursement", "No");

                    // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
                    sessionStorage.setItem("WithoutDetailsClose", "Yes");

                    tableReimbursement = "";
                    tableCreditCardPayment = "";

                    dialog_Sched_F.dialog("open");

                    // Clear Values.
                    ClearDialogBoxValidationSchedF();

                    $m("label[for=txtCurrentDate]").text('');
                    $m("#txtCurrentDate").removeClass("error");

                    $m("label[for=txtPayeeName]").text('');
                    $m("#txtDetailsPayeeNameReim").removeClass("error");

                    $m("label[for=lstPurposeCode]").text('');
                    $m("#lstPurposeCode").removeClass("error");

                    $m("label[for=txtAmtExpenditurePayments]").text('');
                    $m("#txtAmtExpenditurePayments").removeClass("error");

                    // CLEAR DETAILS GRID.
                    $("#divShowSubcontroctor").hide();
                    $("#divShowReimbursement").hide();
                    $("#divShowCreditCardPayment").hide();
                    $("#divShowAllocation").hide();

                    // Disable on UPdate
                    $("#lstSubcontractor").prop("disabled", false);
                    $("#lstLiability").prop("disabled", false);
                    //$("#lstItemized").prop("disabled", false);
                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemized").prop("disabled", true);
                    }
                    else {
                        $("#lstItemized").prop("disabled", false);
                    }

                    if (@Session["COMM_TYPE_ID"] == "19") {
                        $("#divSuppOrOpps").show();
                        sessionStorage.setItem("ValidateAutoComplete", "false");                        
                        var validator = $m("#DialogBoxSchedRForm").validate();
                        validator.resetForm();  // clear out the validation errors
                        $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                        sessionStorage.setItem("AddEditCloseStatus", "Add");
                        $(".divWidthSchedABC .error").removeClass("error");
                        sessionStorage.setItem("AmountEdit", "ADD");
                        $("#btnUpdateDialogSchedR").hide();
                        $("#btnAddDialogSchedR").show();
                        $("#btnClearDialogSchedR").show();
                        $("#btnClearDialogEditSchedR").hide();
                        $("#txtCurrentDateAllocatedSchedR").blur();
                        $("#txtAmtExpensesAllocation").blur();
                        //$("#txtCurrentDateAllocatedSchedR").focus();
                        $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                        $m("#txtCurrentDateAllocatedSchedR").removeClass("error");

                        $("#lstAllocationExisting").prop("disabled", false);
                        $("#txtLenderFirstName").prop("disabled", false);
                        $("#txtLenderMIName").prop("disabled", false);
                        $("#txtLenderLastName").prop("disabled", false);
                        $("#lstElectionCycleAllocated").prop("disabled", false);
                        $("#lstOffice").prop("disabled", false);
                        $("#lstDistrict").prop("disabled", false);
                        $("#tdDistrict").hide();
                        $("#dvIsAllocationExist").show();
                        $("#divAmountAllReport").show();
                    }
                    else {
                        $("#divSuppOrOpps").hide();
                    }

                    $("#txtPayeeName").prop("disabled", false);
                    $("#lstPurposeCode").prop("disabled", false);
                    $("#lstMethod").prop("disabled", false);
                    $("#txtCheckExpenditurePayments").prop("disabled", false);
                    $("#lstDateIncurred").prop("disabled", false);
                    $("#txtStreetName").prop("disabled", false);
                    $("#txtCity").prop("disabled", false);
                    $("#txtState").prop("disabled", false);
                    $("#txtZipCode").prop("disabled", false);
                    // Disable on UPdate

                    // Set the default values for form.
                    $("#lstItemized")[0].selectedIndex = 0;
                    $("#lstSubcontractor")[0].selectedIndex = 0;
                    $("#lstLiability")[0].selectedIndex = 0;
                    $("#lstLiabilityExists")[0].selectedIndex = 0;
                    $("#lstPurposeCode")[0].selectedIndex = 0;
                    $("#lstMethod")[0].selectedIndex = 0;

                    $("#txtOriginalAmount").blur();
                    // Hide/Show fields
                    CommonShowHideAndSetLabelActionsForDialogButtons();

                    // Get Purpose Code for Reimbursement Details./////////////////////////////////
                    GetPurposeCodeExpenditure();
                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            });
        });

        // Amount
        $("#txtAmtExpenditurePayments").focusin(function () {
            if (sessionStorage.getItem("flagUpdate").toString() != "true") {
                // Bring Outstanding Amount back.
                if ($("#lstLiability option:selected").val() == "Y") {
                    if ($("#lstLiabilityExists option:selected").val() == "Y") {
                        if ($("#txtOutstandingAmt").val() != "") {
                            $("#txtOutstandingAmt").val(sessionStorage.getItem("OutstandingAmountPartialExists").toString())
                        }
                    }
                }
            }
        });
        /**
         * Makes ajax call to UpdateFilingTransExpenditureData.
         * Then updates table by calling .
         * Param {String} successMessage - If no success message is provided it displays "Transaction saved successfully" when completed.
         * Param {boolean} showDTInKind - ShowsDTInKind
         */
        function UpdateFilingTransExpenditureData(successMessage, showDTInKind) {
            var dialogMessage = successMessage ? successMessage: "Transaction saved successfully";
            // Update the Data.
            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/UpdateFilingTransExpenditureData/")", {
                strFilingEntId: bUtilSanitizeString(sessionStorage.getItem("FilingEntityId")).toString(),
                strSchedDate: $m("#txtCurrentDate").val(),
                strPayNumber: $m("#txtCheckExpenditurePayments").val(),
                strPaymentTypeId: $m("#lstMethod option:selected").val(),
                strOrgAmt: $m("#txtAmtExpenditurePayments").val(),
                strTransExplanation: $m("#txtExplanationSchedF").val(),
                strRLiability: $m("#lstLiability option:selected").val(),
                strRSubcontractor: $m("#lstSubcontractor option:selected").val(),
                strFlngEntityName: $m("#txtPayeeName").val(),
                txtCountry: $m("#txtCountry").val(),
                strFlngStreetName: $m("#txtStreetName").val(),
                strFlngCity: $m("#txtCity").val(),
                strFlngState: $m("#txtState").val(),
                strFlngZipCode: $m("#txtZipCode").val(),
                strItemized: $m("#lstItemized option:selected").val(),
                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString(),
                strLoanLiabNumber: bUtilSanitizeString(sessionStorage.getItem("LoanLiabNumber")).toString(),
                strAmountLiabPay: bUtilSanitizeString(sessionStorage.getItem("AmountLiabilityPay")).toString(),
                lstElectionType: $("#lstElectionType option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtReportPeriodDatesTo: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                chkCountry: $('#chkCountry').is(':checked').toString(),
                txtCuttOffDate: bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString(),
                lstPurposeCode: $m("#lstPurposeCode option:selected").val(),
                lstSuppOrOpps: $m("#lstSuppOrOpps option:selected").val()
            }, function (results) {
                if (results.Errors == null) {
                    // Close Dialog Box.
                    dialog_Sched_F.dialog("close");
                    window.status = "Transaction saved successfully";
                    var doneFunction = function () {
                        // HIDE THE PROCESSING....
                        $("#divLoading").hide();
                        ShowDialogBox('EFS', dialogMessage, 'Ok', '');
                        if (showDTInKind) {
                            $("#divDTInKind").show();
                        }
                    }
                    // Refresh the Data on Grid...
                    GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                }
                else if (results.Errors.length >= 0) {
                    $("#divLoading").hide();
                    ////// Clear Values...
                    ClearDialogBoxValidationSchedF();
                    AppendCustomErrorLabels(results.Errors, "base");
                }
            });
        }
        /**
         * Common Code used by GetReimbursementDetailsTotalAmtForSaveSchedF and GetExpRefundedTotalAmtForSaveSchedF
         */
        function GetReimbursementOrRefundForSaveSchedF(url) {
            $.post(url, {
                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
            }, function (resultRefundedAmt) {
                var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                if (parseFloat(updatedAmount) >= parseFloat(resultRefundedAmt.toString())) {
                    // updated
                    UpdateFilingTransExpenditureData('Transaction saved successfully', false);
                }
                else {
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Expenditure Refunds (Increases Balance) Added for Expenditure Payment Amount should not be less than Expenditure Refunds (Increases Balance) Amount $' + parseFloat(resultRefundedAmt).toFixed(2).toString(), 'Ok', '');
                }
            }).fail(function () {
                // HIDE THE PROCESSING....
                $("#divLoading").hide();// GetReimbursementDetailsTotalAmt failed.
            });
        }
        /**
         * Makes the call to GetReimbursementDetailsTotalAmt as seen multiple times in btnSaveSchedF.
         * */
        function GetReimbursementDetailsTotalAmtForSaveSchedF() {
            GetReimbursementOrRefundForSaveSchedF("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")");
        }
        /**
         * Makes the call to GetExpRefundedTotalAmt as seen multiple times in btnSaveSchedF.
         * */
        function GetExpRefundedTotalAmtForSaveSchedF() {
            GetReimbursementOrRefundForSaveSchedF("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpRefundedTotalAmt/")");
        }
        // ADD FILING TRANSACTION SHEDULE F DATA INTO TABLE.
        // Button Click
        $("#btnSaveSchedF").on('click', function (e) {
            $m("#DialogBoxSchedFForm").valid();
            if ($m("#DialogBoxSchedFForm").valid()) { // JQuery Validation // Insert
                // SHOW THE PROCESSING....
                $("#divLoading").show();
                if (sessionStorage.getItem("UpdateFlagSchedF").toString() != "Yes") { // Save
                    //Try to Save.
                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/SaveFilingTransExpenditureData/")", {
                        txtFilerId: $("#txtFilerID").val(),
                        lstElectionCycle: $("#lstElectionCycle option:selected").text(),
                        lstElectionCycleId: $("#lstElectionCycle option:selected").val(),
                        lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                        lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                        lstElectionType: $("#lstElectionType option:selected").val(),
                        lstElectionDate: $("#lstElectionDate option:selected").text(),
                        lstElectionDateId: $("#lstElectionDate option:selected").val(),
                        lstTransactionType: bUtilSanitizeString(sessionStorage.getItem("TransactionType")).toString(),
                        txtDateRcvd: $m("#txtCurrentDate").val(),
                        txtPayorName: $m("#txtPayeeName").val(),
                        lstPurposeCode: $m("#lstPurposeCode option:selected").val(),
                        txtCountry: $m("#txtCountry").val(),
                        txtStreetName: $m("#txtStreetName").val(),
                        txtCity: $m("#txtCity").val(),
                        txtState: $m("#txtState").val(),
                        txtZipCode: $m("#txtZipCode").val(),
                        lstMethod: $m("#lstMethod option:selected").val(),
                        txtCheckExpenditurePayments: $m("#txtCheckExpenditurePayments").val(),
                        txtAmtExpenditurePayments: $m("#txtAmtExpenditurePayments").val(),
                        txtOriginalAmount: $m("#txtOriginalAmount").val(),
                        txtOutstandingAmt: $m("#txtOutstandingAmt").val(),
                        txtExplanationExpenditurePayments: $m("#txtExplanationSchedF").val(),
                        txtLiabExplanation: $m("#txtLiabExplanation").val(),
                        lstLiability: $m("#lstLiability option:selected").val(),
                        lstSubcontractor: $m("#lstSubcontractor option:selected").val(),
                        lstItemized: $("#lstItemized option:selected").val(),
                        strOriginalDate: sessionStorage.getItem("OriginalDate"),
                        lstDateIncurred: $("#lstDateIncurred option:selected").val(),
                        lstLiabilityExists: $("#lstLiabilityExists option:selected").val(),
                        lstFilingDate: $m("#lstFilingDate option:selected").text(),
                        txtReportPeriodDatesTo: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                        lstResigTermType: $m("#lstResigTermType option:selected").val(),
                        chkCountry: $('#chkCountry').is(':checked').toString(),
                        txtCuttOffDate: bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString(),
                        lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                        lstSuppOrOpps: $m("#lstSuppOrOpps option:selected").val()
                    }, function (results) {
                            if (results.Errors == null) {
                                if (results == "Custom Error") {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                                    window.location.reload();
                                }
                                else {
                                    if (results == "0") {
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'System Error Found. Please try again.', 'Ok', '');
                                        window.location.reload();
                                    }
                                    else {
                                    // Success
                                    if (results.toString() != "") {
                                        $("#lstItemized").focus();
                                        sessionStorage.setItem("TransactionID", results.toString());
                                        //Load icon hide happens later when table is updated.
                                        window.status = "Transaction saved successfully";

                                        // Hide/Show fields
                                        $("#dvLiabilityExists").show("slow");
                                        $("#tdPayorNameExpenditurePayments").show("slow");
                                        $("#divStreetAddress").show("slow");
                                        $("#divCity").show("slow");
                                        $("#divState").show("slow");
                                        $("#divZip5").show("slow");
                                        $("#tdPurposeCodeExpenditurePayments").show("slow");
                                        $("#tdMethodExpenditurePayments").show("slow");
                                        $("#dvLiabilityxpenditurePayments").show("slow");
                                        $("#dvSubcontractorExpenditurePayments").show("slow");
                                        $("#tdCountryContributionChk").show();
                                        $("#tdCountryContributionTxt").show();
                                        // Hide/Show fields
                                        $("#tdCheck").hide();
                                        // Hide/Show fields
                                        $("#dvOriginalAmtTxt").hide();
                                        $("#dvOutstandingAmt").hide();
                                        // Hide/Show fields
                                        $("#dvDateIncurred").hide();

                                        $("#dvOriginalAmtTxt").hide();

                                        if (@Session["COMM_TYPE_ID"] == "23") {
                                            $("#lstItemized").prop("disabled", true);
                                        }
                                        else {
                                            $("#lstItemized").prop("disabled", false);
                                        }

                                        if (@Session["COMM_TYPE_ID"] == "19") {
                                            $("#divSuppOrOpps").show();
                                        }

                                        var selectedSuppOpps = $("#lstSuppOrOpps option:selected").val().toString();
                                        if (selectedSuppOpps == "Y") {
                                            dialog.dialog("open");
                                            ClearDialogBoxValidationSchedR();
                                            ClearErrorsAmountAllocationSchedRDialogBox();

                                            // Add/Edit
                                            $("#btnAddDialogSchedR").show();
                                            $("#btnUpdateDialogSchedR").hide();

                                            $("#btnClearDialogSchedR").show();
                                            $("#btnClearDialogEditSchedR").hide();  
                                        }
                                        else if (selectedSuppOpps == "N") {
                                            dialog.dialog("close");
                                        }
                                        else {
                                            dialog.dialog("close");
                                        }

                                        // BEFORE BINDING PURPOSE CODE TAKE THE PRUPOSE CODE VALUD IN SESSION.
                                        sessionStorage.setItem("PuposeCodeValueForPopUp", $("#lstPurposeCode option:selected").val().toString());
                                        // LIABILITY Y/N
                                        sessionStorage.setItem("LiabilityYesorNo", $("#lstLiability option:selected").val().toString());

                                        //=============================
                                        // RELOAD DEFAULT PURPOSE CODES.
                                        // Get Default Purpose Codes
                                        GetPurposeCodeExpenditure();
                                        // Get Default Purpose Codes
                                        // RELOAD DEFAULT PURPOSE CODES.
                                        //=============================
                                        var successMessageDf = 'Transaction saved successfully ';
                                        if ($("#lstSubcontractor option:selected").val().toString() == "Y") { // SUBCONTRACTOR DETAILS.
                                            sessionStorage.setItem("SelectedSubcontractor", $("#lstSubcontractor option:selected").val().toString());
                                            sessionStorage.setItem("PayeeName", $("#txtPayeeName").val().toString());
                                            sessionStorage.setItem("PartnershipName", $("#txtPayeeName").val().toString());

                                            // Remove Session
                                            sessionStorage.removeItem("SelectedReimbursement");
                                            sessionStorage.removeItem("SelectedCreditCardPay");
                                        }
                                        else if (sessionStorage.getItem("PuposeCodeValueForPopUp").toString() == "11") { // REIMBURSEMENT DETAILS.
                                            sessionStorage.setItem("SelectedReimbursement", sessionStorage.getItem("PuposeCodeValueForPopUp").toString());
                                            sessionStorage.setItem("PayeeName", $("#txtPayeeName").val().toString());
                                            sessionStorage.setItem("PayeeNameReimCCI", $("#txtPayeeName").val().toString());

                                            // Remove Session
                                            sessionStorage.removeItem("SelectedSubcontractor");
                                            sessionStorage.removeItem("SelectedCreditCardPay");
                                        }
                                        else if (sessionStorage.getItem("PuposeCodeValueForPopUp").toString() == "29") { // CREDIT CARD ITEMIZATION DETAILS.
                                            sessionStorage.setItem("SelectedCreditCardPay", sessionStorage.getItem("PuposeCodeValueForPopUp").toString());
                                            sessionStorage.setItem("PayeeName", $("#txtPayeeName").val().toString());
                                            sessionStorage.setItem("PayeeNameReimCCI", $("#txtPayeeName").val().toString());

                                            //Remove Session
                                            sessionStorage.removeItem("SelectedSubcontractor");
                                            sessionStorage.removeItem("SelectedReimbursement");
                                        }
                                        else {
                                            sessionStorage.removeItem("SelectedSubcontractor");
                                            sessionStorage.removeItem("SelectedReimbursement");
                                            sessionStorage.removeItem("SelectedCreditCardPay");

                                            if ($m("#lstLiability option:selected").val() == 'Y') {
                                                successMessageDf = 'Transaction saved successfully. The liability balance will automatically be adjusted on any subsequent disclosure reports with the add/edit/delete of this liability transaction. Make sure to submit all amended disclosure reports to show the liability balance accurately.';
                                            }
                                            ////// Clear Values...
                                            ClearDialogBoxValidationSchedF();
                                        }

                                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpPayTransIdPopUp/")", {
                                            strTransNumber: results.toString()
                                        }, function (resultsTransIdDetails) {
                                            $.each(resultsTransIdDetails, function (i, item) {
                                                if ($("#lstSubcontractor option:selected").val().toString() == "Y" ||
                                                    sessionStorage.getItem("PuposeCodeValueForPopUp").toString() == "11" ||
                                                    sessionStorage.getItem("PuposeCodeValueForPopUp").toString() == "29"
                                                ) {
                                                    sessionStorage.setItem("FilingTransId", item.TransNumber.toString());
                                                    sessionStorage.setItem("FilingSchedId", item.FilingSchedId.toString());
                                                    sessionStorage.setItem("FilingSchedDate", item.ScheduleDate.toString());

                                                    if ($("#lstSubcontractor option:selected").val().toString() == "Y") {
                                                        sessionStorage.setItem("TransIdSubContr", item.TransNumber.toString());
                                                        sessionStorage.setItem("ExpSubContrAmt", item.OrgAmount.toString());
                                                        // Remove Session
                                                        sessionStorage.removeItem("TransID");
                                                        sessionStorage.removeItem("CCITransID");
                                                        sessionStorage.removeItem("ReimbursementOrgAmt");
                                                        sessionStorage.removeItem("CreditCardPayOrgAmt");
                                                    }
                                                    else if (sessionStorage.getItem("PuposeCodeValueForPopUp").toString() == "11") {
                                                        sessionStorage.setItem("TransID", item.TransNumber.toString());
                                                        sessionStorage.setItem("ReimbursementOrgAmt", item.OrgAmount.toString());
                                                        // Remove Session
                                                        sessionStorage.removeItem("TransIdSubContr");
                                                        sessionStorage.removeItem("CCITransID");
                                                        sessionStorage.removeItem("ExpSubContrAmt");
                                                        sessionStorage.removeItem("CreditCardPayOrgAmt");
                                                    }
                                                    else if (sessionStorage.getItem("PuposeCodeValueForPopUp").toString() == "29") {
                                                        sessionStorage.setItem("CCITransID", item.TransNumber.toString());
                                                        sessionStorage.setItem("CreditCardPayOrgAmt", item.OrgAmount.toString());
                                                        // Remove Session
                                                        sessionStorage.removeItem("TransIdSubContr");
                                                        sessionStorage.removeItem("TransID");
                                                        sessionStorage.removeItem("ExpSubContrAmt");
                                                        sessionStorage.removeItem("ReimbursementOrgAmt");
                                                    }
                                                } else {
                                                    sessionStorage.removeItem("FilingTransId");
                                                    sessionStorage.removeItem("FilingSchedId");
                                                    sessionStorage.removeItem("FilingSchedDate");
                                                    sessionStorage.removeItem("TransIdSubContr");
                                                    sessionStorage.removeItem("TransID");
                                                    sessionStorage.removeItem("CCITransID");
                                                    sessionStorage.removeItem("ExpSubContrAmt");
                                                    sessionStorage.removeItem("ReimbursementOrgAmt");
                                                    sessionStorage.removeItem("CreditCardPayOrgAmt");
                                                }
                                            });
                                        });
                                        var showGetAllTransactionTypesDataSuccessMessage = true;
                                        var openDialogLiabSaveMessage = false;
                                        var openDialogSubcontractor = false;
                                        if (sessionStorage.getItem("SelectedSubcontractor") != null) {
                                            if (sessionStorage.getItem("SelectedSubcontractor").toString() == "Y") {
                                                sessionStorage.setItem("UpdateFlagSchedFSubcont", "No");
                                                sessionStorage.setItem("SchedFPopuUpCloseMessage", "Yes");

                                                $m("label[for=txtSubcontractorName]").text('');
                                                $m("#txtSubcontractorName").removeClass("error");

                                                $m("label[for=txtPartFirstName]").text('');
                                                $m("#txtPartFirstName").removeClass("error");

                                                $m("label[for=txtPartLastName]").text('');
                                                $m("#txtPartLastName").removeClass("error");

                                                $m("label[for=txtPartAmtSchedF]").text('');
                                                $m("#txtPartAmtSchedF").removeClass("error");
                                                ClearDialogBoxValidationSchedFSubcont();

                                                // Hide/Show controls
                                                $("#tdPartFirstName").show("slow");
                                                $("#tdPartMI").show("slow");
                                                $("#tdPartLastName").show("slow");

                                                $("#tdSubcontractorName").hide("slow");

                                                $("#lstIndividualSubcontr")[0].selectedIndex = 0;
                                                $("#lstItemizedSubcontr")[0].selectedIndex = 0;

                                                $("#dvPartIndividual").show("slow");
                                                $("#tdPartnershipNamePartner").show("slow");
                                                $("#tdPartStreetName").show("slow");
                                                $("#tdPartCity").show("slow");
                                                $("#tdPartState").show("slow");
                                                $("#tdPartZip5").show("slow");
                                                $("#tdPartCity").show("slow");
                                                $("#tdCountryPartnershipChk").show("slow");
                                                $("#tdCountryPartnershipTxt").show("slow");
                                                // Hide/Show controls
                                                // HIDE THE PROCESSING....
                                                openDialogSubcontractor = true;
                                                showGetAllTransactionTypesDataSuccessMessage = false;
                                                $('#lstItemizedSubcontr').focus();
                                            }
                                        } else if (sessionStorage.getItem("SelectedReimbursement") != null) {
                                            if (sessionStorage.getItem("SelectedReimbursement").toString() == "11") {
                                                // OPEN REIMBURSEMENT DETAILS DIALOGBOX
                                                // IF LIABILITY TRANSACTION WITH REIMBURSEMENT THEN ONLY MESSAGE HAS TO SHOW.
                                                if (sessionStorage.getItem("LiabilityYesorNo") != null) {
                                                    if (sessionStorage.getItem("LiabilityYesorNo").toString() == "Y") {
                                                        $("#messageWithLiability").show();
                                                        $("#messageWithOutLiability").hide();
                                                    }
                                                    else {
                                                        $("#messageWithLiability").hide();
                                                        $("#messageWithOutLiability").show();
                                                    }
                                                }
                                                openDialogLiabSaveMessage = true;
                                                showGetAllTransactionTypesDataSuccessMessage = false;
                                            }
                                        } else if (sessionStorage.getItem("SelectedReimbursement") != null
                                            || sessionStorage.getItem("SelectedCreditCardPay") != null) {
                                            if (sessionStorage.getItem("SelectedCreditCardPay").toString() == "29") {
                                                // OPEN CREDIT CARD ITEMIZATION DIALOGBOX
                                                // IF LIABILITY TRANSACTION WITH CREDIT CARD PAYMENT THEN ONLY MESSAGE HAS TO SHOW.
                                                if (sessionStorage.getItem("LiabilityYesorNo") != null) {
                                                    if (sessionStorage.getItem("LiabilityYesorNo").toString() == "Y") {
                                                        $("#messageWithLiability").show();
                                                        $("#messageWithOutLiability").hide();
                                                    }
                                                    else {
                                                        $("#messageWithLiability").hide();
                                                        $("#messageWithOutLiability").show();
                                                    }
                                                }
                                                openDialogLiabSaveMessage = true;
                                                showGetAllTransactionTypesDataSuccessMessage = false;
                                            }
                                        }
                                        $("#txtOriginalAmount").blur();
                                        var doneFunction = function () {
                                            // DIALOG BOX  TO SHOW MESSAGE.
                                            $("#divLoading").hide();
                                            if (showGetAllTransactionTypesDataSuccessMessage) {
                                                ShowDialogBox('EFS', successMessageDf, 'Ok', '');
                                            } else {
                                                if (openDialogLiabSaveMessage == true) {
                                                    dialogLiabSaveMessage.dialog("open");
                                                } else if (openDialogSubcontractor == true) {
                                                    if (@Session["COMM_TYPE_ID"] == "23") {
                                                        $("#lstItemizedSubcontr").prop("disabled", true);
                                                    }
                                                    else {
                                                        $("#lstItemizedSubcontr").prop("disabled", false);
                                                    }
                                                    dialogSubcontractor.dialog("open");
                                                }
                                            }
                                        }
                                        // Refresh the Data on Grid and hide loading.
                                        GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);

                                    } else {
                                        // HIDE THE PROCESSING....
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'Payee Name not found in Outstanding Liability ', 'Ok', '');
                                    }
                                    results = "Custom Error";
                                }
                            }
                        } else if (results.Errors.length >= 0) { // SHOW THE SERVER SIDE VALIDATION MESSAGES.
                            $("#divLoading").hide();
                            ////// Clear Values...
                            ClearDialogBoxValidationSchedF();
                            AppendCustomErrorLabels(results.Errors, "base");
                        }
                    }).fail(function () {
                        $("#divLoading").hide();//SaveFilingTransExpenditureData failed.
                    });
                }
                else if (sessionStorage.getItem("UpdateFlagSchedF").toString() == "Yes") {  // Update // UPDATE SCHEDULE 'F' TRANSACTIONS. //////
                    // UPDATE SCHEDULE F WITH REIMBURSEMENT, CREDIT CARD PAYMENT, AND SUBCONTRACTOR.
                    // UPDATE LIABILITY PAYMENT.
                    if (sessionStorage.getItem("Reimbursement").toString() != "Yes") {
                        if ($("#lstLiability option:selected").val() == "Y") {
                            // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                            // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpRefundedTotalAmt/")", {
                                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                            }, function (resultRefundedAmt) {
                                var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                // ON AMOUNT FOCUS OUT ITS VALIDATION REIMBURSEMENT AND CREDIT CARD PAYMENT DETAILS ADDED OR NOT.
                                // IF ADDED THEN IT VALIDATE ON UPDATE AMOUNT SHOUDL NOT LESS THAN DETAILS AMOUNT.
                                // ADDED THIS BECAUSE AFTER FOCUS OUT VALIDATION NOT WORKING. ADDED - 04/24/2020.
                                if (updatedAmount.toString() != '') {
                                    // HIDE THE PROCESSING....
                                    $("#divLoading").hide();
                                    if (parseFloat(updatedAmount) >= parseFloat(resultRefundedAmt.toString())) {
                                        // Update the Data.
                                        UpdateFilingTransExpenditureData('Transaction saved successfully. The liability balance will automatically be adjusted on any subsequent disclosure reports with the add/edit/delete of this liability transaction. Make sure to submit all amended disclosure reports to show the liability balance accurately.', false);
                                    }
                                    else {
                                        ShowDialogBox('EFS', 'Expenditure Refunds (Increases Balance) Added for Expenditure Payment Amount should not be less than Expenditure Refunds (Increases Balance) Amount $' + parseFloat(resultRefundedAmt).toFixed(2).toString(), 'Ok', '');
                                    }
                                }
                                else {
                                    // ON AMOUNT FOCUS OUT ITS VALIDATION REIMBURSEMENT AND CREDIT CARD PAYMENT DETAILS ADDED OR NOT.
                                    // IF ADDED THEN IT VALIDATE ON UPDATE AMOUNT SHOUDL NOT LESS THAN DETAILS AMOUNT.
                                    // ADDED THIS BECAUSE AFTER FOCUS OUT VALIDATION NOT WORKING. ADDED - 04/24/2020.
                                }
                            }).fail(function () {
                                $("#divLoading").hide();// GetExpRefundedTotalAmt failed.
                            });
                        }
                        else {
                            if ($("#lstSubcontractor option:selected").val().toString() != "Y") {
                                // Check if Purpose Code Credit Card Itemiation or not.
                                if ($m("#lstPurposeCode option:selected").val() == "29") {
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpRefundedTotalAmt/")", {
                                        strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                                    }, function (resultReim) {
                                        if (resultReim.toString() != "0.00") {
                                            var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                            if (parseFloat(updatedAmount) >= parseFloat(resultReim.toString())) {
                                                // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                                // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                                GetReimbursementDetailsTotalAmtForSaveSchedF();//Also UpdateFilingTransExpenditureData and HIDES THE PROCESSING
                                            } else {
                                                // HIDE THE PROCESSING....
                                                $("#divLoading").hide();
                                                ShowDialogBox('EFS', 'Credit Card Itemization Added for Expenditure Payment Amount should not be less than Credit Card Itemization Amount $' + parseFloat(resultReim).toFixed(2).toString(), 'Ok', '');
                                            }
                                        } else { // WHEN NO RFUND ADDED THENN IT WILL BE ZERO ALWAYS THEN IT WILL COME THIS CONDITION.

                                            var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                            if (parseFloat(updatedAmount) >= parseFloat(resultReim.toString())) {
                                                // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                                // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                                GetReimbursementDetailsTotalAmtForSaveSchedF();//Also UpdateFilingTransExpenditureData and HIDES THE PROCESSING
                                            }
                                            else {
                                                // HIDE THE PROCESSING....
                                                $("#divLoading").hide();
                                                ShowDialogBox('EFS', 'Credit Card Itemization Added for Expenditure Payment Amount should not be less than Credit Card Itemization Amount $' + parseFloat(resultReim).toFixed(2).toString(), 'Ok', '');
                                            }
                                        }
                                    }).fail(function () {
                                        $("#divLoading").hide();// GetExpRefundedTotalAmt failed.
                                    });
                                }
                                else {
                                    // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                    // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                    GetExpRefundedTotalAmtForSaveSchedF();//Also UpdateFilingTransExpenditureData and HIDES THE PROCESSING
                                }
                            }
                            else {
                                // Validate Sub Contractor Balance Amount.
                                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpSubContrTotAmt/")", {
                                    strTransNumber: sessionStorage.getItem("TransIdSubContr")
                                }, function (result) {
                                    if (result != "") { // If Sub Contractor exists then you can not modifiy less than Sub Contractor Total Amount.
                                        var subContTotalAmt = result.toString();
                                        var actAmt = $("#txtAmtExpenditurePayments").val().toString();
                                        if (parseFloat(actAmt) >= parseFloat(subContTotalAmt)) {
                                            // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                            // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                            GetExpRefundedTotalAmtForSaveSchedF();//Also UpdateFilingTransExpenditureData and HIDES THE PROCESSING
                                        }
                                        else {
                                            // HIDE THE PROCESSING....
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Subcontractor added for Expenditure Payment Amount should not be less than Subcontracor Amount $' + parseFloat(subContTotalAmt).toFixed(2).toString(), 'Ok', '');
                                        }
                                    }
                                    else { // If Sub Contractor not exists then you can modifiy Amount whatever.
                                        // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                        // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                        GetExpRefundedTotalAmtForSaveSchedF();//Also UpdateFilingTransExpenditureData and HIDES THE PROCESSING
                                    }
                                }).fail(function () {
                                    $("#divLoading").hide();// GetExpSubContrTotAmt failed.
                                });
                            }
                        }
                    }
                    else { // Update REIMBURSEMENT DETAILS DATA.
                        // Update REIMBURSEMENT DETAILS DATA.
                        if (sessionStorage.getItem("ReimbursementDetails").toString() != "Yes") {

                            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                            }, function (results) {
                                // Get the Total Reimbursement Amount.
                                var totalReimDetailsAmt = results.toString();

                                // Get the Reimbursement Orginal Amount Value.
                                var orgAmt = sessionStorage.getItem("ReimbursementOrgAmt").toString();

                                // Get Reimbursement Edit Record Amount.
                                var orgReimAmt = sessionStorage.getItem("ReimOrgAmt").toString();

                                totalReimDetailsAmt = parseFloat(totalReimDetailsAmt) - parseFloat(orgReimAmt);
                                orgAmt = parseFloat(orgAmt) - parseFloat(totalReimDetailsAmt);
                                var reimbursementAmt = $("#txtAmtExpenditurePayments").val().toString();
                                // when using tofixed it is changing to string some time it is not checking condition.
                                reimbursementAmt = parseFloat(reimbursementAmt).toFixed(2);
                                orgAmt = parseFloat(orgAmt).toFixed(2);
                                if (parseFloat(reimbursementAmt) <= parseFloat(orgAmt)) {

                                    // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                    // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpRefundedTotalAmt/")", {
                                        strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                                    }, function (resultRefundedAmt) {
                                        var updatedAmount = $("#txtAmtExpenditurePayments").val().toString();
                                        updatedAmount = parseFloat(updatedAmount).toFixed(2);
                                        resultRefundedAmt = parseFloat(resultRefundedAmt.toString()).toFixed(2);
                                        if (parseFloat(updatedAmount) >= parseFloat(resultRefundedAmt.toString())) {
                                            // update
                                            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/UpdateFlngTransExpReimbursementData/")", {
                                                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransIdReimU")).toString(),
                                                strFilingEntityId: bUtilSanitizeString(sessionStorage.getItem("FilingEntityId")).toString(),
                                                strFilingSchedId: bUtilSanitizeString(sessionStorage.getItem("TransactionType")).toString(),
                                                txtDateRcvd: $m("#txtCurrentDate").val(),
                                                txtAmtExpenditurePayments: $m("#txtAmtExpenditurePayments").val(),
                                                txtExplanationExpenditurePayments: $m("#txtExplanationSchedF").val(),
                                                txtPayorName: $m("#txtPayeeName").val(),
                                                txtCountryReim: $m("#txtCountryReim").val(),
                                                txtStreetName: $m("#txtStreetName").val(),
                                                txtCity: $m("#txtCity").val(),
                                                txtState: $m("#txtState").val(),
                                                txtZipCode: $m("#txtZipCode").val(),
                                                lstPurposeCode: $m("#lstPurposeCode option:selected").val(),
                                                strItemized: $m("#lstItemized option:selected").val(),
                                                lstElectionType: $("#lstElectionType option:selected").val(),
                                                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                                                txtReportPeriodDatesTo: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                                                txtCuttOffDate: bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString(),
                                                chkCountry: $('#chkCountryReim').is(':checked').toString(),
                                            }, function (results) {
                                                if (results.Errors == null) {
                                                    // Success
                                                    if (results) {
                                                        dialog_Sched_F.dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                                        window.status = "Transaction saved successfully";
                                                        var doneFunction = function () {
                                                            // HIDE THE PROCESSING....
                                                            $("#divLoading").hide();
                                                            ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                                        }
                                                        if (@Session["COMM_TYPE_ID"] == "23") {
                                                            $("#lstItemized").prop("disabled", true);
                                                        }
                                                        else {
                                                            $("#lstItemized").prop("disabled", false);
                                                        }
                                                        if (tableReimbursement != "") {
                                                            // Refresh Reinbursement Details Grid.
                                                            GetReimbursementData(doneFunction);
                                                        } else {
                                                            doneFunction();
                                                        }
                                                        // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
                                                        // Show Balance Amount
                                                        GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein();
                                                    }
                                                    else {
                                                        // HIDE THE PROCESSING....
                                                        $("#divLoading").hide();
                                                        ShowDialogBox('EFS', 'Payee Name not found in Outstanding Liability', 'Ok', '');
                                                    }
                                                } // ERROR VALIDATION.
                                                else if (results.Errors.length >= 0) {
                                                    $("#divLoading").hide();
                                                    // Clear the Values.
                                                    ClearDialogBoxValidationSchedQReim();
                                                    AppendCustomErrorLabels(results.Errors, "reinbursement");
                                                }
                                            }).fail(function () {
                                                // HIDE THE PROCESSING....
                                                $("#divLoading").hide();// UpdateFlngTransExpReimbursementData failed.
                                            });
                                        }
                                        else {
                                            //The (parseFloat(updatedAmount) >= parseFloat(resultRefundedAmt.toString())) evaluated to false
                                            // HIDE THE PROCESSING....
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Expenditure Refunds (Increases Balance) Added for Expenditure Payment Amount should not be less than Expenditure Refunds (Increases Balance) Amount $' + parseFloat(resultRefundedAmt).toFixed(2).toString(), 'Ok', '');
                                        }
                                    }).fail(function () {
                                        // HIDE THE PROCESSING....
                                        $("#divLoading").hide();// GetExpRefundedTotalAmt failed.
                                    });
                                }
                                else {
                                    // Triggers when (parseFloat(reimbursementAmt) <= parseFloat(orgAmt)) evaluated to false
                                    // HIDE THE PROCESSING....
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Reimbursement Details Amount should not be more than Original Balance Amount $' + sessionStorage.getItem("ReimbursementOrgAmt").toString(), 'Ok', '');
                                }
                            }).fail(function () {
                                // HIDE THE PROCESSING....
                                $("#divLoading").hide();// GetReimbursementDetailsTotalAmt failed.
                            });
                        }
                        else { // Reimbursement Expenditure Payment Record Edit.
                            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                            }, function (results) {
                                if (results.toString() != "0") { // Reimbursement Details Exist then Validate total Amount.
                                    // Get the Total Reimbursement Amount.
                                    var totalReimDetailsAmt = results.toString();
                                    var valAmt = $("#txtAmtExpenditurePayments").val().toString();
                                    if (parseFloat(valAmt) >= parseFloat(totalReimDetailsAmt)) {
                                        // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                        // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                        GetExpRefundedTotalAmtForSaveSchedF();//Also UpdateFilingTransExpenditureData and HIDES THE PROCESSING
                                    }
                                    else {
                                        // HIDE THE PROCESSING....
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'Reimbursement Details Added for Expenditure Payment Amount should not be less than Reimbursement Details Amount $' + parseFloat(totalReimDetailsAmt).toFixed(2).toString(), 'Ok', '');
                                    }
                                }
                                else { // Reimbursement Details not exist then Amount should be whatever.
                                    // ADD VALIDATION IF ANY EXPENDITURE REFUNDS THERE THEN...
                                    // THEY SHOULD NOT REDUCE LESSER THAN REFUNDS.
                                    GetExpRefundedTotalAmtForSaveSchedF();//Also UpdateFilingTransExpenditureData and HIDES THE PROCESSING
                                }
                            }).fail(function () {
                                $("#divLoading").hide();// GetReimbursementDetailsTotalAmt failed.
                            });
                        }
                    }
                } else { //The "UpdateFlagSchedF" did not meet the ondition to != "Yes"  and also == "Yes". I know it's weird but that's how this was written so we hide this anyway.
                    // HIDE THE PROCESSING....
                    $("#divLoading").hide();
                }
            }
        });


        // reddy
        $("#btnLiabSaveMessageOk").click(function (e) {

            dialogLiabSaveMessage.dialog("close");

            if (sessionStorage.getItem("SelectedReimbursement") != null) {
                if (sessionStorage.getItem("SelectedReimbursement").toString() == "11") { // REIMBURSEMENT DETAILS.

                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedReim").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedReim").prop("disabled", false);
                    }

                    dialogReimbursementDetails.dialog("open");

                    ClearDialogBoxValidationSchedQReim();

                    sessionStorage.setItem("UpdateFlagSchedFReim", "No");
                    sessionStorage.setItem("SchedFPopuUpCloseMessageReim", "Yes");

                    sessionStorage.setItem("flagUpdate", "null");
                    sessionStorage.setItem("Reimbursement", "Yes");

                    $m("label[for=txtCurrentDateReimDetSchedF]").text('');
                    $m("#txtCurrentDateReimDetSchedF").removeClass("error");

                    $m("label[for=txtDetailsPayeeNameReim]").text('');
                    $m("#txtDetailsPayeeNameReim").removeClass("error");

                    $m("label[for=lstPurposeCodeReim]").text('');
                    $m("#lstPurposeCodeReim").removeClass("error");

                    $m("label[for=txtAmtReim]").text('');
                    $m("#txtAmtReim").removeClass("error");

                    // Add/Edit
                    $("#btnSaveSchedFReim").show();
                    $("#btnUpdateSchedFReim").hide();

                    $("#txtOriginalPayeeNameReimDet").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                    // Hide/Show
                    $("#tdDatePaidReim").show();
                    $("#tdOriginalPayeeName").show();
                    $("#tdDetailsPayeeNameReim").show();
                    $("#divStreetAddressReim").show();
                    $("#divCityReim").show();
                    $("#divStateReim").show();
                    $("#divZip5Reim").show();
                    $("#tdPurposeCodeReim").show();
                    $("#tdAmtReim").show();
                    $("#tdExplanationReim").show();
                    $("#tdCountryContributionChkReim").show();
                    $("#tdCountryContributionTxtReim").show();
                    // Hide/Show

                    $("#lstLiabilityExists").prop("disabled", true);

                    sessionStorage.setItem("LiabilityExpAmt", "null");
                    sessionStorage.setItem("LibFlngEntyId", "null");
                    sessionStorage.setItem("flagUpdate", "null");
                    sessionStorage.setItem("Reimbursement", "Yes");

                    // Get Purpose Code for Reimbursement Details./////////////////////////////////
                    var options = {};
                    options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeReimDetails/")";
                    options.type = "POST";
                    options.data = null;
                    options.dataType = "json";
                    options.contentType = "application/json";
                    options.success = function (results) {
                        $("#lstPurposeCodeReim").empty();
                        $("#lstPurposeCodeReim").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstPurposeCodeReim").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                    };
                    options.error = function () {
                        //alert("Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ");
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '', 'GoToAssetList', null);
                    };
                    $.ajax(options);
                    // Get Purpose Code for Reimbursement Details./////////////////////////////////
                }
            }
            else if (sessionStorage.getItem("SelectedCreditCardPay") != null) { // CREDIT CARD PAYMENT
                if (sessionStorage.getItem("SelectedCreditCardPay").toString() == "29") {

                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedCCI").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedCCI").prop("disabled", false);
                    }

                    dialogCreditCardItemization.dialog("open");

                    ClearDialogBoxValidationSchedQCCI();

                    sessionStorage.setItem("UpdateFlagSchedFCCI", "No"); 4
                    sessionStorage.setItem("SchedFPopuUpCloseMessageCCI", "Yes");

                    ClearErrorsSchedQCCIDialogBox();

                    // Add/Edit
                    $("#btnSaveSchedFCCItem").show();
                    $("#btnUpdateSchedFCCItem").hide();

                    $("#txtOriginalPayeeNameCCI").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                    // Hide/Show
                    $("#tdDatePaidCCI").show();
                    $("#tdPayeeNameOrgCCI").show();
                    $("#tdPayeeNameCCI").show();
                    $("#divStreetAddressCCI").show();
                    $("#divCityCCI").show();
                    $("#divStateCCI").show();
                    $("#divZip5CCI").show();
                    $("#tdPurposeCodeItemization").show();
                    $("#tdAmtCCI").show();
                    $("#tdExplanationCCI").show();
                    $("#tdCountryContributionChkCCI").show();
                    $("#tdCountryContributionTxtCCI").show();
                    // Hide/Show

                    // Get Purpose Code for Credit Card Itemization /////////////////////////////////
                    var options = {};
                    options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeReimDetails/")";
                    options.type = "POST";
                    options.data = null;
                    options.dataType = "json";
                    options.contentType = "application/json";
                    options.success = function (results) {
                        $("#lstPurposeCodeCCI").empty();
                        $("#lstPurposeCodeCCI").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstPurposeCodeCCI").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                    };
                    options.error = function () {
                        //alert("Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ");
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '', 'GoToAssetList', null);
                    };
                    $.ajax(options);
                    // Get Purpose Code for Credit Card Itemization /////////////////////////////////
                }
            }
        });

        // ADD/EDIT REIMBURSEMENT DETAILS TRANSACTIONS...//////////////////////////////
        $("#btnSaveSchedFReim").click(function (e) { // Save Button.
            // If its valid true then go ahead and Save the Data.
            $m("#DialogBoxSchedFReimForm").valid();
            if ($m("#DialogBoxSchedFReimForm").valid()) { // JQuery Validation // Insert
                // SHOW THE PROCESSING....
                $("#divLoading").show();
                // Get the total value for Reimbursement Details Amount.
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                }, function (results) {
                    var totalReimDetailsAmt = results.toString();
                    var orgAmt = parseFloat(sessionStorage.getItem("ReimbursementOrgAmt").toString());
                    orgAmt = parseFloat(orgAmt) - parseFloat(totalReimDetailsAmt);
                    var reimbursementAmt = $m("#txtAmtReim").val().toString();
                    // when using tofixed it is changing to string some time it is not checking condition.
                    reimbursementAmt = parseFloat(reimbursementAmt).toFixed(2);
                    orgAmt = parseFloat(orgAmt).toFixed(2);
                    if (parseFloat(reimbursementAmt) <= parseFloat(orgAmt)) {
                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/SaveFlngTransExpReimbursementData/")", {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString(),
                            strFilingSchedId: bUtilSanitizeString(sessionStorage.getItem("TransactionType")).toString(),
                            txtDateRcvd: $m("#txtCurrentDateReimDetSchedF").val(),
                            txtAmtExpenditurePayments: $m("#txtAmtReim").val(),
                            txtExplanationExpenditurePayments: $m("#txtExplanationSchedQReim").val(),
                            txtPayorName: $m("#txtDetailsPayeeNameReim").val(),
                            txtCountryReim: $m("#txtCountryReim").val(),
                            txtStreetName: $m("#txtStreetNameReim").val(),
                            txtCity: $m("#txtCityReim").val(),
                            txtState: $m("#txtStateReim").val(),
                            txtZipCode: $m("#txtZipCodeReim").val(),
                            lstPurposeCode: $m("#lstPurposeCodeReim option:selected").val(),
                            strItemized: $m("#lstItemizedReim option:selected").val(),
                            lstElectionType: $("#lstElectionType option:selected").val(),
                            lstFilingDate: $m("#lstFilingDate option:selected").text(),
                            txtReportPeriodDatesTo: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                            txtCuttOffDate: bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString(),
                            chkCountry: $('#chkCountryReim').is(':checked').toString(),
                        }, function (results) {

                            if (results.Errors == null) {

                                // Success
                                if (results) {
                                    $("#lstItemizedReim").focus();
                                    window.status = "Transaction saved successfully";
                                    var doneFunction = function () {
                                        $("#divLoading").hide();
                                        //This save button event doesnt have a table to update see btnCloseDialogReim
                                        ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                    }
                                    if (tableReimbursement != "") {
                                        // Refresh Reinbursement Details Grid.
                                        GetReimbursementData(doneFunction);
                                    } else {
                                        doneFunction();
                                    }
                                    ClearDialogBoxValidationSchedQReim();

                                    // Hide/Show
                                    $("#tdDatePaidReim").show();
                                    $("#tdOriginalPayeeName").show();
                                    $("#tdDetailsPayeeNameReim").show();
                                    $("#divStreetAddressReim").show();
                                    $("#divCityReim").show();
                                    $("#divStateReim").show();
                                    $("#divZip5Reim").show();
                                    $("#tdPurposeCodeReim").show();
                                    $("#tdAmtReim").show();
                                    $("#tdExplanationReim").show();
                                    $("#tdCountryContributionChkReim").show();
                                    $("#tdCountryContributionTxtReim").show();
                                    if (@Session["COMM_TYPE_ID"] == "23") {
                                        $("#lstItemizedReim").prop("disabled", true);
                                    }
                                    else {
                                        $("#lstItemizedReim").prop("disabled", false);
                                    }
                                    // Hide/Show

                                    // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
                                    GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein();
                                } else {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Payee Name not found in Outstanding Liability ', 'Ok', '');
                                }
                            } // ERROR VALIDATION.
                            else if (results.Errors.length >= 0) {
                                $("#divLoading").hide();
                                // Clear Error Values.
                                ClearDialogBoxValidationSchedQReim();
                                AppendCustomErrorLabels(results.Errors, "reinbursement");
                            }
                        }).fail(function () {
                            $("#divLoading").hide();// SaveFlngTransExpReimbursementData failed.
                        });
                    }
                    else {
                        $("#divLoading").hide();
                        ShowDialogBox('EFS', 'Reimbursement Details Amount should not be more than Original Balance Amount $' + parseFloat(orgAmt).toFixed(2).toString(), 'Ok', '');
                    }
                }).fail(function () {
                    $("#divLoading").hide();// GetReimbursementDetailsTotalAmt failed.
                });
            }
        });
        // ADD REIMBURSEMENT DETAILS TRANSACTIONS...//////////////////////////////

        // EDIT  REIMBURSEMENT DETAILS TRANSACTIONS...//////////////////////////////
        $("#btnUpdateSchedFReim").click(function (e) { // UPDATED BUTTON.
            $m("#DialogBoxSchedFReimForm").valid();
            if ($m("#DialogBoxSchedFReimForm").valid()) { // JQuery Validation // update.
                $("#divLoading").show();
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                }, function (results) {
                    // Get the Total Reimbursement Amount.
                    var totalReimDetailsAmt = results.toString();

                    // Get the Reimbursement Orginal Amount Value.
                    var orgAmt = sessionStorage.getItem("ReimbursementOrgAmt").toString();

                    // Get Reimbursement Edit Record Amount.
                    var orgReimAmt = sessionStorage.getItem("ReimOrgAmt").toString();

                    totalReimDetailsAmt = parseFloat(totalReimDetailsAmt) - parseFloat(orgReimAmt);
                    orgAmt = parseFloat(orgAmt) - parseFloat(totalReimDetailsAmt);

                    var reimbursementAmt = $("#txtAmtReim").val().toString();

                    // when using tofixed it is changing to string some time it is not checking condition.
                    reimbursementAmt = parseFloat(reimbursementAmt).toFixed(2);
                    orgAmt = parseFloat(orgAmt).toFixed(2);
                    if (parseFloat(reimbursementAmt) <= parseFloat(orgAmt)) {
                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/UpdateFlngTransExpReimbursementData/")", {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransIdReimU")).toString(),
                            strFilingEntityId: bUtilSanitizeString(sessionStorage.getItem("FilingEntityId")).toString(),
                            strFilingSchedId: bUtilSanitizeString(sessionStorage.getItem("TransactionType")).toString(),
                            txtDateRcvd: $m("#txtCurrentDateReimDetSchedF").val(),
                            txtAmtExpenditurePayments: $m("#txtAmtReim").val(),
                            txtExplanationExpenditurePayments: $m("#txtExplanationSchedQReim").val(),
                            txtPayorName: $m("#txtDetailsPayeeNameReim").val(),
                            txtCountryReim: $m("#txtCountryReim").val(),
                            txtStreetName: $m("#txtStreetNameReim").val(),
                            txtCity: $m("#txtCityReim").val(),
                            txtState: $m("#txtStateReim").val(),
                            txtZipCode: $m("#txtZipCodeReim").val(),
                            lstPurposeCode: $m("#lstPurposeCodeReim option:selected").val(),
                            strItemized: $m("#lstItemizedReim option:selected").val(),
                            lstElectionType: $("#lstElectionType option:selected").val(),
                            lstFilingDate: $m("#lstFilingDate option:selected").text(),
                            txtReportPeriodDatesTo: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                            txtCuttOffDate: bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString(),
                            chkCountry: $('#chkCountryReim').is(':checked').toString(),
                        }, function (results) {
                            if (results.Errors == null) {
                                // Success
                                if (results) {
                                    dialogReimbursementDetails.dialog("close");//Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                    window.status = "Transaction saved successfully";
                                    if (@Session["COMM_TYPE_ID"] == "23") {
                                        $("#lstItemizedReim").prop("disabled", true);
                                    }
                                    else {
                                        $("#lstItemizedReim").prop("disabled", false);
                                    }
                                    var doneFunction = function () {
                                        // HIDE THE PROCESSING....
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                    }
                                    if (tableReimbursement != "") {
                                        // Refresh Reinbursement Details Grid.
                                        GetReimbursementData(doneFunction);
                                    } else {
                                        doneFunction();
                                    }
                                    // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
                                    // Show Balance Amount
                                    GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein();
                                }
                                else {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Payee Name not found in Outstanding Liability ', 'Ok', '');
                                }
                            } // ERROR VALIDATION.
                            else if (results.Errors.length >= 0) {
                                $("#divLoading").hide();
                                // Clear the Values.
                                ClearDialogBoxValidationSchedQReim();
                                AppendCustomErrorLabels(results.Errors, "reinbursement");
                            }
                        }).fail(function () {
                            $("#divLoading").hide();// UpdateFlngTransExpReimbursementData failed.
                        });
                    }
                    else {
                        $("#divLoading").hide();
                        ShowDialogBox('EFS', 'Reimbursement Details Amount should not be more than Original Balance Amount $' + parseFloat(orgAmt).toFixed(2).toString(), 'Ok', '');
                    }
                }).fail(function () {
                    $("#divLoading").hide();// GetReimbursementDetailsTotalAmt failed.
                });
            }
        });
        // EDIT  REIMBURSEMENT DETAILS TRANSACTIONS...//////////////////////////////


        // Date Incurred Change
        $("#lstDateIncurred").change(function () {

            if ($("#lstDateIncurred option:selected").text().toString() != "- Select -") {

                $("#txtAmtExpenditurePayments").val("");
                $("#txtAmtExpenditurePayments").blur();

                var strUpdateStatus = "N";
                // Get Outstanding Amount;
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetOutstandingAmount/")", {
                    strFlngEntityId: sessionStorage.getItem("LibFlngEntyId"),
                    strUpdateStatusVal: strUpdateStatus.toString(),
                    strSchedFAmt: $("#txtAmtExpenditurePayments").val().toString(),
                    strFilingTransId: $("#lstDateIncurred option:selected").val().toString()
                }, function (resultOwedAmt) {
                    $("#txtOutstandingAmt").val(resultOwedAmt.toString());
                    sessionStorage.setItem("OutstandingAmountPartialExists", resultOwedAmt.toString());
                });
            }
            else {
                $("#txtAmtExpenditurePayments").val("");
                $("#txtAmtExpenditurePayments").blur();
                $("#txtOutstandingAmt").val("");
                $("#txtOutstandingAmt").blur();
            }
        });

        sessionStorage.removeItem("AutoCompltPayeeName");

        // Partner First Name Auto Complete.
        $m("#txtPayeeName").autocomplete({
            source: function (request, response) {
                if ($("#lstLiabilityExists option:selected").val() == "Y") {
                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetAutoCompleteCreditorName/")", request, response);
                }
                else {
                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/AutoCompleteEntityName/")", request, response);
                }
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;

                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetAutoCompleteNameData/")", {
                    strValue: selectedValue.toString()
                }, function (results) {

                    sessionStorage.setItem("ExistingLiabilityAutoComp", "Yes");

                    $.each(results, function (i, item) {
                        $("#txtPayeeName").val(item.FilingEntityName.toString());
                        $("#txtStreetName").val(item.FilingEntityStreetName.toString());
                        $("#txtCity").val(item.FilingEntityCity.toString());
                        $("#txtState").val(item.FilingEntityState.toString());
                        $("#txtZipCode").val(item.FilingEntityZip.toString());
                        $("#txtCountry").val(item.FilingEntityCountry.toString());
                        if ($("#txtCountry").val().toString() == "United States") {
                            $("#chkCountry").prop('checked', false);
                            $("#txtCountry").prop("disabled", true);
                            $("#txtState").prop('maxLength', '2');
                            if (item.FilingEntityZip.toString() != "") {
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            }
                            else {
                                $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                $("#txtZipCode").blur();
                            }
                        } else {
                            $("#chkCountry").prop('checked', true);
                            $("#txtCountry").prop("disabled", false);
                            $("#txtState").prop('maxLength', '30');

                            $m('#txtZipCode').attr("placeholder", "");
                            $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                        }
                        $m("#txtPayeeName").valid();
                        // Address validation
                        $m("#txtCountry").valid();
                        $m("#txtStreetName").valid();
                        $m("#txtCity").valid();
                        $m("#txtState").valid();
                        $m("#txtZipCode").valid();

                        sessionStorage.setItem("LibFlngEntyId", item.FilingEntityId.toString());
                        sessionStorage.setItem("AutoCompltPayeeName", item.FilingEntityName.toString());
                    });

                    //Check Liability 'Yes' then bring Date Incurred and Amount.
                    if ($("#lstLiabilityExists option:selected").val().toString() == "Y") {

                        // Load Date Incurred Data.
                        // Get Date Incurred Data.
                        // Bind Date Incurred Data.
                        var options = {};
                        options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetDateIncurred/")";
                        options.type = "POST";
                        options.data = JSON.stringify(
                            {
                                strFilingEntityId: null,
                                strFilerId: $("#txtFilerID option:selected").text().toString()
                            });
                        options.dataType = "json";
                        options.contentType = "application/json";
                        options.success = function (resultsDateIncurred) {
                            $("#lstDateIncurred").empty();
                            $("#lstDateIncurred").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                            for (var i = 0; i < resultsDateIncurred.length; i++) {
                                $("#lstDateIncurred").append("<option value='" + resultsDateIncurred[i].Value + "'>" + resultsDateIncurred[i].Text + "</option>");
                            }
                        };
                        options.error = function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                        };
                        $.ajax(options);
                    }

                });
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtPayeeName]").text('');
                    $m("#txtPayeeName").removeClass("error");
                }
                else {
                    // do whatever you want to when the item is not found
                    $m("label[for=txtPayeeName]").text('');
                    $m("#txtPayeeName").removeClass("error");
                }
            }
        });

        // FOCUS IN WHEN EXISTING LIABILITY
        // WE HAVE TO RESET THE DATE INCURRED AND AMOUNT.
        $("#txtPayeeName").focusin(function () {
            if ($("#lstLiabilityExists option:selected").val().toString() == "Y") {

                $("#lstDateIncurred").empty();
                $("#lstDateIncurred").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");

                $("#txtAmtExpenditurePayments").val("");
                $("#txtAmtExpenditurePayments").blur();
                $("#txtOutstandingAmt").val("");
                $("#txtOutstandingAmt").blur();
            }
        });

        // Partial Liability and if Existing Liabilty Yes then it will bring
        // Date Incurred and Original Amount Dropdown will show.
        $("#txtPayeeName").on('focusout', function (e) {

            if ($("#txtPayeeName").val() != "") {

                if ($("#lstLiabilityExists option:selected").val().toString() == "Y") {

                    // GET THE FILING ENTITY EXISTS OR NOT.
                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetPayeeNameExistsLiability/")", {
                        strPayeeName: $("#txtPayeeName").val().toString()
                    }, function (resultsLiability) {
                        if (resultsLiability.length != 0) {

                            $.each(resultsLiability, function (i, item) {
                                sessionStorage.setItem("EntityIdLiab", item.FilingEntityId.toString());
                            });

                            // Bind Date Incurred Data.
                            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetDateIncurred/")", {
                                strFilingEntityId: bUtilSanitizeString(sessionStorage.getItem("EntityIdLiab")).toString(),
                                strFilerId: $("#txtFilerID option:selected").text().toString()
                            }, function (results) {

                                if (results.length != 0) {

                                    $("#lstDateIncurred").empty();
                                    $("#lstDateIncurred").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                                    for (var i = 0; i < results.length; i++) {
                                        $("#lstDateIncurred").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                                    }
                                    $("#txtAmtExpenditurePayments").val("");
                                    $("#txtAmtExpenditurePayments").blur();
                                    $("#txtOutstandingAmt").val("");
                                    $("#txtOutstandingAmt").blur();
                                }
                                else {
                                    $("#lstDateIncurred").empty();
                                    $("#lstDateIncurred").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");

                                    $("#txtAmtExpenditurePayments").val("");
                                    $("#txtAmtExpenditurePayments").blur();
                                    $("#txtOutstandingAmt").val("");
                                    $("#txtOutstandingAmt").blur();

                                    ShowDialogBox('EFS', 'Payee Name not existing in liability', 'Ok', '');
                                }
                            });
                        }
                        else {
                            $("#lstDateIncurred").empty();
                            $("#lstDateIncurred").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");

                            $("#txtAmtExpenditurePayments").val("");
                            $("#txtAmtExpenditurePayments").blur();
                            $("#txtOutstandingAmt").val("");
                            $("#txtOutstandingAmt").blur();

                            ShowDialogBox('EFS', 'Payee Name not existing in liability', 'Ok', '');
                        }
                    });
                }
            }
        });

        // Payee Name Credit Card Itemization Auto Complete.
        $m("#txtDetailsPayeeNameCCI").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/AutoCompleteEntityName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/ExpenditurePaymentsSchedF/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        $.each(results, function (i, item) {
                            $("#txtDetailsPayeeNameCCI").val(item.FilingEntityName.toString());
                            $("#txtStreetNameCCI").val(item.FilingEntityStreetName.toString());
                            $("#txtCityCCI").val(item.FilingEntityCity.toString());
                            $("#txtStateCCI").val(item.FilingEntityState.toString());
                            $("#txtZipCodeCCI").val(item.FilingEntityZip.toString());
                            $("#txtCountryCCI").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountryCCI").val().toString() == "United States") {
                                $("#chkCountryCCI").prop('checked', false);
                                $("#txtCountryCCI").prop("disabled", true);
                                $("#txtStateCCI").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtZipCodeCCI").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtZipCodeCCI").addClass("watermarkHTMLTextBox");
                                    $("#txtZipCodeCCI").blur();
                                }
                            } else {
                                $("#chkCountryCCI").prop('checked', true);
                                $("#txtCountryCCI").prop("disabled", false);
                                $("#txtStateCCI").prop('maxLength', '30');

                                $m('#txtZipCodeCCI').attr("placeholder", "");
                                $("#txtZipCodeCCI").removeClass("watermarkHTMLTextBox");
                            }
                            $m("#txtPayeeName").valid();
                            // Address validation
                            $m("#txtCountryCCI").valid();
                            $m("#txtStreetNameCCI").valid();
                            $m("#txtCityCCI").valid();
                            $m("#txtStateCCI").valid();
                            $m("#txtZipCodeCCI").valid();
                        });
                    }
                });
                $("#lstPurposeCodeCCI").focus();
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtDetailsPayeeNameCCI]").text('');
                    $m("#txtPayeeName").removeClass("error");
                }
                else {
                    // do whatever you want to when the item is not found
                    $m("label[for=txtDetailsPayeeNameCCI]").text('');
                    $m("#txtDetailsPayeeNameCCI").removeClass("error");
                }
            }
        });

        // Autocomplete Reimbursement Details.
        $m("#txtDetailsPayeeNameReim").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/AutoCompleteEntityName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/ExpenditurePaymentsSchedF/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        $.each(results, function (i, item) {
                            $("#txtDetailsPayeeNameReim").val(item.FilingEntityName.toString());
                            $("#txtStreetNameReim").val(item.FilingEntityStreetName.toString());
                            $("#txtCityReim").val(item.FilingEntityCity.toString());
                            $("#txtStateReim").val(item.FilingEntityState.toString());
                            $("#txtZipCodeReim").val(item.FilingEntityZip.toString());
                            $("#txtCountryReim").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountryReim").val().toString() == "United States") {
                                $("#chkCountryReim").prop('checked', false);
                                $("#txtCountryReim").prop("disabled", true);
                                $("#txtStateReim").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtZipCodeReim").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtZipCodeReim").addClass("watermarkHTMLTextBox");
                                    $("#txtZipCodeReim").blur();
                                }
                            } else {
                                $("#chkCountryReim").prop('checked', true);
                                $("#txtCountryReim").prop("disabled", false);
                                $("#txtStateReim").prop('maxLength', '30');

                                $m('#txtZipCodeReim').attr("placeholder", "");
                                $("#txtZipCodeReim").removeClass("watermarkHTMLTextBox");
                            }
                            $m("#txtPayeeName").valid();
                            // Address validation
                            $m("#txtCountryReim").valid();
                            $m("#txtStreetNameReim").valid();
                            $m("#txtCityReim").valid();
                            $m("#txtStateReim").valid();
                            $m("#txtZipCodeReim").valid();
                        });
                    }
                });
                $("#lstPurposeCodeReim").focus();
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtDetailsPayeeNameReim]").text('');
                    $m("#txtDetailsPayeeNameReim").removeClass("error");
                }
                else {
                    // do whatever you want to when the item is not found
                    $m("label[for=txtDetailsPayeeNameReim]").text('');
                    $m("#txtDetailsPayeeNameReim").removeClass("error");
                }
            }
        });

        // Attribution Subcontractor (Business Name) Name
        $m("#txtSubcontractorName").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/AutoCompleteEntityName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/ExpenditurePaymentsSchedF/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        $.each(results, function (i, item) {
                            $("#txtSubcontractorName").val(item.FilingEntityName.toString());
                            $("#txtPartStreetName").val(item.FilingEntityStreetName.toString());
                            $("#txtPartCity").val(item.FilingEntityCity.toString());
                            $("#txtPartState").val(item.FilingEntityState.toString());
                            $("#txtPartZip5").val(item.FilingEntityZip.toString());
                            $("#txtCountryPartnership").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountryPartnership").val().toString() == "United States") {
                                $("#chkCountryPartnership").prop('checked', false);
                                $("#txtCountryPartnership").prop("disabled", true);
                                $("#txtPartState").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtPartZip5").addClass("watermarkHTMLTextBox");
                                    $("#txtPartZip5").blur();
                                }
                            } else {
                                $("#chkCountryPartnership").prop('checked', true);
                                $("#txtCountryPartnership").prop("disabled", false);
                                $("#txtPartState").prop('maxLength', '30');

                                $m('#txtPartZip5').attr("placeholder", "");
                                $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                            }
                            $m("#txtSubcontractorName").valid();
                            // Address validation
                            $m("#txtCountryReim").valid();
                            $m("#txtPartStreetName").valid();
                            $m("#txtPartCity").valid();
                            $m("#txtPartState").valid();
                            $m("#txtPartZip5").valid();
                        });
                    }
                });
                $("#txtPartAmtSchedF").focus();
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtSubcontractorName]").text('');
                    $m("#txtSubcontractorName").removeClass("error");
                }
                else {
                    // do whatever you want to when the item is not found
                    $m("label[for=txtSubcontractorName]").text('');
                    $m("#txtSubcontractorName").removeClass("error");
                }
            }
        });

        // Attribution Partners First Name
        $m("#txtPartFirstName").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/AutoCompleteFirstName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/ExpenditurePaymentsSchedF/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        $.each(results, function (i, item) {
                            $("#txtPartFirstName").val(item.FilingEntityFirstName.toString());
                            $("#txtPartMI").val(item.FilingEntityMiddleName.toString());
                            $("#txtPartLastName").val(item.FilingEntityLastName.toString());
                            $("#txtPartStreetName").val(item.FilingEntityStreetName.toString());
                            $("#txtPartCity").val(item.FilingEntityCity.toString());
                            $("#txtPartState").val(item.FilingEntityState.toString());
                            $("#txtPartZip5").val(item.FilingEntityZip.toString());
                            $("#txtCountryPartnership").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountryPartnership").val().toString() == "United States") {
                                $("#chkCountryPartnership").prop('checked', false);
                                $("#txtCountryPartnership").prop("disabled", true);
                                $("#txtPartState").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtPartZip5").addClass("watermarkHTMLTextBox");
                                    $("#txtPartZip5").blur();
                                }
                            } else {
                                $("#chkCountryPartnership").prop('checked', true);
                                $("#txtCountryPartnership").prop("disabled", false);
                                $("#txtPartState").prop('maxLength', '30');

                                $m('#txtPartZip5').attr("placeholder", "");
                                $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                            }
                            // Address validation
                            $m("#txtCountryReim").valid();
                            $m("#txtPartStreetName").valid();
                            $m("#txtPartCity").valid();
                            $m("#txtPartState").valid();
                            $m("#txtPartZip5").valid();
                        });
                    }
                });
                $("#txtPartAmtSchedF").focus();
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtPartFirstName]").text('');
                    $m("#txtPartFirstName").removeClass("error");
                }
                else {
                    // do whatever you want to when the item is not found
                    $m("label[for=txtPartFirstName]").text('');
                    $m("#txtPartFirstName").removeClass("error");
                }
            }
        });

        // Attribution Partners Last Name
        $m("#txtPartLastName").autocomplete({
            source: function (request, response) {
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/AutoCompleteLastName/")", request, response);
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();

                var selectedValue = ui.item.label;
                $.ajax({
                    url: "@Url.Content("~/ExpenditurePaymentsSchedF/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                    success: function (results) {
                        $.each(results, function (i, item) {
                            $("#txtPartFirstName").val(item.FilingEntityFirstName.toString());
                            $("#txtPartMI").val(item.FilingEntityMiddleName.toString());
                            $("#txtPartLastName").val(item.FilingEntityLastName.toString());
                            $("#txtPartStreetName").val(item.FilingEntityStreetName.toString());
                            $("#txtPartCity").val(item.FilingEntityCity.toString());
                            $("#txtPartState").val(item.FilingEntityState.toString());
                            $("#txtPartZip5").val(item.FilingEntityZip.toString());
                            $("#txtCountryPartnership").val(item.FilingEntityCountry.toString());
                            if ($("#txtCountryPartnership").val().toString() == "United States") {
                                $("#chkCountryPartnership").prop('checked', false);
                                $("#txtCountryPartnership").prop("disabled", true);
                                $("#txtPartState").prop('maxLength', '2');
                                if (item.FilingEntityZip.toString() != "") {
                                    $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                                }
                                else {
                                    $("#txtPartZip5").addClass("watermarkHTMLTextBox");
                                    $("#txtPartZip5").blur();
                                }
                            } else {
                                $("#chkCountryPartnership").prop('checked', true);
                                $("#txtCountryPartnership").prop("disabled", false);
                                $("#txtPartState").prop('maxLength', '30');

                                $m('#txtPartZip5').attr("placeholder", "");
                                $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                            }
                            $m("#txtPartLastName").valid();
                            // Address validation
                            $m("#txtCountryReim").valid();
                            $m("#txtPartStreetName").valid();
                            $m("#txtPartCity").valid();
                            $m("#txtPartState").valid();
                            $m("#txtPartZip5").valid();
                        });
                    }
                });
                $("#lstMethod").focus();
            },
            change: function (event, ui) {
                if (ui.item) {
                    // do whatever you want to when the item is found
                    $m("label[for=txtPartLastName]").text('');
                    $m("#txtPartLastName").removeClass("error");
                }
                else {
                    // do whatever you want to when the item is not found
                    $m("label[for=txtPartLastName]").text('');
                    $m("#txtPartLastName").removeClass("error");
                }
            }
        });

        // Purpose Code Change
        $("#lstPurposeCode").change(function (e) {

            var selectedPurposeCode = $("#lstPurposeCode option:selected").val().toString();

            if ($("#lstMethod option:selected").val().toString() == "7") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
            }
            else if ($("#lstPurposeCode option:selected").val().toString() == "8"
                    || $("#lstPurposeCode option:selected").val().toString() == "51") { // OTHER
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("* Explanation");
            }
            else {
                // EXPLANATION MANADATORY
                $("#lblExplanation").text("Explanation");

                $m("label[for=txtExplanationSchedF]").text('');
                $m("#txtExplanationSchedF").removeClass("error");
            }

            if (selectedPurposeCode == "11" || selectedPurposeCode == "29") {
                $("#lstSubcontractor").prop("disabled", true);
            }
            else {
                $("#lstSubcontractor").prop("disabled", false);
            }

            $m("label[for=txtExplanationSchedF]").text('');
            $m("#txtExplanationSchedF").removeClass("error");

        });

        //Show Hide Lookups
        $("#divshow").hide();
        $("#divshowForMobile").hide();

        $m(".clsbtnCommonHideShow").bind('click', function (e) {

            $("#divhide").show("slow");
            $("#divshow").hide("slow");

            $("#divhideForMobile").show("slow");
            $("#divshowForMobile").hide("slow");

            $("#divGrid").addClass("Per80hideShowButtonCSS");
            $("#divGrid").removeClass("Per100hideShowButtonCSS");


            $("#divGridExpenditurePayments").addClass("Per80hideShowButtonCSS");
            $("#divGridExpenditurePayments").removeClass("Per100hideShowButtonCSS");

            $("#divShowSubcontroctor").addClass("Per80hideShowButtonCSS");
            $("#divShowSubcontroctor").removeClass("Per100hideShowButtonCSS");

            $("#divShowReimbursement").addClass("Per80hideShowButtonCSS");
            $("#divShowReimbursement").removeClass("Per100hideShowButtonCSS");

        });

        $("#btnShowHide").click(function () {
            if ($("#divShowHide").is(":hidden")) {
                $("#divMainNew").removeClass("mainDivNew");
                $("#divMainNew").addClass("mainDiv");

            } else {
                $("#divMainNew").removeClass("mainDiv");
                $("#divMainNew").addClass("mainDivNew");
            }
        });

        $m(".clsbtnCommonShowHide").bind('click', function (e) {

            $("#divhide").hide("slow");
            $("#divshow").show("slow");

            $("#divhideForMobile").hide("slow");
            $("#divshowForMobile").show("slow");

            $("#divGrid").addClass("Per100hideShowButtonCSS");
            $("#divGrid").removeClass("Per80hideShowButtonCSS");

            $("#ContributionsMonetaryGrid").addClass("Per100hideShowButtonCSS");
            $("#ContributionsMonetaryGrid").removeClass("Per80hideShowButtonCSS");

            $("#PartnersGridMonetary").addClass("Per100hideShowButtonCSS");
            $("#PartnersGridMonetary").removeClass("Per80hideShowButtonCSS");

            $("#thdGrid,#thdGrid1,#thdGrid2,#thdGrid3").addClass("Per100hideShowButtonCSS");
            $("#thdGrid,#thdGrid1,#thdGrid2,#thdGrid3").removeClass("Per80hideShowButtonCSS");

            $("#divGridExpenditurePayments").addClass("Per100hideShowButtonCSS");
            $("#divGridExpenditurePayments").removeClass("Per80hideShowButtonCSS");

            $("#divShowSubcontroctor").addClass("Per100hideShowButtonCSS");
            $("#divShowSubcontroctor").removeClass("Per80hideShowButtonCSS");

            $("#divShowReimbursement").addClass("Per100hideShowButtonCSS");
            $("#divShowReimbursement").removeClass("Per80hideShowButtonCSS");

        });

        // GRIDS FOR LIABILITY DETAILS LINK.
        var tableLiabDetOriginalSchedN = '';
        var tableExpPaySchedF = '';
        var tableExpPaySchedT = '';
        var tableOutLiabSchedN = '';
        var tableLiabForgivenSchedK = '';

        $("#divLiabilityDetailsGrid").hide();

        // INITIALIZE THE LIABILITIES DETAILS GRIDS.
        //=========================================================================================================================================
        /**
         * Common code for invoking anyone rest call from the controller.
         * If it fails it displays the Error fetching data dialog.
         * controllerUrl { string } the controller url.
         * ajaxData { object } These are the params that we send to the controller..
         * successCallback { callback } Call back on the successful ajax call.
         * doneFunction { function } Function to be called if the ajax call is completed.
         */
        function GenericAjaxDataFetch(controllerUrl, ajaxData, successCallback, doneFunction) {
            var dFunction = bUtilIsFunction(doneFunction) ? doneFunction : function () { /*If no function was given we provide an empty function.*/ };
            $.ajax({
                "url": controllerUrl,
                "data": ajaxData,
                "success": successCallback,
                "dataType": "json",
                "type": "POST",
                "error": function () {
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                }
            }).done(function () {
                dFunction();
            });
        }

        // EDIT FILING TRANSACTIONS GRID - LIABILITY
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_LiabilitySchedF', function (e) {
            event.preventDefault();

            $("#divLoading").show();

            $("#divShowSubcontroctor").hide();
            $("#divShowReimbursement").hide();
            $("#divShowCreditCardPayment").hide();
            $("#divShowAllocation").hide();

            // SHOW THE LIABILITY DETAILS GRIDS.
            $("#divLiabilityDetailsGrid").show();

            var data = tableFilingTransactions.row($(this).parents('tr')).data();
            sessionStorage.setItem("LiabilityDetailsId", data[41].toString());  // LOAN LIABILITY NUMBER.
            var LiabilityDetailsId = sessionStorage.getItem("LiabilityDetailsId").toString(); //Fetch back for use.
            // LOAD ORIGINAL SCHEDULE 'N' TRANSACTION.
            tableLiabDetOriginalSchedN = $m('#gridExpPayOrgLiab').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayOrgLiab').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetOriginalLiabilityData/")",
                        {
                            strTransNumber: LiabilityDetailsId
                        },
                        callback);
                }
            });
            $m('#gridExpPayOrgLiab').DataTable().ajax.reload();
            tableLiabDetOriginalSchedN.search('').columns().search('').draw();
            tableLiabDetOriginalSchedN.columns.adjust().responsive.recalc();
            tableLiabDetOriginalSchedN.responsive.recalc();
            // LOAD ORIGINAL SCHEDULE 'N' TRANSACTION.

            // LOAD EXPENDITURE PAYMENT SCHEDULE 'F' TRANSACTION.
            tableExpPaySchedF = $m('#gridExpPayPayments').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayPayments').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpenditurePaymentLiabilityData/")",
                        {
                            strTransNumber: LiabilityDetailsId
                        },
                        callback);
                }
            });
            $m('#gridExpPayPayments').DataTable().ajax.reload();
            tableExpPaySchedF.search('').columns().search('').draw();
            tableExpPaySchedF.columns.adjust().responsive.recalc();
            tableExpPaySchedF.responsive.recalc();
            // LOAD EXPENDITURE PAYMENT SCHEDULE 'F' TRANSACTION.

            // LOAD Qualified Expenditures SCHEDULE 'T' TRANSACTION.
            tableExpPaySchedT = $m('#gridSchedTPayments').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridSchedTPayments').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/PublicFundExpensesSchedT/GetQualifiedExpendituresLiabilityData/")",
                        {
                            strTransNumber: LiabilityDetailsId
                        },
                        callback);
                }
            });
            $m('#gridSchedTPayments').DataTable().ajax.reload();
            tableExpPaySchedT.search('').columns().search('').draw();
            tableExpPaySchedT.columns.adjust().responsive.recalc();
            tableExpPaySchedT.responsive.recalc();
            // LOAD Qualified Expenditures SCHEDULE 'T' TRANSACTION.

            if (@Session["COMM_TYPE_ID"] == "23")
            {
                $("#divUCExpPaymentsT").show();
            }
            else
            {
                $("#divUCExpPaymentsT").hide();
            }


            // LOAD OUTSTANDING LIABILITY SCHEDULE 'N' TRANSACTIONS.
            tableOutLiabSchedN = $m('#gridExpPayOutstandingLiab').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayOutstandingLiab').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetOutstandingLiabilityData/")",
                        {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("LiabilityDetailsId")).toString()
                        },
                        callback);
                }
            });
            $m('#gridExpPayOutstandingLiab').DataTable().ajax.reload();
            tableOutLiabSchedN.search('').columns().search('').draw();
            tableOutLiabSchedN.columns.adjust().responsive.recalc();
            tableOutLiabSchedN.responsive.recalc();
            // LOAD OUTSTANDING LIABILITY SCHEDULE 'N' TRANSACTIONS.

            // LOAD OUTSTANDING LIABILITY FORGIVEN SCHEDULE 'K' TRANSACTION.
            tableLiabForgivenSchedK = $m('#gridExpPayLiabForgiven').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridExpPayLiabForgiven').DataTable());
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetLiabilityForgivenData/")",
                        {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("LiabilityDetailsId")).toString()
                        },
                        callback);
                }
            });
            $m('#gridExpPayLiabForgiven').DataTable().ajax.reload();
            tableLiabForgivenSchedK.search('').columns().search('').draw();
            tableLiabForgivenSchedK.columns.adjust().responsive.recalc();
            tableLiabForgivenSchedK.responsive.recalc();

            $('html, body').animate({ scrollTop: $("#divLiabilityDetailsGrid").offset().top }, 500);

        });


        // EDIT FILING TRANSACTIONS GRID - ATTRIBUTION (SUBCONTRACTOR)
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_AttributionSchedF', function (e) {
            e.preventDefault();

            $("#divShowLiability").hide();
            //$("#divShowSubcontroctor").hide();
            $("#divShowReimbursement").hide();
            $("#divShowCreditCardPayment").hide();
            $("#divShowAllocation").hide();

            $("#divLiabilityDetailsGrid").hide();

            $("#divShowLiability").hide();
            $("#divGridLiability").hide();

            $("#divShowSubcontroctor").show();
            $("#divGridSubcontractor").show();

            sessionStorage.setItem("SubContractor", "Yes");

            sessionStorage.setItem("HideDetailsGrids", "Yes");

            sessionStorage.setItem("SchedFPopuUpCloseMessage", "No");

            // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
            sessionStorage.removeItem("WithoutDetailsClose");

            var data = tableFilingTransactions.row($(this).parents('tr')).data();

            sessionStorage.setItem("TransIdSubContr", data[42].toString());

            sessionStorage.setItem("FilingTransId", data[42].toString());
            sessionStorage.setItem("FilingSchedId", data[1].toString());
            sessionStorage.setItem("FilingSchedDate", data[10].toString());
            sessionStorage.setItem("ExpSubContrAmt", data[24].toString());

            sessionStorage.setItem("PartnershipName", data[13].toString());

            $("#divPartnerNCR").show();

            // TABLE SUBCONTRACTOR BINDING FOR EXPENDITURE PAYMENTS SCHEDULE 'F' TRANSACTIONS.
            tableSubcotractor = '';

            tableSubcotractor = $m('#gridSubcontractorSchedF').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [3],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridSubcontractorSchedF').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    $m('td:eq(1)', nRow).html('<a class="editor_edit_SubcontractorSchedF" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_SubcontractorSchedF" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetSchedFSubcontractorData/")",
                        {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("TransIdSubContr")).toString(),
                            strFilerId: $("#txtFilerID").val()
                        },
                        callback);
                },
                "order": [[0, "desc"]]
            });
            $m('#gridSubcontractorSchedF').DataTable().ajax.reload();
            tableSubcotractor.search('').columns().search('').draw();
            tableSubcotractor.columns.adjust().responsive.recalc();
            tableSubcotractor.responsive.recalc();

            // TABLE SUBCONTRACTOR BINDING FOR EXPENDITURE PAYMENTS SCHEDULE 'F' TRANSACTIONS.
            //====================================================================================================================================


            // Show the Balance Amount for Sub Contractor Expenditure Payments.
            GetExpSubContrTotAmtShowBalances();

            $('html, body').animate({ scrollTop: $("#divShowSubcontroctor").offset().top }, 500);
        });

        $m('#gridFilingTransactions tbody').on('click', 'tr', function (e) {
            e.preventDefault();

            if (!$(this).hasClass('selected')) {
                tableFilingTransactions.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
            }

            if (sessionStorage.getItem("HideDetailsGrids") != null) {
                if (sessionStorage.getItem("HideDetailsGrids").toString() == "No") {
                    $("#divShowLiability").hide();
                    $("#divShowSubcontroctor").hide();
                    $("#divShowReimbursement").hide();
                    $("#divShowCreditCardPayment").hide();
                    $("#divShowAllocation").hide();
                }
                else {
                    sessionStorage.removeItem("HideDetailsGrids");
                }
            }
            else {
                $("#divShowLiability").hide();
                $("#divShowSubcontroctor").hide();
                $("#divShowReimbursement").hide();
                $("#divShowCreditCardPayment").hide();
                $("#divShowAllocation").hide();
            }
        });

        // EDIT FILING TRANSACTIONS GRID - REIMBURSEMENT DETAILS (REIMBURSEMENT)
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_ReimbDetailsSchedF', function (e) {
            e.preventDefault();

            $("#divShowLiability").hide();
            $("#divShowSubcontroctor").hide();
            $("#divShowCreditCardPayment").hide();
            $("#divLiabilityDetailsGrid").hide();
            $("#divShowAllocation").hide();

            // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
            sessionStorage.removeItem("WithoutDetailsClose");
            sessionStorage.setItem("HideDetailsGrids", "Yes");

            // Get Purpose Code for Reimbursement Details./////////////////////////////////
            var options = {};
            options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeReimDetails/")";
            options.type = "POST";
            options.data = null;
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (results) {
                $("#lstPurposeCode").empty();
                $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                for (var i = 0; i < results.length; i++) {
                    $("#lstPurposeCode").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                }
            };
            options.error = function () {
                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
            };
            $.ajax(options);
            // Get Purpose Code for Reimbursement Details./////////////////////////////////

            $("#divShowReimbursement").show();
            $("#divGridReimbursement").show();

            $("#btnSaveSchedF").val("Save");

            sessionStorage.setItem("Reimbursement", "Yes");
            sessionStorage.setItem("SchedFPopuUpCloseMessageReim", "No");

            var dataTransReim = tableFilingTransactions.row($(this).parents('tr')).data();

            sessionStorage.setItem("TransID", dataTransReim[0].toString());
            sessionStorage.setItem("FilingTransId", dataTransReim[42].toString());
            sessionStorage.setItem("FilingTransIdReimParent", dataTransReim[42].toString());
            sessionStorage.setItem("FilingSchedId", dataTransReim[1].toString());
            sessionStorage.setItem("FilingSchedDate", dataTransReim[10].toString());
            sessionStorage.setItem("ReimbursementOrgAmt", dataTransReim[24].toString());

            // Original Payee Name
            sessionStorage.setItem("PayeeNameReimCCI", dataTransReim[13].toString());

            // REIMBURSEMENT DETAILS FOR SCHEDULE 'F' TRANSACTIONS.

            tableReimbursement = $m('#gridReimbursementSchedF').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 17],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [4],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridReimbursementSchedF').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    $m('td:eq(1)', nRow).html('<a class="editor_edit_ReimbursementSchedF" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_ReimbursementSchedF" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementData/")",
                        {
                            strTransNumberReimb: bUtilSanitizeString(sessionStorage.getItem("FilingTransId")).toString()
                        },
                        callback);
                },
                "order": [[0, "desc"]]
            });
            $m('#gridReimbursementSchedF').DataTable().ajax.reload();
            tableReimbursement.search('').columns().search('').draw();
            tableReimbursement.columns.adjust().responsive.recalc();
            tableReimbursement.responsive.recalc();

            // REIMBURSEMENT DETAILS FOR SCHEDULE 'F' TRANSACTIONS.
            GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein();
            $('html, body').animate({ scrollTop: $("#divShowReimbursement").offset().top }, 500);
        });

        // EDIT FILING TRANSACTIONS GRID - CREDIT CARD ITEMIZATION DETAILS (CREDIT CARD PAYMENT)
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_CreditCardPaymentSchedF', function (e) {
            e.preventDefault();

            $("#divShowLiability").hide();
            $("#divShowSubcontroctor").hide();
            $("#divShowReimbursement").hide();
            $("#divLiabilityDetailsGrid").hide();

            $("#divShowCreditCardPayment").show();
            $("#gridCreditCardPaymentSchedF").show();

            // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
            sessionStorage.removeItem("WithoutDetailsClose");
            sessionStorage.setItem("HideDetailsGrids", "Yes");

            $("#btnSaveSchedF").val("Save");

            var dataTransReim = tableFilingTransactions.row($(this).parents('tr')).data();

            // Original Payee Name Credit Card Payment
            sessionStorage.setItem("PayeeNameReimCCI", dataTransReim[13].toString());
            sessionStorage.setItem("SchedFPopuUpCloseMessageCCI", "No");

            sessionStorage.setItem("CCITransID", dataTransReim[42].toString());
            sessionStorage.setItem("FilingTransIdReim", dataTransReim[42].toString());
            sessionStorage.setItem("FilingSchedId", dataTransReim[1].toString());
            sessionStorage.setItem("FilingSchedDate", dataTransReim[10].toString());
            sessionStorage.setItem("CreditCardPayOrgAmt", dataTransReim[24].toString());

            // CREDIT CARD ITEMIZATION FOR SCHEDULE 'F' TRANSACTIONS.
            tableCreditCardPayment = '';
            tableCreditCardPayment = $m('#gridCreditCardPaymentSchedF').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 17],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [4],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridCreditCardPaymentSchedF').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    $m('td:eq(1)', nRow).html('<a class="editor_edit_CreditCardPaymentSchedF" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_CreditCardItemSchedF" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementData/")",
                        {
                            strTransNumberReimb: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                        },
                        callback);
                },
                "order": [[0, "desc"]]
            });
            $m('#gridCreditCardPaymentSchedF').DataTable().ajax.reload();
            tableCreditCardPayment.search('').columns().search('').draw();
            tableCreditCardPayment.columns.adjust().responsive.recalc();
            tableCreditCardPayment.responsive.recalc();

            // CREDIT CARD ITEMIZATION FOR SCHEDULE 'F' TRANSACTIONS.
            GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_CCI();

            $('html, body').animate({ scrollTop: $("#divShowCreditCardPayment").offset().top }, 400);
        });

        // EDIT FILING TRANSACTIONS GRID - AMOUNT ALLOCATION SCHED-R
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_AmountAllocationSchedR', function (e) {
            e.preventDefault();

            $("#divShowLiability").hide();
            $("#divShowSubcontroctor").hide();
            $("#divShowReimbursement").hide();
            $("#divLiabilityDetailsGrid").hide();

            $("#divShowCreditCardPayment").hide();
            $("#gridCreditCardPaymentSchedF").hide();

            $("#divShowAllocation").show();

            // CREATE A SESSION FOR IF CLOSING POPUP WITHOUT ADDED DETAILS.
            sessionStorage.removeItem("WithoutDetailsClose");
            sessionStorage.setItem("HideDetailsGrids", "Yes");

            $("#btnSaveSchedF").val("Save");

            var dataTransReim = tableFilingTransactions.row($(this).parents('tr')).data();

            // Original Payee Name Credit Card Payment
            sessionStorage.setItem("PayeeNameReimCCI", dataTransReim[13].toString());
            sessionStorage.setItem("SchedFPopuUpCloseMessageCCI", "No");

            sessionStorage.setItem("CCITransID", dataTransReim[42].toString());
            sessionStorage.setItem("FilingTransIdReim", dataTransReim[42].toString());
            sessionStorage.setItem("FilingSchedId", dataTransReim[1].toString());
            sessionStorage.setItem("FilingSchedDate", dataTransReim[10].toString());
            sessionStorage.setItem("CreditCardPayOrgAmt", dataTransReim[24].toString());
            sessionStorage.setItem("TransactionID", dataTransReim[42].toString());

            // AMOUNT ALLOCATION FOR SCHED-R FOR SCHEDULE 'F' TRANSACTIONS.
            tableAmountAllocationSchedR = '';
            tableAmountAllocationSchedR = $m('#gridAmountAllocationSchedR').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [4],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridAmountAllocationSchedR').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    $m('td:eq(1)', nRow).html('<a class="editor_edit_AmountAllocationSchedR" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a><a class="editor_remove_AmountAllocationSchedR" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + 'Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row '+ iDisplayIndex +' Data" style="background-repeat: no-repeat; "  /></a>');
                },
                "fnServerData": function (url, data, callback) {
                    GenericAjaxDataFetch("@Url.Content("~/ExpenditurePaymentsSchedF/GetFilingTransSchedR_ChildData/")",
                        {
                            strTransNumberReimb: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                        },
                        callback);
                },
                "order": [[0, "desc"]]
            });
            $m('#gridAmountAllocationSchedR').DataTable().ajax.reload();
            tableAmountAllocationSchedR.search('').columns().search('').draw();
            tableAmountAllocationSchedR.columns.adjust().responsive.recalc();
            tableAmountAllocationSchedR.responsive.recalc();

            $('html, body').animate({ scrollTop: $("#divShowAllocation").offset().top }, 400);
        });


        // SAVE AND UPDATE CREDIT CARD ITEMIZATION DATA FOR CREDIT CARD PAYMENT.
        $("#btnSaveSchedFCCItem").click(function (e) {
            $m("#DialogBoxSchedFCCIForm").valid();
            if ($m("#DialogBoxSchedFCCIForm").valid()) { // JQuery Validation // Insert
                // SHOW THE PROCESSING....
                $("#divLoading").show();
                // Get the total value for Reimbursement Details Amount.
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                }, function (results) {
                    var totalReimDetailsAmt = results.toString();
                    var orgAmt = bUtilSanitizeString(sessionStorage.getItem("CreditCardPayOrgAmt")).toString();

                    orgAmt = parseFloat(orgAmt) - parseFloat(totalReimDetailsAmt);
                    var reimbursementAmt = $m("#txtAmountCCI").val().toString();
                    // when using tofixed it is changing to string some time it is not checking condition.
                    reimbursementAmt = parseFloat(reimbursementAmt).toFixed(2);
                    orgAmt = parseFloat(orgAmt).toFixed(2);
                    if (parseFloat(reimbursementAmt) <= parseFloat(orgAmt)) {
                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/SaveFlngTransExpReimbursementData/")", {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString(),
                            strFilingSchedId: bUtilSanitizeString(sessionStorage.getItem("TransactionType")).toString(),
                            txtDateRcvd: $m("#txtCurrentDateSchedQCCI").val(),
                            txtAmtExpenditurePayments: $m("#txtAmountCCI").val(),
                            txtExplanationExpenditurePayments: $m("#txtExplanationCCI").val(),
                            txtPayorName: $m("#txtDetailsPayeeNameCCI").val(),
                            txtCountryReim: $m("#txtCountryCCI").val(),
                            txtStreetName: $m("#txtStreetNameCCI").val(),
                            txtCity: $m("#txtCityCCI").val(),
                            txtState: $m("#txtStateCCI").val(),
                            txtZipCode: $m("#txtZipCodeCCI").val(),
                            lstPurposeCode: $m("#lstPurposeCodeCCI option:selected").val(),
                            strItemized: $m("#lstItemizedCCI option:selected").val(),
                            lstElectionType: $("#lstElectionType option:selected").val(),
                            lstFilingDate: $m("#lstFilingDate option:selected").text(),
                            txtReportPeriodDatesTo: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                            txtCuttOffDate: bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString(),
                            chkCountry: $('#chkCountryCCI').is(':checked').toString(),
                        }, function (results) {
                            if (results.Errors == null) {
                                $("#lstItemizedCCI").focus();
                                // Success
                                window.status = "Transaction saved successfully";
                                // Clear the Values.
                                ClearDialogBoxValidationSchedQCCI();

                                // Hide/Show
                                $("#tdDatePaidCCI").show();
                                $("#tdPayeeNameOrgCCI").show();
                                $("#tdPayeeNameCCI").show();
                                $("#divStreetAddressCCI").show();
                                $("#divCityCCI").show();
                                $("#divStateCCI").show();
                                $("#divZip5CCI").show();
                                $("#tdPurposeCodeItemization").show();
                                $("#tdAmtCCI").show();
                                $("#tdExplanationCCI").show();
                                $("#tdCountryContributionChkCCI").show();
                                $("#tdCountryContributionTxtCCI").show();
                                if (@Session["COMM_TYPE_ID"] == "23") {
                                    $("#lstItemizedCCI").prop("disabled", true);
                                }
                                else {
                                    $("#lstItemizedCCI").prop("disabled", false);
                                }
                                var doneFunction = function () {
                                    $("#divLoading").hide();// Hide loading.
                                    //This is another save button that doesn't update the table. See btnCloseDialogSchedFCCItem.
                                    ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                }
                                if (tableCreditCardPayment != "") {
                                    // Refresh Credit Card Details Grid.
                                    TableCreditCardPaymentUpdate(doneFunction);
                                } else {
                                    doneFunction();
                                }
                                // Show Balance Amount for Credit Card Reinbursement Details.
                                GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_CCI();
                            } else if (results.Errors.length >= 0) {
                                $("#divLoading").hide();
                                // Clear the Values.
                                ClearDialogBoxValidationSchedQCCI();
                                AppendCustomErrorLabels(results.Errors, "cci");
                            }
                        }).fail(function () {
                            $("#divLoading").hide();// SaveFlngTransExpReimbursementData failed.
                        });
                    }
                    else {
                        $("#divLoading").hide();
                        ShowDialogBox('EFS', 'Credit Card Itemization Amount should not be more than Original Balance Amount $' + parseFloat(orgAmt).toFixed(2).toString(), 'Ok', '');
                    }
                }).fail(function () {
                    $("#divLoading").hide();// GetReimbursementDetailsTotalAmt failed.
                });
            }
        });
        // SAVE CREDIT CARD ITEMIZATION DATA FOR CREDIT CARD PAYMENT.

        //UPDATE CREDIT CARD ITEMIZATION DATA FOR CREDIT CARD PAYMENT.
        $m("#btnUpdateSchedFCCItem").click(function () {
            $m("#DialogBoxSchedFCCIForm").valid();
            if ($m("#DialogBoxSchedFCCIForm").valid()) { // JQuery Validation // Update
                $("#divLoading").show();
                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetReimbursementDetailsTotalAmt/")", {
                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("CCITransID")).toString()
                }, function (results) {
                    // Get the Total Reimbursement Amount.
                    var totalReimDetailsAmt = results.toString();

                    // Get the Reimbursement Orginal Amount Value.
                    var orgAmt = bUtilSanitizeString(sessionStorage.getItem("CreditCardPayOrgAmt")).toString();

                    // Get Reimbursement Edit Record Amount.
                    var orgReimAmt = sessionStorage.getItem("CCIOrgAmt").toString();

                    totalReimDetailsAmt = parseFloat(totalReimDetailsAmt) - parseFloat(orgReimAmt);
                    orgAmt = parseFloat(orgAmt) - parseFloat(totalReimDetailsAmt);
                    var reimbursementAmt = $("#txtAmountCCI").val().toString();
                    // when using tofixed it is changing to string some time it is not checking condition.
                    reimbursementAmt = parseFloat(reimbursementAmt).toFixed(2);
                    orgAmt = parseFloat(orgAmt).toFixed(2);
                    if (parseFloat(reimbursementAmt) <= parseFloat(orgAmt)) {
                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/UpdateFlngTransExpReimbursementData/")", {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("FilingTransIdCCI")).toString(),
                            strFilingEntityId: bUtilSanitizeString(sessionStorage.getItem("FilingEntityId")).toString(),
                            strFilingSchedId: bUtilSanitizeString(sessionStorage.getItem("TransactionType")).toString(),
                            txtDateRcvd: $m("#txtCurrentDateSchedQCCI").val(),
                            txtAmtExpenditurePayments: $m("#txtAmountCCI").val(),
                            txtExplanationExpenditurePayments: $m("#txtExplanationCCI").val(),
                            txtPayorName: $m("#txtDetailsPayeeNameCCI").val(),
                            txtCountryReim: $m("#txtCountryCCI").val(),
                            txtStreetName: $m("#txtStreetNameCCI").val(),
                            txtCity: $m("#txtCityCCI").val(),
                            txtState: $m("#txtStateCCI").val(),
                            txtZipCode: $m("#txtZipCodeCCI").val(),
                            lstPurposeCode: $m("#lstPurposeCodeCCI option:selected").val(),
                            strItemized: $m("#lstItemizedCCI option:selected").val(),
                            lstElectionType: $("#lstElectionType option:selected").val(),
                            lstFilingDate: $m("#lstFilingDate option:selected").text(),
                            txtReportPeriodDatesTo: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                            txtCuttOffDate: bUtilSanitizeString(sessionStorage.getItem("CutOffDate")).toString(),
                            chkCountry: $('#chkCountryCCI').is(':checked').toString(),
                        }, function (results) {

                            if (results.Errors == null) {
                                // Success
                                dialogCreditCardItemization.dialog("close");
                                if (@Session["COMM_TYPE_ID"] == "23") {
                                    $("#lstItemizedCCI").prop("disabled", true);
                                }
                                else {
                                    $("#lstItemizedCCI").prop("disabled", false);
                                }
                                window.status = "Transaction saved successfully";
                                var doneFunction = function () {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                }
                                if (tableCreditCardPayment != "") {
                                    // Refresh Credit Card Details Grid.
                                    TableCreditCardPaymentUpdate(doneFunction);
                                } else {
                                    doneFunction();
                                }
                                // Show Balance Amount for Credit Card Reinbursement Details.
                                GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_CCI();
                            } // ERROR VALIDAITON.
                            else if (results.Errors.length >= 0) {
                                $("#divLoading").hide();
                                // Clear the Values.
                                ClearDialogBoxValidationSchedQCCI();
                                AppendCustomErrorLabels(results.Errors, "cci");
                            }
                        }).fail(function () {
                            $("#divLoading").hide();// UpdateFlngTransExpReimbursementData failed.
                        });
                    }
                    else {
                        ShowDialogBox('EFS', 'Credit Card Itemization Details Amount should not be more than Original Balance Amount $' + parseFloat(orgAmt).toFixed(2).toString(), 'Ok', '');
                    }
                }).fail(function () {
                    $("#divLoading").hide();// GetReimbursementDetailsTotalAmt failed.
                });
            }
        });
        /**Common method for "#btnSaveSchedFSubcontractor" click function.
         * Calls ~/ExpenditurePaymentsSchedF/SaveSchedFSubcontractorData/.
         * Clears the form and updates tableSubcotractor.
         */
        function SaveSchedFSubcontractorData() {
            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/SaveSchedFSubcontractorData/")", {
                strTransNumber: bUtilSanitizeString(sessionStorage.getItem("TransIdSubContr")).toString(),
                strFilingSchedId: bUtilSanitizeString(sessionStorage.getItem("FilingSchedId")).toString(),
                strFilingSchedDate: bUtilSanitizeString(sessionStorage.getItem("FilingSchedDate")).toString(),
                txtFilerId: $("#txtFilerID").val(),
                lstElectionCycle: $("#lstElectionCycle option:selected").text(),
                lstElectionCycleId: $("#lstElectionCycle option:selected").val(),
                lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                lstElectionType: $("#lstElectionType option:selected").val(),
                lstElectionDate: $("#lstElectionDate option:selected").text(),
                txtSubcontractorName: $("#txtSubcontractorName").val(),
                txtPartFirstName: $("#txtPartFirstName").val().toString(),
                txtPartMI: $m("#txtPartMI").val(),
                txtPartLastName: $m("#txtPartLastName").val().toString(),
                txtCountryPartnership: $m("#txtCountryPartnership").val(),
                txtPartStreetName: $m("#txtPartStreetName").val(),
                txtPartCity: $m("#txtPartCity").val(),
                txtPartState: $m("#txtPartState").val(),
                txtPartZip5: $m("#txtPartZip5").val(),
                txtPartAmt: $m("#txtPartAmtSchedF").val(),
                txtPartExplanationInKind: $m("#txtPartExplanationEP").val().toString(),
                lstItemizedSubcontr: $("#lstItemizedSubcontr option:selected").val(),
                chkCountryPartnership: $('#chkCountryPartnership').is(':checked').toString(),
                lstIndividualSubcontr: $("#lstIndividualSubcontr option:selected").val(),
            }, function (results) {
                if (results.Errors == null) {
                    if (results) {
                        $("#lstItemizedSubcontr").focus();

                        window.status = "Transaction saved successfully";
                        ClearDialogBoxValidationSchedFSubcont();

                        // Hide/Show controls
                        $("#tdSubcontractorName").hide();
                        $("#tdPartFirstName").show("slow");
                        $("#tdPartMI").show("slow");
                        $("#tdPartLastName").show("slow");
                        $("#dvPartIndividual").show("slow");
                        $("#tdPartnershipNamePartner").show("slow");
                        $("#tdPartStreetName").show("slow");
                        $("#tdPartCity").show("slow");
                        $("#tdPartState").show("slow");
                        $("#tdPartZip5").show("slow");
                        $("#tdPartCity").show("slow");
                        $("#tdCountryPartnershipChk").show("slow");
                        $("#tdCountryPartnershipTxt").show("slow");
                        if (@Session["COMM_TYPE_ID"] == "23") {
                            $("#lstItemizedSubcontr").prop("disabled", true);
                        }
                        else {
                            $("#lstItemizedSubcontr").prop("disabled", false);
                        }
                        var doneFunction = function () {
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                        }
                        if (tableSubcotractor != "") {
                            // Refresh the Subcontractor Data on Grid.
                            TableSubcotractorUpdate(doneFunction);
                        } else {
                            doneFunction();
                        }
                        // Show the Balance Amount for Sub Contractor Expenditure Payments.
                        GetExpSubContrTotAmtShowBalances();
                    } else {
                        $("#divLoading").hide();
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                    }
                } // ERROR VALIDATION.
                else if (results.Errors.length >= 0) {
                    $("#divLoading").hide();
                    // Clear Error Values
                    ClearDialogBoxValidationSchedFSubcont();
                    AppendCustomErrorLabels(results.Errors, "subcontractor");
                }
            }).fail(function () {
                $("#divLoading").hide();// SaveSchedFSubcontractorData failed.
            });
        }

        //UPDATE CREDIT CARD ITEMIZATION DATA FOR CREDIT CARD PAYMENT.
        $m("#btnSaveSchedFSubcontractor").click(function () {
            $m("#DialogBoxSchedFSubcontrForm").valid();
            if ($m("#DialogBoxSchedFSubcontrForm").valid()) { // JQuery Validation // Insert
                // SHOW THE PROCESSING....
                $("#divLoading").show();
                // Save Data....
                if (sessionStorage.getItem("UpdateFlagSchedFSubcont").toString() != "Yes") { // Save
                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpSubContrTotAmt/")", {
                        strTransNumber: sessionStorage.getItem("TransIdSubContr")
                    }, function (result) {
                        if (result != "") {
                            var expSubContrAmount = sessionStorage.getItem("ExpSubContrAmt").toString();
                            var expPayAmount = $("#txtPartAmtSchedF").val().toString();
                            expSubContrAmount = parseFloat(expSubContrAmount) - parseFloat(result)
                            if (parseFloat(expPayAmount) <= parseFloat(expSubContrAmount)) {
                                SaveSchedFSubcontractorData();
                            }
                            else {
                                $("#txtPartAmtSchedF").val("");
                                $("#txtPartAmtSchedF").blur();
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'Subcontractor Amount shoud not be more than Expenditure Payments Amount: $' + parseFloat(expSubContrAmount).toFixed(2).toString(), 'Ok', '');
                            }
                        }
                        else {
                            var expSubContrAmount = sessionStorage.getItem("ExpSubContrAmt").toString();
                            var expPayAmount = $("#txtPartAmtSchedF").val().toString();
                            if (parseFloat(expPayAmount) <= parseFloat(expSubContrAmount)) {
                                SaveSchedFSubcontractorData();
                            }
                            else {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'Subcontractor Amount should not be more than Expenditure Payments Amount $' + parseFloat(expSubContrAmount).toFixed(2).toString(), 'Ok', '');
                            }
                        }
                    }).fail(function () {
                        $("#divLoading").hide();// GetExpSubContrTotAmt failed.
                    });
                }
                else if (sessionStorage.getItem("UpdateFlagSchedFSubcont").toString() == "Yes") { /// Update data...UPDATE SUBCONTRACTOR
                    // Update SubContractor
                    // Update SubContractor for Expenditure Payments
                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetExpSubContrTotAmt/")", {
                        strTransNumber: sessionStorage.getItem("TransIdSubContr")
                    }, function (result) {
                        if (result != "") {
                            var expSubContrAmount = sessionStorage.getItem("ExpSubContrAmt").toString();
                            var expPaySubContrAmount = sessionStorage.getItem("SubContractorAttrAmount").toString();
                            result = parseFloat(result) - parseFloat(expPaySubContrAmount);
                            var totalExpPayAmt = parseFloat(expSubContrAmount) - parseFloat(result);
                            var expPayAmount = $("#txtPartAmtSchedF").val().toString();
                            if (parseFloat(expPayAmount) <= parseFloat(totalExpPayAmt)) {
                                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/UpdateSchedFSubcontractorData/")", {
                                    strTransNumber: bUtilSanitizeString(sessionStorage.getItem("TransNumberSubcontr")).toString(),
                                    strFilingEntityId: bUtilSanitizeString(sessionStorage.getItem("FilingEntityId")).toString(),
                                    txtPartshiptName: $("#txtSubcontractorName").val(),
                                    txtPartFirstName: $("#txtPartFirstName").val(),
                                    txtPartMI: $m("#txtPartMI").val(),
                                    txtPartLastName: $m("#txtPartLastName").val(),
                                    txtCountryPartnership: $m("#txtCountryPartnership").val(),
                                    txtPartStreetName: $m("#txtPartStreetName").val(),
                                    txtPartCity: $m("#txtPartCity").val(),
                                    txtPartState: $m("#txtPartState").val(),
                                    txtPartZip5: $m("#txtPartZip5").val(),
                                    txtPartAmt: $m("#txtPartAmtSchedF").val(),
                                    txtPartExplanationInKind: $m("#txtPartExplanationEP").val(),
                                    chkCountryPartnership: $('#chkCountryPartnership').is(':checked').toString(),
                                }, function (results) {
                                    if (results.Errors == null) {
                                        dialogSubcontractor.dialog("close");//Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                        // Transactions Updated Successfully.
                                        window.status = "Transaction saved successfully";

                                        var doneFunction = function () {
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                        }
                                        if (tableSubcotractor != "") {
                                            // Refresh the Subcontractor Data on Grid.
                                            TableSubcotractorUpdate(doneFunction);
                                        } else {
                                            doneFunction();
                                        }
                                        // Show the Balance Amount for Sub Contractor Expenditure Payments.
                                        GetExpSubContrTotAmtShowBalances();
                                    } // ERROR VALIDATION.
                                    else if (results.Errors.length >= 0) {
                                        $("#divLoading").hide();
                                        // Clear Error Values
                                        ClearDialogBoxValidationSchedFSubcont();
                                        AppendCustomErrorLabels(results.Errors,"subcontractor");
                                    }
                                }).fail(function () {
                                    $("#divLoading").hide();// UpdateSchedFSubcontractorData failed.
                                });
                            } else {
                                $("#divLoading").hide();
                                ShowDialogBox('EFS', 'Subcontractor Amount shoud not be more than Expenditure Payments Amount: ' + parseFloat(totalExpPayAmt).toFixed(2).toString(), 'Ok', '');
                            }
                        }
                    }).fail(function () {
                        $("#divLoading").hide();// GetExpSubContrTotAmt failed.
                    });
                }
                if (@Session["COMM_TYPE_ID"] == "23") {
                    $("#lstItemizedSubcontr").prop("disabled", true);
                }
                else {
                    $("#lstItemizedSubcontr").prop("disabled", false);
                }
            }
        });

        // EDIT SUBCONTRACOTR DATE
        //-----------------------------------------------------------------------------------------------------------------
        $m('#gridSubcontractorSchedF tbody').on('click', 'a.editor_edit_SubcontractorSchedF', function (e) {
            e.preventDefault();

            sessionStorage.setItem("UpdateFlagSchedFSubcont", "Yes");
            var dataPartners = tableSubcotractor.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("TransNumberSubcontr", dataPartners[17].toString());
                    sessionStorage.setItem("FilingEntityId", dataPartners[1].toString());
                    sessionStorage.setItem("SubContractorAttrAmount", dataPartners[14].toString());

                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedSubcontr").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedSubcontr").prop("disabled", false);
                    }
                    dialogSubcontractor.dialog("open");

                    var validator = $m("#DialogBoxSchedFSubcontrForm").validate();
                    validator.resetForm();  // clear out the validation errors
                    $m("#DialogBoxSchedFSubcontrForm")[0].reset();   // clear out the form data

                    $m("label[for=txtPartFirstName]").text('');
                    $m("#txtPartFirstName").removeClass("error");

                    $m("label[for=txtPartLastName]").text('');
                    $m("#txtPartLastName").removeClass("error");

                    $m("label[for=txtPartnerName]").text('');
                    $m("#txtPartnerName").removeClass("error");

                    $m("label[for=txtPartAmtSchedF]").text('');
                    $m("#txtPartAmtSchedF").removeClass("error");

                    $("#txtPartAmtSchedF").addClass("watermarkHTMLTextBox");

                    $("#lstItemizedSubcontr").prop("disabled", true);
                    $("#lstIndividualSubcontr").prop("disabled", true);

                    $("#txtPartshiptName").prop("disabled", true);
                    $("#txtPartshiptName").val(dataPartners[4].toString());

                    $m("label[for=txtCountryPartnership]").text('');
                    $m("#txtCountryPartnership").removeClass("error");

                    ClearErrorsPartnershipAddressInDialogBox();

                    // EXPLANATION
                    $m("label[for=txtPartExplanationEP]").text('');
                    $m("#txtPartExplanationEP").removeClass("error");

                    // Itemized
                    if (dataPartners[16].toString() == "No") { // Unitemized Transactions.

                        $("#lstItemizedSubcontr")[0].selectedIndex = 1;

                        $("#txtPartAmtSchedF").val(dataPartners[14].toString());
                        if (dataPartners[14].toString() != "") {
                            $("#txtPartAmtSchedF").removeClass("watermarkHTMLTextBox");
                        }

                        $("#txtPartExplanationEP").val(dataPartners[15].toString());

                        $("#lstItemizedSubcontr option").each(function () {
                            if ($(this).text() == dataPartners[16].toString()) {
                                //$(this).attr('selected', 'selected');
                                $(this).prop("selected", true);
                            }
                        });

                        $("#tdPartnershipNamePartner").hide();

                        $("#tdSubcontractorName").hide("slow");

                        $("#tdPartFirstName").hide("slow");
                        $("#tdPartMI").hide("slow");
                        $("#tdPartLastName").hide("slow");

                        $("#dvPartIndividual").hide("slow");
                        $("#tdPartnershipName").show("slow");
                        $("#tdPartStreetName").hide("slow");
                        $("#tdPartCity").hide("slow");
                        $("#tdPartState").hide("slow");
                        $("#tdPartZip5").hide("slow");
                        $("#tdPartCity").hide("slow");
                        $("#tdCountryPartnershipChk").hide("slow");
                        $("#tdCountryPartnershipTxt").hide("slow");

                        $("#txtPartAmtSchedF").select();
                    }
                    else {  // Itemized Transaction

                        $("#tdPartnershipNamePartner").show();

                        if (dataPartners[5].toString() != "") { // Subcontractionr Name Individual

                            $("#txtSubcontractorName").val(dataPartners[5].toString());
                            $("#txtCountryPartnership").val(dataPartners[9].toString());
                            $("#txtPartStreetName").val(dataPartners[10].toString());
                            $("#txtPartCity").val(dataPartners[11].toString());
                            $("#txtPartState").val(dataPartners[12].toString());
                            $("#txtPartZip5").val(dataPartners[13].toString());
                            $("#txtPartAmtSchedF").val(dataPartners[14].toString());
                            if (dataPartners[14].toString() != "") {
                                $("#txtPartAmtSchedF").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtPartExplanationEP").val(dataPartners[15].toString());

                            if (dataPartners[13].toString() != "") {
                                $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                            }
                            else {
                                $("#txtPartZip5").addClass("watermarkHTMLTextBox");
                                if (dataPartners[9].toString() == "United States") {
                                    $("#txtPartZip5").blur();
                                }
                            }

                            $("#lstIndividualSubcontr")[0].selectedIndex = 1;

                            $("#lstItemizedSubcontr")[0].selectedIndex = 0;

                            $("#tdSubcontractorName").show("slow");

                            $("#tdPartFirstName").hide("slow");
                            $("#tdPartMI").hide("slow");
                            $("#tdPartLastName").hide("slow");

                            $("#dvPartIndividual").show("slow");
                            $("#tdPartnershipName").show("slow");
                            $("#tdPartStreetName").show("slow");
                            $("#tdPartCity").show("slow");
                            $("#tdPartState").show("slow");
                            $("#tdPartZip5").show("slow");
                            $("#tdPartCity").show("slow");
                            $("#tdCountryPartnershipChk").show("slow");
                            $("#tdCountryPartnershipTxt").show("slow");

                            $("#txtSubcontractorName").select();
                        }
                        else { // First Name Last Name Not Individual
                            $("#txtPartFirstName").val(dataPartners[6].toString());
                            $("#txtPartMI").val(dataPartners[7].toString());
                            $("#txtPartLastName").val(dataPartners[8].toString());
                            $("#txtCountryPartnership").val(dataPartners[9].toString());
                            $("#txtPartStreetName").val(dataPartners[10].toString());
                            $("#txtPartCity").val(dataPartners[11].toString());
                            $("#txtPartState").val(dataPartners[12].toString());
                            $("#txtPartZip5").val(dataPartners[13].toString());
                            $("#txtPartAmtSchedF").val(dataPartners[14].toString());
                            if (dataPartners[14].toString() != "") {
                                $("#txtPartAmtSchedF").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtPartExplanationEP").val(dataPartners[15].toString());

                            if (dataPartners[13].toString() != "") {
                                $("#txtPartZip5").removeClass("watermarkHTMLTextBox");
                            }
                            else {
                                $("#txtPartZip5").addClass("watermarkHTMLTextBox");
                                if (dataPartners[9].toString() == "United States") {
                                    $("#txtPartZip5").blur();
                                }
                            }

                            $("#lstIndividualSubcontr")[0].selectedIndex = 0;

                            $("#lstItemizedSubcontr")[0].selectedIndex = 0;

                            $("#tdSubcontractorName").hide();

                            $("#tdPartFirstName").show("slow");
                            $("#tdPartMI").show("slow");
                            $("#tdPartLastName").show("slow");

                            $("#dvPartIndividual").show("slow");
                            $("#tdPartnershipName").show("slow");
                            $("#tdPartStreetName").show("slow");
                            $("#tdPartCity").show("slow");
                            $("#tdPartState").show("slow");
                            $("#tdPartZip5").show("slow");
                            $("#tdPartCity").show("slow");

                            $("#txtPartFirstName").select();
                        }
                    }
                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).always(function () {
                $("#divLoading").hide();// GetEditFlag finished.
            });
        });
        // EDIT SUBCONTRACOTR DATE
        //-----------------------------------------------------------------------------------------------------------------


        // DELETE SUBCONTRACTOR DATE
        //-----------------------------------------------------------------------------------------------------------------
        $m('#gridSubcontractorSchedF tbody').on('click', 'a.editor_remove_SubcontractorSchedF', function (e) {
            e.preventDefault();

            var dataTrans = tableSubcotractor.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    //var results = window.confirm("Are you sure do you want to delete - " + selectedlstTransactionType.toString());
                    var results = "Are you sure you want to delete the subcontractor details transaction?";
                    $m('#modal_dialog').text(results);
                    $m("#modal_dialog").dialog({
                        resizable: false,
                        width: '400px',
                        height: 'auto',
                        bgiframe: false,
                        closeOnEscape: false,
                        open: function (event, ui) {
                            $("#divLoading").hide();
                            hideDialogXButton(this);
                        },
                        buttons: {
                            "OK": function () {
                                $("#divLoading").show();
                                // Close Confirm Box.
                                $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                var options = {};
                                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteSchedFSubcontractorData/")";
                                options.type = "GET";
                                options.data = {
                                    strTransNumber: dataTrans[17].toString()
                                };
                                options.dataType = "json";
                                options.contentType = "application/json";
                                options.success = function (results) {
                                    window.status = "Record deleted successfully";
                                    var doneFunction = function () {
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'Record deleted successfully', 'Ok', '');
                                    }
                                    if (tableSubcotractor != "") {
                                        //Refresh the Subcontractor Data on Grid.
                                        TableSubcotractorUpdate(doneFunction);
                                    } else {
                                        doneFunction();
                                    }
                                    // Show the Balance Amount for Sub Contractor Expenditure Payments.
                                    GetExpSubContrTotAmtShowBalances();
                                };
                                options.error = function () {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                };
                                $.ajax(options);
                            },
                            "Cancel": function () {
                                $m(this).dialog("close");
                            }
                        }
                    });
                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).always(function () {
                $("#divLoading").hide();// GetEditFlag finished.
            });
        });
        // DELETE SUBCONTRACTOR DATE
        //-----------------------------------------------------------------------------------------------------------------


        // DELETE REIMBURSEMENT DETAILS DATE
        //-----------------------------------------------------------------------------------------------------------------
        $m('#gridReimbursementSchedF tbody').on('click', 'a.editor_remove_ReimbursementSchedF', function (e) {
            e.preventDefault();

            var dataTrans = tableReimbursement.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {

                if (resultEditFlag == "TRUE") {

                    var filingTransIdReim = dataTrans[17].toString();

                    var resultsPartDel = "Are you sure you want to delete the reimbursement details transaction?";

                    $m('#modal_dialog').text(resultsPartDel);
                    $m("#modal_dialog").dialog({
                        resizable: false,
                        width: '400px',
                        height: 'auto',
                        bgiframe: false,
                        closeOnEscape: false,
                        open: function (event, ui) {
                            $("#divLoading").hide();
                            hideDialogXButton(this);
                        },
                        buttons: {
                            "OK": function () {
                                $("#divLoading").show();
                                // Close Confirm Box.
                                $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                var options = {};
                                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteReimbursementData/")";
                                options.type = "GET";
                                options.data = {
                                    strTransNumber: filingTransIdReim.toString()
                                };
                                options.dataType = "json";
                                options.contentType = "application/json";
                                options.success = function (resultsDel) {
                                    if (resultsDel) {
                                        window.status = "Record deleted successfully";
                                        var doneFunction = function () {
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Record deleted successfully', 'Ok', '');
                                        }
                                        if (tableReimbursement != "") {
                                            // Refresh Reinbursement Details Grid.
                                            GetReimbursementData(doneFunction);
                                        } else {
                                            doneFunction();
                                        }
                                        // Update the Outstanding Amount.
                                        // Check the Reimbursement Amount Balance - Hide/Show Add Details Button.
                                        GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_Rein();
                                    }
                                };
                                options.error = function () {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                };
                                $.ajax(options);
                            },
                            "Cancel": function () {
                                $m(this).dialog("close");
                            }
                        }
                    });
                }
                else {
                    //resultEditFlag != "TRUE"
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });
        // DELETE REIMBURSEMENT DETAILS DATE
        //-----------------------------------------------------------------------------------------------------------------

        // Update Reimbursement Details Data.
        $m('#gridReimbursementSchedF tbody').on('click', 'a.editor_edit_ReimbursementSchedF', function (e) {
            e.preventDefault();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            var dataReimbursement = tableReimbursement.row($(this).parents('tr')).data();

            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
                $("#divLoading").hide();
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("FilingTransIdReimU", dataReimbursement[17].toString());
                    sessionStorage.setItem("FilingEntityId", dataReimbursement[1].toString());
                    sessionStorage.setItem("ReimOrgAmt", dataReimbursement[14].toString());

                    sessionStorage.setItem("flagUpdate", "null");
                    sessionStorage.setItem("Reimbursement", "Yes");

                    sessionStorage.setItem("UpdateFlagSchedFReim", "Yes");

                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedReim").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedReim").prop("disabled", false);
                    }

                    dialogReimbursementDetails.dialog("open");

                    // Clear Dialogbox.
                    ClearDialogBoxValidationSchedQReim();

                    // Add/Edit Buttons.
                    $("#btnSaveSchedFReim").hide();
                    $("#btnUpdateSchedFReim").show();

                    ClearErrorsPartnershipAddressInDialogBox();

                    if (dataReimbursement[16].toString() == "Yes") { // Itemized.

                        $("#txtCurrentDateReimDetSchedF").val(dataReimbursement[5].toString());
                        if (dataReimbursement[5].toString() != "" || dataReimbursement[5].toString() != null) {
                            var MyDate = new Date($("#txtCurrentDateReimDetSchedF").val().toString());
                            var MyDateString;
                            MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                + ('0' + MyDate.getDate()).slice(-2) + '/'
                                + MyDate.getFullYear();
                            $("#txtCurrentDateReimDetSchedF").val("");
                            $("#txtCurrentDateReimDetSchedF").val(MyDateString);
                            $("#txtCurrentDateReimDetSchedF").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtCurrentDateReimDetSchedF").focus();
                        $("#txtOriginalPayeeName").val(dataReimbursement[6].toString());
                        $("#txtDetailsPayeeNameReim").val(dataReimbursement[7].toString());
                        $("#txtCountryReim").val(dataReimbursement[8].toString());
                        $("#txtStreetNameReim").val(dataReimbursement[9].toString());
                        $("#txtCityReim").val(dataReimbursement[10].toString());
                        $("#txtStateReim").val(dataReimbursement[11].toString());
                        $("#txtZipCodeReim").val(dataReimbursement[12].toString());
                        if (dataReimbursement[12].toString() != "") {
                            $("#txtZipCodeReim").removeClass("watermarkHTMLTextBox");
                        }
                        else {
                            if (dataReimbursement[12].toString() == "United States") {
                                $("#txtZipCodeReim").addClass("watermarkHTMLTextBox");
                                $("#txtZipCodeReim").blur();
                            }
                        }
                        $("#txtAmtReim").val(dataReimbursement[14].toString());
                        if (dataReimbursement[14].toString() != "" || dataReimbursement[14].toString() != null) {
                            $("#txtAmtReim").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtExplanationSchedQReim").val(dataReimbursement[15].toString());

                        if (dataReimbursement[8].toString() == "United States") {
                            $("#chkCountryReim").prop('checked', false);
                            $("#txtCountryReim").prop("disabled", true);
                            $("#txtStateReim").prop('maxLength', '2');
                        }
                        else { // Other Country
                            $("#chkCountryReim").prop('checked', true);
                            $("#txtCountryReim").prop("disabled", false);

                            $("#txtStateReim").prop('maxLength', '30');
                            $("#txtZipCodeReim").removeClass("watermarkHTMLTextBox");
                            $m('#txtZipCodeReim').attr("placeholder", "");
                        }

                        if (dataReimbursement[2].toString() == "8"
                            || dataReimbursement[2].toString() == "51") {
                            $("#lblExplanationReim").text("* Explanation");
                        }
                        else {
                            $("#lblExplanationReim").text("Explanation");
                        }

                        // Bind Purpose  Code
                        var options = {};
                        options.url = "@Url.Content("~/NonCampaignHousekeepingExpensesSchedQ/GetPurposeCodeReimData/")";
                        options.type = "POST";
                        options.data = null;
                        options.dataType = "json";
                        options.contentType = "application/json";
                        options.success = function (resultsCntrbType) {
                            $("#lstPurposeCodeReim").empty();
                            $("#lstPurposeCodeReim").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                            for (var i = 0; i < resultsCntrbType.length; i++) {
                                $("#lstPurposeCodeReim").append("<option value='" + resultsCntrbType[i].Value + "'>" + resultsCntrbType[i].Text + "</option>");
                            }
                            // Set Contributor Type
                            if (dataReimbursement[2].toString() != null || dataReimbursement[2].toString() != "") {
                                $m("#lstPurposeCodeReim option")
                                    .filter(function () { return $m(this).val() == dataReimbursement[2].toString(); })
                                    .attr('selected', 'selected');
                            }
                        };
                        options.error = function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                        };
                        $.ajax(options);


                        $("#lstPurposeCodeReim").prop("disabled", true);
                        $("#lstItemizedReim").prop("disabled", true);
                        $("#lstItemizedReim")[0].selectedIndex = 0;

                        // Hide/Show
                        $("#tdDatePaidReim").show();
                        $("#tdOriginalPayeeName").show();
                        $("#tdDetailsPayeeNameReim").show();
                        $("#divStreetAddressReim").show();
                        $("#divCityReim").show();
                        $("#divStateReim").show();
                        $("#divZip5Reim").show();
                        $("#tdPurposeCodeReim").show();
                        $("#tdAmtReim").show();
                        $("#tdExplanationReim").show();
                        $("#tdCountryContributionChkReim").show();
                        $("#tdCountryContributionTxtReim").show();
                        // Hide/Show
                    }
                    else { // Unitemized.

                        $("#txtCurrentDateReimDetSchedF").val(dataReimbursement[5].toString());
                        if (dataReimbursement[5].toString() != "" || dataReimbursement[5].toString() != null) {
                            var MyDate = new Date($("#txtCurrentDateReimDetSchedF").val().toString());
                            var MyDateString;
                            MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                + ('0' + MyDate.getDate()).slice(-2) + '/'
                                + MyDate.getFullYear();
                            $("#txtCurrentDateReimDetSchedF").val("");
                            $("#txtCurrentDateReimDetSchedF").val(MyDateString);
                            $("#txtCurrentDateReimDetSchedF").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtCurrentDateReimDetSchedF").focus();
                        $("#txtOriginalPayeeName").val(dataReimbursement[6].toString());
                        $("#txtAmtReim").val(dataReimbursement[14].toString());
                        if (dataReimbursement[14].toString() != "" || dataReimbursement[14].toString() != null) {
                            $("#txtAmtReim").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtExplanationSchedQReim").val(dataReimbursement[15].toString());

                        $("#lstItemizedReim").prop("disabled", true);
                        $("#lstItemizedReim")[0].selectedIndex = 1;

                        $("#lblExplanationReim").text("Explanation");

                        // Hide/Show
                        $("#tdDatePaidReim").show();
                        $("#tdOriginalPayeeName").show();
                        $("#tdDetailsPayeeNameReim").hide();
                        $("#divStreetAddressReim").hide();
                        $("#divCityReim").hide();
                        $("#divStateReim").hide();
                        $("#divZip5Reim").hide();
                        $("#tdPurposeCodeReim").hide();
                        $("#tdAmtReim").show();
                        $("#tdExplanationReim").show();
                        $("#tdCountryContributionChkReim").hide();
                        $("#tdCountryContributionTxtReim").hide();
                        // Hide/Show
                    }

                }
                else {
                    //resultEditFlag != "TRUE"
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });

        // Update Credit Card Itemization Details Data.
        $m('#gridCreditCardPaymentSchedF tbody').on('click', 'a.editor_edit_CreditCardPaymentSchedF', function (e) {
            e.preventDefault();

            var dataCCItemization = tableCreditCardPayment.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
                $("#divLoading").hide();
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("FilingTransIdCCI", dataCCItemization[17].toString());
                    sessionStorage.setItem("FilingEntityId", dataCCItemization[1].toString());
                    sessionStorage.setItem("CCIOrgAmt", dataCCItemization[14].toString());

                    sessionStorage.setItem("UpdateFlagSchedFCCI", "Yes");
                    if (@Session["COMM_TYPE_ID"] == "23") {
                        $("#lstItemizedCCI").prop("disabled", true);
                    }
                    else {
                        $("#lstItemizedCCI").prop("disabled", false);
                    }
                    dialogCreditCardItemization.dialog("open");

                    // Add/Edit
                    $("#btnSaveSchedFCCItem").hide();
                    $("#btnUpdateSchedFCCItem").show();

                    // Clear Dialogbox.
                    ClearDialogBoxValidationSchedQCCI();

                    ClearErrorsSchedQCCIDialogBox();

                    // CLEAR ADDRESS ERRORS, SUBCONTRACTOR CITY, SUBCONTRACTOR STATE, SUBCONTRACTOR ZIPCODE, CLEAR ADDRESS ERRORS and EXPLANATION
                    var inputIdArray = [
                        "txtPartStreetName",
                        "txtPartCity",
                        "txtPartState",
                        "txtPartZip5",
                        "txtExplanationCCI"];
                    appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);

                    if (dataCCItemization[16].toString() == "Yes") { // Itemized.

                        $("#txtCurrentDateSchedQCCI").val(dataCCItemization[5].toString());
                        if (dataCCItemization[5].toString() != "" || dataCCItemization[5].toString() != null) {
                            var MyDate = new Date($("#txtCurrentDateSchedQCCI").val().toString());
                            var MyDateString;
                            MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                + ('0' + MyDate.getDate()).slice(-2) + '/'
                                + MyDate.getFullYear();
                            $("#txtCurrentDateSchedQCCI").val("");
                            $("#txtCurrentDateSchedQCCI").val(MyDateString);
                            $("#txtCurrentDateSchedQCCI").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtCurrentDateSchedQCCI").focus();
                        $("#txtOriginalPayeeNameCCI").val(dataCCItemization[6].toString());
                        $("#txtDetailsPayeeNameCCI").val(dataCCItemization[7].toString());
                        $("#txtCountryCCI").val(dataCCItemization[8].toString());
                        $("#txtStreetNameCCI").val(dataCCItemization[9].toString());
                        $("#txtCityCCI").val(dataCCItemization[10].toString());
                        $("#txtStateCCI").val(dataCCItemization[11].toString());
                        $("#txtZipCodeCCI").val(dataCCItemization[12].toString());
                        if (dataCCItemization[12].toString() != "") {
                            $("#txtZipCodeCCI").removeClass("watermarkHTMLTextBox");
                        }
                        else {
                            if (dataCCItemization[12].toString() == "United States") {
                                $("#txtZipCodeCCI").addClass("watermarkHTMLTextBox");
                                $("#txtZipCodeCCI").blur();
                            }
                        }
                        $("#txtAmountCCI").val(dataCCItemization[14].toString());
                        if (dataCCItemization[14].toString() != "" || dataCCItemization[14].toString() != null) {
                            $("#txtAmountCCI").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtExplanationCCI").val(dataCCItemization[15].toString());

                        if (dataCCItemization[8].toString() == "United States") {
                            $("#chkCountryCCI").prop('checked', false);
                            $("#txtCountryCCI").prop("disabled", true);
                            $("#txtStateCCI").prop('maxLength', '2');
                        }
                        else { // Other Country
                            $("#chkCountryCCI").prop('checked', true);
                            $("#txtCountryCCI").prop("disabled", false);

                            $("#txtStateCCI").prop('maxLength', '30');
                            $("#txtZipCodeCCI").removeClass("watermarkHTMLTextBox");
                            $m('#txtZipCodeCCI').attr("placeholder", "");
                        }

                        if (dataCCItemization[2].toString() == "8"
                            || dataCCItemization[2].toString() == "51") {
                            $("#lblExplanationCCI").text("* Explanation");
                        }
                        else {
                            $("#lblExplanationCCI").text("Explanation");
                        }

                        // Bind Purpose  Code
                        var options = {};
                        options.url = "@Url.Content("~/NonCampaignHousekeepingExpensesSchedQ/GetPurposeCodeReimData/")";
                        options.type = "POST";
                        options.data = null;
                        options.dataType = "json";
                        options.contentType = "application/json";
                        options.success = function (resultsCntrbType) {
                            $("#lstPurposeCodeCCI").empty();
                            $("#lstPurposeCodeCCI").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                            for (var i = 0; i < resultsCntrbType.length; i++) {
                                $("#lstPurposeCodeCCI").append("<option value='" + resultsCntrbType[i].Value + "'>" + resultsCntrbType[i].Text + "</option>");
                            }
                            // Set Contributor Type
                            if (dataCCItemization[2].toString() != null || dataCCItemization[2].toString() != "") {
                                $m("#lstPurposeCodeCCI option")
                                    .filter(function () { return $m(this).val() == dataCCItemization[2].toString(); })
                                    .attr('selected', 'selected');
                            }
                        };
                        options.error = function () {
                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                        };
                        $.ajax(options);


                        $("#lstPurposeCodeCCI").prop("disabled", true);
                        $("#lstItemizedCCI").prop("disabled", true);
                        $("#lstItemizedCCI")[0].selectedIndex = 0;

                        // Hide/Show
                        $("#tdDatePaidCCI").show();
                        $("#tdPayeeNameOrgCCI").show();
                        $("#tdPayeeNameCCI").show();
                        $("#divStreetAddressCCI").show();
                        $("#divCityCCI").show();
                        $("#divStateCCI").show();
                        $("#divZip5CCI").show();
                        $("#tdPurposeCodeItemization").show();
                        $("#tdAmtCCI").show();
                        $("#tdExplanationCCI").show();
                        $("#tdCountryContributionChkCCI").show();
                        $("#tdCountryContributionTxtCCI").show();
                        // Hide/Show
                    }
                    else { // Unitemized.

                        $("#txtCurrentDateSchedQCCI").val(dataCCItemization[5].toString());
                        if (dataCCItemization[5].toString() != "" || dataCCItemization[5].toString() != null) {
                            var MyDate = new Date($("#txtCurrentDateSchedQCCI").val().toString());
                            var MyDateString;
                            MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                + ('0' + MyDate.getDate()).slice(-2) + '/'
                                + MyDate.getFullYear();
                            $("#txtCurrentDateSchedQCCI").val("");
                            $("#txtCurrentDateSchedQCCI").val(MyDateString);
                            $("#txtCurrentDateSchedQCCI").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtCurrentDateSchedQCCI").focus();
                        $("#txtOriginalPayeeNameCCI").val(dataCCItemization[6].toString());
                        $("#txtAmountCCI").val(dataCCItemization[14].toString());
                        if (dataCCItemization[14].toString() != "" || dataCCItemization[14].toString() != null) {
                            $("#txtAmountCCI").removeClass("watermarkHTMLTextBox");
                        }
                        $("#txtExplanationCCI").val(dataCCItemization[15].toString());

                        $("#lstItemizedCCI").prop("disabled", true);
                        $("#lstItemizedCCI")[0].selectedIndex = 1;

                        // Hide/Show
                        $("#tdDatePaidCCI").show();
                        $("#tdPayeeNameOrgCCI").show();
                        $("#tdPayeeNameCCI").hide();
                        $("#divStreetAddressCCI").hide();
                        $("#divCityCCI").hide();
                        $("#divStateCCI").hide();
                        $("#divZip5CCI").hide();
                        $("#tdPurposeCodeItemization").hide();
                        $("#tdAmtCCI").show();
                        $("#tdExplanationCCI").show();
                        $("#tdCountryContributionChkCCI").hide();
                        $("#tdCountryContributionTxtCCI").hide();
                        // Hide/Show
                    }

                }
                else {
                    //resultEditFlag != "TRUE"
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });

        // Delete Credit Card Itemization Data.
        $m('#gridCreditCardPaymentSchedF tbody').on('click', 'a.editor_remove_CreditCardItemSchedF', function (e) {
            e.preventDefault();

            var dataTrans = tableCreditCardPayment.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    var filingTransIdCCI = dataTrans[17].toString();

                    var resultsPartDel = "Are you sure you want to delete the Credit Card Itemization transaction?"; //window.confirm("Are you sure you want to delete this transaction?");

                    $m('#modal_dialog').text(resultsPartDel);
                    $m("#modal_dialog").dialog({
                        resizable: false,
                        width: '400px',
                        height: 'auto',
                        bgiframe: false,
                        closeOnEscape: false,
                        open: function (event, ui) {
                            $("#divLoading").hide();// GetEditFlag failed.
                            hideDialogXButton(this);
                        },
                        buttons: {
                            "OK": function () {
                                $("#divLoading").show();
                                // Close Confirm Box.
                                $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                var options = {};
                                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteReimbursementData/")";
                                options.type = "GET";
                                options.data = {
                                    strTransNumber: filingTransIdCCI.toString()
                                };
                                options.dataType = "json";
                                options.contentType = "application/json";
                                options.success = function (results) {
                                    window.status = "Record deleted successfully";
                                    var doneFunction = function () {
                                        $("#divLoading").hide();
                                        ShowDialogBox('EFS', 'Record deleted successfully', 'Ok', '');
                                    }
                                    if (tableCreditCardPayment != "") {
                                        // Refresh Credit Card Details Grid.
                                        TableCreditCardPaymentUpdate(doneFunction);
                                    } else {
                                        doneFunction();
                                    }
                                    // Show Balance Amount for Credit Card Reinbursement Details.
                                    GetReimbursementDetailsTotalAmtAndUpdateLabelsAndButtons_CCI();
                                };
                                options.error = function () {
                                    $("#divLoading").hide();
                                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                };
                                $.ajax(options);
                            },
                            "Cancel": function () {
                                $m(this).dialog("close");
                            }
                        }
                    });
                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                    $("#divLoading").hide();//resultEditFlag != "TRUE"
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });

        // Button Clear Schedule 'F'
        $m("#btnClearDialog").click(function (e) {

            sessionStorage.setItem("ItemizedSchedDYorN", $("#lstItemized option:selected").val().toString());
            sessionStorage.setItem("SubcontractorYorN", $("#lstSubcontractor option:selected").val().toString());
            sessionStorage.setItem("LiabilityYorN", $("#lstLiability option:selected").val().toString());
            sessionStorage.setItem("LiabilityExistsYorN", $("#lstLiabilityExists option:selected").val().toString());
            sessionStorage.setItem("PayeeNameLiability", $("#txtPayeeName").val().toString());
            sessionStorage.setItem("OutstandingAmtLiability", $("#txtOutstandingAmt").val().toString());
            sessionStorage.setItem("PurposeCodeVal", $("#lstPurposeCode option:selected").val().toString());
            // come here
            // Clear Form Validation. Schedule 'D'
            var validator = $m("#DialogBoxSchedFForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFForm")[0].reset();   // clear out the form data

            if (sessionStorage.getItem("UpdateFlagSchedF").toString() != "Yes") { // Add New Transaction

                // Set the default values for form.
                $("#txtCountry").val("United States");
                $("#txtCountry").prop("disabled", true);
                $("#chkCountry").prop('checked', false);
                $("#txtState").prop('maxLength', '2');
                $m("#txtCountry").valid();

                // Set the default values for form.
                $("#lblExplanation").text("Explanation");

                // Set the default values for form.
                //$("#lstItemized").prop("disabled", false);
                if (@Session["COMM_TYPE_ID"] == "23") {
                    $("#lstItemized").prop("disabled", true);
                }
                else {
                    $("#lstItemized").prop("disabled", false);
                }
                $("#lstSubcontractor").prop("disabled", false);
                $("#lstLiability").prop("disabled", false);
                $("#lstLiabilityExists").prop("disabled", true);
                $("#lstPurposeCode").prop("disabled", false);

                // Set the default values for form.
                $("#lstItemized")[0].selectedIndex = 0;
                $("#lstSubcontractor")[0].selectedIndex = 0;
                $("#lstLiability")[0].selectedIndex = 0;
                $("#lstLiabilityExists")[0].selectedIndex = 0;
                $("#lstPurposeCode")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;

                // Set the default values for form.
                $("#txtCurrentDate").blur();
                $("#txtZipCode").blur();
                $("#txtAmtExpenditurePayments").blur();

                // Hide/Show fields
                $("#dvLiabilityExists").show("slow");
                $("#tdPayorNameExpenditurePayments").show("slow");
                $("#divStreetAddress").show("slow");
                $("#divCity").show("slow");
                $("#divState").show("slow");
                $("#divZip5").show("slow");
                $("#tdPurposeCodeExpenditurePayments").show("slow");
                $("#tdMethodExpenditurePayments").show("slow");
                $("#dvLiabilityxpenditurePayments").show("slow");
                $("#dvSubcontractorExpenditurePayments").show("slow");
                $("#tdCountryContributionChk").show();
                $("#tdCountryContributionTxt").show();
                // Hide/Show fields
                $("#tdCheck").hide();
                // Hide/Show fields
                $("#dvOriginalAmtTxt").hide();
                $("#dvOutstandingAmt").hide();
                // Hide/Show fields
                $("#dvDateIncurred").hide();

                // On focus
                $("#lstItemized").select();
            }
            else { // Update Transactions. // EDIT TRANSACTION.
                if (sessionStorage.getItem("ItemizedSchedDYorN").toString() == "N") { // Unitemized
                    $("#txtCurrentDate").blur();
                    $("#txtAmtExpenditurePayments").blur();

                    $(".jqueryClassSelectorForLblAmount").text("* Amount $");

                    $("#lstItemized")[0].selectedIndex = 1;

                    $("#txtCurrentDate").focus();
                }
                else { // Itemized

                    // Subcontractor
                    if (sessionStorage.getItem("SubcontractorYorN").toString() == "Y") {
                        $("#lstSubcontractor")[0].selectedIndex = 1;
                    }
                    else {
                        $("#lstSubcontractor")[0].selectedIndex = 0;
                    }

                    // Liability
                    if (sessionStorage.getItem("LiabilityYorN").toString() == "Y") {
                        $("#lstLiability")[0].selectedIndex = 1;
                        $("#txtPayeeName").val(sessionStorage.getItem("PayeeNameLiability").toString());
                    }
                    else {
                        $("#lstLiability")[0].selectedIndex = 0;
                    }

                    // LiabilityExists.
                    if (sessionStorage.getItem("LiabilityExistsYorN").toString() == "Y") {
                        $("#lstLiabilityExists")[0].selectedIndex = 1;
                    }
                    else {
                        $("#lstLiabilityExists")[0].selectedIndex = 0;
                    }

                    // IF PURPOSE CODE "REIMBURSEMENT (11)" OR "CREDIT CARD PAYMENT (29)" THEN IT SHOULD NOT CLEAR.
                    // IF OTHER THAN THOSE THEN IT WHOULD CLEAR IF USER CLICK CLEAR BUTTON.
                    if (sessionStorage.getItem("PurposeCodeVal").toString() != "11" && sessionStorage.getItem("PurposeCodeVal").toString() != "29")
                        $("#lstPurposeCode")[0].selectedIndex = 0;

                    $("#txtCurrentDate").blur();
                    $("#txtAmtExpenditurePayments").blur();

                    $("#txtOutstandingAmt").val(sessionStorage.getItem("OutstandingAmtLiability").toString());

                    $("#lstMethod")[0].selectedIndex = 0;
                    $("#tdCheck").hide();

                    $("#lblExplanation").text("Explanation");

                    $("#txtCountry").val("United States");
                    $("#txtCountry").prop("disabled", true);
                    $("#chkCountry").prop('checked', false);
                    $("#txtState").prop('maxLength', '2');
                    $("#txtZipCode").blur();

                    $("#txtCurrentDate").focus();
                }
            }
        });

        // Clear values Reimbursement Details.
        $m("#btnClearDialogReim").click(function (e) {

            sessionStorage.setItem("ItemizedSchedDYorN", $("#lstItemizedReim option:selected").val().toString());

            // Clear Form Validation. Schedule 'D'
            var validator = $m("#DialogBoxSchedFReimForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFReimForm")[0].reset();   // clear out the form data

            if (sessionStorage.getItem("UpdateFlagSchedFReim").toString() != "Yes") { // Add New Transaction

                // Set the default values for form.
                $("#txtCountryReim").val("United States");
                $("#txtCountryReim").prop("disabled", true);
                $("#chkCountryReim").prop('checked', false);
                $("#txtStateReim").prop('maxLength', '2');
                $m("#txtCountryReim").valid();

                // Set the default values for form.
                $("#txtExplanationSchedQReim").text("Explanation");

                // Set the default values for form.
                //$("#lstItemizedReim").prop("disabled", false);
                if (@Session["COMM_TYPE_ID"] == "23") {
                    $("#lstItemizedReim").prop("disabled", true);
                }
                else {
                    $("#lstItemizedReim").prop("disabled", false);
                }
                $("#lstPurposeCodeReim").prop("disabled", false);

                // Set the default values for form.
                $("#lstItemizedReim")[0].selectedIndex = 0;
                $("#lstPurposeCodeReim")[0].selectedIndex = 0;

                // Set the default values for form.
                $("#txtCurrentDateReimDetSchedF").blur();
                $("#txtZipCodeReim").blur();
                $("#txtAmtReim").blur();

                // Hide/Show
                $("#tdDatePaidReim").show();
                $("#tdOriginalPayeeName").show();
                $("#tdDetailsPayeeNameReim").show();
                $("#divStreetAddressReim").show();
                $("#divCityReim").show();
                $("#divStateReim").show();
                $("#divZip5Reim").show();
                $("#tdPurposeCodeReim").show();
                $("#tdAmtReim").show();
                $("#tdExplanationReim").show();
                $("#tdCountryContributionChkReim").show();
                $("#tdCountryContributionTxtReim").show();
                // Hide/Show

                // Original Payee Name
                $("#txtOriginalPayeeNameReimDet").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                // On focus
                $("#lstItemizedReim").select();
            }
            else { // Update Transactions.
                if (sessionStorage.getItem("ItemizedSchedDYorN").toString() == "N") { // Unitemized
                    $("#txtCurrentDateReimDetSchedF").blur();
                    $("#txtAmtReim").blur();

                    $("#lstItemizedReim")[0].selectedIndex = 1;

                    $("#txtOriginalPayeeNameReimDet").val(sessionStorage.getItem("PayeeNameReimCCI").toString());
                }
                else { // Itemized

                    // Original Payee Name
                    $("#txtOriginalPayeeNameReimDet").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                    // Set the default values for form.
                    $("#txtCurrentDateReimDetSchedF").blur();
                    $("#txtAmtReim").blur();

                    $("#lstItemizedReim")[0].selectedIndex = 0;

                    $("#txtExplanationSchedQReim").text("Explanation");

                    $("#txtCountryReim").val("United States");
                    $("#txtCountryReim").prop("disabled", true);
                    $("#chkCountryReim").prop('checked', false);
                    $("#txtStateReim").prop('maxLength', '2');
                    $m("#txtCountryReim").valid();
                    $("#txtZipCodeReim").blur();
                }
            }
        });


        // Clear Attribution Dialog Box..
        $m("#btnClearDialogSchedFCCItem").click(function () {

            sessionStorage.setItem("ItemizedSchedDYorN", $("#lstItemizedCCI option:selected").val().toString());

            // Clear Form Validation. Schedule 'D'
            var validator = $m("#DialogBoxSchedFCCIForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFCCIForm")[0].reset();   // clear out the form data

            if (sessionStorage.getItem("UpdateFlagSchedFCCI").toString() != "Yes") { // Add New Transaction

                // Set the default values for form.
                $("#txtCountryCCI").val("United States");
                $("#txtCountryCCI").prop("disabled", true);
                $("#chkCountryCCI").prop('checked', false);
                $("#txtStateCCI").prop('maxLength', '2');
                $m("#txtCountryCCI").valid();

                // Set the default values for form.
                $("#txtExplanationCCI").text("Explanation");

                // Set the default values for form.
                //$("#lstItemizedCCI").prop("disabled", false);
                if (@Session["COMM_TYPE_ID"] == "23") {
                    $("#lstItemizedCCI").prop("disabled", true);
                }
                else {
                    $("#lstItemizedCCI").prop("disabled", false);
                }
                $("#lstPurposeCodeCCI").prop("disabled", false);

                // Set the default values for form.
                $("#lstItemizedCCI")[0].selectedIndex = 0;
                $("#lstPurposeCodeCCI")[0].selectedIndex = 0;

                // Set the default values for form.
                $("#txtCurrentDateSchedQCCI").blur();
                $("#txtZipCodeCCI").blur();
                $("#txtAmountCCI").blur();

                // Hide/Show
                $("#tdDatePaidCCI").show();
                $("#tdPayeeNameOrgCCI").show();
                $("#tdPayeeNameCCI").show();
                $("#divStreetAddressCCI").show();
                $("#divCityCCI").show();
                $("#divStateCCI").show();
                $("#divZip5CCI").show();
                $("#tdPurposeCodeItemization").show();
                $("#tdAmtCCI").show();
                $("#tdExplanationCCI").show();
                $("#tdCountryContributionChkCCI").show();
                $("#tdCountryContributionTxtCCI").show();
                // Hide/Show

                $("#txtOriginalPayeeNameCCI").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                // On focus
                $("#lstItemizedCCI").select();
            }
            else { // Update Transactions.
                if (sessionStorage.getItem("ItemizedSchedDYorN").toString() == "N") { // Unitemized
                    $("#txtCurrentDateSchedQCCI").blur();
                    $("#txtAmountCCI").blur();

                    $("#lstItemizedCCI")[0].selectedIndex = 1;

                    $("#txtOriginalPayeeNameCCI").val(sessionStorage.getItem("PayeeNameReimCCI").toString());
                }
                else { // Itemized

                    // Original Payee Name
                    $("#txtOriginalPayeeNameCCI").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

                    // Set the default values for form.
                    $("#txtCurrentDateSchedQCCI").blur();
                    $("#txtAmountCCI").blur();

                    $("#lstItemizedCCI")[0].selectedIndex = 0;

                    $("#txtExplanationCCI").text("Explanation");

                    $("#txtCountryCCI").val("United States");
                    $("#txtCountryCCI").prop("disabled", true);
                    $("#chkCountryCCI").prop('checked', false);
                    $("#txtStateCCI").prop('maxLength', '2');
                    $m("#txtCountryCCI").valid();
                    $("#txtZipCodeCCI").blur();
                }
            }
        });

        // Clear Attribution Dialog Box..
        $m("#btnClearDialogPartner").click(function () {

            sessionStorage.setItem("ItemizedPartYorN", $("#lstItemizedSubcontr option:selected").val().toString());
            sessionStorage.setItem("IndividualPartYorN", $("#lstIndividualSubcontr option:selected").val().toString());
            sessionStorage.setItem("CountryPartVal", $("#txtCountryPartnership").val().toString());
            sessionStorage.setItem("PartnershipNameEdit", $("#txtPartshiptName").val().toString());

            var validator = $m("#DialogBoxSchedFSubcontrForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFSubcontrForm")[0].reset();   // clear out the form data

            if (sessionStorage.getItem("UpdateFlagSchedFSubcont").toString() != "Yes") { // Add Transactions

                ClearErrorsSubcontractorDialogBox();

                $("#txtPartZip5").blur();
                $("#txtPartAmtSchedF").blur();

                // Fill the Auto fill data.
                $("#txtPartshiptName").prop("disabled", true);
                $("#txtPartshiptName").val(sessionStorage.getItem("PartnershipName").toString());

                $("#txtCountryPartnership").val("United States");
                $("#txtCountryPartnership").prop("disabled", true);
                $("#chkCountryPartnership").prop('checked', false);
                $("#txtPartState").prop('maxLength', '2');

                $("#lstItemizedSubcontr")[0].selectedIndex = 0;
                $("#lstIndividualSubcontr")[0].selectedIndex = 0;

                $("#lstItemizedSubcontr").prop("disabled", false);
                $("#lstIndividualSubcontr").prop("disabled", false);

                $("#tdSubcontractorName").hide();

                $("#tdPartFirstName").show("slow");
                $("#tdPartMI").show("slow");
                $("#tdPartLastName").show("slow");
                $("#dvPartIndividual").show("slow");
                $("#tdPartnershipName").show("slow");
                $("#tdPartStreetName").show("slow");
                $("#tdPartCity").show("slow");
                $("#tdPartState").show("slow");
                $("#tdPartZip5").show("slow");
                $("#tdPartCity").show("slow");
                $("#tdCountryPartnershipChk").show("slow");
                $("#tdCountryPartnershipTxt").show("slow");

                $m("label[for=txtPartFirstName]").text('');
                $m("#txtPartFirstName").removeClass("error");

                $m("#lstItemizedSubcontr").focus();

            }
            else { // Edit Transactions

                ClearErrorsSubcontractorDialogBox();

                if (sessionStorage.getItem("ItemizedPartYorN").toString() == "N") { // Unitemized Edit Transactions
                    $("#lstItemizedSubcontr")[0].selectedIndex = 1;
                    $("#txtCurrentDate").blur();
                    $("#txtPartAmtSchedF").blur();
                    $("#txtCurrentDate").focus();
                    $("#lstItemizedSubcontr").prop("disabled", true);
                }
                else { // Itemized Edit Transactions
                    $("#lstItemizedSubcontr")[0].selectedIndex = 0;
                    $("#txtCurrentDate").blur();
                    $("#txtPartAmtSchedF").blur();
                    $("#txtPartshiptName").val(sessionStorage.getItem("PartnershipNameEdit").toString());
                    if (sessionStorage.getItem("IndividualPartYorN").toString() == "Y") {
                        $("#lstIndividualSubcontr")[0].selectedIndex = 0;
                        $("#txtPartFirstName").focus();
                    }
                    else {
                        $("#lstIndividualSubcontr")[0].selectedIndex = 1;
                        $("#txtPartnerName").focus();
                    }

                    $("#lstItemizedSubcontr").prop("disabled", true);
                    $("#lstIndividualSubcontr").prop("disabled", true);

                    $("#txtCountryPartnership").val("United States");
                    $("#txtCountryPartnership").prop("disabled", true);
                    $("#chkCountryPartnership").prop('checked', false);
                    $("#txtPartState").prop('maxLength', '2');
                    $("#txtPartZip5").blur();
                }
            }

        });

        // Individual Subcontractor Name
        $("#lstIndividualSubcontr").change(function () {
            if ($("#lstIndividualSubcontr option:selected").val().toString() == "Y") {

                // Fill the Auto fill data.
                $("#txtPartshiptName").prop("disabled", true);
                $("#txtPartshiptName").val(sessionStorage.getItem("PartnershipName").toString());
                $("#txtPartFirstName").focus();

                //$("#lstIndividualPart")[0].selectedIndex = 0;

                $("#tdPartFirstName").show("slow");
                $("#tdPartMI").show("slow");
                $("#tdPartLastName").show("slow");

                $("#tdSubcontractorName").hide("slow");

                $("#txtPartFirstName").val("");
                $("#txtPartMI").val("");
                $("#txtPartLastName").val("");

                $m("label[for=txtPartFirstName]").text('');
                $m("#txtPartFirstName").removeClass("error");

                $m("label[for=txtPartMI]").text('');
                $m("#txtPartMI").removeClass("error");

                $m("label[for=txtPartLastName]").text('');
                $m("#txtPartLastName").removeClass("error");
            }
            else {
                // Fill the Auto fill data.
                $("#txtPartshiptName").prop("disabled", true);
                $("#txtPartshiptName").val(sessionStorage.getItem("PartnershipName").toString());
                $("#txtSubcontractorName").focus();

                //$("#lstIndividualPart")[0].selectedIndex = 1;

                $("#tdPartFirstName").hide("slow");
                $("#tdPartMI").hide("slow");
                $("#tdPartLastName").hide("slow");

                $("#tdSubcontractorName").show("slow");

                $("#txtSubcontractorName").val("");

                $m("label[for=txtSubcontractorName]").text('');
                $m("#txtSubcontractorName").removeClass("error");
            }
        });


        // Itemized for Subcontractor
        $("#lstItemizedSubcontr").change(function () {
            if ($("#lstItemizedSubcontr option:selected").val().toString() == "N") { // UNITEMIZED

                var validator = $m("#DialogBoxSchedFSubcontrForm").validate();
                validator.resetForm();  // clear out the validation errors
                $m("#DialogBoxSchedFSubcontrForm")[0].reset();   // clear out the form data

                // Fill the Auto fill data.
                $("#txtPartshiptName").prop("disabled", true);
                $("#txtPartshiptName").val(sessionStorage.getItem("PartnershipName").toString());

                $("#txtPartAmtSchedF").blur();
                $("#lstItemizedSubcontr").select();

                $("#txtCountryPartnership").val("United States");
                $("#txtCountryPartnership").prop("disabled", true);

                $("#lstIndividualSubcontr")[0].selectedIndex = 0;

                $("#lstItemizedSubcontr")[0].selectedIndex = 1;

                $("#tdSubcontractorName").hide();

                $("#tdPartnershipNamePartner").show();

                // Hide/Show Controls
                $("#dvPartIndividual").hide("slow");
                $("#tdPartnerName").hide("slow");
                $("#tdPartFirstName").hide("slow");
                $("#tdPartMI").hide("slow");
                $("#tdPartLastName").hide("slow");
                $("#tdPartStreetName").hide("slow");
                $("#tdPartCity").hide("slow");
                $("#tdPartState").hide("slow");
                $("#tdPartZip5").hide("slow");
                $("#tdPartCity").hide("slow");
                $("#tdCountryPartnershipChk").hide("slow");
                $("#tdCountryPartnershipTxt").hide("slow");
            }
            else {
                // Clear Form data
                var validator = $m("#DialogBoxSchedFSubcontrForm").validate();
                validator.resetForm();  // clear out the validation errors
                $m("#DialogBoxSchedFSubcontrForm")[0].reset();   // clear out the form data

                // Fill the Auto fill data.
                $("#txtPartshiptName").prop("disabled", true);
                $("#txtPartshiptName").val(sessionStorage.getItem("PartnershipName").toString());

                $("#txtPartZip5").blur();
                $("#txtPartAmtSchedF").blur();
                $("#lstItemizedSubcontr").select();

                $("#lblExplanationPart").text("Explanation");

                $("#txtCountryPartnership").val("United States");
                $("#txtCountryPartnership").prop("disabled", true);

                $("#lstIndividualSubcontr")[0].selectedIndex = 0;
                $("#lstItemizedSubcontr")[0].selectedIndex = 0;

                $("#tdPartnershipNamePartner").show();

                $("#tdSubcontractorName").hide();

                $("#tdPartFirstName").show("slow");
                $("#tdPartMI").show("slow");
                $("#tdPartLastName").show("slow");

                $("#dvPartIndividual").show("slow");
                $("#tdPartStreetName").show("slow");
                $("#tdPartCity").show("slow");
                $("#tdPartState").show("slow");
                $("#tdPartZip5").show("slow");
                $("#tdPartCity").show("slow");
                $("#tdCountryPartnershipChk").show("slow");
                $("#tdCountryPartnershipTxt").show("slow");

                $m("label[for=txtPartFirstName]").text('');
                $m("#txtPartFirstName").removeClass("error");

                $m("label[for=txtPartMI]").text('');
                $m("#txtPartMI").removeClass("error");

                $m("label[for=txtPartLastName]").text('');
                $m("#txtPartLastName").removeClass("error");
            }
        });


        // Unitemzied then hide controls
        $("#lstItemized").change(function () {

            // Set the default values for form.
            $("#lblExplanation").text("Explanation");

            // CLEAR THE AMOUNT VALUES.
            $("#txtAmtExpenditurePayments").val("");
            $("#txtAmtExpenditurePayments").blur();
            $("#txtOutstandingAmt").val("");
            $("#txtOutstandingAmt").blur();
            $("#txtOriginalAmount").val("");
            $("#txtOriginalAmount").blur();

            if ($("#lstItemized option:selected").val().toString() == "N") { // Expenditure Payment Itemized

                // Clear Form Validation. Schedule 'F'
                var validator = $m("#DialogBoxSchedFForm").validate();
                validator.resetForm();  // clear out the validation errors
                $m("#DialogBoxSchedFForm")[0].reset();   // clear out the form data

                // Set the default values for form.
                $("#txtCountry").val("United States");
                $("#txtCountry").prop("disabled", true);
                $("#chkCountry").prop('checked', false);
                $("#txtState").prop('maxLength', '2');
                $m("#txtCountry").valid();

                // Set the default values for form.
                $("#lblExplanation").text("Explanation");

                // Set the default values for form.
                //$("#lstItemized").prop("disabled", false);
                if (@Session["COMM_TYPE_ID"] == "23") {
                    $("#lstItemized").prop("disabled", true);
                }
                else {
                    $("#lstItemized").prop("disabled", false);
                }
                $("#lstSubcontractor").prop("disabled", false);
                $("#lstLiability").prop("disabled", false);
                $("#lstLiabilityExists").prop("disabled", true);
                $("#lstPurposeCode").prop("disabled", false);

                // Set the default values for form.
                $("#lstItemized")[0].selectedIndex = 1;

                $("#lstSubcontractor")[0].selectedIndex = 0;
                $("#lstLiability")[0].selectedIndex = 0;
                $("#lstLiabilityExists")[0].selectedIndex = 0;
                $("#lstPurposeCode")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;

                // Set the default values for form.
                $("#txtCurrentDate").blur();
                $("#txtAmtExpenditurePayments").blur();

                // Hide/Show fields
                $("#dvLiabilityExists").hide("slow");
                $("#tdPayorNameExpenditurePayments").hide("slow");
                $("#divStreetAddress").hide("slow");
                $("#divCity").hide("slow");
                $("#divState").hide("slow");
                $("#divZip5").hide("slow");
                $("#tdPurposeCodeExpenditurePayments").hide("slow");
                $("#tdMethodExpenditurePayments").hide("slow");
                $("#dvLiabilityxpenditurePayments").hide("slow");
                $("#dvSubcontractorExpenditurePayments").hide("slow");
                $("#tdCountryContributionChk").hide();
                $("#tdCountryContributionTxt").hide();
                // Hide/Show fields
                $("#tdCheck").hide();
                // Hide/Show fields
                $("#dvOriginalAmtTxt").hide();
                $("#dvOutstandingAmt").hide();
                // Hide/Show fields
                $("#dvDateIncurred").hide();

                // Focus
                $("#lstItemized").focus();
            }
            else { // 'N' // Expenditure Payment Itemized

                // Clear Form Validation. Schedule 'F'
                var validator = $m("#DialogBoxSchedFForm").validate();
                validator.resetForm();  // clear out the validation errors
                $m("#DialogBoxSchedFForm")[0].reset();   // clear out the form data

                // Set the default values for form.
                $("#txtCountry").val("United States");
                $("#txtCountry").prop("disabled", true);
                $("#chkCountry").prop('checked', false);
                $("#txtState").prop('maxLength', '2');
                $m("#txtCountry").valid();

                // Set the default values for form.
                $("#lblExplanation").text("Explanation");

                // Set the default values for form.
                //$("#lstItemized").prop("disabled", false);
                if (@Session["COMM_TYPE_ID"] == "23") {
                    $("#lstItemized").prop("disabled", true);
                }
                else {
                    $("#lstItemized").prop("disabled", false);
                }
                $("#lstSubcontractor").prop("disabled", false);
                $("#lstLiability").prop("disabled", false);
                $("#lstLiabilityExists").prop("disabled", true);
                $("#lstPurposeCode").prop("disabled", false);

                // Set the default values for form.
                $("#lstItemized")[0].selectedIndex = 0;
                $("#lstSubcontractor")[0].selectedIndex = 0;
                $("#lstLiability")[0].selectedIndex = 0;
                $("#lstLiabilityExists")[0].selectedIndex = 0;
                $("#lstPurposeCode")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;

                // Set the default values for form.
                $("#txtCurrentDate").blur();
                $("#txtZipCode").blur();
                $("#txtAmtExpenditurePayments").blur();

                // Hide/Show fields
                $("#dvLiabilityExists").show("slow");
                $("#tdPayorNameExpenditurePayments").show("slow");
                $("#divStreetAddress").show("slow");
                $("#divCity").show("slow");
                $("#divState").show("slow");
                $("#divZip5").show("slow");
                $("#tdPurposeCodeExpenditurePayments").show("slow");
                $("#tdMethodExpenditurePayments").show("slow");
                $("#dvLiabilityxpenditurePayments").show("slow");
                $("#dvSubcontractorExpenditurePayments").show("slow");
                $("#tdCountryContributionChk").show();
                $("#tdCountryContributionTxt").show();
                // Hide/Show fields
                $("#tdCheck").hide();
                // Hide/Show fields
                $("#dvOriginalAmtTxt").hide();
                $("#dvOutstandingAmt").hide();
                // Hide/Show fields
                $("#dvDateIncurred").hide();

                // Focus
                $("#lstItemized").focus();
            }
        });

        // Itemized Reimbursement Details.
        $("#lstItemizedReim").change(function () {
            if ($("#lstItemizedReim option:selected").val().toString() == "N") { // UNITEMIZED

                // Clear Dialogbox
                ClearDialogBoxValidationSchedQReim();

                // Hide/Show
                $("#tdDatePaidReim").show();
                $("#tdOriginalPayeeName").show();
                $("#tdDetailsPayeeNameReim").hide();
                $("#divStreetAddressReim").hide();
                $("#divCityReim").hide();
                $("#divStateReim").hide();
                $("#divZip5Reim").hide();
                $("#tdPurposeCodeReim").hide();
                $("#tdAmtReim").show();
                $("#tdExplanationReim").show();
                $("#tdCountryContributionChkReim").hide();
                $("#tdCountryContributionTxtReim").hide();
                // Hide/Show

                $("#lstItemizedReim")[0].selectedIndex = 1;
            }
            else {
                // Clear Dialogbox
                ClearDialogBoxValidationSchedQReim();
                // Hide/Show
                $("#tdDatePaidReim").show();
                $("#tdOriginalPayeeName").show();
                $("#tdDetailsPayeeNameReim").show();
                $("#divStreetAddressReim").show();
                $("#divCityReim").show();
                $("#divStateReim").show();
                $("#divZip5Reim").show();
                $("#tdPurposeCodeReim").show();
                $("#tdAmtReim").show();
                $("#tdExplanationReim").show();
                $("#tdCountryContributionChkReim").show();
                $("#tdCountryContributionTxtReim").show();
                // Hide/Show

                $("#lstItemizedReim")[0].selectedIndex = 0;
            }
        });

        // Purpose Code Change - Reimbursement Details.
        $("#lstPurposeCodeReim").change(function (e) {

            var selectedPurposeCode = $("#lstPurposeCodeReim option:selected").val().toString();

            if (selectedPurposeCode == "8" || selectedPurposeCode == "51") {
                $("#lblExplanationReim").text("* Explanation");
            }
            else {
                $("#lblExplanationReim").text("Explanation");
            }

            $m("label[for=txtExplanationSchedQReim]").text('');
            $m("#txtExplanationSchedQReim").removeClass("error");

        });

        // Subcontractor Change
        $("#lstSubcontractor").change(function () {

            // Set the default values for form.
            $("#lblExplanation").text("Explanation");

            // CLEAR THE AMOUNT VALUES.
            $("#txtAmtExpenditurePayments").val("");
            $("#txtAmtExpenditurePayments").blur();
            $("#txtOutstandingAmt").val("");
            $("#txtOutstandingAmt").blur();
            $("#txtOriginalAmount").val("");
            $("#txtOriginalAmount").blur();

            if ($("#lstSubcontractor option:selected").val().toString() == "Y") {

                $("#lstSubcontractor").prop("disabled", false);

                $("#lstLiability").prop("disabled", true);
                $("#lstLiabilityExists").prop("disabled", true);

                $("#dvDateIncurred").hide();
                $("#dvOutstandingAmt").hide();

                $("#dvOriginalAmtTxt").hide();

                $(".jqueryClassSelectorForLblAmount").text("* Amount $");

                $("#lstLiability")[0].selectedIndex = 0;
                $("#lstLiabilityExists")[0].selectedIndex = 0;

                $("#lstPurposeCode")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;
                $("#tdCheck").hide();

                $("#txtAmtExpenditurePayments").blur();

                // Hide Purpsoe Codes -Reimbursement, Credit Card Payment, Political Contributions, Bank Fees, and Interest Expenses.
                var options = {};
                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodesSubcontractor/")";
                options.type = "POST";
                options.data = null;
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                    $("#lstPurposeCode").empty();
                    $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                    for (var i = 0; i < results.length; i++) {
                        $("#lstPurposeCode").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                    }
                };
                options.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                };
                $.ajax(options);
                // Hide Purpose Code for Subcontractor /////////////////////////////////

            }
            else {
                $("#lstLiability").prop("disabled", false);
                $("#lstLiabilityExists").prop("disabled", true);

                $("#lstLiability")[0].selectedIndex = 0;
                $("#lstLiabilityExists")[0].selectedIndex = 0;

                $("#lstPurposeCode")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;
                $("#tdCheck").hide();

                // Get Default Purpose Codes
                GetPurposeCodeExpenditure();
            }

            // CLEAR ERROR MESSAGES.
            var inputIdArray = [
                "txtCurrentDate",
                "txtPayeeName",
                "txtCountry",
                "txtStreetName",
                "txtCity",
                "txtState",
                "txtZipCode",
                "lstPurposeCode",
                "lstDateIncurred",
                "txtCheckExpenditurePayments",
                "txtOriginalAmount",
                "txtAmtExpenditurePayments",
                "txtOriginalAmt",
                "txtExplanationSchedF"];
            appCommonEFS_ClearLabeltextAndRemoveClassError(inputIdArray);
            // CLEAR ERROR MESSAGES.

            $("#txtCheckExpenditurePayments").val("");
            $("#txtAmtExpenditurePayments").val("");
            $("#txtAmtExpenditurePayments").blur();
            $("#txtExplanationSchedF").val("");
            $("#txtPayeeName").val("");

            $("#txtCurrentDate").val("");
            $("#txtCurrentDate").blur();

            // CLEAR THE COUNTRY.
            $("#txtCountry").val("United States");
            $m("#txtCountry").valid();
            $("#chkCountry").prop('checked', false);
            $("#txtCountry").prop("disabled", true);
            $("#txtState").prop('maxLength', '2');
            $("#txtState").val("");
            // Clear Address
            $("#txtStreetName").val("");
            $("#txtCity").val("");
            $("#txtState").val("");
            $("#txtZipCode").val("");
            $("#txtZipCode").blur();
            // Validate
            $m("#txtStreetName").valid();
            $m("#txtCity").valid();
            $m("#txtState").valid();
            $m("#txtZipCode").valid();
            $m("#txtState").valid();
            $m('#txtZipCode').attr("placeholder", "00000-0000");
            // CLEAR THE COUNTRY.
        });


        // If Existing Liability then Show Date Incurred and Outstanding Amount.
        $("#lstLiabilityExists").change(function () {

            // Set the default values for form.
            $("#lblExplanation").text("Explanation");

            // CLEAR THE AMOUNT VALUES.
            $("#txtAmtExpenditurePayments").val("");
            $("#txtAmtExpenditurePayments").blur();
            $("#txtOutstandingAmt").val("");
            $("#txtOutstandingAmt").blur();
            $("#txtOriginalAmount").val("");
            $("#txtOriginalAmount").blur();

            // Clear the Fileds.
            $("#txtPayeeName").val("");
            $("#txtStreetName").val("");
            $("#txtCity").val("");
            $("#txtState").val("");
            $("#txtZipCode").val("");
            $("#lstPurposeCode")[0].selectedIndex = 0;
            $("#lstMethod")[0].selectedIndex = 0;
            $("#tdCheck").hide();
            $("#txtCheckExpenditurePayments").val("");
            $("#txtExplanationSchedF").val("");

            if ($("#lstLiabilityExists option:selected").val().toString() == "Y") {
                $("#dvDateIncurred").show();
                $("#dvOriginalAmtTxt").show();
                $("#dvOutstandingAmt").show();

                $("#dvOriginalAmtTxt").hide();

                $(".jqueryClassSelectorForLblAmount").text("* Amount $");

                // SET DEFAULT TO DATE INCCURED FIELD ONCE COME FROM UPDATE.
                $("#lstDateIncurred").empty();
                $("#lstDateIncurred").append("<option value='" + "0" + "'>" + "- Select -" + "</option>");

                if (@Session["COMM_TYPE_ID"] == "19") {
                    $("#divSuppOrOpps").hide();   
                }
            }
            else {
                $("#dvDateIncurred").hide();
                $("#dvOriginalAmtTxt").hide();
                $("#dvOutstandingAmt").show();

                $("#dvOriginalAmtTxt").show();

                $(".jqueryClassSelectorForLblAmount").text("* Partial Amount $");

                $("#lstDateIncurred")[0].selectedIndex = 0;

                if (@Session["COMM_TYPE_ID"] == "19") {
                    $("#divSuppOrOpps").show();    
                }
            }

            // CLEAR ERROR MESSAGES.
            ClearErrorsBtnCloseDialogClickEvent(true);

            $m("label[for=txtOriginalAmount]").text('');
            $m("#txtOriginalAmount").removeClass("error");
            // CLEAR ERROR MESSAGES.

            $("#txtCurrentDate").val("");
            $("#txtCurrentDate").blur();

            // CLEAR THE COUNTRY.
            $("#txtCountry").val("United States");
            $m("#txtCountry").valid();
            $("#chkCountry").prop('checked', false);
            $("#txtCountry").prop("disabled", true);
            $("#txtState").prop('maxLength', '2');
            $("#txtState").val("");
            // Clear Address
            $("#txtStreetName").val("");
            $("#txtCity").val("");
            $("#txtState").val("");
            $("#txtZipCode").val("");
            $("#txtZipCode").blur();
            // Validate
            $m("#txtStreetName").valid();
            $m("#txtCity").valid();
            $m("#txtState").valid();
            $m("#txtZipCode").valid();
            $m("#txtState").valid();
            $m('#txtZipCode').attr("placeholder", "00000-0000");
            // CLEAR THE COUNTRY.

            

        });

        // Liability Change - IS EXPENDITURE A  PARTIAL PAYMENT
        //--------------------------------------------------------------------------------------------------------------
        $("#lstLiability").change(function () {

            // Set the default values for form.
            $("#lblExplanation").text("Explanation");

            // CLEAR THE AMOUNT VALUES.
            $("#txtAmtExpenditurePayments").val("");
            $("#txtAmtExpenditurePayments").blur();
            $("#txtOutstandingAmt").val("");
            $("#txtOutstandingAmt").blur();
            $("#txtOriginalAmount").val("");
            $("#txtOriginalAmount").blur();

            if ($("#lstLiability option:selected").val() == "Y") {

                $("#lstLiabilityExists").prop("disabled", false);

                //$("#dvLiabilityExists").show();
                $("#dvOriginalAmtTxt").show();
                $("#dvOutstandingAmt").show();

                $(".jqueryClassSelectorForLblAmount").text("* Partial Amount $");

                // Clear the Fileds.
                $("#txtPayeeName").val("");
                $("#txtStreetName").val("");
                $("#txtCity").val("");
                $("#txtState").val("");
                $("#txtZipCode").val("");
                $("#lstPurposeCode")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;
                $("#tdCheck").hide();
                $("#txtCheckExpenditurePayments").val("");
                $("#txtAmtExpenditurePayments").val("");
                $("#txtExplanationSchedF").val("");

                $("#lstLiabilityExists")[0].selectedIndex = 0;

                $("#lstDateIncurred")[0].selectedIndex = 0;

                $("#txtOutstandingAmt").val("");

                if ($("#txtPayeeName").val() != "") {

                    $("#dvDateIncurred").show();

                    $("#dvOutstandingAmt").show();

                    // Load Date Incurred Data.
                    // Get Date Incurred Data.
                    // Bind Date Incurred Data.
                    var options = {};
                    options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetDateIncurred/")";
                    options.type = "POST";
                    options.data = JSON.stringify(
                        {
                            strFilingEntityId: null,
                            strFilerId: $("#txtFilerID option:selected").text().toString()
                        });
                    options.dataType = "json";
                    options.contentType = "application/json";
                    options.success = function (results) {
                        $("#lstDateIncurred").empty();
                        $("#lstDateIncurred").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstDateIncurred").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                    };
                    options.error = function () {
                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                    };
                    $.ajax(options);
                }

                // BIND PURPOSE CODES FOR LIABILITY PAYMENT.
                // Bind Purpose Code Data.
                var options = {};
                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeExpLiability/")";
                options.type = "POST";
                options.data = null;
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (resultsMethod) {
                    $("#lstPurposeCode").empty();
                    $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                    for (var i = 0; i < resultsMethod.length; i++) {
                        $("#lstPurposeCode").append("<option value='" + resultsMethod[i].Value + "'>" + resultsMethod[i].Text + "</option>");
                    }
                };
                options.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                };
                $.ajax(options);
            }
            else {

                $("#lstLiabilityExists").prop("disabled", true);

                $("#lstSubcontractor").prop("disabled", false);

                $("#dvOriginalAmtTxt").hide();
                $("#dvOutstandingAmt").hide();

                $("#dvDateIncurred").hide();

                $("#lstLiabilityExists")[0].selectedIndex = 0;

                $(".jqueryClassSelectorForLblAmount").text("* Amount $");

                // Clear the Fileds.
                $("#txtPayeeName").val("");
                $("#txtStreetName").val("");
                $("#txtCity").val("");
                $("#txtState").val("");
                $("#txtZipCode").val("");
                $("#lstPurposeCode")[0].selectedIndex = 0;
                $("#lstMethod")[0].selectedIndex = 0;
                $("#txtCheckExpenditurePayments").val("");
                $("#txtAmtExpenditurePayments").val("");
                $("#txtExplanationSchedF").val("");

                $("#lstLiabilityExists")[0].selectedIndex = 0;

                $("#lstDateIncurred")[0].selectedIndex = 0;

                $("#txtOutstandingAmt").val("");

                // BIND PURPOSE CODES DEFAULT.
                // Bind Purpose Code Data.
                var options = {};
                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodesDefault/")";
                options.type = "POST";
                options.data = null;
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (resultsMethod) {
                    $("#lstPurposeCode").empty();
                    $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                    for (var i = 0; i < resultsMethod.length; i++) {
                        $("#lstPurposeCode").append("<option value='" + resultsMethod[i].Value + "'>" + resultsMethod[i].Text + "</option>");
                    }
                };
                options.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                };
                $.ajax(options);
            }

            // CLEAR ERROR MESSAGES.
            ClearErrorsBtnCloseDialogClickEvent(true);

            $m("label[for=txtOriginalAmount]").text('');
            $m("#txtOriginalAmount").removeClass("error");
            // CLEAR ERROR MESSAGES.

            $("#txtPayeeName").val("");
            $("#txtStreetName").val("");
            $("#txtCity").val("");
            $("#txtState").val("");
            $("#txtZipCode").val("");
            $("#lstPurposeCode")[0].selectedIndex = 0;
            $("#lstMethod")[0].selectedIndex = 0;
            $("#tdCheck").hide();
            $("#txtCheckExpenditurePayments").val("");
            $("#txtAmtExpenditurePayments").val("");
            $("#txtExplanationSchedF").val("");

            $("#lstLiabilityExists")[0].selectedIndex = 0;

            $("#lstDateIncurred")[0].selectedIndex = 0;

            $("#txtOutstandingAmt").val("");

            $("#txtCurrentDate").val("");
            $("#txtCurrentDate").blur();

            // CLEAR THE COUNTRY.
            $("#txtCountry").val("United States");
            $m("#txtCountry").valid();
            $("#chkCountry").prop('checked', false);
            $("#txtCountry").prop("disabled", true);
            $("#txtState").prop('maxLength', '2');
            $("#txtState").val("");
            // Clear Address
            $("#txtStreetName").val("");
            $("#txtCity").val("");
            $("#txtState").val("");
            $("#txtZipCode").val("");
            $("#txtZipCode").blur();
            // Validate
            $m("#txtStreetName").valid();
            $m("#txtCity").valid();
            $m("#txtState").valid();
            $m("#txtZipCode").valid();
            $m("#txtState").valid();
            $m('#txtZipCode').attr("placeholder", "00000-0000");
            // CLEAR THE COUNTRY.

        });
        // Liability Change - IS EXPENDITURE A  PARTIAL PAYMENT
        //--------------------------------------------------------------------------------------------------------------

        // Credit Card Itemization Itemized
        $("#lstItemizedCCI").change(function () {

            if ($("#lstItemizedCCI option:selected").val().toString() == "N") { // UNITEMIZED

                // Clear Dialogbox
                ClearDialogBoxValidationSchedQCCI();

                // Hide/Show
                $("#tdDatePaidCCI").show();
                $("#tdPayeeNameOrgCCI").show();
                $("#tdPayeeNameCCI").hide();
                $("#divStreetAddressCCI").hide();
                $("#divCityCCI").hide();
                $("#divStateCCI").hide();
                $("#divZip5CCI").hide();
                $("#tdPurposeCodeItemization").hide();
                $("#tdAmtCCI").show();
                $("#tdExplanationCCI").show();
                $("#tdCountryContributionChkCCI").hide();
                $("#tdCountryContributionTxtCCI").hide();
                // Hide/Show

                $("#lstItemizedCCI")[0].selectedIndex = 1;
            }
            else {
                // Clear Dialogbox
                ClearDialogBoxValidationSchedQCCI();

                // Hide/Show
                $("#tdDatePaidCCI").show();
                $("#tdPayeeNameOrgCCI").show();
                $("#tdPayeeNameCCI").show();
                $("#divStreetAddressCCI").show();
                $("#divCityCCI").show();
                $("#divStateCCI").show();
                $("#divZip5CCI").show();
                $("#tdPurposeCodeItemization").show();
                $("#tdAmtCCI").show();
                $("#tdExplanationCCI").show();
                $("#tdCountryContributionChkCCI").show();
                $("#tdCountryContributionTxtCCI").show();
                // Hide/Show

                $("#lstItemizedCCI")[0].selectedIndex = 0;
            }
        });

        // Purpose Code Change - Credit Card Itemization.
        $("#lstPurposeCodeCCI").change(function (e) {

            var selectedPurposeCode = $("#lstPurposeCodeCCI option:selected").val().toString();

            if (selectedPurposeCode == "8" || selectedPurposeCode == "51") {
                $("#lblExplanationCCI").text("* Explanation");
            }
            else {
                $("#lblExplanationCCI").text("Explanation");
            }

            $m("label[for=txtExplanationCCI]").text('');
            $m("#txtExplanationCCI").removeClass("error");

        });

        //Contribution Name Selected index changed
        $("#lstContributionNameExpenditurePayments").change(function () {
            var selectedlstContributionName = $("#lstContributionNameExpenditurePayments option:selected").text();
            if (selectedlstContributionName == "Candidate" || selectedlstContributionName == "Individual" || selectedlstContributionName == "Family") {
                $(".jquerySelectorGridHeader").text("Contributions - Candidate, Individual, Family");
                //Show All TR
                $("#thFirstNameExpenditurePayments").show("slow");
                $("#thMIExpenditurePayments").show("slow");
                $("#thLastNameExpenditurePayments").show("slow");
                $("#thStreetExpenditurePayments").show("slow");
                $("#thStreetNameExpenditurePayments").show("slow");
                $("#thCityExpenditurePayments").show("slow");
                $("#thStateExpenditurePayments").show("slow");
                $("#thZip5ExpenditurePayments").show("slow");
                $("#thZip4ExpenditurePayments").show("slow");
                $("#thContributionTypeExpenditurePayments").show("slow");
                $("#thMethodExpenditurePayments").show("slow");
                $("#thCheckExpenditurePayments").show("slow");
                $("#thAmtExpenditurePayments").show("slow");
                $("#thExplanationExpenditurePayments").show("slow");

                //Show All TD
                $("#tdFirstNameExpenditurePayments").show("slow");
                $("#tdMIExpenditurePayments").show("slow");
                $("#tdLastNameExpenditurePayments").show("slow");
                $("#tdStreetExpenditurePayments").show("slow");
                $("#tdStreetNameExpenditurePayments").show("slow");
                $("#tdCityExpenditurePayments").show("slow");
                $("#tdStateExpenditurePayments").show("slow");
                $("#tdZip5ExpenditurePayments").show("slow");
                $("#tdZip4ExpenditurePayments").show("slow");
                $("#tdContributionTypeExpenditurePayments").show("slow");
                $("#tdMethodExpenditurePayments").show("slow");
                $("#tdCheckExpenditurePayments").show("slow");
                $("#tAmtExpenditurePayments").show("slow");
                $("#tdExplanationExpenditurePayments").show("slow");

                $("#thParterShipNameExpenditurePayments").hide("slow");
                $("#tdPartnershipNameExpenditurePayments").hide("slow");
            }
            if (selectedlstContributionName == "Itemized") {
                $(".jquerySelectorGridHeader").text("Contributions - Itemized");
                //Show All TR
                $("#thAmtExpenditurePayments").show("slow");
                $("#thExplanationExpenditurePayments").show("slow");

                $("#thFirstNameExpenditurePayments").hide("slow");
                $("#thMIExpenditurePayments").hide("slow");
                $("#thLastNameExpenditurePayments").hide("slow");
                $("#thStreetExpenditurePayments").hide("slow");
                $("#thStreetNameExpenditurePayments").hide("slow");
                $("#thCityExpenditurePayments").hide("slow");
                $("#thStateExpenditurePayments").hide("slow");
                $("#thZip5ExpenditurePayments").hide("slow");
                $("#thZip4ExpenditurePayments").hide("slow");
                $("#thContributionTypeExpenditurePayments").hide("slow");
                $("#thMethodExpenditurePayments").hide("slow");
                $("#thCheckExpenditurePayments").hide("slow");

                //Show All TD
                $("#tAmtExpenditurePayments").show("slow");
                $("#tdExplanationExpenditurePayments").show("slow");

                $("#tdFirstNameExpenditurePayments").hide("slow");
                $("#tdMIExpenditurePayments").hide("slow");
                $("#tdLastNameExpenditurePayments").hide("slow");
                $("#tdStreetExpenditurePayments").hide("slow");
                $("#tdStreetNameExpenditurePayments").hide("slow");
                $("#tdCityExpenditurePayments").hide("slow");
                $("#tdStateExpenditurePayments").hide("slow");
                $("#tdZip5ExpenditurePayments").hide("slow");
                $("#tdZip4ExpenditurePayments").hide("slow");
                $("#tdContributionTypeExpenditurePayments").hide("slow");
                $("#tdMethodExpenditurePayments").hide("slow");
                $("#tdCheckExpenditurePayments").hide("slow");

                $("#thParterShipNameExpenditurePayments").hide("slow");
                $("#tdPartnershipNameExpenditurePayments").hide("slow");

            }
            if (selectedlstContributionName == "Partnership") {
                $(".jquerySelectorGridHeader").text("Contributions - Partnership");
                $("#thParterShipNameExpenditurePayments").show("slow");
                $("#tdPartnershipNameExpenditurePayments").show("slow");

                //Show All TR
                $("#thFirstNameExpenditurePayments").hide("slow");
                $("#thMIExpenditurePayments").hide("slow");
                $("#thLastNameExpenditurePayments").hide("slow");
                $("#thStreetExpenditurePayments").show("slow");
                $("#thStreetNameExpenditurePayments").show("slow");
                $("#thCityExpenditurePayments").show("slow");
                $("#thStateExpenditurePayments").show("slow");
                $("#thZip5ExpenditurePayments").show("slow");
                $("#thZip4ExpenditurePayments").show("slow");
                $("#thContributionTypeExpenditurePayments").show("slow");
                $("#thMethodExpenditurePayments").show("slow");
                $("#thCheckExpenditurePayments").show("slow");
                $("#thAmtExpenditurePayments").show("slow");
                $("#thExplanationExpenditurePayments").show("slow");

                //Show All TD
                $("#tdFirstNameExpenditurePayments").hide("slow");
                $("#tdMIExpenditurePayments").hide("slow");
                $("#tdLastNameExpenditurePayments").hide("slow");
                $("#tdStreetExpenditurePayments").show("slow");
                $("#tdStreetNameExpenditurePayments").show("slow");
                $("#tdCityExpenditurePayments").show("slow");
                $("#tdStateExpenditurePayments").show("slow");
                $("#tdZip5ExpenditurePayments").show("slow");
                $("#tdZip4ExpenditurePayments").show("slow");
                $("#tdContributionTypeExpenditurePayments").show("slow");
                $("#tdMethodExpenditurePayments").show("slow");
                $("#tdCheckExpenditurePayments").show("slow");
                $("#tAmtExpenditurePayments").show("slow");
                $("#tdExplanationExpenditurePayments").show("slow");
            }
        });
        //Common code to hide fields.
        function hideFieldsForEditFlagGet() {
            // Hide fields
            $("#dvLiabilityExists").hide("slow");
            $("#tdPayorNameExpenditurePayments").hide("slow");
            $("#divStreetAddress").hide("slow");
            $("#divCity").hide("slow");
            $("#divState").hide("slow");
            $("#divZip5").hide("slow");
            $("#tdPurposeCodeExpenditurePayments").hide("slow");
            $("#tdMethodExpenditurePayments").hide("slow");
            $("#tdCheck").hide("slow");
            $("#tdCountryContributionChk").hide("slow");
            $("#tdCountryContributionTxt").hide("slow");
            $("#dvLiabilityxpenditurePayments").hide("slow");
            $("#dvSubcontractorExpenditurePayments").hide("slow");
            $("#dvDateIncurred").hide();
            $("#dvOutstandingAmt").hide();
            $("#divSuppOrOpps").hide();
        }
        //Common code to show fields.
        function showFieldsForEditFlagGet() {
            // Show fields
            $("#dvLiabilityExists").show("slow");
            $("#tdPayorNameExpenditurePayments").show("slow");
            $("#tdCountryContributionChk").show("slow");
            $("#tdCountryContributionTxt").show("slow");
            $("#divStreetAddress").show("slow");
            $("#divCity").show("slow");
            $("#divState").show("slow");
            $("#divZip5").show("slow");
            $("#tdPurposeCodeExpenditurePayments").show("slow");
            $("#tdMethodExpenditurePayments").show("slow");
            $("#tdCheck").show("slow");
            $("#dvLiabilityxpenditurePayments").show("slow");
            $("#dvSubcontractorExpenditurePayments").show("slow");
            $("#lstLiabilityExists").prop("disabled", true);
            $("#divSuppOrOpps").show("slow");
        }

        //==============================================================================================================================================
        // EDIT COMMON
        // ---------------------------------------------------------------------------------------------------------------------------------------------
        // Edit from Other Schedule functionality
        if (sessionStorage.getItem("EditFlag") != null) {
            if (sessionStorage.getItem("EditFlag").toString() == "True") {
                setTimeout(
                    function () {
                        $("#lstTransactionType option").each(function () {
                            if ($(this).val() == sessionStorage.getItem("ScheduleId").toString()) {
                                //$(this).attr('selected', 'selected');
                                $(this).prop("selected", true);
                            }
                        });

                        // BIND COMMON SESSION VARIABLE.
                        sessionStorage.setItem("TransactionType", sessionStorage.getItem("ScheduleId").toString());

                        // Hide Error Messages.//////////////////
                        $("#dvExplLiabilityError").hide();
                        $("#dvErrorDateRcvd").hide();
                        $("#txtCurrentDate").removeClass("ui-state-error");
                        $("#dvErrorContrCode").hide();
                        $("#txtPayeeName").removeClass("ui-state-error");
                        $("#divErrorStreetName").hide();
                        $("#txtStreetName").removeClass("ui-state-error");
                        $("#divErrorCity").hide();
                        $("#txtCity").removeClass("ui-state-error");
                        $("#divErrorState").hide();
                        $("#txtState").removeClass("ui-state-error");
                        $("#divErrorZip5").hide();
                        $("#txtZipCode").removeClass("ui-state-error");
                        $("#dvErrorCheck").hide();
                        $("#txtCheckExpenditurePayments").removeClass("ui-state-error");
                        $("#dvErrorAmount").hide();
                        $("#txtAmtExpenditurePayments").removeClass("ui-state-error");
                        $("#dvErrorExplanation").hide();
                        $("#txtExplanationSchedF").removeClass("ui-state-error");
                        $("#dvErrorOriginalAmount").hide();
                        $("#txtOriginalAmount").removeClass("ui-state-error");
                        // Hide Error Messages.//////////////////

                        // Disable on UPdate
                        $("#lstSubcontractor").prop("disabled", true);
                        $("#lstLiability").prop("disabled", true);
                        $("#lstItemized").prop("disabled", true);
                        //$("#lstMethod").prop("disabled", true);
                        //$("#txtCheckExpenditurePayments").prop("disabled", true);
                        $("#lstDateIncurred").prop("disabled", true);

                        // OPEN DIALOG BOX.
                        dialog_Sched_F.dialog("open");

                        $.post("@Url.Content("~/_UC_GridCommonControl/GetEditTransactionData/")", {
                            strTransNumber: bUtilSanitizeString(sessionStorage.getItem("TransNumberEdit")).toString()
                        }, function (resultsEditData) {
                            $.each(resultsEditData, function (i, item) {

                                sessionStorage.setItem("FilingTransId", item.TransNumber.toString());
                                sessionStorage.setItem("FilingSchedId", item.FilingSchedId.toString());
                                sessionStorage.setItem("FilingEntityId", item.FilingEntityId.toString());
                                sessionStorage.setItem("LibFlngEntyId", item.FilingEntityId.toString());
                                sessionStorage.setItem("flagUpdate", "true");
                                sessionStorage.setItem("ReimbursementDetails", "Yes");
                                if (item.LoanLiablityNumber != null) {
                                    sessionStorage.setItem("LoanLiabNumber", item.LoanLiablityNumber.toString());
                                } else {
                                    sessionStorage.setItem("LoanLiabNumber", "");
                                }
                                sessionStorage.setItem("UpdateFlagSchedF", "Yes");

                                $("#txtDateRcvd1").hide();
                                $("#txtCurrentDate").select();

                                $("#dvLiability").hide();
                                $("#dvExpPayments").show();

                                $("#txtCurrentDate").removeClass('watermark');

                                $("#lstItemized")[0].selectedIndex = 0;

                                $("#lstItemized option").each(function () {
                                    if ($(this).text() == item.RItemized.toString()) {
                                        //$(this).attr('selected', 'selected');
                                        $(this).prop("selected", true);
                                    }
                                });

                                if (item.RLiability.toString() != null || item.RLiability.toString() != "") {
                                    $("#lstLiability option").each(function () {
                                        if ($(this).val() == item.RLiability.toString()) {
                                            //$(this).attr('selected', 'selected');
                                            $(this).prop("selected", true);
                                        }
                                    });
                                }

                                if (item.RSubcontractor.toString() != null || item.RSubcontractor.toString() != "") {
                                    $("#lstSubcontractor option").each(function () {
                                        if ($(this).val() == item.RSubcontractor.toString()) {
                                            //$(this).attr('selected', 'selected');
                                            $(this).prop("selected", true);
                                        }
                                    });
                                    sessionStorage.setItem("SubcontractorValue", item.RSubcontractor.toString());
                                }

                                if (@Session["COMM_TYPE_ID"] == "19") {
                                    $("#divSuppOrOpps").show();
                                    if (item.RIESupported.toString() != null || item.RLiability.toString() != "") {
                                        $("#lstSuppOrOpps option").each(function () {
                                            if ($(this).val() == item.RIESupported.toString()) {
                                                $(this).prop("selected", true);
                                            }
                                        });
                                    }
                                }
                                else {
                                    $("#divSuppOrOpps").hide();
                                }

                                if (item.RItemized.toString() == "Yes") { // Itemized Transactions

                                    // Show fields
                                    showFieldsForEditFlagGet();

                                    $("#txtCurrentDate").val(item.SchedDate.toString());
                                    $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
                                    if (item.SchedDate.toString() != "" || item.SchedDate.toString() != null) {
                                        var MyDate = new Date($("#txtCurrentDate").val().toString());
                                        var MyDateString;
                                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                                            + MyDate.getFullYear();
                                        $("#txtCurrentDate").val("");
                                        $("#txtCurrentDate").val(MyDateString);
                                        $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
                                    }
                                    $("#txtPayeeName").val(item.FilingEntityName.toString());
                                    $("#txtStreetName").val(item.FilingStreetName.toString());
                                    $("#txtCity").val(item.FilingCity.toString());
                                    $("#txtState").val(item.FilingState.toString());
                                    $("#txtZipCode").val(item.FilingZip.toString());
                                    if (item.FilingZip.toString() != "") {
                                        $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                    }
                                    else {
                                        $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                        if (item.FilingCountry.toString() == "United States") {
                                            $("#txtZipCode").blur();
                                        }
                                    }
                                    /// Country
                                    $("#txtCountry").val(item.FilingCountry.toString());
                                    if (item.FilingCountry.toString() == "United States") {
                                        $("#chkCountry").prop('checked', false);
                                        $("#txtCountry").prop("disabled", true);
                                        $("#txtState").prop('maxLength', '2');
                                    }
                                    else { // Other Country
                                        $("#chkCountry").prop('checked', true);
                                        $("#txtCountry").prop("disabled", false);
                                        $("#txtState").prop('maxLength', '30');
                                        $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                        $m('#txtZipCode').attr("placeholder", "");
                                    }
                                    if (item.PaymentTypeId.toString() == "1") {
                                        $("#tdCheck").show();
                                        $("#txtCheckExpenditurePayments").val(item.PayNumber.toString());
                                    }
                                    else {
                                        $("#tdCheck").hide();
                                    }
                                    var amount = item.OriginalAmount.toString();
                                    sessionStorage.setItem("LiabilityExpAmt", amount);
                                    $("#txtAmtExpenditurePayments").val(amount.toString());
                                    if (item.OriginalAmount.toString() != "") {
                                        $("#txtAmtExpenditurePayments").removeClass("watermarkHTMLTextBox");
                                    }
                                    sessionStorage.setItem("AmountLiabilityPay", amount);
                                    $("#txtExplanationSchedF").val(item.TransExplanation.toString());

                                    $("#lstPurposeCode option").each(function () {
                                        if ($(this).text() == item.PurposeCodeDesc.toString()) {
                                            $(this).prop("selected", true);
                                        }
                                    });

                                    $("#lstMethod option").each(function () {
                                        if ($(this).text() == item.PaymentTypeDesc.toString()) {
                                            //$(this).attr('selected', 'selected');
                                            $(this).prop("selected", true);
                                        }
                                    });

                                    if (@Session["COMM_TYPE_ID"] == "19") {
                                        $("#divSuppOrOpps").show();
                                        $m("#lstSuppOrOpps option").each(function () {
                                            if ($(this).text() == data[59].toString()) {
                                                $(this).prop('selected', true).trigger('change');
                                            }
                                        });
                                    }
                                    else {
                                        $("#divSuppOrOpps").hide();
                                    }

                                    // PURPOSE CODE.
                                    if (item.RSubcontractor.toString() == "Y") {
                                        // Bind Purpose Code Data.
                                        var options = {};
                                        options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodesSubcontractor/")";
                                        options.type = "POST";
                                        options.data = null;
                                        options.dataType = "json";
                                        options.contentType = "application/json";
                                        options.success = function (resultsMethod) {
                                            $("#lstPurposeCode").empty();
                                            $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                                            for (var i = 0; i < resultsMethod.length; i++) {
                                                $("#lstPurposeCode").append("<option value='" + resultsMethod[i].Value + "'>" + resultsMethod[i].Text + "</option>");
                                            }
                                            // Set Method
                                            $m("#lstPurposeCode option")
                                                .filter(function () { return $m(this).text() == item.PurposeCodeDesc.toString(); })
                                                .attr("selected", "selected");

                                            // PURPOSE CODE WILL BE DISABLE ONLY..
                                            // IF REIMBURSEMENT OR CREDIT CARD PAYMENT..
                                            // IF OTHER THAN ABOVE THEN IT WILL ENABLE.
                                            // AS PER DISCUSSION ON 06/20/2019 WITH USER HAS CHANGED.
                                            if (item.PurposeCodeDesc.toString() == "Reimbursement" || item.PurposeCodeDesc.toString() == "Credit Card Payment") {
                                                $("#lstPurposeCode").prop("disabled", true);
                                            }
                                            else {
                                                $("#lstPurposeCode").prop("disabled", false);
                                            }
                                        };
                                        options.error = function () {
                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                        };
                                        $.ajax(options);
                                    }
                                    else {
                                        // Bind Purpose Code Data.
                                        var options = {};
                                        options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeData/")";
                                        options.type = "POST";
                                        options.data = null;
                                        options.dataType = "json";
                                        options.contentType = "application/json";
                                        options.success = function (resultsMethod) {
                                            $("#lstPurposeCode").empty();
                                            $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                                            for (var i = 0; i < resultsMethod.length; i++) {
                                                $("#lstPurposeCode").append("<option value='" + resultsMethod[i].Value + "'>" + resultsMethod[i].Text + "</option>");
                                            }
                                            // Set Method
                                            $m("#lstPurposeCode option")
                                                .filter(function () { return $m(this).text() == item.PurposeCodeDesc.toString(); })
                                                .attr("selected", "selected");

                                            // PURPOSE CODE WILL BE DISABLE ONLY..
                                            // IF REIMBURSEMENT OR CREDIT CARD PAYMENT..
                                            // IF OTHER THAN ABOVE THEN IT WILL ENABLE.
                                            // AS PER DISCUSSION ON 06/20/2019 WITH USER HAS CHANGED.
                                            if (item.PurposeCodeDesc.toString() == "Reimbursement" || item.PurposeCodeDesc.toString() == "Credit Card Payment") {
                                                $("#lstPurposeCode").prop("disabled", true);
                                            }
                                            else {
                                                $("#lstPurposeCode").prop("disabled", false);
                                            }
                                        };
                                        options.error = function () {
                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                        };
                                        $.ajax(options);
                                    }

                                    // METHOD.
                                    if (item.PaymentTypeId.toString() == "7") {
                                        $("#lblExplanation").text("* Explanation");
                                    }


                                    // PURPOSE CODE.
                                    if (item.PurposeCodeDesc.toString() == "Other: Must Provide Explanation") {
                                        $("#lblExplanation").text("* Explanation");
                                    }
                                    else if (item.PurposeCodeDesc.toString() == "Contribution Refund: Must Provide Explanation") {
                                        $("#lblExplanation").text("* Explanation");
                                    }

                                    if (item.RLiability.toString() == "Y") {

                                        // ON UPDATE LIABILITY ALWAY EXIST BECAUSE ON UPDATING LIABILITY MEANS ALREADY EXISTS.
                                        $("#lstLiabilityExists option").each(function () {
                                            if ($(this).text() == "Yes") {
                                                //$(this).attr('selected', 'selected');
                                                $(this).prop("selected", true);
                                            }
                                        });
                                        // ON UPDATE LIABILITY ALWAY EXIST BECAUSE ON UPDATING LIABILITY MEANS ALREADY EXISTS.

                                        $("#dvDateIncurred").show();
                                        $("#dvOutstandingAmt").show();

                                        // HIDE PAYEE NAME FOR EXISTING LIABILITY UPDATE.
                                        $("#txtPayeeName").prop("disabled", true);

                                        $("#lstLiability")[0].selectedIndex = 1;

                                        $("#divShowLiability").hide();
                                        $("#divGridLiability").hide();

                                        // Bind Date Incurred Data.
                                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetDateIncurredUpdate/")", {
                                            strTransNumber: item.TransNumber.toString()
                                        }, function (results) {
                                            $("#lstDateIncurred").empty();
                                            for (var i = 0; i < results.length; i++) {
                                                $("#lstDateIncurred").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                                            }

                                            // Get the Outstanding Amount.
                                            $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetOutstandingAmount/")", {
                                                strFlngEntityId: item.FilingEntityId.toString(),
                                                strUpdateStatusVal: "Y",
                                                strSchedFAmt: "",
                                                strFilingTransId: item.TransNumber.toString()
                                            }, function (resultOwedAmt) {
                                                $("#txtOutstandingAmt").val(resultOwedAmt.toString());
                                                sessionStorage.setItem("UpdateOwedAmount", resultOwedAmt.toString());
                                            });

                                        });

                                        // Get Liability Data
                                        $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetLiabilityData/")", {
                                            strTransNumber: item.TransNumber.toString()
                                        }, function (results) {
                                            $.each(results, function (i, item) {
                                                $("#txtCreditorName").val(item.CreditorName.toString());
                                                sessionStorage.setItem("OriginalAmount", item.OriginalAmount.toString());
                                                if (item.OutstandingAmount.toString() != "") {
                                                    $("#txtOutstandingAmt").removeClass("watermarkHTMLTextBox");
                                                }
                                                $("#txtLiabExplanation").val(item.LiabilityExplanation.toString());
                                            });
                                        });

                                        $("#txtLiabStreetAddress").val(item.FilingStreetName.toString());
                                        $("#txtLiabCity").val(item.FilingCity.toString());
                                        $("#txtLiabState").val(item.FilingState.toString());
                                        $("#txtLiabZipCode").val(item.FilingZip.toString());

                                    }
                                    else {
                                        $("#dvDateIncurred").hide();
                                        $("#dvOutstandingAmt").hide();
                                    }
                                }
                                else { // Unitemized Transactions


                                    // Hide fields
                                    hideFieldsForEditFlagGet();

                                    $("#txtCurrentDate").val(item.SchedDate.toString());

                                    var amount = item.OriginalAmount.toString();
                                    $("#txtAmtExpenditurePayments").val(amount.toString());
                                    if (item.OriginalAmount.toString() != "") {
                                        $("#txtAmtExpenditurePayments").removeClass("watermarkHTMLTextBox");
                                    }
                                    $("#txtExplanationSchedF").val(item.TransExplanation.toString());
                                }

                                if ($("#txtCurrentDate").val().toString() != "MM/DD/YYYY") {
                                    var MyDate = new Date($("#txtCurrentDate").val().toString());
                                    var MyDateString;
                                    MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                        + ('0' + MyDate.getDate()).slice(-2) + '/'
                                        + MyDate.getFullYear();
                                    $("#txtCurrentDate").val("");
                                    $("#txtCurrentDate").val(MyDateString);
                                }

                                $(".jqueryClassSelectorForLblAmount").text("* Amount $"); //ADDED DEFECT: 3556 FIX. ON 05.19.2021
                                $("#dvOriginalAmtTxt").hide(); //ADDED DEFECT: 3556 FIX. ON 05.19.2021

                                // Common Code
                                sessionStorage.setItem("EditFlag", "False");
                            });
                        });
                    }, 3000);
            }
        }
        // ---------------------------------------------------------------------------------------------------------------------------------------------
        // EDIT COMMON
        //==============================================================================================================================================

        ///////////////////////////////////////////////////////////////////////////////////////////////////////
        // Edit a Record on All Transactions Grids Data.
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_edit_Sched_F', function (e) {
            e.preventDefault();

            var data = tableFilingTransactions.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    // HIDE THE LIABILITY DETAILS GRIDS.
                    $("#divLiabilityDetailsGrid").hide();

                    if (data[1].toString() == "6") { // Schedule F

                        // CLEAR DETAILS GRID.
                        $("#divShowSubcontroctor").hide();
                        $("#divShowReimbursement").hide();
                        $("#divShowCreditCardPayment").hide();
                        $("#divShowAllocation").hide();

                        $m("label[for=txtCurrentDate]").text('');
                        $m("#txtCurrentDate").removeClass("error");

                        $m("label[for=txtAmtExpenditurePayments]").text('');
                        $m("#txtAmtExpenditurePayments").removeClass("error");

                        // Disable on UPdate
                        $("#lstSubcontractor").prop("disabled", true);
                        $("#lstLiability").prop("disabled", true);
                        $("#lstItemized").prop("disabled", true);
                        $("#lstDateIncurred").prop("disabled", true);
                        $("#txtPayeeName").prop("disabled", false);

                        sessionStorage.setItem("LoanLiabNumber", data[41].toString());
                        sessionStorage.setItem("FilingTransId", data[42].toString());
                        sessionStorage.setItem("FilingSchedId", data[1].toString());
                        sessionStorage.setItem("FilingEntityId", data[2].toString());
                        sessionStorage.setItem("LibFlngEntyId", data[2].toString());
                        sessionStorage.setItem("flagUpdate", "true");
                        sessionStorage.setItem("ReimbursementDetails", "Yes");

                        sessionStorage.setItem("AmountLiabilityPay", "");

                        sessionStorage.setItem("UpdateFlagSchedF", "Yes");

                        $("#txtDateRcvd1").hide();

                        $("#dvLiability").hide();
                        $("#dvExpPayments").show();

                        // Liability
                        if (data[6].toString() != null || data[6].toString() != "") {
                            if (data[6].toString() == "Y") {
                                $("#lstLiability")[0].selectedIndex = 1;
                            }
                            else {
                                $("#lstLiability")[0].selectedIndex = 0;
                            }
                        }

                        if (data[10].toString() != "") {
                            $m("label[for=txtCurrentDate]").text('');
                            $m("#txtCurrentDate").removeClass("error");
                        }

                        if (data[24].toString() != "") {
                            $m("label[for=txtAmtExpenditurePayments]").text('');
                            $m("#txtAmtExpenditurePayments").removeClass("error");
                        }

                        if (data[13].toString() != "") {
                            $m("label[for=txtPayeeName]").text('');
                            $m("#txtPayeeName").removeClass("error");
                        }

                        if (data[29].toString() != "") {
                            $m("label[for=lstPurposeCode]").text('');
                            $m("#lstPurposeCode").removeClass("error");
                        }

                        // CLEAR ADDRESS ERRORS.
                        $m("label[for=txtCountry]").text('');
                        $m("#txtCountry").removeClass("error");
                        $m("label[for=txtStreetName]").text('');
                        $m("#txtStreetName").removeClass("error");
                        $m("label[for=txtCity]").text('');
                        $m("#txtCity").removeClass("error");
                        $m("label[for=txtState]").text('');
                        $m("#txtState").removeClass("error");
                        $m("label[for=txtZipCode]").text('');
                        $m("#txtZipCode").removeClass("error");
                        // CLEAR ADDRESS ERRORS.
                        // EXPLANATION
                        $m("label[for=txtExplanationSchedF]").text('');
                        $m("#txtExplanationSchedF").removeClass("error");

                        // Subcontractor
                        if (data[7].toString() != null || data[7].toString() != "") {
                            if (data[7].toString() == "Y") {
                                $("#lstSubcontractor")[0].selectedIndex = 1;
                            }
                            else {
                                $("#lstSubcontractor")[0].selectedIndex = 0;
                            }
                            sessionStorage.setItem("SubcontractorValue", data[7].toString());
                        }

                        if (data[37].toString() == "Yes") { // Itemized Transactions

                            $("#lstItemized")[0].selectedIndex = 0;

                            // Show fields
                            showFieldsForEditFlagGet();

                            $("#txtCurrentDate").val(data[10].toString());
                            $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
                            if (data[10].toString() != "" || data[10].toString() != null) {
                                var MyDate = new Date($("#txtCurrentDate").val().toString());
                                var MyDateString;
                                MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                    + ('0' + MyDate.getDate()).slice(-2) + '/'
                                    + MyDate.getFullYear();
                                $("#txtCurrentDate").val("");
                                $("#txtCurrentDate").val(MyDateString);
                                $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtPayeeName").val(data[13].toString());
                            $("#txtStreetName").val(data[18].toString());
                            $("#txtCity").val(data[19].toString());
                            $("#txtState").val(data[20].toString());
                            $("#txtZipCode").val(data[21].toString());
                            $("#txtCountry").val(data[17].toString());
                            if (data[17].toString() == "United States") {
                                $("#chkCountry").prop('checked', false);
                                $("#txtCountry").prop("disabled", true);
                                $("#txtState").prop('maxLength', '2');
                            }
                            else { // Other Country
                                $("#chkCountry").prop('checked', true);
                                $("#txtCountry").prop("disabled", false);
                                $("#txtState").prop('maxLength', '30');
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                                $m('#txtZipCode').attr("placeholder", "");
                            }
                            if (data[21].toString() != "") {
                                $("#txtZipCode").removeClass("watermarkHTMLTextBox");
                            }
                            else {
                                $("#txtZipCode").addClass("watermarkHTMLTextBox");
                                if (data[17].toString() == "United States") {
                                    $("#txtZipCode").blur();
                                }
                            }
                            if (data[5].toString() == "1") {
                                $("#tdCheck").show();
                                $("#txtCheckExpenditurePayments").val(data[23].toString());
                            }
                            else {
                                $("#tdCheck").hide();
                            }
                            var amount = data[24].toString();
                            sessionStorage.setItem("LiabilityExpAmt", amount);
                            $("#txtAmtExpenditurePayments").val(amount.toString());
                            if ($("#txtAmtExpenditurePayments").val().toString() != "" || $("#txtAmtExpenditurePayments").val().toString() != "999999999.99") {
                                $("#txtAmtExpenditurePayments").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtExplanationSchedF").val(data[36].toString());

                            // Put Amount is session before changes.
                            sessionStorage.setItem("AmountLiabilityPay", data[24].toString());

                            if (@Session["COMM_TYPE_ID"] == "19") {
                                $("#divSuppOrOpps").show();
                                $m("#lstSuppOrOpps option").each(function () {
                                    if ($(this).text() == data[59].toString()) {
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                            }
                            else {
                                $("#divSuppOrOpps").hide();
                            }

                            // METHOD.
                            if (data[5].toString() == "7") {
                                $("#lblExplanation").text("* Explanation");
                            }

                            // PURPOSE CODE.
                            if (data[29].toString() == "Other: Must Provide Explanation") {
                                $("#lblExplanation").text("* Explanation");
                            }
                            else if (data[29].toString() == "Contribution Refund: Must Provide Explanation") {
                                $("#lblExplanation").text("* Explanation");
                            }

                            // Bind Method Data
                            var options = {};
                            //options.url = "../ContributionsCandIndFamily/GetContributorTypeCodeSchedC";
                            options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPaymentMethodData/")";
                            options.type = "POST";
                            options.data = null;
                            options.dataType = "json";
                            options.contentType = "application/json";
                            options.success = function (resultsMethod) {
                                $("#lstMethod").empty();
                                for (var i = 0; i < resultsMethod.length; i++) {
                                    $("#lstMethod").append("<option value='" + resultsMethod[i].Value + "'>" + resultsMethod[i].Text + "</option>");
                                }
                                // Set Method
                                if (data[5].toString() != null || data[5].toString() != "") {
                                    $m("#lstMethod option")
                                        .filter(function () { return $m(this).val() == data[5].toString(); })
                                        .attr("selected", "selected");
                                }
                            };
                            options.error = function () {
                                ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                            };
                            $.ajax(options);

                            if (data[7].toString() == "Y") {
                                // Bind Purpose Code Data.
                                var options = {};
                                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodesSubcontractor/")";
                                options.type = "POST";
                                options.data = null;
                                options.dataType = "json";
                                options.contentType = "application/json";
                                options.success = function (resultsMethod) {
                                    $("#lstPurposeCode").empty();
                                    $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                                    for (var i = 0; i < resultsMethod.length; i++) {
                                        $("#lstPurposeCode").append("<option value='" + resultsMethod[i].Value + "'>" + resultsMethod[i].Text + "</option>");
                                    }
                                    // Set Method
                                    if (data[29].toString() != null || data[29].toString() != "") {
                                        $m("#lstPurposeCode option")
                                            .filter(function () { return $m(this).text() == data[29].toString(); })
                                            .attr("selected", "selected");

                                        // PURPOSE CODE WILL BE DISABLE ONLY..
                                        // IF REIMBURSEMENT OR CREDIT CARD PAYMENT..
                                        // IF OTHER THAN ABOVE THEN IT WILL ENABLE.
                                        // AS PER DISCUSSION ON 06/20/2019 WITH USER HAS CHANGED.
                                        if (data[29].toString() == "Reimbursement" || data[29].toString() == "Credit Card Payment") {
                                            $("#lstPurposeCode").prop("disabled", true);
                                        }
                                        else {
                                            $("#lstPurposeCode").prop("disabled", false);
                                        }
                                    }
                                    else {
                                        $("#lstPurposeCode").prop("disabled", false);
                                    }
                                };
                                options.error = function () {
                                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                };
                                $.ajax(options);
                            }
                            else {
                                // Bind Purpose Code Data.
                                var options = {};
                                options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/GetPurposeCodeData/")";
                                options.type = "POST";
                                options.data = null;
                                options.dataType = "json";
                                options.contentType = "application/json";
                                options.success = function (resultsMethod) {
                                    $("#lstPurposeCode").empty();
                                    $("#lstPurposeCode").append("<option value='" + '0' + "'>" + "- Select -" + "</option>");
                                    for (var i = 0; i < resultsMethod.length; i++) {
                                        $("#lstPurposeCode").append("<option value='" + resultsMethod[i].Value + "'>" + resultsMethod[i].Text + "</option>");
                                    }
                                    // Set Method
                                    if (data[29].toString() != null || data[29].toString() != "") {
                                        $m("#lstPurposeCode option")
                                            .filter(function () { return $m(this).text() == data[29].toString(); })
                                            .attr("selected", "selected");

                                        // PURPOSE CODE WILL BE DISABLE ONLY..
                                        // IF REIMBURSEMENT OR CREDIT CARD PAYMENT..
                                        // IF OTHER THAN ABOVE THEN IT WILL ENABLE.
                                        // AS PER DISCUSSION ON 06/20/2019 WITH USER HAS CHANGED.
                                        if (data[29].toString() == "Reimbursement" || data[29].toString() == "Credit Card Payment") {
                                            $("#lstPurposeCode").prop("disabled", true);
                                        }
                                        else {
                                            $("#lstPurposeCode").prop("disabled", false);
                                        }
                                    }
                                    else {
                                        $("#lstPurposeCode").prop("disabled", false);
                                    }
                                };
                                options.error = function () {
                                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                                };
                                $.ajax(options);
                            }

                            if (data[6].toString() == "Y") { // OUTSTANDING LIABILITY UPDATED.

                                // ON UPDATE LIABILITY ALWAY EXIST BECAUSE ON UPDATING LIABILITY MEANS ALREADY EXISTS.
                                $("#lstLiabilityExists")[0].selectedIndex = 1;
                                // ON UPDATE LIABILITY ALWAY EXIST BECAUSE ON UPDATING LIABILITY MEANS ALREADY EXISTS.

                                $("#dvDateIncurred").show();
                                $("#dvOutstandingAmt").show();

                                // HIDE PAYEE NAME FOR EXISTING LIABILITY UPDATE.
                                $("#txtPayeeName").prop("disabled", true);

                                $("#lstLiability")[0].selectedIndex = 1;

                                $("#divShowLiability").hide();
                                $("#divGridLiability").hide();

                                // Bind Date Incurred Data.
                                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetDateIncurredUpdate/")", {
                                    strTransNumber: data[42].toString()
                                }, function (results) {
                                    $("#lstDateIncurred").empty();
                                    for (var i = 0; i < results.length; i++) {
                                        $("#lstDateIncurred").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                                    }

                                    // Get the Outstanding Amount.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetOutstandingAmount/")", {
                                        strFlngEntityId: data[2].toString(),
                                        strUpdateStatusVal: "Y",
                                        strSchedFAmt: "",
                                        strFilingTransId: data[42].toString()
                                    }, function (resultOwedAmt) {
                                        $("#txtOutstandingAmt").val(resultOwedAmt.toString());
                                        sessionStorage.setItem("UpdateOwedAmount", resultOwedAmt.toString());
                                        $("#divLoading").hide();
                                        // OPEND DIAGLOG BOX HERE.
                                        dialog_Sched_F.dialog("open");
                                    }).fail(function () {
                                        $("#divLoading").hide();// GetOutstandingAmount failed.
                                    });
                                }).fail(function () {
                                    $("#divLoading").hide();// GetDateIncurredUpdate failed.
                                });

                                // Get Liability Data
                                $.post("@Url.Content("~/ExpenditurePaymentsSchedF/GetLiabilityData/")", {
                                    strTransNumber: data[42].toString()
                                }, function (results) {
                                    $.each(results, function (i, item) {
                                        $("#txtCreditorName").val(item.CreditorName.toString());
                                        sessionStorage.setItem("OriginalAmount", item.OriginalAmount.toString());
                                        $("#txtLiabExplanation").val(item.LiabilityExplanation.toString());
                                    });
                                });

                                $("#txtLiabStreetAddress").val(data[17].toString());
                                $("#txtLiabCity").val(data[18].toString());
                                $("#txtLiabState").val(data[19].toString());
                                $("#txtLiabZipCode").val(data[20].toString());

                            } else {
                                $("#dvDateIncurred").hide();
                                $("#dvOutstandingAmt").hide();

                                // ENABLE PAYEE NAME FOR OTHER THAN LIABILITY EXISTS UPDATE.
                                $("#txtPayeeName").prop("disabled", false);
                                $("#divLoading").hide();
                                // OPEN DIALOG BOX HERE.
                                dialog_Sched_F.dialog("open");
                            }
                        } else { // Unitemized Transactions

                            $("#lstItemized")[0].selectedIndex = 1;

                            // Hide fields
                            hideFieldsForEditFlagGet();

                            $("#lblExplanation").text("Explanation");

                            $(".jqueryClassSelectorForLblAmount").text("* Amount $"); //ADDED DEFECT: 3556 FIX. ON 05.19.2021
                            $("#dvOriginalAmtTxt").hide(); //ADDED DEFECT: 3556 FIX. ON 05.19.2021

                            $("#txtCurrentDate").val(data[10].toString());
                            $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
                            if (data[10].toString() != "" || data[10].toString() != null) {
                                var MyDate = new Date($("#txtCurrentDate").val().toString());
                                var MyDateString;
                                MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                    + ('0' + MyDate.getDate()).slice(-2) + '/'
                                    + MyDate.getFullYear();
                                $("#txtCurrentDate").val("");
                                $("#txtCurrentDate").val(MyDateString);
                                $("#txtCurrentDate").removeClass("watermarkHTMLTextBox");
                            }

                            var amount = data[24].toString();
                            $("#txtAmtExpenditurePayments").val(amount.toString());
                            if ($("#txtAmtExpenditurePayments").val().toString() != "" || $("#txtAmtExpenditurePayments").val().toString() != "999999999.99") {
                                $("#txtAmtExpenditurePayments").removeClass("watermarkHTMLTextBox");
                            }
                            $("#txtExplanationSchedF").val(data[36].toString());
                            $("#divLoading").hide();
                            // OPEN DIALOG BOX HERE.
                            dialog_Sched_F.dialog("open");
                        }

                        $("#txtCurrentDate").select();

                    } // Other Schedules
                    else if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17", "18", "19", "20", "21"].includes(data[1].toString())) {
                        //Common code to determine redirect url and set session varialbes. Also hides $("#divLoading") on fail.
                        //Uses window.location.href
                        appCommonEFS_DetermineScheduleRedirect(data[1].toString(), data[42].toString());
                    }
                }
                else {
                    //resultEditFlag != "TRUE"
                    $("#divLoading").hide();// GetEditFlag failed.
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });

        });
        // Edit a Record on All Transactions Grids Data.
        ///////////////////////////////////////////////////////////////////////////////////////////////////////

        // Delete a record FILING TRANSACTIONS.
        $m('#gridFilingTransactions tbody').on('click', 'a.editor_remove_Sched_F', function (e) {
            event.preventDefault();

            // HIDE ALL THE DETIALS GRIDS.
            // SUBCONTRACTOR
            $("#divShowSubcontroctor").hide();
            // REIMBURSEMENT DETAILS
            $("#divShowReimbursement").hide();
            // CREDIT CARD ITEMIZATION
            $("#divShowCreditCardPayment").hide();
            // HIDE THE LIABILITY DETAILS GRIDS.
            $("#divLiabilityDetailsGrid").hide();
            $("#divShowAllocation").hide();

            var dataTrans = tableFilingTransactions.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    $.post("@Url.Content("~/_UC_GridCommonControl/GetDeleteFlag/")", {
                    }, function (resultDeleteFlag) {
                        if (resultDeleteFlag == "True") {
                            // LOAN RECEIVED DELETE CHECK.
                            $.post("@Url.Content("~/LoanReceivedSchedI/ValidateDelete_LoanReceived/")", {
                                loan_Lib_Number: dataTrans[41].toString(),
                            }, function (resultDeleteFlagSchedI) {

                                // CHECK THE VALIDATION IF ANY CONTRIBUTION REFUNDS (SCHEDULE 'M') EXISTS OR NOT.
                                // IF SCHEDULE 'M' EXISTS FOR EITHER SCHEDULE 'A', SCHEUDLE 'B', OR SCHEDULE 'C'...
                                // THEN SHOULD NOT DELETE UNTIL CHILD RECORDS DELETE.
                                $.post("@Url.Content("~/ContributionsCandIndFamily/ContributionsRefundSchedMExists/")", {
                                    strTransNumber: dataTrans[42].toString()
                                }, function (resultDelSchedABC) {

                                    // CHECK THE VALIDATION IF ANY EXPENDITURE REFUNDS (SCHEDULE 'L') EXISTS OR NOT.
                                    // IF SCHEDULE 'L' EXITS THEN SCHEDULE 'F' SHOULD NOT DELETE UNTLI CHILD DELETE ALL.
                                    $.post("@Url.Content("~/ExpenditurePaymentsSchedF/ExpenditureRefundSchedLExists/")", {
                                        strTransNumber: dataTrans[42].toString()
                                    }, function (resultDelSchedF) {
                                        var deleteData = {
                                            resultDeleteFlagSchedI: resultDeleteFlagSchedI,
                                            resultDelSchedABC: resultDelSchedABC,
                                            resultDelSchedF: resultDelSchedF
                                        }

                                        var resultsDelete = "Are you sure you want to delete this transaction?";
                                        var deleteURL = "";

                                        //Determine if you can
                                        var veredict = appCommonEFS_DetermineScheduleDelete(dataTrans, deleteData);
                                        if (!veredict || !bUtilIsObject(veredict)) {
                                            $("#divLoading").hide();
                                            return false;
                                        } else {
                                            var resultsDelete = veredict.alertMessageForOperation;
                                            var deleteURL = veredict.deleteURL;
                                        }

                                        // DELETE FUNCTIONALITY.
                                        $m('#modal_dialog').text(resultsDelete);
                                        $m("#modal_dialog").dialog({
                                            resizable: false,
                                            width: '400px',
                                            height: 'auto',
                                            bgiframe: false,
                                            closeOnEscape: false,
                                            open: function (event, ui) {
                                                $("#divLoading").hide();
                                                hideDialogXButton(this);
                                            },
                                            buttons: {
                                                "OK": function () {
                                                    $("#divLoading").show();
                                                    // Close Confirm Box.
                                                    $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                                    var options = {};
                                                    options.url = deleteURL;
                                                    options.type = "GET";
                                                    options.data = {
                                                        strLoanLiabNumberOrg: dataTrans[41].toString(),
                                                        strTransNumber: dataTrans[42].toString(),
                                                        strRLiability: dataTrans[6].toString()
                                                    };
                                                    options.dataType = "json";
                                                    options.contentType = "application/json";
                                                    options.success = function (results) {
                                                        window.status = "Transaction deleted successfully";
                                                        var doneFunction = function () {
                                                            $("#divLoading").hide();
                                                            ShowDialogBox('EFS', 'Transaction deleted successfully. The liability balance will automatically be adjusted on any subsequent disclosure reports with the add/edit/delete of this liability transaction. Make sure to submit all amended disclosure reports to show the liability balance accurately.', 'Ok', '');
                                                        }
                                                        // Refresh the Data on Grid...
                                                        GetAllTransactionTypesData(true, tableFilingTransactions, false, doneFunction);
                                                    };
                                                    options.error = function () {
                                                        $("#divLoading").hide();
                                                        ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                                    };
                                                    $.ajax(options);
                                                },
                                                "Cancel": function () {
                                                    // Close Confirm Box.
                                                    $m(this).dialog("close");
                                                }
                                            }
                                        });
                                    }).fail(function () {
                                        $("#divLoading").hide();//ExpenditureRefundSchedLExists failed
                                    });
                                }).fail(function () {
                                    $("#divLoading").hide();//ContributionsRefundSchedMExists failed
                                });
                            }).fail(function () {
                                $("#divLoading").hide();//ValidateDelete_LoanReceived failed
                            });
                        }
                        else {
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'The last transaction cannot be deleted.  To delete the Disclosure report, a deletion request must be submitted to cfinfo@elections.ny.gov', 'Ok', '');
                        }
                    }).fail(function () {
                        $("#divLoading").hide();//GetDeleteFlag failed
                    });
                }
                else {
                    //resultEditFlag != "TRUE"
                    $("#divLoading").hide();
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();//GetEditFlag failed
            });
        });

        // =====================================================================================================================================
        // LIABILITY DETAILS LINK SHOWS BELOW GRIDS.


        //==============================================================================================================================================
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //Bind Clear Click
        $(".clsCommonClear").bind('click', function () {
            $("#divGridMonetary").show();
            sessionStorage.setDataTable = "true";
            $("#divShowHideHelp").removeClass("clsShowHideHelpSec");
            $("#divShowHideHelp").addClass("clsShowHideHelpSecInMobileTablet");

            sessionStorage.setItem("FilerId", $("#txtFilerID option:selected").val());
            sessionStorage.setItem("CommitteeName", $("#txtCommitteeName option:selected").val());
            sessionStorage.setItem("ElectionCycle", $("#lstElectionCycle option:selected").val());
            sessionStorage.setItem("ElectionType", $("#lstElectionType option:selected").val());
            sessionStorage.setItem("ElectionDate", $("#lstElectionDate option:selected").val());
            sessionStorage.setItem("DisclosureType", $("#lstDisclosureType option:selected").val());
            sessionStorage.setItem("DisclosurePeriod", $("#lstDisclosurePeriod option:selected").val());
            sessionStorage.setItem("CutOffDate", $("#txtReportPeriodDatesFrom").val());
            if ($("#lstElectionType option:selected").val() == "6") {
                sessionStorage.setItem("FilingDate", $("#txtNewFilingDate").val());
            }
            else {
                sessionStorage.setItem("FilingDate", $("#txtReportPeriodDatesTo").val());
            }
            sessionStorage.setItem("TransactionType", $("#lstTransactionType option:selected").val());
            sessionStorage.setItem("lstResigTermType", $("#lstResigTermType option:selected").val());
            sessionStorage.setItem("lstFilingDate", $("#lstFilingDate option:selected").val());

            sessionStorage.setItem("TransactionTypeId", "true");

            var urlContrHome = "@Url.Content("~/ContributionsMonetary/ContributionsMonetary/")";

            window.location.href = urlContrHome;
        });
        // COMMON CODE FOR BUTTON CLEAR AND IT WILL GO TO MAIN PAGE CONTRIBUTION MONETARY.
        //==============================================================================================================================================


        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================
        // Grid Common Code ///////////////////////////////////////////////////
        //=================================================================================================================================================

        // CALL LOAD DATA FUNCTION
        LoadData();
        var tableFilingTransactions;
        // FUNCTION LOAD DATA
        function LoadData() {
            $("#divLoading").show();
            tableFilingTransactions = $m('#gridFilingTransactions').DataTable({
                "bProcessing": true,
                "responsive": true,
                "deferRender": true,
                "retrieve": true,
                "columnDefs": [
                    {
                        "targets": [0, 1, 2, 3, 4, 5, 6, 7, 38, 39, 41, 42, 43, 44],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "targets": [9],
                        "fnCreatedCell": function (cell) {
                            cell.setAttribute('aria-label', "Row Actions");
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    //Accessibility: Applies various Accessibility features to this dataTable.
                    makeDataTableAccessible($m('#gridFilingTransactions').DataTable());
                },
                "fnRowCallback": function (nRow, aaData, iDisplayIndex) {
                    var uniqueID = generateUniqueRowIdForFnRowCallback(iDisplayIndex, nRow);
                    var anchorString_editor_edit_Sched_F = '<a class="editor_edit_Sched_F" style="color:blue;" href="" target="_blank" id="lnkColumnData_' + uniqueID + '"><img src="../../Content/Images/Edit.png" title="Edit Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>'
                    var anchorString_editor_remove_Sched_F = '<a class="editor_remove_Sched_F" style="color:blue;" href="" target="_blank" id="lnkColumnData_Delete_' + uniqueID + '"><img src="../../Content/Images/Delete.png" title="Delete Row ' + iDisplayIndex + ' Data" style="background-repeat: no-repeat; "  /></a>';
                    var anchorString_editor_LiabilitySchedF = '<a class="editor_LiabilitySchedF lnkGird" href="" style="padding-left: 0.5em;">Liability Details</a>';
                    var anchorString_editor_LiabilitySchedF_Short = '<a class="editor_LiabilitySchedF lnkGird" href="">Liability Details</a>';
                    var anchorString_editor_ReimbDetailsSchedF = '<a class="editor_ReimbDetailsSchedF lnkGird" href="" style="padding-left: 0.24em;">Reimbursement Details</a>';
                    var anchorString_editor_CreditCardPaymentSchedF = '<a class="editor_CreditCardPaymentSchedF lnkGird" href="" style="padding-left: 0.24em;">Credit Card Itemization</a>';
                    var anchorString_editor_AmountAllocationSchedR = '<a class="editor_AmountAllocationSchedR lnkGird" href="" style="padding-left: 0.24em;">Amount Allocation</a>';
                    var anchorString_editor_AttributionSchedF = '<a class="editor_AttributionSchedF lnkGird" href="" style="padding-left: 0.5em;">Subcontractor</a>';
                    if (aaData[1] == "6") {
                        if (aaData[6] == "Y") {                            
                            if (aaData[29] == "Reimbursement") {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_LiabilitySchedF + '|' + anchorString_editor_ReimbDetailsSchedF + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_LiabilitySchedF + '|' + anchorString_editor_ReimbDetailsSchedF);
                                }
                            }
                            else if (aaData[29] == "Credit Card Payment") {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_LiabilitySchedF + '|' + anchorString_editor_CreditCardPaymentSchedF + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_LiabilitySchedF + '|' + anchorString_editor_CreditCardPaymentSchedF);
                                }
                                
                            }
                            else {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_LiabilitySchedF + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_LiabilitySchedF);
                                }
                            }
                        }
                        else if (aaData[7] == "Y") {
                            if (aaData[29] == "Credit Card Payment") {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_AttributionSchedF + '|' + anchorString_editor_CreditCardPaymentSchedF + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_AttributionSchedF + '|' + anchorString_editor_CreditCardPaymentSchedF);
                                }
                            }
                            else {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_AttributionSchedF + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_AttributionSchedF);
                                }
                            }
                        }
                        else {
                            if (aaData[29] == "Reimbursement") {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_ReimbDetailsSchedF + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_ReimbDetailsSchedF);
                                }
                            }
                            else if (aaData[29] == "Credit Card Payment") {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_CreditCardPaymentSchedF + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + anchorString_editor_CreditCardPaymentSchedF);
                                }
                            }
                            else {
                                if (aaData[59] == "Yes") {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F + '|' + anchorString_editor_AmountAllocationSchedR);
                                }
                                else {
                                    $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F);
                                }
                            }
                        }
                    }
                    else if (aaData[1] == "14" && (aaData[24] != aaData[25] || aaData[24] == aaData[25]) && aaData[6] == "Y") {
                        if (aaData[24] != aaData[25]) {
                            $m('td:eq(1)', nRow).html(anchorString_editor_LiabilitySchedF_Short);
                        }
                        else if (aaData[24] == aaData[25]) {
                            $m('td:eq(1)', nRow).html(anchorString_editor_LiabilitySchedF_Short);
                        }
                    }
                    else if (aaData[1] == "14" && aaData[6] != "Y") { // LOAN ORIGINAL OUTSTANDING TRANSACTIONS.
                        $m('td:eq(1)', nRow).html('');
                    }
                    else if (aaData[1] == "14" && aaData[6] == "Y") {
                        if (aaData[24] != aaData[25]) {
                            $m('td:eq(1)', nRow).html(anchorString_editor_LiabilitySchedF_Short);
                        }
                        else if (aaData[24] == aaData[25]) {
                            $m('td:eq(1)', nRow).html(anchorString_editor_LiabilitySchedF_Short);
                        }
                    }
                    else if (aaData[1] == "11") { // LIABILITY/LOANS FORGIVEN
                        $m('td:eq(1)', nRow).html(anchorString_editor_remove_Sched_F);
                    }
                    else {
                        if (aaData[1] != "15") {
                            $m('td:eq(1)', nRow).html(anchorString_editor_edit_Sched_F + anchorString_editor_remove_Sched_F);
                        }
                        else { // SCHEDULE 15 LEGACY DATA NOT EDIT NO ADD ONLY DELETE.
                            $m('td:eq(1)', nRow).html(anchorString_editor_remove_Sched_F);
                        }
                    }
                    return nRow;
                },
                "fnDrawCallback": function () {
                    $("#divLoading").hide();
                },
                "fnServerData": function (url, data, callback) {
                    //Refresh the Data on Grid.
                    GetAllTransactionTypesData(false, callback, false, false);
                }
            });
            tableFilingTransactions.columns.adjust().draw(true);
            $m('#gridFilingTransactions').DataTable().ajax.reload();
            if (@Session["COMM_TYPE_ID"] == "23") {
                tableFilingTransactions.column(46).visible(true);
                tableFilingTransactions.column(47).visible(true);
                tableFilingTransactions.column(48).visible(true);
                tableFilingTransactions.column(49).visible(true);
                tableFilingTransactions.column(50).visible(true);
                tableFilingTransactions.column(51).visible(true);
                tableFilingTransactions.column(52).visible(true);
                tableFilingTransactions.column(53).visible(true);
                tableFilingTransactions.column(54).visible(true);
            }
            else {
                tableFilingTransactions.column(46).visible(false);
                tableFilingTransactions.column(47).visible(false);
                tableFilingTransactions.column(48).visible(false);
                tableFilingTransactions.column(49).visible(false);
                tableFilingTransactions.column(50).visible(false);
                tableFilingTransactions.column(51).visible(false);
                tableFilingTransactions.column(52).visible(false);
                tableFilingTransactions.column(53).visible(false);
                tableFilingTransactions.column(54).visible(false);
            }

            if (@Session["COMM_TYPE_ID"] == "19") {
                tableFilingTransactions.column(55).visible(true);
            }
            else {
                tableFilingTransactions.column(55).visible(false);
            }

            tableFilingTransactions.columns.adjust().draw(false);
            tableFilingTransactions.order([40, 'desc']).draw();
            tableFilingTransactions.columns.adjust().responsive.recalc();
            $("#divLoading").show();

        } // END END END END >>>>>>>> END END END END >>>>>>>>

        //Common Code for Set Preferences - Start
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------
        $('#btnSetPreferences').click(function () {
            appCommonEFS_btnSetPrefrencesCommonCode($m("#ddlViewableColumn").multipleSelect("getSelects").toString(), tableFilingTransactions, "ddlViewableColumn", GetTableFilingTransactionsAjaxOptionsData());
        });

        //Commonly used values in this particular page.
        function GetTableFilingTransactionsAjaxOptionsData() {
            return {
                txtFilerID: $("#txtFilerID").val(),
                lstElectionCycle: $("#lstElectionCycle option:selected").val(),
                lstUCOfficeType: $("#lstUCOfficeType option:selected").val(),
                lstDisclosurePeriod: $("#lstDisclosurePeriod option:selected").val(),
                lstElectionType: $("#lstElectionType option:selected").val(),
                lstElectionDateId: $("#lstElectionDate option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }
        }
         /**
         * Common code for invoking GetAllTransactionTypesData from controller.
         * reloadAndRecalc { boolean } reloads and recalculates the table. When we reload we will display the "divLoading" image until the ajax reload call is completed. This was created for ALM Defect 707 where users were intertacting with the table while the "Processing..." text was still visible.
         * dataTableInstanceToReload { function } The referecne to the datatable we will reload in the success callback.
         * dataOverides { ajax data params } pass to overwrite data values when making ajax call.
         * doneFunction { function } A function to be called if the ajax call is completed.
         */
        function GetAllTransactionTypesData(reloadAndRecalc, dataTableInstanceToReload, dataOverides, doneFunction) {
            var callback = dataTableInstanceToReload ? dataTableInstanceToReload : tableFilingTransactions;
            //Determine what data to use.
            var optionsData = bUtilIsObject(dataOverides) ? dataOverides : GetTableFilingTransactionsAjaxOptionsData();
            appCommonEFS_GetAllTransactionTypesDataCommon(reloadAndRecalc, callback, optionsData, doneFunction);
        }

        $.post("@Url.Content("~/_UC_GridCommonControl/GetSortName/")", {
        }, function (results) {
            HideColumn(results.toString().split(","));
        });

        /**
         * Use to adjust visible columns.
         * param {array} results an array of column names to help determine which columns to show or hide.
         */
        function HideColumn(results) {
            var rules = {
                "indexesToStartHidden": [0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
                "indexesToAlwaysKeepUnhidden": [8, 9], //Will always unhide.
                "columnNamesToUnhide": results,//String to match.
                "columnNamesIndexMappings": appCommonEFS_GetGridColumnSettings("UC_GridCommonControl") //String in header, index to unhide
            }
            appCommonEFS_HideTableColumn(tableFilingTransactions, rules);
        }

        /**
         * Simplified code that micromanaged the validator plugin error labels for unknown reasons.
         * Appends label text to _validate elementys based on a list of custom errors returned from the server.
         * It won't do anyting to handle "AmmountError" keys but it will return true if it sees one in the list.
         * param {result.Errors} errorList
         * param {string } type - Determines the type of error label discrepancy pairings to use.
         * Suppported are "reinbursement", "cci", "base" and "subcontractor".
         * Replaces this type of code basically:
            for (var i = 0; i < results.Errors.length; i++) {
                if (results.Errors[i].Key == "txtPartAmt") {
                    $("#txtPartAmtSchedD_validate").append('<label for="txtPartAmtSchedD" class="error">' + results.Errors[i].Value + '</label>');
                }
                if (results.Errors[i].Key == "txtPartExplanationInKind") {
                    $("#txtPartExplanationInKind_validate").append('<label for="txtPartExplanationInKind" class="error">' + results.Errors[i].Value + '</label>');
                }
                if (results.Errors[i].Key == "AmountError") {
                    ShowDialogBox('EFS', 'Partnership Amount cannot be more than Outstanding Amount $' + parseFloat(expPartAmount).toFixed(2).toString(), 'Ok', '');
                }
            }
         */
        function AppendCustomErrorLabels(errorList, type) {
            //Define special error conditions
            var errorLabelDiscrepancies = false;
            switch (type) {
                case "reinbursement":
                    //Note the lstItemizedPart and txtPartExplanationInKind keys have the same values they. Appeared suspicious when I refactored them here. Almost like they were defined in error.
                    errorLabelDiscrepancies = new Map([
                        ["txtCurrentDate", "txtCurrentDateReimDetSchedF"], ["txtPartnerName", "txtDetailsPayeeNameReim"], ["txtCountryPartnership", "txtCountryReim"], ["txtPartStreetName", "txtStreetNameReim"], ["txtPartCity", "txtCityReim"],
                        ["txtPartState", "txtStateReim"], ["txtPartZip5", "txtZipCodeReim"], ["txtPartAmt", "txtAmtReim"],
                        ["txtPartExplanationInKind", "txtExplanationSchedQReim"],//The original code was updating the "txtExplanationSchedQReim" validate label for multiple errors. No reason was provided.
                        ["lstItemizedPart", "txtExplanationSchedQReim"]//The original code was updating the "txtExplanationSchedQReim" validate label for multiple errors. No reason was provided.
                    ]);
                    break;
                case "cci":
                    //Note the lstItemizedPart and txtPartExplanationInKind keys have the same values they. Appeared suspicious when I refactored them here. Almost like they were defined in error.
                    errorLabelDiscrepancies = new Map([
                        ["txtCurrentDate", "txtCurrentDateSchedQCCI"], ["txtPartnerName", "txtDetailsPayeeNameCCI"], ["txtCountryPartnership", "txtCountryCCI"], ["txtPartStreetName", "txtStreetNameCCI"], ["txtPartCity", "txtCityCCI"], ["txtPartState", "txtStateCCI"],
                        ["txtPartZip5", "txtZipCodeCCI"], ["txtPartAmt", "txtAmountCCI"],
                        ["txtPartExplanationInKind", "txtExplanationCCI"],//The original cod was updating the "txtExplanationCCI" validate label for multiple errors. No reason was provided.
                        ["lstItemizedPart", "txtExplanationCCI"]//The original code was updating the "txtExplanationCCI" validate label for multiple errors. No reason was provided.
                    ]);
                    break;
                case "subcontractor":
                    //Note the lstItemizedPart and txtPartExplanationInKind keys have the same values they. Appeared suspicious when I refactored them here. Almost like they were defined in error.
                    errorLabelDiscrepancies = new Map([
                        ["txtPartnerName", "txtSubcontractorName"], ["txtPartAmt", "txtPartAmtSchedF"],
                        ["txtPartExplanationInKind", "txtPartExplanationEP"],//The original code was updating the "txtPartExplanationEP" validate label for multiple errors. No reason was provided.
                        ["lstItemizedPart", "txtPartExplanationEP"]//The original code was updating the "txtPartExplanationEP" validate label for multiple errors. No reason was provided.
                    ]);
                    break;
                case "base":
                    errorLabelDiscrepancies = new Map([["txtPartnerShipName", "txtPayeeName"], ["txtCheck", "txtCheckExpenditurePayments"], ["txtAmt", "txtAmtExpenditurePayments"], ["txtExplanation", "txtExplanationSchedF"]]);
                    break;
                default:
                    console.warn("AppendCustomErrorLabels does not support type '"+ type +"'!");
                    break;
            }

            return appCommonEFS_AppendCustomErrorLabelsForAmmountError(errorList, errorLabelDiscrepancies);
        }

        //Common Code for Set Preferences - End
        //---------------------------------------------------------------------------------------------------------------------------------------
        //---------------------------------------------------------------------------------------------------------------------------------------

        // Schedule 'F' Form
        function ClearDialogBoxValidationSchedF() {

            // Clear Form Validation. Schedule 'F'
            var validator = $m("#DialogBoxSchedFForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFForm")[0].reset();   // clear out the form data

            // Set the default values for form.
            $("#txtCountry").val("United States");
            $("#txtCountry").prop("disabled", true);
            $("#chkCountry").prop('checked', false);
            $("#txtState").prop('maxLength', '2');

            // Set the default values for form.
            $("#lblExplanation").text("Explanation");

            // Set the default values for form.
            //$("#lstItemized").prop("disabled", false);
            if (@Session["COMM_TYPE_ID"] == "23") {
                $("#lstItemized").prop("disabled", true);
            }
            else {
                $("#lstItemized").prop("disabled", false);
            }
            $("#lstSubcontractor").prop("disabled", false);
            $("#lstLiability").prop("disabled", false);
            $("#lstLiabilityExists").prop("disabled", true);
            $("#lstPurposeCode").prop("disabled", false);

            // Set the default values for form.
            $("#lstItemized")[0].selectedIndex = 0;
            $("#lstSubcontractor")[0].selectedIndex = 0;
            $("#lstLiability")[0].selectedIndex = 0;
            $("#lstLiabilityExists")[0].selectedIndex = 0;
            $("#lstPurposeCode")[0].selectedIndex = 0;
            $("#lstMethod")[0].selectedIndex = 0;

            // Set the default values for form.
            $("#txtCurrentDate").blur();
            $("#txtZipCode").blur();
            $("#txtAmtExpenditurePayments").blur();
        }

        // Clear Subcontractor Data
        function ClearDialogBoxValidationSchedFSubcont() {

            // Clear Form Validation. Schedule 'F' - Subcontractor
            var validator = $m("#DialogBoxSchedFSubcontrForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFSubcontrForm")[0].reset();   // clear out the form data

            // Fill the Auto fill data.
            $("#txtPartshiptName").prop("disabled", true);
            $("#txtPartshiptName").val(sessionStorage.getItem("PartnershipName").toString());

            $("#txtPartExplanationEP").text("Explanation");

            $("#txtCountryPartnership").val("United States");
            $("#txtCountryPartnership").prop("disabled", true);
            $("#txtPartState").prop('maxLength', '2');

            ClearErrorsSubcontractorDialogBox();

            $("#lstItemizedSubcontr")[0].selectedIndex = 0;
            $("#lstIndividualSubcontr")[0].selectedIndex = 0;

            $("#lstItemizedSubcontr").prop("disabled", false);
            $("#lstIndividualSubcontr").prop("disabled", false);

            $("#txtPartZip5").blur();
            $("#txtPartAmtSchedF").blur();
        }

        // Schedule 'F' - Reimbursement Details Form.
        function ClearDialogBoxValidationSchedQReim() {

            // Clear Form Validation. Schedule 'D'
            var validator = $m("#DialogBoxSchedFReimForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFReimForm")[0].reset();   // clear out the form data

            // Set the default values for form.
            $("#txtCountryReim").val("United States");
            $("#txtCountryReim").prop("disabled", true);
            $("#chkCountryReim").prop('checked', false);
            $("#txtStateReim").prop('maxLength', '2');

            // Set the default values for form.
            $("#lblExplanationReim").text("Explanation");

            // Set the default values for form.
            //$("#lstItemizedReim").prop("disabled", false);
            if (@Session["COMM_TYPE_ID"] == "23") {
                $("#lstItemizedReim").prop("disabled", true);
            }
            else {
                $("#lstItemizedReim").prop("disabled", false);
            }
            $("#lstPurposeCodeReim").prop("disabled", false);

            $("#txtOriginalPayeeNameReimDet").prop("disabled", true);

            // Set the default values for form.
            $("#lstItemizedReim")[0].selectedIndex = 0;
            $("#lstPurposeCodeReim")[0].selectedIndex = 0;

            // Set the default values for form.
            $("#txtCurrentDateReimDetSchedF").blur();
            $("#txtZipCodeReim").blur();
            $("#txtAmtReim").blur();

            $("#txtOriginalPayeeNameReimDet").val(sessionStorage.getItem("PayeeNameReimCCI").toString());

        }

        // Schedule 'F' - Credit Card Itemization Form.
        function ClearDialogBoxValidationSchedQCCI() {

            // Clear Form Validation. Schedule 'D'
            var validator = $m("#DialogBoxSchedFCCIForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedFCCIForm")[0].reset();   // clear out the form data

            // Set the default values for form.
            $("#txtCountryCCI").val("United States");
            $("#txtCountryCCI").prop("disabled", true);
            $("#chkCountryCCI").prop('checked', false);
            $("#txtStateCCI").prop('maxLength', '2');

            // Set the default values for form.
            $("#lblExplanationCCI").text("Explanation");

            // Set the default values for form.
            //$("#lstItemizedCCI").prop("disabled", false);
            if (@Session["COMM_TYPE_ID"] == "23") {
                $("#lstItemizedCCI").prop("disabled", true);
            }
            else {
                $("#lstItemizedCCI").prop("disabled", false);
            }
            $("#lstPurposeCodeCCI").prop("disabled", false);

            $("#txtOriginalPayeeNameCCI").prop("disabled", true);

            // Set the default values for form.
            $("#lstItemizedCCI")[0].selectedIndex = 0;
            $("#lstPurposeCodeCCI")[0].selectedIndex = 0;

            // Set the default values for form.
            $("#txtCurrentDateSchedQCCI").blur();
            $("#txtZipCodeCCI").blur();
            $("#txtAmountCCI").blur();

            $("#txtOriginalPayeeNameCCI").val(sessionStorage.getItem("PayeeNameReimCCI").toString());
        }

        // Schedule 'F' - Amount Allocation Sched-R
        function ClearDialogBoxValidationSchedR() {

            // Clear Form Validation. Schedule 'D'
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
            $("#txtAmtAllReport").prop("disabled", true);

            // Set the default values for form.
            $("#lstDiaSupportOppose")[0].selectedIndex = 0;
            $("#lstAllocationExisting")[0].selectedIndex = 0;
            $("#lstElectionCycleAllocated")[0].selectedIndex = 0;
            $("#lstOffice")[0].selectedIndex = 0;
            $("#lstDistrict")[0].selectedIndex = 0;

            // Set the default values for form.
            $("#txtCurrentDateAllocatedSchedR").blur();
            $("#txtAmtExpensesAllocation").blur();
        }

        $("#tdDistrict").hide();
        $("#txtAmtAllReport").prop("disabled", true);

        $m("#btnAddNewAllocation").button().on("click", function () {
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                 txtFilerId: $("#txtFilerID").val(),
                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                 txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
             }, function (resultEditFlag) {
                 if (resultEditFlag == "TRUE") {
                     sessionStorage.setItem("ValidateAutoComplete", "false");
                     var validator = $m("#DialogBoxSchedRForm").validate();
                     validator.resetForm();  // clear out the validation errors
                     $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                     sessionStorage.setItem("AddEditCloseStatus", "Add");                     

                     $(".divWidthSchedABC .error").removeClass("error");
                     sessionStorage.setItem("AmountEdit", "ADD");
                     $("#btnUpdateDialogSchedR").hide();
                     $("#btnAddDialogSchedR").show();
                     $("#btnClearDialogSchedR").show();
                     $("#btnClearDialogEditSchedR").hide();
                     $("#txtCurrentDateAllocatedSchedR").blur();
                     $("#txtAmtExpensesAllocation").blur();
                     //$("#txtCurrentDateAllocatedSchedR").focus();
                     $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                     $m("#txtCurrentDateAllocatedSchedR").removeClass("error");

                     $("#lstAllocationExisting").prop("disabled", false);
                     $("#txtLenderFirstName").prop("disabled", false);
                     $("#txtLenderMIName").prop("disabled", false);
                     $("#txtLenderLastName").prop("disabled", false);
                     $("#lstElectionCycleAllocated").prop("disabled", false);
                     $("#lstOffice").prop("disabled", false);
                     $("#lstDistrict").prop("disabled", false);
                     $("#tdDistrict").hide();
                     $("#dvIsAllocationExist").show();
                     $("#divAmountAllReport").show();
                } else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before adding this Transaction.', 'Ok', '');
                }
            });
        });

        $m("#btnCloseDialogSchedR").button().on("click", function () {
            var valid = true;
            if (sessionStorage.getItem("AddEditCloseStatus") != null) {
                if (sessionStorage.getItem("AddEditCloseStatus").toString() == "Edit") {
                    if ($("#txtCurrentDateAllocatedSchedR").val().toString().length >= 1
                        || $("#txtLenderFirstName").val().toString().length >= 1
                        || $("#txtLenderMIName").val().toString().length >= 1
                        || $("#txtLenderLastName").val().toString().length >= 1
                        || $("#lstOffice option:selected").val().toString() != "0"
                        || $("#lstDistrict option:selected").val().toString() != "0"
                        || $("#txtAmtExpensesAllocation").val().toString().length >= 1
                        || $("#txtExplanationCommonScheR").val().toString().length >= 1) {
                        valid = false;
                    }
                }
            }
            if (valid) {
                dialog.dialog("close");
                // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
            } else {
                // Get confirmation Close the DialogBox or Not.
                var resultsCloseSchedA = "All unsaved data will be lost if you navigate away from this page. Are you sure you want to continue?";

                $m('#modal_dialog').text(resultsCloseSchedA);
                $m("#modal_dialog").dialog({
                    resizable: false,
                    width: '400px',
                    height: 'auto',
                    bgiframe: false,
                    modal: true,
                    closeOnEscape: false,
                    open: function (event, ui) { hideDialogXButton(this); },
                    buttons: {
                        "Ok": function () {
                            // Close Confirm Box.
                            $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                            // Close the DialogBox
                            dialog.dialog("close");
                            // For Defect 707 You don't Refresh the Data on Grid because you just canceled the edit or save function.
                        },
                        "Cancel": function () {
                            $m(this).dialog("close");
                        }
                    }
                });
            }

        });

        // DATE FORMATE....///////////////////////////////////////////////
        $("#txtCurrentDateAllocatedSchedR").focusout(function () {
            if ($("#txtCurrentDateAllocatedSchedR").val().toString() != "") {
                if ($("#txtCurrentDateAllocatedSchedR").val().toString() != "MM/DD/YYYY") {
                    var results = GetValidDateForCommon("txtCurrentDateAllocatedSchedR", "Transferred");

                    if (results == "") {
                        var MyDate = new Date($("#txtCurrentDateAllocatedSchedR").val().toString());
                        var MyDateString;
                        MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                            + ('0' + MyDate.getDate()).slice(-2) + '/'
                            + MyDate.getFullYear();
                        $("#txtCurrentDateAllocatedSchedR").val("");
                        $("#txtCurrentDateAllocatedSchedR").val(MyDateString);
                    }
                }
            }
            else {
                $("#txtCurrentDateAllocatedSchedR").addClass("watermarkHTMLTextBox");
            }
        });
        // DATE FORMATE....



         /////////////////////////////////////////////////////////////////////////////////////
        $("#btnAddDialogSchedR").click(function (e) {
            $m('#DialogBoxSchedRForm').valid();
            if ($m('#DialogBoxSchedRForm').valid()) {
                 $m("#divLoading").show();
                 ////////////////////////////// DETERMINE IF A SCHEDULE R ALREADY EXISTS ////////////////////////////////////////////////////
                 var url = '@Url.Action("ScheduleRAlreadyExists", "ExpensesAllocationScheR")';
                 $.post(url, {
                     strFirstName: $m("#txtLenderFirstName").val().toString(),
                     strLastName: $m("#txtLenderLastName").val().toString(),
                     strMiddleName: $m("#txtLenderMIName").val().toString(),
                     strElectionYearID: $m("#lstElectionCycleAllocated option:selected").val(),
                     strOfficeID: $m("#lstOffice option:selected").val(),
                     strDistrictID: $m("#lstDistrict option:selected").val(),
                     strAllocationExists: $m("#lstAllocationExisting option:selected").val(),
                     validateCheck: sessionStorage.getItem("ValidateAutoComplete").toString()
                 }, function (resultsVal) {                     
                        ///////////////////////// DO THE INSERT IF THERE IS NO EXISTING SCHEDULE R //////////////////////////////
                         if (resultsVal == "NO") {
                             var url = '@Url.Action("AddExpensesAllocationScheRData", "ExpensesAllocationScheR")';
                             $.post(url, {
                                 txtFilerId: $("#txtFilerID").val(),
                                 strFilingSchedId: $m("#lstTransactionType option:selected").val(),
                                 strFilingSchedDate: $m("#txtCurrentDateAllocatedSchedR").val().toString(),
                                 strFlngEntFirstName: $m("#txtLenderFirstName").val().toString(),
                                 strFlngEntMiddleName: $m("#txtLenderMIName").val().toString(),
                                 strFlngEntLastName: $m("#txtLenderLastName").val().toString(),
                                 lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                                 lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                                 lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                                 lstElectYear: $m("#lstElectionCycleAllocated option:selected").text(),
                                 lstOfficeID: $m("#lstOffice option:selected").val(),
                                 lstDistrictID: $m("#lstDistrict option:selected").val(),
                                 strOrgAmt: $m("#txtAmtExpensesAllocation").val().toString(),
                                 strTransExplanation: $m("#txtExplanationCommonScheR").val().toString(),
                                 lstFilingEntId: "",
                                 strElectionTypeId: $m("#lstElectionType option:selected").val(),
                                 strFilingDate: $m("#txtReportPeriodDatesTo").val().toString(),
                                 txtReportPeriodDatesTo: sessionStorage.getItem("FilingDate").toString(),
                                 electionDateId: $m("#lstElectionDate").val(),
                                 lstResigTermType: $m("#lstResigTermType option:selected").val(),
                                 txtCuttOffDate: sessionStorage.getItem("CutOffDate").toString(),
                                 lstFilingDate: $m("#lstFilingDate option:selected").text(),
                                 lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
                                 lstDiaSupportOppose: $m("#lstDiaSupportOppose option:selected").val(),
                                 parentTranID: sessionStorage.getItem("TransactionID").toString()
                             }, function (results) {
                                 if (results.Errors == null) {
                                     if (results == "Custom Error") {
                                         $m("#divLoading").hide();
                                         ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                                         window.location.reload();
                                     } else {
                                         if (results == "0") {
                                             $m("#divLoading").hide();
                                             ShowDialogBox('EFS', 'System Error Found. Please try again.', 'Ok', '');
                                             window.location.reload();
                                         } else {
                                             results = "Custom Error";
                                             window.status = "Transaction saved successfully";
                                             sessionStorage.setItem("ValidateAutoComplete", "false");
                                             $("#txtLenderMIName").prop("disabled", false);
                                             $("#txtLenderLastName").prop("disabled", false);
                                             $('#lstElectionCycleAllocated').attr('disabled', false);
                                             $('#lstOffice').attr('disabled', false);
                                             $('#lstDistrict').attr('disabled', false);

                                             var validator = $m("#DialogBoxSchedRForm").validate();
                                             validator.resetForm();  // clear out the validation errors
                                             $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                                             $(".divWidthSchedABC .error").removeClass("error");

                                             //$("#txtCurrentDateAllocatedSchedR").blur();
                                             //$("#txtAmtExpensesAllocation").blur();
                                             $("#lblExplanation").text("Explanation");
                                             $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                                             $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
                                             //$("#txtCurrentDateAllocatedSchedR").focus();
                                             $("#lstAllocationExisting")[0].selectedIndex = 0;
                                             $("#tdDistrict").hide();
                                             $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
                                             $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
                                             var doneFunction = function () {
                                                 $m("#divLoading").hide();
                                                 ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                                             };
                                             // Refresh the Data on Grid... Hides the loading too!
                                             GetAllTransactionTypesData(true, tableAmountAllocationSchedR, false, doneFunction);
                                         }
                                     }
                                 } else if (results.Errors.length >= 0) {
                                     $m("#divLoading").hide();//AddExpensesAllocationScheRData failed.
                                     ClearServerSideErrors(); // Server Side Validation Clear
                                     appCommonEFS_AppendCustomErrorLabelsForAmmountError(results.Errors, false);
                                 }
                             }).fail(function () {
                                 $m("#divLoading").hide();//AddExpensesAllocationScheRData failed.
                             });
                         }
                         else if (resultsVal == "DUPLICATE") {
                             //The resultsVal could also be "DPULICATE" or "EXISTS" but we don't treat each case differently right now.
                             $m("#divLoading").hide();
                             // IF THERE WAS ALREADY AN ELECTION FOR THAT DATE, PRESENT DIALOG AND EXIT
                             ShowDialogBox('EFS', 'Schedule R has already filed for the entered combination. Either enter new allocation or select Yes in the Is Allocation Existing question', 'Ok', '');
                         }
                         else {
                             //The resultsVal could also be "DPULICATE" or "EXISTS" but we don't treat each case differently right now.
                             $m("#divLoading").hide();
                             // IF THERE WAS ALREADY AN ELECTION FOR THAT DATE, PRESENT DIALOG AND EXIT
                             ShowDialogBox('EFS', 'Name entered is not available in database. Either enter an existing name or change "Is Allocation Existing?" to "No"', 'Ok', '');
                         }
                }).fail(function () {
                    $m("#divLoading").hide();//ScheduleRAlreadyExists Failed.
                    ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                });
             }
         });
         /////////////////////////////////////////////////////////////////////////////////////

        function ClearServerSideErrors() {
            //removing error class and error messages in search form
            $("#txtCurrentDateAllocatedSchedR_validate").empty();
            $("#txtLenderFirstName_validate").empty();
            $("#txtLenderMIName_validate").empty();
            $("#txtLenderLastName_validate").empty();
            $("#txtAmtExpensesAllocation_validate").empty();
            $("#txtExplanationCommonScheR_validate").empty();
        }

        // EDIT COMMON SCHED-R ...................
        //...............................................................................................................
        $m('#gridAmountAllocationSchedR tbody').on('click', 'a.editor_edit_AmountAllocationSchedR', function (e) {
            event.preventDefault();
            var data = tableAmountAllocationSchedR.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    //if (data[1].toString() == "18") { // Schedule R
                        var validator = $m("#DialogBoxSchedRForm").validate();
                        validator.resetForm();  // clear out the validation errors
                        $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
                        $(".divWidthSchedABC .error").removeClass("error");
                        //$("#txtCurrentDateAllocatedSchedR").focus();

                    dialog.dialog("open");
                        sessionStorage.setItem("AddEditCloseStatus", "Edit");
                        $("#lstAllocationExisting")[0].selectedIndex = 1;
                        $("#dvIsAllocationExist").hide();
                    $("#btnUpdateDialogSchedR").show();
                    $("#btnAddDialogSchedR").hide();
                    $("#btnClearDialogSchedR").hide();
                    $("#btnClearDialogEditSchedR").show();
                        sessionStorage.setItem("TransNumber", data[1].toString());
                    sessionStorage.setItem("FilingEntityId", data[2].toString());

                    $m("#lstDiaSupportOppose option").each(function () {
                        if ($(this).text() == data[5].toString()) {
                            $(this).prop('selected', true).trigger('change');
                        }
                    });

                        $("#txtCurrentDateAllocatedSchedR").val(data[6].toString());
                        $("#txtCurrentDateAllocatedSchedR").removeClass("watermarkHTMLTextBox");
                        if (data[6].toString() != "" || data[6].toString() != null) {
                            var MyDate = new Date($("#txtCurrentDateAllocatedSchedR").val().toString());
                            var MyDateString;
                            MyDateString = ('0' + (MyDate.getMonth() + 1)).slice(-2) + '/'
                                + ('0' + MyDate.getDate()).slice(-2) + '/'
                                + MyDate.getFullYear();
                            $("#txtCurrentDateAllocatedSchedR").val("");
                            $("#txtCurrentDateAllocatedSchedR").val(MyDateString);
                            $("#txtCurrentDateAllocatedSchedR").removeClass("watermarkHTMLTextBox");
                        }
                        //$("#txtCurrentDateAllocatedSchedR").focus();

                        $("#txtLenderFirstName").val(data[7].toString());
                        $("#txtLenderMIName").val(data[8].toString());
                        $("#txtLenderLastName").val(data[9].toString());

                        var originalAmount = data[10].toString();
                        $("#txtAmtExpensesAllocation").val(originalAmount);
                        if ($("#txtAmtExpensesAllocation").val().toString() != "" || $("#txtAmtExpensesAllocation").val().toString() != "999999999.99") {
                            $("#txtAmtExpensesAllocation").removeClass("watermarkHTMLTextBox");
                        }
                        $("#divAmountAllReport").show();

                        $m("#lstElectionCycleAllocated option").each(function () {
                            if ($(this).text() == data[11].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });

                    $m("#lstOffice option").each(function () {
                        if ($(this).text() == data[12].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });

                        if (data[13].toString() == '') {
                            data[13] = 'None';
                        }

                        sessionStorage.setItem("districtData", data[13].toString());
                        $m("#lstDistrict option").each(function () {
                            if ($(this).val() == data[13].toString()) {
                                $(this).prop('selected', true).trigger('change');
                            }
                        });
                        $("#txtExplanationCommonScheR").val(data[14].toString());
                        sessionStorage.setItem("AmountEdit", "EDIT");
                    $.post("@Url.Content("~/ExpensesAllocationScheR/CaluclateAllAmount/")", {
                        firstName: $("#txtLenderFirstName").val(),
                        middleName: $("#txtLenderMIName").val(),
                        lastName: $("#txtLenderLastName").val(),
                        electYear: $m("#lstElectionCycleAllocated option:selected").text(),
                        officeID: $m("#lstOffice option:selected").val(),
                        distID: data[13].toString()
                    }, function (result) {
                        if (result != "") {
                            var amtVal = parseFloat(result);
                            if (amtVal == Math.floor(amtVal)) {
                                amtVal = amtVal + ".00";
                                $m("#txtAmtAllReport").val(amtVal);
                            }
                            else {
                                $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                            }

                            sessionStorage.setItem("txtAmtAllReportEdit", result);
                            sessionStorage.setItem("txtAmtEdit", $("#txtAmtExpensesAllocation").val());
                        }
                    }).always(function () {
                        $("#divLoading").hide();
                    });

                    $("#lstAllocationExisting").prop("disabled", true);
                    $("#txtLenderFirstName").prop("disabled", true);
                    $("#txtLenderMIName").prop("disabled", true);
                    $("#txtLenderLastName").prop("disabled", true);
                    $("#lstElectionCycleAllocated").prop("disabled", true);
                    $("#lstOffice").prop("disabled", true);
                    $("#lstDistrict").prop("disabled", true);
                    $("#txtAmtAllReport").prop("disabled", true);

                    //} // Other Schedules
                    //else if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "16", "17", "18", "19", "20", "21"].includes(data[1].toString())) {
                    //    //Common code to determine redirect url and set session varialbes. Also hides $("#divLoading") on fail.
                    //    //Uses window.location.href
                    //    appCommonEFS_DetermineScheduleRedirect(data[1].toString(), data[42].toString());
                    //}
                } else { // When resultEditFlag != "TRUE"
                    $("#divLoading").hide();// GetEditFlag failed.
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });
        });

        //Delete - Start
        // Delete Record FILING TRANSACTIONS.
        $m('#gridAmountAllocationSchedR tbody').on('click', 'a.editor_remove_AmountAllocationSchedR', function (e) {
            e.preventDefault();
            var dataTrans = tableAmountAllocationSchedR.row($(this).parents('tr')).data();
            //Because response time can be delayed always show/hide the loading cover interacting with grid buttons. This will keep user from clicking around indiscriminately.
            $("#divLoading").show();
            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: sessionStorage.getItem("FilingDate").toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {
                    $.post("@Url.Content("~/_UC_GridCommonControl/GetDeleteFlag/")", {
                    }, function (resultDeleteFlag) {
                        if (resultDeleteFlag == "True") {
                            var resultsDelete = "Are you sure you want to delete this transaction?";
                            // DELETE FUNCTIONALITY.
                            $m('#modal_dialog').text(resultsDelete);
                            $m("#modal_dialog").dialog({
                                resizable: false,
                                width: '400px',
                                height: 'auto',
                                bgiframe: false,
                                closeOnEscape: false,
                                open: function (event, ui) {
                                    $("#divLoading").hide();
                                    hideDialogXButton(this);
                                },
                                buttons: {
                                    "Ok": function () {
                                        // Close Confirm Box.
                                        $m(this).dialog("close"); //Close current dialog before closing the previous to prevent '_focusTabbable' error in jquery-ui.
                                        $("#divLoading").show();
                                        var options = {};
                                        options.url = "@Url.Content("~/ExpenditurePaymentsSchedF/DeleteSchedFSubcontractorData/")";
                                        options.type = "GET";
                                        options.data = {
                                            strTransNumber: dataTrans[1].toString()
                                        };
                                        options.dataType = "json";
                                        options.contentType = "application/json";
                                        options.success = function (results) {
                                            window.status = "Record deleted successfully";
                                            var doneFunction = function () {
                                                $("#divLoading").hide();
                                                ShowDialogBox('EFS', 'Record deleted successfully', 'Ok', '');
                                            }
                                            // Refresh the Data on Grid...
                                            GetAllTransactionTypesData(true, tableAmountAllocationSchedR, false, doneFunction);
                                        };
                                        options.error = function () {
                                            $("#divLoading").hide();
                                            ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200', 'Ok', '');
                                        };
                                        $.ajax(options);
                                    },
                                    "Cancel": function () {
                                        // Close Confirm Box.
                                        $m(this).dialog("close");
                                    }
                                }
                            });
                        } else {//When resultEditFlag != "TRUE"
                            $("#divLoading").hide();
                            ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before deleting this Transaction.', 'Ok', '');
                        }
                    }).fail(function () {
                        $("#divLoading").hide();// GetEditFlag failed.
                    });
                }
            }).fail(function () {
                $("#divLoading").hide();// GetEditFlag failed.
            });  
        });
        //Delete - End

        $m("#btnUpdateDialogSchedR").button().on("click", function () {
             $m('#DialogBoxSchedRForm').valid();
             if ($m('#DialogBoxSchedRForm').valid()) {
                 // SHOW THE PROCESSING....
                 $("#divLoading").show();
                 var url = '@Url.Action("UpdateExpensesAllocationScheRData", "ExpensesAllocationScheR")';
                 $m.post(url, {
                     transNumber: sessionStorage.getItem("TransNumber").toString(),
                     strFilingSchedDate: $m("#txtCurrentDateAllocatedSchedR").val().toString(),
                     strOrgAmt: $m("#txtAmtExpensesAllocation").val().toString(),
                     strTransExplanation: $m("#txtExplanationCommonScheR").val().toString(),
                     strSupportOppose: $m("#lstDiaSupportOppose").val().toString()
                 }, function (data) {
                    // Close Dialogbox.
                    dialog.dialog("close");
                    // Saved
                    window.status = "Transaction saved successfully";
                    $("#txtLenderMIName").prop("disabled", false);
                    $("#txtLenderLastName").prop("disabled", false);
                    $('#lstElectionCycleAllocated').attr('disabled', false);
                    $('#lstOffice').attr('disabled', false);
                    $('#lstDistrict').attr('disabled', false);
                    var doneFunction = function () {
                        $m("#divLoading").hide();
                        ShowDialogBox('EFS', 'Transaction saved successfully', 'Ok', '');
                    };
                    // Refresh the Data on Grid...
                     GetAllTransactionTypesData(true, tableAmountAllocationSchedR, false, doneFunction);
                 }).fail(function () {
                     $("#divLoading").hide();// UpdateExpensesAllocationScheRData failed.
                     ShowDialogBox('EFS', 'System Error found. Please try again.', 'Ok', '');
                 });
             }
        });

        $m("#btnClearDialogSchedR").button().on("click", function () {
            ClearDialog();
            sessionStorage.setItem("ValidateAutoComplete", "false");
        });

        function ClearDialog() {
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
            $(".divWidthSchedABC .error").removeClass("error");
            $("#lstDiaSupportOppose")[0].selectedIndex = 0;
            $("#lblExplanation").text("Explanation");
            $("#txtCurrentDateAllocatedSchedR").blur();
            $("#txtAmtExpensesAllocation").blur();
            $("#lstDiaSupportOppose").focus();
            $m("label[for=txtCurrentDateAllocatedSchedR]").text('');
            $m("#txtCurrentDateAllocatedSchedR").removeClass("error");
            $("#tdDistrict").hide();
            $("#txtLenderMIName").prop("disabled", false);
            $("#txtLenderLastName").prop("disabled", false);
            $('#lstElectionCycleAllocated').attr('disabled', false);
            $('#lstOffice').attr('disabled', false);
            $('#lstOffice').attr('disabled', false);
            autoNameFound = false;
        }

        $m("#btnClearDialogEditSchedR").button().on("click", function () {
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $(".divWidthSchedABC .error").removeClass("error");
            $("#lstDiaSupportOppose")[0].selectedIndex = 0;
            $("#lstDiaSupportOppose").focus();
            $("#txtCurrentDateAllocatedSchedR").val("");
            $("#txtAmtExpensesAllocation").val("");
            $("#txtExplanationCommonScheR").val("");
            //$("#txtCurrentDateLoanReceived").focus();
            $m("label[for=txtCurrentDateLoanReceived]").text('');
            sessionStorage.setItem("ValidateAutoComplete", "false");
        });

         // Partnership Name Auto Complete.
        $m("#txtLenderFirstName").autocomplete({
            source: function (request, response) {
                if ($("#lstAllocationExisting option:selected").val() == "2")
                {
                    $.post("@Url.Content("~/ExpensesAllocationScheR/AutoCompleteEntityName/")", request, response);
                }
            },
            minLength: 1,
            select: function (event, ui) {
                event.preventDefault();
                var selectedValue = ui.item.label;

                    $.ajax({
                    url: "@Url.Content("~/ExpensesAllocationScheR/GetAutoCompleteNameData/")",
                    dataType: "json",
                    data: {
                        strValue: selectedValue.toString()
                    },
                        success: function (results) {
                            $("#txtAmtAllReport").val('');
                            $.each(results, function (i, item) {
                                sessionStorage.setItem("ValidateAutoComplete","true");
                            $("#txtLenderFirstName").val(item.FirstName.toString());
                                $("#txtLenderMIName").val(item.MiddleName.toString());
                                $("#txtLenderMIName").prop("disabled", true);
                                $("#txtLenderLastName").val(item.LastName.toString());
                                $("#txtLenderLastName").prop("disabled", true);
                                if ($("#txtAmtAllReport").val() == '') {
                                    var amtVal = parseFloat(item.Org_Amt.toString());
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }
                                }
                                else {
                                    var amtVal = parseFloat($("#txtAmtAllReport").val()) + parseFloat(item.Org_Amt);
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }
                                }
                                sessionStorage.setItem("txtAmtAllReport", $("#txtAmtAllReport").val());
                            $("#lstElectionCycleAllocated option").each(function () {
                                if ($(this).text() == item.ElectionYear.toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                                });
                                $('#lstElectionCycleAllocated').attr('disabled', true);

                            $("#lstOffice option").each(function () {
                                if ($(this).val() == item.Office_ID.toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                                });
                                $('#lstOffice').attr('disabled', true);
                                if (item.Dist_ID == '') {
                                    item.Dist_ID = 'None';
                                }
                                sessionStorage.setItem("districtData", item.Dist_ID.toString());
                                $("#lstDistrict option").each(function () {
                                    if ($(this).text() == item.Dist_ID.toString()) {
                                        $("#tdDistrict").show();
                                        $(this).prop('selected', true).trigger('change');
                                    }
                                });
                                $('#lstDistrict').attr('disabled', true);
                            if ($("#lstDistrict").val().toString() == "0")
                            {
                                $("#tdDistrict").hide();
                                }

                                $("#txtAmtExpensesAllocation").val("");
                                $("#txtLenderFirstName").focus();
                                autoNameFound = true;
                        });
                    }
                    });

            }
        });

        $("#lstAllocationExisting").change(function () {
            var valAllocationExisting = $("#lstAllocationExisting option:selected").val();
            var validator = $m("#DialogBoxSchedRForm").validate();
            validator.resetForm();  // clear out the validation errors
            $m("#DialogBoxSchedRForm")[0].reset();   // clear out the form data
            $(".divWidthSchedABC .error").removeClass("error");
            $("#txtCurrentDateAllocatedSchedR").addClass("watermarkHTMLTextBox");
            $("#txtAmtExpensesAllocation").addClass("watermarkHTMLTextBox");
            $("#lstAllocationExisting").val(valAllocationExisting);

            $("#txtLenderMIName").prop("disabled", false);
            $("#txtLenderLastName").prop("disabled", false);
            $('#lstElectionCycleAllocated').attr('disabled', false);
            $('#lstOffice').attr('disabled', false);
            $('#lstDistrict').attr('disabled', false);

        });

        $("#lstOffice").change(function () {

            if ($("#lstOffice").val().toString() != "0")
            {
                var options = {};
                options.url = "@Url.Content("~/ExpensesAllocationScheR/GetDistrict/")";
                options.type = "POST";
                options.data = JSON.stringify(
                    {
                        strOfficeID: $("#lstOffice").val().toString()
                    });
                options.dataType = "json";
                options.contentType = "application/json";
                options.success = function (results) {
                    if (results.length != "0")
                    {
                        $("#tdDistrict").show();
                        $("#lstDistrict").empty();
                        $("#lstDistrict").append("<option>" + "- Select -" + "</option>");
                        for (var i = 0; i < results.length; i++) {
                            $("#lstDistrict").append("<option value='" + results[i].Value + "'>" + results[i].Text + "</option>");
                        }
                        if (sessionStorage.getItem("districtData") != null)
                        {
                            $m("#lstDistrict option").each(function () {
                                if ($(this).val() == sessionStorage.getItem("districtData").toString()) {
                                    $(this).prop('selected', true).trigger('change');
                                }
                            });
                            sessionStorage.setItem("districtData", null);
                        }
                    }
                    else
                    {
                        $("#lstDistrict").empty();
                        $("#lstDistrict").append("<option>" + "- Select -" + "</option>");
                        $("#tdDistrict").hide();
                    }
                };
                options.error = function () {
                    ShowDialogBox('EFS', 'Error Fetching Data. Please Contact NYS Board of Elections ◾(518) 474-8200 ', 'Ok', '');
                };
                $.ajax(options);
            }
            else
            {
                $("#tdDistrict").hide();
                $("#lstDistrict").empty();
            }
        });

        $("#txtLenderFirstName").focusout(function () {            
            if ($("#lstAllocationExisting option:selected").val() == "2")
            {
                $.post("@Url.Content("~/ExpensesAllocationScheR/ValidateEntityName/")", {
                term: $("#txtLenderFirstName").val()
                }, function (result) {
                    if (result == "") {
                        ShowDialogBox('EFS', 'Name entered is not available in database. Either enter an existing name or change “Is Allocation Existing" to No', 'Ok', '');
                        $("#txtLenderMIName").val("");
                        $("#txtLenderFirstName").val("");
                        $("#txtLenderLastName").val("");
                        $("#txtAmtAllReport").val("");
                        $("#lstElectionCycleAllocated")[0].selectedIndex = 0;
                        $("#lstOffice")[0].selectedIndex = 0;
                        $("#lstDistrict")[0].selectedIndex = 0;
                        $("#txtLenderMIName").prop("disabled", false);
                        $("#txtLenderLastName").prop("disabled", false);
                        $('#lstElectionCycleAllocated').attr('disabled', false);
                        $('#lstOffice').attr('disabled', false);
                        $('#lstDistrict').attr('disabled', false);
                        $("#txtLenderFirstName").focus();
                    }
                });
            }
            else
            {
                $("#txtAmtAllReport").val("");
            }
        });

        $("#txtAmtExpensesAllocation").focusout(function () {

            // MOVED THIS CODE FROM DOWN TO HERE. NO CHANGES.
            // ONLY CHANGES WHEN TXTAMT ZERO THEN TXTAMTALLREPORT SHOULD NOT FILL.
            // ADDED ONLY ABOVE CONDITION - ON 06.02.2021.
            if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                if ($("#txtAmtAllReport").val().toString().length <= 9) {
                    var regExpNumbers = /^(-{1}?(?:([0-9]{0,10})))/;
                    if (regExpNumbers.test($("#txtAmtAllReport").val().toString())) {
                        var strAmount = $("#txtAmtAllReport").val().toString();
                        var indexAmount = strAmount.indexOf(".");
                        if (indexAmount != -1) {
                            var amountDecimal = strAmount.substr(indexAmount + 1, strAmount.length);
                            if (amountDecimal.toString().length == "1" || amountDecimal.toString().length == "2") {
                                var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                        }
                        else {
                            var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                            if (amtVal == Math.floor(amtVal)) {
                                amtVal = amtVal + ".00";
                                $m("#txtAmtAllReport").val(amtVal);
                            }
                            else {
                                $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                            }
                        }
                    }
                }
                else {
                    var strAmount = $("#txtAmtAllReport").val().toString();
                    var indexAmount = strAmount.indexOf(".");
                    var varPeriod = strAmount.indexOf(".");
                    var newStrAmount = strAmount.substr(0, varPeriod);
                    if (indexAmount != -1) {
                        if (newStrAmount.length <= 9) {
                            var amountDecimal = strAmount.substr(indexAmount + 1, strAmount.length);
                            if (amountDecimal.toString().length == "1" || amountDecimal.toString().length == "2") {
                                var amtVal = parseFloat($("#txtAmtAllReport").val().toString());
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                        }
                    }
                }
            }
            if (sessionStorage.getItem("AmountEdit") == "EDIT") {
                if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                    var amtVal;
                    if (parseFloat($("#txtAmtExpensesAllocation").val()) > parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit")) + (parseFloat($("#txtAmtExpensesAllocation").val()) - parseFloat(sessionStorage.getItem("txtAmtEdit")));
                    }
                    else if (parseFloat($("#txtAmtExpensesAllocation").val()) < parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit")) - (parseFloat(sessionStorage.getItem("txtAmtEdit")) - parseFloat($("#txtAmtExpensesAllocation").val()));
                    }
                    else if (parseFloat($("#txtAmtExpensesAllocation").val()) == parseFloat(sessionStorage.getItem("txtAmtEdit"))) {
                        amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReportEdit"));
                    }

                    if (amtVal == Math.floor(amtVal)) {
                        amtVal = amtVal + ".00";
                        $m("#txtAmtAllReport").val(amtVal);
                    }
                    else {
                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                    }
                }
            }
            else {
                var tempVal = $("#txtAmtAllReport").val();
                if ($("#lstAllocationExisting option:selected").val() == "1") {
                    if ($.isNumeric($("#txtAmtExpensesAllocation").val())) {
                        $("#txtAmtAllReport").val($("#txtAmtExpensesAllocation").val());
                    }
                    else {
                        $("#txtAmtAllReport").val("");
                    }
                }
                else {
                    if ($("#txtAmtAllReport").val() != '') {
                        if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                            if ($("#txtAmtExpensesAllocation").val().toString() != "0.00") {
                                var amtVal;
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    amtVal = parseFloat(sessionStorage.getItem("txtAmtAllReport")) + parseFloat($("#txtAmtExpensesAllocation").val());
                                }
                                else {
                                    amtVal = parseFloat($("#txtAmtExpensesAllocation").val());
                                }
                                if (amtVal == Math.floor(amtVal)) {
                                    amtVal = amtVal + ".00";
                                    $m("#txtAmtAllReport").val(amtVal);
                                }
                                else {
                                    $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                }
                            }
                            else {
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    var amtVal;
                                    amtVal = sessionStorage.getItem("txtAmtAllReport");
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }

                                }
                                else {
                                    $("#txtAmtAllReport").val("");
                                }

                            }
                        }
                        else {
                            $("#txtAmtAllReport").val("");
                        }
                    }
                    else {
                        if ($("#txtAmtExpensesAllocation").val().toString() != "") {
                            if ($("#txtAmtExpensesAllocation").val().toString() != "0.00") {
                                $("#txtAmtAllReport").val($("#txtAmtExpensesAllocation").val());
                            }
                            else {
                                if (sessionStorage.getItem("txtAmtAllReport") != null) {
                                    var amtVal;
                                    amtVal = sessionStorage.getItem("txtAmtAllReport");
                                    if (amtVal == Math.floor(amtVal)) {
                                        amtVal = amtVal + ".00";
                                        $m("#txtAmtAllReport").val(amtVal);
                                    }
                                    else {
                                        $m("#txtAmtAllReport").val(amtVal.toFixed(2));
                                    }

                                }
                                else {
                                    $("#txtAmtAllReport").val("");
                                }
                            }
                        }
                        else {
                            $("#txtAmtAllReport").val("");
                        }
                    }
                }


                if ($.isNumeric($("#txtAmtExpensesAllocation").val()) != true) {
                    if (tempVal.toString() != "" && tempVal.toString() != "0.00") {
                         $("#txtAmtAllReport").val(tempVal);
                    } else {
                        $("#txtAmtAllReport").val("");
                    }
                }
            }
        });        

        // BUTTON ADD NEW CREDIT CARD ITEMIZATION
        // Add New Credit Card Itemization
        $m("#btnAddNewAllocation").button().on("click", function () {

            $.post("@Url.Content("~/_UC_GridCommonControl/GetEditFlag/")", {
                txtFilerId: $("#txtFilerID").val(),
                lstElectYearId: $m("#lstElectionCycle option:selected").val(),
                strElectionTypeId: $m("#lstElectionType option:selected").val(),
                lstOfficeTypeId: $m("#lstUCOfficeType option:selected").val(),
                lstFilingTypeId: $("#lstDisclosurePeriod option:selected").val(),
                lstFilingDate: $m("#lstFilingDate option:selected").text(),
                txtFilingDate: bUtilSanitizeString(sessionStorage.getItem("FilingDate")).toString(),
                electionDateId: $m("#lstElectionDate").val(),
                lstUCMuncipality: $m("#lstUCMuncipality option:selected").val(),
            }, function (resultEditFlag) {
                if (resultEditFlag == "TRUE") {

                    sessionStorage.setItem("UpdateFlagSchedFCCI", "No");

                    dialog.dialog("open");
                    
                    ClearDialogBoxValidationSchedR();
                    ClearErrorsAmountAllocationSchedRDialogBox();

                    // Add/Edit
                    $("#btnAddDialogSchedR").show();
                    $("#btnUpdateDialogSchedR").hide();    

                    $("#btnClearDialogSchedR").show();
                    $("#btnClearDialogEditSchedR").hide();   
                }
                else {
                    ShowDialogBox('EFS', 'Another Filing is being edited. Submit the edited Filing before editing this Transaction.', 'Ok', '');
                }
            });

        });

    }); // DOCUMENT END END END>>>>>>>>>>END>>>>>>
</script>
