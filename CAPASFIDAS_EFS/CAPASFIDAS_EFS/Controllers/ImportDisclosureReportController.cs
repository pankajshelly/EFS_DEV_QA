// ============================================================
// AUTHOR     : SATHEESH BASIREDDY
// CREATE DATE     : 08/10/2017
// PURPOSE     : EXPENDITURE PAYMENTS SCHEDULE F,N, AND O
// SPECIAL NOTES: 
// ============================================================
// Change History: 
//
// ============================================================

#region Namespaces
using Broker;
using CAPASFIDAS_EFS.CommonErrors;
using Models;
using SAML_Interface;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Mvc;
using System.Web.UI.WebControls;
using System.Text;
using System.Collections;
#endregion Namespaces

namespace CAPASFIDAS_EFS.Controllers
{
    public class ImportDisclosureReportController : Controller
    {
        #region Global Declaration
        ItemizedReportsBroker objItemizedReportsBroker = new ItemizedReportsBroker();
        ContributionsMonetaryController objContributionsMonetaryController = new ContributionsMonetaryController();
        CommonErrorsServerSide objCommonErrorsServerSide = new CommonErrorsServerSide();
        IList<ImportErrorMessageModel> lstImportErrorMessageModel = new List<ImportErrorMessageModel>();
        public static string ACSURL = ConfigurationManager.AppSettings["ACSUrl"].ToString();
        public static string Issuer = ConfigurationManager.AppSettings["Issuer"].ToString();
        public static string IdentityProviderSigninURL = ConfigurationManager.AppSettings["IdentityProviderSigninURL"].ToString();
        IList<VendorImportValidationModel> lstVendorImportValidation = new List<VendorImportValidationModel>();
        CAPASFIDAS_EH_UI.ERClass objERClass = new CAPASFIDAS_EH_UI.ERClass();
        #endregion Global Declaration

        #region ImportDisclosureReport
        /// <summary>
        /// ImportDisclosureReport
        /// </summary>
        /// <returns></returns>
        // GET: ImportDisclosureReport
        public ActionResult ImportDisclosureReport(FormCollection collections, string Command)
        {
            try
            {
                if (Session["SAMLResponse"] == null)
                {
                    SAMLRequest request = new SAMLRequest();
                    Response.Redirect(IdentityProviderSigninURL + "?SAMLRequest=" + Server.UrlEncode(request.GetSAMLRequest(ACSURL, Issuer)));
                }
                else
                {
                    GetDefaultLookUpsValues();

                    if (Command == "btnCSVAsEntered")
                    {
                        IList<ImportErrorMessageModel> lstImportErrorMessageModel = new List<ImportErrorMessageModel>();
                        lstImportErrorMessageModel = (IList<ImportErrorMessageModel>)Session["ErrorMessageGridData_VI"];
                        btnExportCSV_Click(lstImportErrorMessageModel, "Validation_Errors");
                    }
                    //if (Command == "btnDownloadHelpDocumentPDF")
                    //{
                    //    DowloadHelpDocumentPDFFile();
                    //}
                }
                return View("ImportDisclosureReport");
            }
            catch (Exception ex)
            {
                if (Session["UserName"] != null)
                {
                    objERClass.LogExceptionInDatabase(ConfigurationManager.AppSettings["ApplicationKey"].ToString(), ex.Message, "ImportDisclosureReportController", System.Reflection.MethodBase.GetCurrentMethod().Name, "", "", ex.Message, Session["UserName"].ToString());
                }                
                throw;
            }

        }
        #endregion ImportDisclosureReport

        #region GetImportDisclosureRptsData
        /// <summary>
        /// GetImportDisclosureRptsData
        /// </summary>
        /// <param name="txtFilerID"></param>
        /// <param name="strReportYear"></param>
        /// <returns></returns>
        public JsonResult GetImportDisclosureRptsData(String txtFilerID, String strReportYear)
        {
            try
            {
                IList<ImportDisclosureRptsData> lstImportDisclosureRptsData = new List<ImportDisclosureRptsData>();

                lstImportDisclosureRptsData = objItemizedReportsBroker.GetImportDisclosureRptsDataResponse(txtFilerID, strReportYear);

                if (lstImportDisclosureRptsData.Count > 0)
                {
                    for (int i = 0; i < lstImportDisclosureRptsData.Count; i++)
                    {
                        if (lstImportDisclosureRptsData[i] != null)
                        {
                            lstImportDisclosureRptsData[i].CreatedDate24Hours = Convert.ToDateTime(lstImportDisclosureRptsData[i].DateImported).ToString("MM/dd/yyyy HH:mm:ss");
                        }
                    }
                }

                return Json(new
                {
                    aaData = lstImportDisclosureRptsData.Select(x => new[] {
                    x.VendorImportId,
                    x.FilingsId,
                    x.VendorId,
                    "",
                    "",
                    x.DateImported,
                    x.TransactionType,
                    x.ReportYear,
                    x.FilerType,
                    x.ReportType,
                    x.ElectionDate,
                    x.DisclosurePeriod,
                    x.SubmissionStatus,
                    x.FileSize,
                    x.NoOfTrans,
                    x.VendorName,
                    x.CreatedDate24Hours,
                    x.ElectionYearId,
                    x.OfficeTypeId,
                    x.ElectionTypeId,
                    x.ElectionDateId,
                    x.FilingTypeId,
                    x.FilingCategoryId
                })
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                if (Session["UserName"] != null)
                {
                    objERClass.LogExceptionInDatabase(ConfigurationManager.AppSettings["ApplicationKey"].ToString(), ex.Message, "ImportDisclosureReportController", System.Reflection.MethodBase.GetCurrentMethod().Name, "", "", ex.Message, Session["UserName"].ToString());
                }
                throw;
            }
        }
        #endregion GetImportDisclosureRptsData

        #region UploadImportDisclosureRptsData
        /// <summary>
        /// UploadImportDisclosureRptsData
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult UploadImportDisclosureRptsData(HttpPostedFileBase data)
        {
            try
            {
                ImportDisclsoureRptsFilings objImportDisclsoureRptsFilings = new ImportDisclsoureRptsFilings();
                ImportErrorMessageModel objImportErrorMessageModel;
                IList<FilingTransactionsModel> lstFilingTransactionsModel = new List<FilingTransactionsModel>();
                FilingTransactionsModel objFilingTransactionsModel;

                foreach (string upload in Request.Files)
                {                    
                    if (Request.Files[upload].FileName != "")
                    {
                        Stream varStream = Request.Files[upload].InputStream;

                        String strFileSize = varStream.Length.ToString();
                        // Convert file size to KB or MB.
                        String[] sizes = { "B", "KB", "MB", "GB", "TB" };
                        Double len = Convert.ToDouble(strFileSize);
                        int order = 0;
                        while (len >= 1024 && order < sizes.Length - 1)
                        {
                            order++;
                            len = len / 1024;
                        }
                        len = Math.Round(len);
                        // Adjust the format string to your preferences. For example "{0:0.#}{1}" would
                        // show a single decimal place, and no space.                    
                        String resultFileSize = String.Format("{0:0.##} {1}", len, sizes[order]);
                        Session["FileSize"] = resultFileSize;
                        Session["FileName"] = Request.Files[upload].FileName;
                        // GET THE FILE NAME FROM FULL PATH.
                        FileInfo info = new FileInfo(Request.Files[upload].FileName);
                        Session["ImportFileName"] = info.Name;

                        String csvPath = Session["FileName"].ToString();
                        StreamReader csvreader = new StreamReader(varStream);
                        int rowsCountCSV = 0;
                        // TO CHECK EACH AND EVERY ROW THE COLUMN COUNT 58 OR NOT
                        // IF NOT THEN IT IS INSERTING RECORDS WHICH IF EXISTS COUNT = 58.
                        // SO IT SHOULE NOT INSERT ANY TRANSACTIONS IF ANY ONE ROW LESS OR MORE THAN 58 IN CSV.
                        // IT WILL BE ROLLBACK ALL THE TRANSACTIONS AND IT WILL NOT INSERT ANY.
                        Session["RowCountMissing"] = "False";

                        if (info.Extension.ToLower() == ".csv")
                        {
                            
                            while (!csvreader.EndOfStream)
                            {
                                // READ LINE
                                var line = csvreader.ReadLine();
                                if (line != null && line != "")
                                {
                                    // ROWS COUNT CSV.
                                    rowsCountCSV = rowsCountCSV + 1;

                                    // READ DATA.
                                    var values = line.Split(',');

                                    var count = values.Count();
                                    
                                    if (count == 66) // IF CSV HAS TO SEND FULL 58 COLUMNS IF NO DATA THEN PUT NULL OR EMPTY. NOT LESS NOT MORE.
                                    {                                       
                                        // PUT CSV DATA INTO LIST.
                                        objFilingTransactionsModel = new FilingTransactionsModel();

                                        #region Get The Disclosure Period (Filings) Data.
                                        if (rowsCountCSV.ToString() == "1")
                                        {
                                            if (Convert.ToString(values[0]) != "")
                                            {
                                                // GET THE FILINGS DATA.                                            
                                                objImportDisclsoureRptsFilings.FilerId = Convert.ToString(values[0]);
                                                objImportDisclsoureRptsFilings.FilingPeriodId = Convert.ToString(values[1]);
                                                if (objImportDisclsoureRptsFilings.FilingPeriodId.ToUpper() == "NULL" || objImportDisclsoureRptsFilings.FilingPeriodId == "")
                                                    objImportDisclsoureRptsFilings.FilingPeriodId = null;
                                                objImportDisclsoureRptsFilings.FilingCategoryId = Convert.ToString(values[2]);
                                                if (objImportDisclsoureRptsFilings.FilingCategoryId.ToUpper() == "NULL" || objImportDisclsoureRptsFilings.FilingCategoryId == "")
                                                    objImportDisclsoureRptsFilings.FilingCategoryId = null;
                                                objImportDisclsoureRptsFilings.ElectId = Convert.ToString(values[3]);
                                                if (objImportDisclsoureRptsFilings.ElectId.ToUpper() == "NULL" || objImportDisclsoureRptsFilings.ElectId == "")
                                                    objImportDisclsoureRptsFilings.ElectId = null;
                                                objImportDisclsoureRptsFilings.ResigTermTypeId = Convert.ToString(values[4]);
                                                if (objImportDisclsoureRptsFilings.ResigTermTypeId.ToUpper() == "NULL" || objImportDisclsoureRptsFilings.ResigTermTypeId == "")
                                                    objImportDisclsoureRptsFilings.ResigTermTypeId = null;
                                                objImportDisclsoureRptsFilings.RFilingDate = Convert.ToString(values[5]);
                                                if (objImportDisclsoureRptsFilings.RFilingDate.ToUpper() == "NULL" || objImportDisclsoureRptsFilings.RFilingDate == "")
                                                    objImportDisclsoureRptsFilings.RFilingDate = null;
                                                objImportDisclsoureRptsFilings.FilingScheduleId = Convert.ToString(values[6]);
                                                if (objImportDisclsoureRptsFilings.FilingScheduleId.ToUpper() == "NULL" || objImportDisclsoureRptsFilings.FilingScheduleId == "")
                                                    objImportDisclsoureRptsFilings.FilingScheduleId = null;
                                                Session["FilingsDetails"] = objImportDisclsoureRptsFilings;
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        #endregion Get The Disclosure Period (Filings) Data.

                                        // WHEN SENDING % CHARACTER IN NAME FILED THEN...
                                        // REPLACE WITH , BECAUSE IF THEY SEND , IN FILE IT IS TAKING ANOTHER VALUE.
                                        // WHILE READING CSV FILE.
                                        values[22] = values[22].Replace("%", ","); // ENTITY NAME.
                                        values[23] = values[23].Replace("%", ","); // FIRST NAME.
                                        values[24] = values[24].Replace("%", ","); // MIDDLE NAME.
                                        values[25] = values[25].Replace("%", ","); // LAST NAME.
                                        values[26] = values[26].Replace("%", ","); // STREET NAME.
                                        values[27] = values[27].Replace("%", ","); // CITY NAME.
                                        values[35] = values[35].Replace("%", ","); // EXPLANATION.


                                        #region Get The Uploaded Data.
                                        // PUT CSV DATA INTO LIST.
                                        objFilingTransactionsModel = new FilingTransactionsModel();

                                        // GET THE FILINGS DATA.                                            
                                        objFilingTransactionsModel.FilerId = Convert.ToString(values[0]);
                                        objFilingTransactionsModel.FilingPeriodId = Convert.ToString(values[1]);
                                        if (objFilingTransactionsModel.FilingPeriodId.ToUpper() == "NULL" || objFilingTransactionsModel.FilingPeriodId == "")
                                            objFilingTransactionsModel.FilingPeriodId = null;
                                        objFilingTransactionsModel.FilingCategoryId = Convert.ToString(values[2]);
                                        if (objFilingTransactionsModel.FilingCategoryId.ToUpper() == "NULL" || objFilingTransactionsModel.FilingCategoryId == "")
                                            objFilingTransactionsModel.FilingCategoryId = null;
                                        objFilingTransactionsModel.ElectId = Convert.ToString(values[3]);
                                        if (objFilingTransactionsModel.ElectId.ToUpper() == "NULL" || objFilingTransactionsModel.ElectId == "")
                                            objFilingTransactionsModel.ElectId = null;
                                        objFilingTransactionsModel.ResigTermTypeId = Convert.ToString(values[4]);
                                        if (objFilingTransactionsModel.ResigTermTypeId.ToUpper() == "NULL" || objFilingTransactionsModel.ResigTermTypeId == "")
                                            objFilingTransactionsModel.ResigTermTypeId = null;
                                        objFilingTransactionsModel.RFilingDate = Convert.ToString(values[5]);
                                        if (objFilingTransactionsModel.RFilingDate.ToUpper() == "NULL" || objFilingTransactionsModel.RFilingDate == "")
                                            objFilingTransactionsModel.RFilingDate = null;
                                        objFilingTransactionsModel.FilingScheduleId = Convert.ToString(values[6]);
                                        if (objFilingTransactionsModel.FilingScheduleId.ToUpper() == "NULL" || objFilingTransactionsModel.FilingScheduleId == "")
                                            objFilingTransactionsModel.FilingScheduleId = null;

                                        objFilingTransactionsModel.FilingSchedId = Convert.ToString(values[6]);
                                        if (objFilingTransactionsModel.FilingSchedId.ToUpper() == "NULL" || objFilingTransactionsModel.FilingSchedId == "")
                                            objFilingTransactionsModel.FilingSchedId = null;

                                        objFilingTransactionsModel.Loan_Lib_Number = Convert.ToString(values[7]);
                                        if (objFilingTransactionsModel.Loan_Lib_Number.ToUpper() == "NULL" || objFilingTransactionsModel.Loan_Lib_Number == "")
                                            objFilingTransactionsModel.Loan_Lib_Number = null;
                                        objFilingTransactionsModel.TransNumber = Convert.ToString(values[8]);
                                        if (objFilingTransactionsModel.TransNumber.ToUpper() == "NULL" || objFilingTransactionsModel.TransNumber == "")
                                            objFilingTransactionsModel.TransNumber = null;
                                        objFilingTransactionsModel.TransMapping = Convert.ToString(values[9]);
                                        if (objFilingTransactionsModel.TransMapping.ToUpper() == "NULL" || objFilingTransactionsModel.TransMapping == "")
                                            objFilingTransactionsModel.TransMapping = null;
                                        objFilingTransactionsModel.SchedDate = Convert.ToString(values[10]);
                                        if (objFilingTransactionsModel.SchedDate.ToUpper() == "NULL" || objFilingTransactionsModel.SchedDate == "")
                                            objFilingTransactionsModel.SchedDate = null;
                                        objFilingTransactionsModel.OrgDate = Convert.ToString(values[11]);
                                        if (objFilingTransactionsModel.OrgDate.ToUpper() == "NULL" || objFilingTransactionsModel.OrgDate == "")
                                            objFilingTransactionsModel.OrgDate = null;
                                        objFilingTransactionsModel.ContributorTypeId = Convert.ToString(values[12]);
                                        if (objFilingTransactionsModel.ContributorTypeId.ToUpper() == "NULL" || objFilingTransactionsModel.ContributorTypeId == "")
                                            objFilingTransactionsModel.ContributorTypeId = null;
                                        objFilingTransactionsModel.ContributionTypeId = Convert.ToString(values[13]);
                                        if (objFilingTransactionsModel.ContributionTypeId.ToUpper() == "NULL" || objFilingTransactionsModel.ContributionTypeId == "")
                                            objFilingTransactionsModel.ContributionTypeId = null;
                                        objFilingTransactionsModel.TransferTypeId = Convert.ToString(values[14]);
                                        if (objFilingTransactionsModel.TransferTypeId.ToUpper() == "NULL" || objFilingTransactionsModel.TransferTypeId == "")
                                            objFilingTransactionsModel.TransferTypeId = null;
                                        objFilingTransactionsModel.ReceiptTypeId = Convert.ToString(values[15]);
                                        if (objFilingTransactionsModel.ReceiptTypeId.ToUpper() == "NULL" || objFilingTransactionsModel.ReceiptTypeId == "")
                                            objFilingTransactionsModel.ReceiptTypeId = null;
                                        objFilingTransactionsModel.ReceiptCodeId = Convert.ToString(values[16]);
                                        if (objFilingTransactionsModel.ReceiptCodeId.ToUpper() == "NULL" || objFilingTransactionsModel.ReceiptCodeId == "")
                                            objFilingTransactionsModel.ReceiptCodeId = null;
                                        objFilingTransactionsModel.PurposeCodeId = Convert.ToString(values[17]);
                                        if (objFilingTransactionsModel.PurposeCodeId.ToUpper() == "NULL" || objFilingTransactionsModel.PurposeCodeId == "")
                                            objFilingTransactionsModel.PurposeCodeId = null;
                                        objFilingTransactionsModel.IsExpSubcontractor = Convert.ToString(values[18]).ToUpper();
                                        if (objFilingTransactionsModel.IsExpSubcontractor.ToUpper() == "NULL" || objFilingTransactionsModel.IsExpSubcontractor == "")
                                            objFilingTransactionsModel.IsExpSubcontractor = null;
                                        objFilingTransactionsModel.IsExpPartialPay = Convert.ToString(values[19]).ToUpper();
                                        if (objFilingTransactionsModel.IsExpPartialPay.ToUpper() == "NULL" || objFilingTransactionsModel.IsExpPartialPay == "")
                                            objFilingTransactionsModel.IsExpPartialPay = null;
                                        objFilingTransactionsModel.IsExistingLiab = Convert.ToString(values[20]).ToUpper();
                                        if (objFilingTransactionsModel.IsExistingLiab.ToUpper() == "NULL" || objFilingTransactionsModel.IsExistingLiab == "")
                                            objFilingTransactionsModel.IsExistingLiab = null;
                                        objFilingTransactionsModel.IsLiabPartialForgiven = Convert.ToString(values[21]).ToUpper();
                                        if (objFilingTransactionsModel.IsLiabPartialForgiven.ToUpper() == "NULL" || objFilingTransactionsModel.IsLiabPartialForgiven == "")
                                            objFilingTransactionsModel.IsLiabPartialForgiven = null;
                                        objFilingTransactionsModel.FlngEntName = Convert.ToString(values[22]).Trim();
                                        if (objFilingTransactionsModel.FlngEntName.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntName == "")
                                            objFilingTransactionsModel.FlngEntName = null;
                                        objFilingTransactionsModel.FlngEntFirstName = Convert.ToString(values[23]).Trim();
                                        if (objFilingTransactionsModel.FlngEntFirstName.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntFirstName == "")
                                            objFilingTransactionsModel.FlngEntFirstName = null;
                                        objFilingTransactionsModel.FlngEntMiddleName = Convert.ToString(values[24]).Trim();
                                        if (objFilingTransactionsModel.FlngEntMiddleName.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntMiddleName == "")
                                            objFilingTransactionsModel.FlngEntMiddleName = null;
                                        objFilingTransactionsModel.FlngEntLastName = Convert.ToString(values[25]).Trim();
                                        if (objFilingTransactionsModel.FlngEntLastName.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntLastName == "")
                                            objFilingTransactionsModel.FlngEntLastName = null;
                                        objFilingTransactionsModel.FlngEntStrName = Convert.ToString(values[26]).Trim();
                                        if (objFilingTransactionsModel.FlngEntStrName.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntStrName == "")
                                            objFilingTransactionsModel.FlngEntStrName = null;
                                        objFilingTransactionsModel.FlngEntCity = Convert.ToString(values[27]).Trim();
                                        if (objFilingTransactionsModel.FlngEntCity.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntCity == "")
                                            objFilingTransactionsModel.FlngEntCity = null;
                                        objFilingTransactionsModel.FlngEntState = Convert.ToString(values[28]).Trim();
                                        if (objFilingTransactionsModel.FlngEntState.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntState == "")
                                            objFilingTransactionsModel.FlngEntState = null;
                                        objFilingTransactionsModel.FlngEntZip = Convert.ToString(values[29]).Trim();
                                        if (objFilingTransactionsModel.FlngEntZip.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntZip == "")
                                            objFilingTransactionsModel.FlngEntZip = null;
                                        objFilingTransactionsModel.FlngEntCountry = Convert.ToString(values[30]).Trim();
                                        if (objFilingTransactionsModel.FlngEntCountry.ToUpper() == "NULL" || objFilingTransactionsModel.FlngEntCountry == "")
                                            objFilingTransactionsModel.FlngEntCountry = null;
                                        objFilingTransactionsModel.PaymentTypeId = Convert.ToString(values[31]);
                                        if (objFilingTransactionsModel.FilingSchedId == "14")
                                            objFilingTransactionsModel.PaymentTypeId = null;
                                        else if (objFilingTransactionsModel.PaymentTypeId.ToUpper() == "NULL" || objFilingTransactionsModel.PaymentTypeId == "")
                                            objFilingTransactionsModel.PaymentTypeId = null;
                                        objFilingTransactionsModel.PayNumber = Convert.ToString(values[32]);
                                        if (objFilingTransactionsModel.PayNumber.ToUpper() == "NULL" || objFilingTransactionsModel.PayNumber == "")
                                            objFilingTransactionsModel.PayNumber = null;
                                        objFilingTransactionsModel.OwedAmt = Convert.ToString(values[33]);
                                        if (objFilingTransactionsModel.OwedAmt.ToUpper() == "NULL" || objFilingTransactionsModel.OwedAmt == "")
                                            objFilingTransactionsModel.OwedAmt = null;
                                        objFilingTransactionsModel.OrgAmt = Convert.ToString(values[34]);
                                        if (objFilingTransactionsModel.OrgAmt.ToUpper() == "NULL" || objFilingTransactionsModel.OrgAmt == "")
                                            objFilingTransactionsModel.OrgAmt = null;
                                        objFilingTransactionsModel.TransExplanation = Convert.ToString(values[35]);
                                        if (objFilingTransactionsModel.TransExplanation.ToUpper() == "NULL" || objFilingTransactionsModel.TransExplanation == "")
                                            objFilingTransactionsModel.TransExplanation = null;
                                        objFilingTransactionsModel.LoanOtherId = Convert.ToString(values[36]);
                                        if (objFilingTransactionsModel.LoanOtherId.ToUpper() == "NULL" || objFilingTransactionsModel.LoanOtherId == "")
                                            objFilingTransactionsModel.LoanOtherId = null;
                                        objFilingTransactionsModel.RItemized = Convert.ToString(values[37]).ToUpper();
                                        if (objFilingTransactionsModel.RItemized.ToUpper() == "NULL" || objFilingTransactionsModel.RItemized == "")
                                            objFilingTransactionsModel.RItemized = null;
                                        objFilingTransactionsModel.RLiability = Convert.ToString(values[38]).ToUpper();
                                        if (objFilingTransactionsModel.RLiability.ToUpper() == "NULL" || objFilingTransactionsModel.RLiability == "")
                                            objFilingTransactionsModel.RLiability = null;
                                        objFilingTransactionsModel.ElectionDate = Convert.ToString(values[39]);
                                        if (objFilingTransactionsModel.ElectionDate.ToUpper() == "NULL" || objFilingTransactionsModel.ElectionDate == "")
                                            objFilingTransactionsModel.ElectionDate = null;
                                        objFilingTransactionsModel.ElectionTypeId = Convert.ToString(values[40]);
                                        if (objFilingTransactionsModel.ElectionTypeId.ToUpper() == "NULL" || objFilingTransactionsModel.ElectionTypeId == "")
                                            objFilingTransactionsModel.ElectionTypeId = null;
                                        objFilingTransactionsModel.ElectionYear = Convert.ToString(values[41]);
                                        if (objFilingTransactionsModel.ElectionYear.ToUpper() == "NULL" || objFilingTransactionsModel.ElectionYear == "")
                                            objFilingTransactionsModel.ElectionYear = null;
                                        objFilingTransactionsModel.TreasId = Convert.ToString(values[42]);
                                        if (objFilingTransactionsModel.TreasId.ToUpper() == "NULL" || objFilingTransactionsModel.TreasId == "")
                                            objFilingTransactionsModel.TreasId = null;
                                        objFilingTransactionsModel.TreasurerOccupation = Convert.ToString(values[43]);
                                        if (objFilingTransactionsModel.TreasurerOccupation.ToUpper() == "NULL" || objFilingTransactionsModel.TreasurerOccupation == "")
                                            objFilingTransactionsModel.TreasurerOccupation = null;
                                        objFilingTransactionsModel.TreasurerEmployer = Convert.ToString(values[44]);
                                        if (objFilingTransactionsModel.TreasurerEmployer.ToUpper() == "NULL" || objFilingTransactionsModel.TreasurerEmployer == "")
                                            objFilingTransactionsModel.TreasurerEmployer = null;
                                        objFilingTransactionsModel.TreasurerStreetAddress = Convert.ToString(values[45]);
                                        if (objFilingTransactionsModel.TreasurerStreetAddress.ToUpper() == "NULL" || objFilingTransactionsModel.TreasurerStreetAddress == "")
                                            objFilingTransactionsModel.TreasurerStreetAddress = null;
                                        objFilingTransactionsModel.TreasurerCity = Convert.ToString(values[46]);
                                        if (objFilingTransactionsModel.TreasurerCity.ToUpper() == "NULL" || objFilingTransactionsModel.TreasurerCity == "")
                                            objFilingTransactionsModel.TreasurerCity = null;
                                        objFilingTransactionsModel.TreasurerState = Convert.ToString(values[47]);
                                        if (objFilingTransactionsModel.TreasurerState.ToUpper() == "NULL" || objFilingTransactionsModel.TreasurerState == "")
                                            objFilingTransactionsModel.TreasurerState = null;
                                        objFilingTransactionsModel.TreasurerZip = Convert.ToString(values[48]);
                                        if (objFilingTransactionsModel.TreasurerZip.ToUpper() == "NULL" || objFilingTransactionsModel.TreasurerZip == "")
                                            objFilingTransactionsModel.TreasurerZip = null;
                                        objFilingTransactionsModel.ParentFilingEntityId = Convert.ToString(values[49]);
                                        if (objFilingTransactionsModel.ParentFilingEntityId.ToUpper() == "NULL" || objFilingTransactionsModel.ParentFilingEntityId == "")
                                            objFilingTransactionsModel.ParentFilingEntityId = null;
                                        objFilingTransactionsModel.OfficeID = Convert.ToString(values[50]);
                                        if (objFilingTransactionsModel.OfficeID.ToUpper() == "NULL" || objFilingTransactionsModel.OfficeID == "")
                                            objFilingTransactionsModel.OfficeID = null;
                                        objFilingTransactionsModel.DistrictID = Convert.ToString(values[51]);
                                        if (objFilingTransactionsModel.DistrictID.ToUpper() == "NULL" || objFilingTransactionsModel.DistrictID == "")
                                            objFilingTransactionsModel.DistrictID = null;
                                        objFilingTransactionsModel.DistOffCandBalProp = Convert.ToString(values[52]);
                                        if (objFilingTransactionsModel.DistOffCandBalProp.ToUpper() == "NULL" || objFilingTransactionsModel.DistOffCandBalProp == "")
                                            objFilingTransactionsModel.DistOffCandBalProp = null;
                                        objFilingTransactionsModel.ContributorOccupation = Convert.ToString(values[53]);
                                        if (objFilingTransactionsModel.ContributorOccupation.ToUpper() == "NULL" || objFilingTransactionsModel.ContributorOccupation == "")
                                            objFilingTransactionsModel.ContributorOccupation = null;
                                        objFilingTransactionsModel.ContributorEmployer = Convert.ToString(values[54]);
                                        if (objFilingTransactionsModel.ContributorEmployer.ToUpper() == "NULL" || objFilingTransactionsModel.ContributorEmployer == "")
                                            objFilingTransactionsModel.ContributorEmployer = null;
                                        objFilingTransactionsModel.IEDescription = Convert.ToString(values[55]);
                                        if (objFilingTransactionsModel.IEDescription.ToUpper() == "NULL" || objFilingTransactionsModel.IEDescription == "")
                                            objFilingTransactionsModel.IEDescription = null;
                                        objFilingTransactionsModel.RIESupported = Convert.ToString(values[56]).ToUpper();
                                        if (objFilingTransactionsModel.RIESupported.ToUpper() == "NULL" || objFilingTransactionsModel.RIESupported == "")
                                            objFilingTransactionsModel.RIESupported = null;
                                        objFilingTransactionsModel.RIEIncluded = Convert.ToString(values[57]).ToUpper();
                                        if (objFilingTransactionsModel.RIEIncluded.ToUpper() == "NULL" || objFilingTransactionsModel.RIEIncluded == "")
                                            objFilingTransactionsModel.RIEIncluded = null;
                                        objFilingTransactionsModel.RParent = Convert.ToString(values[58]).ToUpper();
                                        if (objFilingTransactionsModel.RParent.ToUpper() == "NULL" || objFilingTransactionsModel.RParent == "")
                                            objFilingTransactionsModel.RParent = null;

                                        objFilingTransactionsModel.IsClaim = Convert.ToString(values[59]).ToUpper();
                                        if (objFilingTransactionsModel.IsClaim.ToUpper() == "NULL" || objFilingTransactionsModel.IsClaim == "")
                                            objFilingTransactionsModel.IsClaim = null;
                                        objFilingTransactionsModel.InDistrict = Convert.ToString(values[60]).ToUpper();
                                        if (objFilingTransactionsModel.InDistrict.ToUpper() == "NULL" || objFilingTransactionsModel.InDistrict == "")
                                            objFilingTransactionsModel.InDistrict = null;
                                        objFilingTransactionsModel.Minor = Convert.ToString(values[61]).ToUpper();
                                        if (objFilingTransactionsModel.Minor.ToUpper() == "NULL" || objFilingTransactionsModel.Minor == "")
                                            objFilingTransactionsModel.Minor = null;
                                        objFilingTransactionsModel.Vendor = Convert.ToString(values[62]).ToUpper();
                                        if (objFilingTransactionsModel.Vendor.ToUpper() == "NULL" || objFilingTransactionsModel.Vendor == "")
                                            objFilingTransactionsModel.Vendor = null;
                                        objFilingTransactionsModel.Lobbyist = Convert.ToString(values[63]).ToUpper();
                                        if (objFilingTransactionsModel.Lobbyist.ToUpper() == "NULL" || objFilingTransactionsModel.Lobbyist == "")
                                            objFilingTransactionsModel.Lobbyist = null;
                                        objFilingTransactionsModel.RContributions = Convert.ToString(values[64]).ToUpper();
                                        if (objFilingTransactionsModel.RContributions.ToUpper() == "NULL" || objFilingTransactionsModel.RContributions == "")
                                            objFilingTransactionsModel.RContributions = null;

                                        objFilingTransactionsModel.SupportOppose = Convert.ToString(values[65]).ToUpper();
                                        if (objFilingTransactionsModel.SupportOppose.ToUpper() == "NULL" || objFilingTransactionsModel.SupportOppose == "")
                                            objFilingTransactionsModel.SupportOppose = null;

                                        objFilingTransactionsModel.CreatedBy = Session["UserName"].ToString();
                                        lstFilingTransactionsModel.Add(objFilingTransactionsModel);
                                        #endregion Get The Uploaded Data.                                                        
                                    }
                                    else
                                    {
                                        Session["RowCountMissing"] = "True";
                                        objImportErrorMessageModel = new ImportErrorMessageModel();
                                        objImportErrorMessageModel.RowNumber = "";
                                        objImportErrorMessageModel.ColumnName = "";
                                        objImportErrorMessageModel.ErrorMessages = "CSV requires 66 columns separated by 65 commas.";
                                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                        Session["ErrorMessageGridData_VI"] = lstImportErrorMessageModel;                                        
                                        Session["RowCountMissing_VI"] = "True";
                                        Session["RowCountMissingPosition"] = rowsCountCSV.ToString();
                                        break;
                                    }
                                }
                                else
                                {
                                    objImportErrorMessageModel = new ImportErrorMessageModel();
                                    objImportErrorMessageModel.RowNumber = "";
                                    objImportErrorMessageModel.ColumnName = "";
                                    objImportErrorMessageModel.ErrorMessages = "Only CSV files are allowed.";
                                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                    Session["ErrorMessageGridData_VI"] = lstImportErrorMessageModel;
                                    break;
                                }
                            }

                        }
                        else
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = "";
                            objImportErrorMessageModel.ColumnName = "";
                            objImportErrorMessageModel.ErrorMessages = "Only CSV files are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            Session["ErrorMessageGridData_VI"] = lstImportErrorMessageModel;
                            break;
                        }

                        //if (Session["RowCountMissing"].ToString() == "True")
                        //    break;
                        // GET THE ROWS COUNT.s
                        Session["RowsCountCSV"] = rowsCountCSV.ToString();
                        Session["FilingTransactionDataUpload"] = lstFilingTransactionsModel;
                    }
                }

                return Json("", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                if (Session["UserName"] != null)
                {
                    objERClass.LogExceptionInDatabase(ConfigurationManager.AppSettings["ApplicationKey"].ToString(), ex.Message, "ImportDisclosureReportController", System.Reflection.MethodBase.GetCurrentMethod().Name, "", "", ex.Message, Session["UserName"].ToString());
                }
                throw;
            }
        }
        #endregion UploadImportDisclosureRptsData
        #region Fields Validation
        /// <summary>
        /// SetValidationMessage
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <param name="rowNumber"></param>
        public void SetValidationMessage(FilingTransactionsModel objFilingTransactionsModel, string rowNumber, string txtFilerId)
        {
            //// GET THE CUT OFF DATE.
            String strCutOffDate;
            if (Session["CutOffDateFilings"] != null)
            {
                strCutOffDate = Session["CutOffDateFilings"].ToString();
            }
            else
            {
                strCutOffDate = "";
            }


            ImportErrorMessageModel objImportErrorMessageModel;
            var regexItem = new Regex("^[a-zA-Z0-9 #'.,&()%-]*$");
            var regexItemCheckNumber = new Regex("^[a-zA-Z0-9]*$");
            var regexItemCity = new Regex("^[a-zA-Z #'.,%-]*$");
            Regex re = new Regex(@"^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$");

            #region Filer ID Validation
            //Filer ID Validation
            if (objFilingTransactionsModel.FilerId == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                objImportErrorMessageModel.ErrorMessages = "Filer Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.FilerId != txtFilerId)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                objImportErrorMessageModel.ErrorMessages = "The Filer ID does not match with the value selected in Filter.";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion

            #region Filing Period ID Validation
            if (objFilingTransactionsModel.FilingPeriodId == null)
            {
                if (objFilingTransactionsModel.FilingCategoryId != "4" &&
                    objFilingTransactionsModel.FilingCategoryId != "14")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FILING_PERIOD_ID - Column B";
                    objImportErrorMessageModel.ErrorMessages = "Filing Period Id is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "FILING_PERIOD" && x.Id == objFilingTransactionsModel.FilingPeriodId.ToString());
                if (!results)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FILING_PERIOD_ID - Column B";
                    objImportErrorMessageModel.ErrorMessages = "Filing Period Id is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Filing Category ID
            if (String.IsNullOrEmpty(objFilingTransactionsModel.FilingCategoryId))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_CAT_ID - Column C";
                objImportErrorMessageModel.ErrorMessages = "Filing Category Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "FILING_CATEGORY" && x.Id == objFilingTransactionsModel.FilingCategoryId.ToString());
                if (!results)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FILING_CAT_ID - Column C";
                    objImportErrorMessageModel.ErrorMessages = "Filing Category Id is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Elect ID
            if (objFilingTransactionsModel.ElectId == null)
            {
                if (Session["VDR_FilingTypeId"].ToString() != "12") // IT IS OFF-CYCLE THEN NO ELECT_ID.
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECT_ID - Column D";
                    objImportErrorMessageModel.ErrorMessages = "Elect Id is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "ELECTION" && x.Id == objFilingTransactionsModel.ElectId.ToString());
                if (!results)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECT_ID - Column D";
                    objImportErrorMessageModel.ErrorMessages = "Elect Id is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region RESIG_TERM_TYPE_ID validation
            if (objFilingTransactionsModel.ResigTermTypeId != null)
            {
                if (!lstVendorImportValidation.Any(x => x.TableName == "RESIGNATION_TERMINATION_TYPE" && x.Id == objFilingTransactionsModel.ResigTermTypeId.ToString()))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "RESIG_TERM_TYPE_ID - Column E";
                    objImportErrorMessageModel.ErrorMessages = "Resignation Termination Type is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region R_FILING_DATE validation
            if (objFilingTransactionsModel.RFilingDate == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                objImportErrorMessageModel.ErrorMessages = "Filing Date is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else
            {
                Match match = re.Match(objFilingTransactionsModel.RFilingDate);
                //Verify whether entered date is Valid date.
                DateTime dt;
                if (!match.Success)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!DateTime.TryParse(objFilingTransactionsModel.RFilingDate, out dt))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }//Remove pcfb monthly filings code
            }//Remove pcfb monthly filings code
            #endregion

            #region Filing Sched ID Validation
            //Filing Sched ID Validation
            if (objFilingTransactionsModel.FilingSchedId == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_SCHED_ID - Column G";
                objImportErrorMessageModel.ErrorMessages = "Filing Schedule Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!lstVendorImportValidation.Any(x => x.TableName == "FILING_SCHEDULES" && x.Id == objFilingTransactionsModel.FilingSchedId.ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_SCHED_ID - Column G";
                objImportErrorMessageModel.ErrorMessages = "Filing Schedule Id is incorrect.";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion

            //Validate Is Claim should not enter to other schedule except Sched A
            if (objFilingTransactionsModel.FilingSchedId != "1" )
            {
                if (objFilingTransactionsModel.IsClaim != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_CLAIM - Column BH";
                    objImportErrorMessageModel.ErrorMessages = "Transactions only allowed to be claimed on Monetary Contributions Received From Ind. & Part.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }


                //R_IN_DISTRICT Validation
                if (objFilingTransactionsModel.InDistrict != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_IN_DISTRICT - Column BI";
                    objImportErrorMessageModel.ErrorMessages = "Transactions only allowed to be claimed on Monetary Contributions Received From Ind. & Part.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //R_MINOR Validation
                if (objFilingTransactionsModel.Minor != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_MINOR - Column BJ";
                    objImportErrorMessageModel.ErrorMessages = "Transactions only allowed to be claimed on Monetary Contributions Received From Ind. & Part.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //R_VENDOR Validation
                if (objFilingTransactionsModel.Vendor != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_VENDOR - Column BK";
                    objImportErrorMessageModel.ErrorMessages = "Transactions only allowed to be claimed on Monetary Contributions Received From Ind. & Part.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //R_LOBBYIST Validation
                if (objFilingTransactionsModel.Lobbyist != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_LOBBYIST - Column BL";
                    objImportErrorMessageModel.ErrorMessages = "Transactions only allowed to be claimed on Monetary Contributions Received From Ind. & Part.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            #region Loan Liability Number Validation
            //Loan Liability Number Validation
            if (objFilingTransactionsModel.FilingSchedId == "6")
            {
                if (objFilingTransactionsModel.Loan_Lib_Number == null)
                {
                    if (objFilingTransactionsModel.IsExpPartialPay == "Y")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "LOAN_LIB_NUMBER - Column H";
                        objImportErrorMessageModel.ErrorMessages = "Loan Liability Number is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else if (objFilingTransactionsModel.Loan_Lib_Number.Count() > 200)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "LOAN_LIB_NUMBER - Column H";
                    objImportErrorMessageModel.ErrorMessages = "Loan Liability Number should be 200 characters or less";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else if (objFilingTransactionsModel.FilingSchedId == "9"
                    || objFilingTransactionsModel.FilingSchedId == "10"
                    || objFilingTransactionsModel.FilingSchedId == "11"
                    || objFilingTransactionsModel.FilingSchedId == "14")
            {
                if (objFilingTransactionsModel.Loan_Lib_Number == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "LOAN_LIB_NUMBER - Column H";
                    objImportErrorMessageModel.ErrorMessages = "Loan Liability Number is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.Loan_Lib_Number.Count() > 200)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "LOAN_LIB_NUMBER - Column H";
                    objImportErrorMessageModel.ErrorMessages = "Loan Liability Number should be 200 characters or less";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region TRANS_NUMBER Validation
            //Filing TRANS_NUMBER Validation
            if (objFilingTransactionsModel.TransNumber == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.TransNumber.Count() > 200)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number should be 200 characters or less";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objItemizedReportsBroker.LoanLiabilityExistsResponse(txtFilerId, objFilingTransactionsModel.TransNumber, ""))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number already exists for this filer.";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion

            #region TRANS_MAPPING Validation
            //TRANS_MAPPING Validation
            if (objFilingTransactionsModel.FilingSchedId == "6")
            {
                //if (objFilingTransactionsModel.TransMapping == null)
                //{
                //    if (objFilingTransactionsModel.IsExpSubcontractor == "Y")
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                //        objImportErrorMessageModel.ErrorMessages = "Transaction Mapping number is required";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (objFilingTransactionsModel.IsExpPartialPay == "Y")
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                //        objImportErrorMessageModel.ErrorMessages = "Transaction Mapping number is required";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (objFilingTransactionsModel.IsExistingLiab == "Y")
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                //        objImportErrorMessageModel.ErrorMessages = "Transaction Mapping number is required";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (objFilingTransactionsModel.IsLiabPartialForgiven == "Y")
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                //        objImportErrorMessageModel.ErrorMessages = "Transaction Mapping number is required";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //}
                if (objFilingTransactionsModel.TransMapping != null)
                {
                    if (objFilingTransactionsModel.TransMapping.Count() > 200)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                        objImportErrorMessageModel.ErrorMessages = "Transaction Mapping number should be 200 characters or less";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else if (objFilingTransactionsModel.FilingSchedId == "9"
                || objFilingTransactionsModel.FilingSchedId == "10"
                || objFilingTransactionsModel.FilingSchedId == "11"
                || objFilingTransactionsModel.FilingSchedId == "12"
                || objFilingTransactionsModel.FilingSchedId == "13"
                || objFilingTransactionsModel.FilingSchedId == "14"
                || objFilingTransactionsModel.FilingSchedId == "15"
                || objFilingTransactionsModel.FilingSchedId == "17"
                || objFilingTransactionsModel.FilingSchedId == "21")
            {
                //if (objFilingTransactionsModel.TransMapping == null)
                //{
                //    objImportErrorMessageModel = new ImportErrorMessageModel();
                //    objImportErrorMessageModel.RowNumber = rowNumber;
                //    objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                //    objImportErrorMessageModel.ErrorMessages = "Transaction Mapping number is required";
                //    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //}
                if (objFilingTransactionsModel.TransMapping != null)
                {
                    if (objFilingTransactionsModel.TransMapping.Count() > 200)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                        objImportErrorMessageModel.ErrorMessages = "Transaction Mapping number should be 200 characters or less";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }   
            }

            if (Session["COMM_TYPE_ID"].ToString() == "19")
            {
                if (objFilingTransactionsModel.FilingSchedId == "18")
                {
                    if (objFilingTransactionsModel.TransMapping == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_MAPPING - Column J";
                        objImportErrorMessageModel.ErrorMessages = "Transaction Mapping is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
                
            #endregion

            #region Sched Date Validation
            ///Sched Date Validation
            if (objFilingTransactionsModel.FilingSchedId == "15")
            {
                if (objFilingTransactionsModel.SchedDate != null)
                {
                    //Regex re = new Regex(@"^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$");
                    Match match = re.Match(objFilingTransactionsModel.SchedDate);

                    //Verify whether entered date is Valid date.
                    DateTime dt;
                    if (!match.Success)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                        objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dt))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                        objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                            objImportErrorMessageModel.ErrorMessages = "Sched Date cannot be later than Cut Off Date";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                            objImportErrorMessageModel.ErrorMessages = "Sched Date cannot be later than Cut Off Date";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.SchedDate == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                    objImportErrorMessageModel.ErrorMessages = "Sched Date is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    //Regex re = new Regex(@"^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$");
                    Match match = re.Match(objFilingTransactionsModel.SchedDate);

                    //Verify whether entered date is Valid date.
                    DateTime dt;
                    if (!match.Success)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                        objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dt))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                        objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                            objImportErrorMessageModel.ErrorMessages = "Sched Date cannot be later than Cut Off Date";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                            objImportErrorMessageModel.ErrorMessages = "Sched Date cannot be later than Cut Off Date";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            }
            #endregion

            #region Org Date Validation
            //Org Date Validation
            if (objFilingTransactionsModel.FilingSchedId == "11" ||
                objFilingTransactionsModel.FilingSchedId == "12" ||
                objFilingTransactionsModel.FilingSchedId == "13" ||
                objFilingTransactionsModel.FilingSchedId == "14" ||
                objFilingTransactionsModel.FilingSchedId == "21")
            {
                if (objFilingTransactionsModel.OrgDate != null)
                {
                    //Regex re = new Regex(@"^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$");
                    Match match = re.Match(objFilingTransactionsModel.OrgDate);

                    //Verify whether entered date is Valid date.
                    DateTime dt;
                    if (!match.Success)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "ORG_DATE - Column L";
                        objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!DateTime.TryParse(objFilingTransactionsModel.OrgDate, out dt))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "ORG_DATE - Column L";
                        objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            #endregion

            #region Is Expenditure Subcontracted? Validation
            if (objFilingTransactionsModel.FilingSchedId == "6" ||
                objFilingTransactionsModel.FilingSchedId == "20")
            {
                if (objFilingTransactionsModel.RItemized == "Y")
                {
                    if (objFilingTransactionsModel.IsExpSubcontractor == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "Is Expenditure Subcontracted? - Column S";
                        objImportErrorMessageModel.ErrorMessages = "Subcontractor is required.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.IsExpSubcontractor != "N" && objFilingTransactionsModel.IsExpSubcontractor != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "Is Expenditure Subcontracted? - Column S";
                            objImportErrorMessageModel.ErrorMessages = "Subcontractor should be either Y or N.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }   
            }
            else
            {
                if (objFilingTransactionsModel.IsExpSubcontractor != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "Is Expenditure Subcontracted? - Column S";
                    objImportErrorMessageModel.ErrorMessages = "Subcontractor should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Is Expenditure a Partial Payment?  Validation
            if (objFilingTransactionsModel.FilingSchedId == "6" ||
                objFilingTransactionsModel.FilingSchedId == "20")
            {
                if (objFilingTransactionsModel.RItemized == "Y")
                {
                    if (objFilingTransactionsModel.IsExpPartialPay == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "Is Expenditure a Partial Payment? - Column T";
                        objImportErrorMessageModel.ErrorMessages = "Is Expenditure a Partial Payment is required.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.IsExpPartialPay != "N" && objFilingTransactionsModel.IsExpPartialPay != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "Is Expenditure a Partial Payment? - Column T";
                            objImportErrorMessageModel.ErrorMessages = "Is Expenditure a Partial Payment should be either Y or N.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.IsExpPartialPay != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "Is Expenditure a Partial Payment? - Column T";
                    objImportErrorMessageModel.ErrorMessages = "Is Expenditure a Partial Payment should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Is this existing Liability? Validation
            if (objFilingTransactionsModel.FilingSchedId == "6" ||
                objFilingTransactionsModel.FilingSchedId == "11" ||
                objFilingTransactionsModel.FilingSchedId == "20")
            {
                if (objFilingTransactionsModel.RItemized == "Y")
                {
                    if (objFilingTransactionsModel.IsExistingLiab == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "Is this existing Liability? - Column U";
                        objImportErrorMessageModel.ErrorMessages = "Is this existing Liability is required.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.IsExistingLiab != "N" && objFilingTransactionsModel.IsExistingLiab != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "Is this existing Liability? - Column U";
                            objImportErrorMessageModel.ErrorMessages = "Is this existing Liability should be either Y or N.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.IsExistingLiab != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "Is this existing Liability? - Column U";
                    objImportErrorMessageModel.ErrorMessages = "Is this existing Liability should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Is Liability a Partial Forgiven?  Validation
            if (objFilingTransactionsModel.FilingSchedId == "11")
            {
                if (objFilingTransactionsModel.IsLiabPartialForgiven == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "Is Liability a Partial Forgiven? - Column V";
                    objImportErrorMessageModel.ErrorMessages = "Is Liability a Partial Forgiven is required.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    if (objFilingTransactionsModel.IsLiabPartialForgiven != "N" && objFilingTransactionsModel.IsLiabPartialForgiven != "Y")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "Is Liability a Partial Forgiven? - Column V";
                        objImportErrorMessageModel.ErrorMessages = "Is Liability a Partial Forgiven should be either Y or N";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.IsLiabPartialForgiven != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "Is Liability a Partial Forgiven? - Column V";
                    objImportErrorMessageModel.ErrorMessages = "Is Liability a Partial Forgiven should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Common Validation for R Itemized Validation
            //Common Validation for R Itemized Validation 
            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                #region Contributor Type Code Validation
                if (objFilingTransactionsModel.FilingSchedId == "1" ||
                    objFilingTransactionsModel.FilingSchedId == "3" ||
                    objFilingTransactionsModel.FilingSchedId == "4")
                {
                    //Contributor Type Code Required Validation
                    if (objFilingTransactionsModel.ContributorTypeId == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                        objImportErrorMessageModel.ErrorMessages = "Contributor Type Code is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString()))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Contributor Type Code";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.ContributorTypeId != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                        objImportErrorMessageModel.ErrorMessages = "Contributor Type Code should be either NULL or blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                #endregion

                ////Entity Name, First Name, Middle Name and Last Name Validation
                //if (objFilingTransactionsModel.FilingSchedId == "1")
                //{
                //    if (objFilingTransactionsModel.ContributorTypeId == "5")
                //    {
                //        if (objFilingTransactionsModel.FlngEntName == null)
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Partnership Name is required";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //        else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //        else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Partnership Name should be 40 characters";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //    }
                //    else
                //    {
                //        if (objFilingTransactionsModel.ContributorTypeId == "1" ||
                //             objFilingTransactionsModel.ContributorTypeId == "2" ||
                //             objFilingTransactionsModel.ContributorTypeId == "3" ||
                //             objFilingTransactionsModel.ContributorTypeId == "4")
                //        {
                //            if (objFilingTransactionsModel.FlngEntFirstName == null)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "First Name is required";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }

                //            if (objFilingTransactionsModel.FlngEntMiddleName != null)
                //            {
                //                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                //                {
                //                    objImportErrorMessageModel = new ImportErrorMessageModel();
                //                    objImportErrorMessageModel.RowNumber = rowNumber;
                //                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                //                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                //                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //                }
                //                else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                //                {
                //                    objImportErrorMessageModel = new ImportErrorMessageModel();
                //                    objImportErrorMessageModel.RowNumber = rowNumber;
                //                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                //                    objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                //                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //                }
                //            }

                //            if (objFilingTransactionsModel.FlngEntLastName == null)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //        }
                //    }
                //}

                //if (objFilingTransactionsModel.FilingSchedId == "2" ||
                //    objFilingTransactionsModel.FilingSchedId == "3" ||
                //    objFilingTransactionsModel.FilingSchedId == "5" ||
                //    objFilingTransactionsModel.FilingSchedId == "6" ||                    
                //    objFilingTransactionsModel.FilingSchedId == "17")
                //{
                //    if (objFilingTransactionsModel.FlngEntName == null)
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //        objImportErrorMessageModel.ErrorMessages = "Name is required";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //        objImportErrorMessageModel.ErrorMessages = "Name should be 40 characters";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //}

                //if (objFilingTransactionsModel.FilingSchedId == "4")
                //{
                //    if (objFilingTransactionsModel.ContributorTypeId == "5" ||
                //        objFilingTransactionsModel.ContributorTypeId == "6" ||
                //        objFilingTransactionsModel.ContributorTypeId == "7" ||
                //        objFilingTransactionsModel.ContributorTypeId == "9" ||
                //        objFilingTransactionsModel.ContributorTypeId == "10" ||
                //        objFilingTransactionsModel.ContributorTypeId == "11" ||
                //        objFilingTransactionsModel.ContributorTypeId == "12" ||
                //        objFilingTransactionsModel.ContributorTypeId == "13" ||
                //        objFilingTransactionsModel.ContributorTypeId == "14")
                //    {
                //        if (objFilingTransactionsModel.FlngEntName == null)
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Contributor Name is required";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //        else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //        else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Contributor Name should be 40 characters";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //    }
                //    else 
                //    {
                //        if (objFilingTransactionsModel.ContributorTypeId == "1" ||
                //             objFilingTransactionsModel.ContributorTypeId == "2" ||
                //             objFilingTransactionsModel.ContributorTypeId == "3" ||
                //             objFilingTransactionsModel.ContributorTypeId == "4")
                //        {
                //            if (objFilingTransactionsModel.FlngEntFirstName == null)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "First Name is required";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }

                //            if (objFilingTransactionsModel.FlngEntMiddleName != null)
                //            {
                //                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                //                {
                //                    objImportErrorMessageModel = new ImportErrorMessageModel();
                //                    objImportErrorMessageModel.RowNumber = rowNumber;
                //                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                //                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                //                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //                }
                //                else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                //                {
                //                    objImportErrorMessageModel = new ImportErrorMessageModel();
                //                    objImportErrorMessageModel.RowNumber = rowNumber;
                //                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                //                    objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                //                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //                }
                //            }

                //            if (objFilingTransactionsModel.FlngEntLastName == null)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //        }
                //    }
                //}

                //if (objFilingTransactionsModel.FilingSchedId == "16")
                //{
                //    if (objFilingTransactionsModel.ContributorTypeId == "5" ||
                //        objFilingTransactionsModel.ContributorTypeId == "6" ||
                //        objFilingTransactionsModel.ContributorTypeId == "9" ||
                //        objFilingTransactionsModel.ContributorTypeId == "11" ||
                //        objFilingTransactionsModel.ContributorTypeId == "12" ||
                //        objFilingTransactionsModel.ContributorTypeId == "13" ||
                //        objFilingTransactionsModel.ContributorTypeId == "14")
                //    {
                //        if (objFilingTransactionsModel.FlngEntName == null)
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Name is required";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //        else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //        else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                //        {
                //            objImportErrorMessageModel = new ImportErrorMessageModel();
                //            objImportErrorMessageModel.RowNumber = rowNumber;
                //            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                //            objImportErrorMessageModel.ErrorMessages = "Name should be 40 characters";
                //            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //        }
                //    }
                //    else
                //    {
                //        if (objFilingTransactionsModel.ContributorTypeId == "3")
                //        {
                //            if (objFilingTransactionsModel.FlngEntFirstName == null)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "First Name is required";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                //                objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }

                //            if (objFilingTransactionsModel.FlngEntMiddleName != null)
                //            {
                //                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                //                {
                //                    objImportErrorMessageModel = new ImportErrorMessageModel();
                //                    objImportErrorMessageModel.RowNumber = rowNumber;
                //                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                //                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                //                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //                }
                //                else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                //                {
                //                    objImportErrorMessageModel = new ImportErrorMessageModel();
                //                    objImportErrorMessageModel.RowNumber = rowNumber;
                //                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                //                    objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                //                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //                }
                //            }

                //            if (objFilingTransactionsModel.FlngEntLastName == null)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //            else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                //            {
                //                objImportErrorMessageModel = new ImportErrorMessageModel();
                //                objImportErrorMessageModel.RowNumber = rowNumber;
                //                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                //                objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                //                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //            }
                //        }
                //    }
                //}

                //Street, City, State, Zip and Country validation
                if (objFilingTransactionsModel.FilingSchedId != "18" 
                    && objFilingTransactionsModel.FilingSchedId != "19"
                    && objFilingTransactionsModel.FilingSchedId != "21" )
                {
                    //Street Address Validation
                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    //City Validation
                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    //State Validation
                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    //Zip Code Validation
                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    //Country Validation
                    if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        if (objFilingTransactionsModel.FlngEntCountry == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                    }
                    else // Other Country
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCountry == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FilingSchedId == "19" ||
                        objFilingTransactionsModel.FilingSchedId == "21")
                    {
                        //Street Address Validation
                        if (objFilingTransactionsModel.FlngEntStrName.ToUpper() != "110 STATE STREET")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address must be 110 State Street";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //City Validation
                        if (objFilingTransactionsModel.FlngEntCity.ToUpper() != "ALBANY")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City must be Albany";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //State Validation
                        if (objFilingTransactionsModel.FlngEntState.ToUpper() != "NY")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "State must be NY";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //Zip Code Validation
                        if (objFilingTransactionsModel.FlngEntZip.ToUpper() != "12236")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code must be 12236";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //Country Validation
                        if (objFilingTransactionsModel.FlngEntCountry.ToUpper() != "UNITED STATES") // United States Country.
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country must be United States";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }                       
                    }
                }

                if (objFilingTransactionsModel.FilingSchedId != "18")
                {
                    if (objFilingTransactionsModel.PaymentTypeId == "1")
                    {
                        if (objFilingTransactionsModel.PayNumber == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Check # is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Check should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else if (objFilingTransactionsModel.PaymentTypeId == "8")
                    {
                        if (objFilingTransactionsModel.FilingScheduleId == "1")
                        {
                            if (objFilingTransactionsModel.PayNumber == null)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                                objImportErrorMessageModel.ErrorMessages = "Money Order # is required";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                                objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                                objImportErrorMessageModel.ErrorMessages = "Money Order should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else
                        {
                            if (objFilingTransactionsModel.PayNumber != null)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                                objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        
                    }
                    else if (objFilingTransactionsModel.PaymentTypeId == "7")
                    {
                        if (objFilingTransactionsModel.TransExplanation == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                            objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation)) // FIXED ON 03/02/2020
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                            objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        if (objFilingTransactionsModel.PayNumber != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else
                    {
                        if (objFilingTransactionsModel.PayNumber != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.PaymentTypeId == null)
                    {
                        if (objFilingTransactionsModel.FilingSchedId != "4" 
                            && objFilingTransactionsModel.FilingSchedId != "11"
                            && objFilingTransactionsModel.FilingSchedId != "14"
                            && objFilingTransactionsModel.FilingSchedId != "15"
                            && objFilingTransactionsModel.FilingSchedId != "18")

                        {                            
                            if (objFilingTransactionsModel.PurposeCodeId != "11"
                            && objFilingTransactionsModel.PurposeCodeId != "29" 
                            && objFilingTransactionsModel.RLiability != null)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                                objImportErrorMessageModel.ErrorMessages = "Method is required";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }   
                    }
                    else if (objFilingTransactionsModel.PaymentTypeId != null)
                    {
                        if (objFilingTransactionsModel.PaymentTypeId != "0")
                        {
                            //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                            Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                            if (!results)
                            {                                
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                                objImportErrorMessageModel.ErrorMessages = "Invalid Method";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else
                            {
                                string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                                if (objFilingTransactionsModel.FilingSchedId != "1" && paymentTypeVal == "8")
                                {
                                    objImportErrorMessageModel = new ImportErrorMessageModel();
                                    objImportErrorMessageModel.RowNumber = rowNumber;
                                    objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                                    objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Monetary Contributions Received From Ind. & Part.";
                                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                }

                                if (objFilingTransactionsModel.FilingSchedId == "19" && paymentTypeVal != "1" && paymentTypeVal != "5")
                                {
                                    objImportErrorMessageModel = new ImportErrorMessageModel();
                                    objImportErrorMessageModel.RowNumber = rowNumber;
                                    objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                                    objImportErrorMessageModel.ErrorMessages = "Only Check and Wire Transfer are allow.";
                                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                }

                                if (objFilingTransactionsModel.FilingSchedId == "21" && paymentTypeVal !=  "1" && paymentTypeVal != "5")
                                {
                                    objImportErrorMessageModel = new ImportErrorMessageModel();
                                    objImportErrorMessageModel.RowNumber = rowNumber;
                                    objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                                    objImportErrorMessageModel.ErrorMessages = "Only Check and Wire Transfer are allow.";
                                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.PaymentTypeId != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        objImportErrorMessageModel.ErrorMessages = "Payment Type should be either NULL or blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                //Negative Validation
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                    objImportErrorMessageModel.ErrorMessages = "Contributor Type Code should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                    objImportErrorMessageModel.ErrorMessages = "Street Address should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                    objImportErrorMessageModel.ErrorMessages = "City should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                    objImportErrorMessageModel.ErrorMessages = "State should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                    objImportErrorMessageModel.ErrorMessages = "Zip Code should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (objFilingTransactionsModel.FilingSchedId != "1" && paymentTypeVal == "8")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Monetary Contributions Received From Ind. & Part.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.PayNumber != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    objImportErrorMessageModel.ErrorMessages = "Unitemized transaction Check # should be blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            //Name Validation
            if (objFilingTransactionsModel.RItemized == "Y")
            {
                if (objFilingTransactionsModel.FilingSchedId == "7" ||
                    objFilingTransactionsModel.FilingSchedId == "8" ||
                    objFilingTransactionsModel.FilingSchedId == "12" ||
                    objFilingTransactionsModel.FilingSchedId == "13" ||
                    objFilingTransactionsModel.FilingSchedId == "20")
                {
                    if (objFilingTransactionsModel.FlngEntName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Name should be 40 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else if (objFilingTransactionsModel.FilingSchedId == "19" ||
                    objFilingTransactionsModel.FilingSchedId == "21")
                {
                    if (objFilingTransactionsModel.FlngEntName.ToUpper() != "NYS COMPTROLLER")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Name must be NYS Comptroller";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }   
                }

                //Name Validation
                if (objFilingTransactionsModel.FilingSchedId == "9" ||
                        objFilingTransactionsModel.FilingSchedId == "10" ||
                        objFilingTransactionsModel.FilingSchedId == "11")
                {
                    if (objFilingTransactionsModel.LoanOtherId == "10" ||
                        objFilingTransactionsModel.LoanOtherId == "11" ||
                        objFilingTransactionsModel.LoanOtherId == "12" ||
                        objFilingTransactionsModel.LoanOtherId == "13")
                    {
                        if (objFilingTransactionsModel.FlngEntName == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                            objImportErrorMessageModel.ErrorMessages = "Name is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                            objImportErrorMessageModel.ErrorMessages = "Name should be 40 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else
                    {
                        if (objFilingTransactionsModel.LoanOtherId == "1" ||
                             objFilingTransactionsModel.LoanOtherId == "2" ||
                             objFilingTransactionsModel.LoanOtherId == "3" ||
                             objFilingTransactionsModel.LoanOtherId == "4" ||
                             objFilingTransactionsModel.LoanOtherId == "5" ||
                             objFilingTransactionsModel.LoanOtherId == "6" ||
                             objFilingTransactionsModel.LoanOtherId == "7" ||
                             objFilingTransactionsModel.LoanOtherId == "8" ||
                             objFilingTransactionsModel.LoanOtherId == "9")
                        {
                            if (objFilingTransactionsModel.FlngEntFirstName == null)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                                objImportErrorMessageModel.ErrorMessages = "First Name is required";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                                objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }

                            if (objFilingTransactionsModel.FlngEntMiddleName != null)
                            {
                                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                                {
                                    objImportErrorMessageModel = new ImportErrorMessageModel();
                                    objImportErrorMessageModel.RowNumber = rowNumber;
                                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                }
                                else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                                {
                                    objImportErrorMessageModel = new ImportErrorMessageModel();
                                    objImportErrorMessageModel.RowNumber = rowNumber;
                                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                                    objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                }
                            }

                            if (objFilingTransactionsModel.FlngEntLastName == null)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                                objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                                objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }
                }

                if (objFilingTransactionsModel.FilingSchedId == "18")
                {
                    if (objFilingTransactionsModel.FlngEntFirstName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                        objImportErrorMessageModel.ErrorMessages = "First Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                        objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.FlngEntMiddleName != null)
                    {
                        if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                            objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntLastName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                        objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                        objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }

            #region CNTRBN_TYPE_ID Validation
            if (objFilingTransactionsModel.FilingSchedId == "4")
            {
                if (objFilingTransactionsModel.ContributionTypeId == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "CNTRBN_TYPE_ID - Column N";
                    objImportErrorMessageModel.ErrorMessages = "Contribution Type Code is required.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.ContributionTypeId != null)
                {
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTION_TYPE" && x.Id == objFilingTransactionsModel.ContributionTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "CNTRBN_TYPE_ID - Column N";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Contribution Type code.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.ContributionTypeId != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "CNTRBN_TYPE_ID - Column N";
                    objImportErrorMessageModel.ErrorMessages = "Contribution Type Code should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region TRANSFER_TYPE_ID Validation
            if (objFilingTransactionsModel.FilingSchedId == "7" ||
                objFilingTransactionsModel.FilingSchedId == "8")
            {
                if (objFilingTransactionsModel.TransferTypeId == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANSFER_TYPE_ID - Column O";
                    objImportErrorMessageModel.ErrorMessages = "Transfer Type code is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "TRANSFER_TYPE" && x.Id == objFilingTransactionsModel.TransferTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANSFER_TYPE_ID - Column O";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Transfer Type code.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.TransferTypeId != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANSFER_TYPE_ID - Column O";
                    objImportErrorMessageModel.ErrorMessages = "Transfer Type code should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region RECEIPT_TYPE_ID Validation
            if (objFilingTransactionsModel.FilingSchedId == "5" ||
                objFilingTransactionsModel.FilingSchedId == "19")
            {
                if (objFilingTransactionsModel.ReceiptTypeId != null)
                {
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "RECEIPT_TYPE" && x.Id == objFilingTransactionsModel.ReceiptTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "RECEIPT_TYPE_ID - Column P";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Receipt Type code.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.ReceiptTypeId != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "RECEIPT_TYPE_ID - Column P";
                    objImportErrorMessageModel.ErrorMessages = "Receipt Type code should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region RECEIPT_CODE_ID Validation
            if (objFilingTransactionsModel.FilingSchedId == "16")
            {
                if (objFilingTransactionsModel.ReceiptCodeId != null)
                {
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "RECEIPT_CODE" && x.Id == objFilingTransactionsModel.ReceiptCodeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "RECEIPT_CODE_ID - Column Q";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Receipt Code Id.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.ReceiptCodeId != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "RECEIPT_CODE_ID - Column Q";
                    objImportErrorMessageModel.ErrorMessages = "Receipt Code Id should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region PURPOSE_CODE_ID Validation
            if (objFilingTransactionsModel.FilingSchedId == "6")
            {
                if (objFilingTransactionsModel.RItemized == "Y")
                { 
                    if (objFilingTransactionsModel.PurposeCodeId == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                        objImportErrorMessageModel.ErrorMessages = "Purpose Code is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PURPOSE_CODE" && x.Id == objFilingTransactionsModel.PurposeCodeId.ToString());
                        if (!results)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Purpose Code.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            }
            else if (objFilingTransactionsModel.FilingSchedId == "17" ||
                objFilingTransactionsModel.FilingSchedId == "20")
            {
                if (objFilingTransactionsModel.RItemized == "Y")
                {
                    if (objFilingTransactionsModel.PurposeCodeId == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                        objImportErrorMessageModel.ErrorMessages = "Purpose Code is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.PurposeCodeId == "51")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                        objImportErrorMessageModel.ErrorMessages = "Purpose Code should be either NULL or blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PURPOSE_CODE" && x.Id == objFilingTransactionsModel.PurposeCodeId.ToString());
                        if (!results)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Purpose Code.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            }
            else if(objFilingTransactionsModel.FilingSchedId == "14")
            {
                if (objFilingTransactionsModel.TransMapping == null)
                {
                    if (objFilingTransactionsModel.PurposeCodeId == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                        objImportErrorMessageModel.ErrorMessages = "Purpose Code is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PURPOSE_CODE" && x.Id == objFilingTransactionsModel.PurposeCodeId.ToString());
                        if (!results)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Purpose Code.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            } 
            else
            {
                if (objFilingTransactionsModel.PurposeCodeId != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PURPOSE_CODE_ID - Column R";
                    objImportErrorMessageModel.ErrorMessages = "Purpose Code should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Org and Owed Amount
            // Org Amount
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Amount is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            // Owed Amount
            if (objFilingTransactionsModel.OwedAmt != null)
            {
                if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OwedAmt))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "OWED_AMT - Column AH";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OwedAmt))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "OWED_AMT - Column AH";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OwedAmt))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "OWED_AMT - Column AH";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            //Trans Explanation
            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //Loan Other ID Validation
            if (objFilingTransactionsModel.FilingSchedId == "9" ||
                objFilingTransactionsModel.FilingSchedId == "10" ||
                objFilingTransactionsModel.FilingSchedId == "11" ||
                objFilingTransactionsModel.FilingSchedId == "14")
            {
                if (objFilingTransactionsModel.LoanOtherId == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "LOAN_OTHER_ID - Column AK";
                    objImportErrorMessageModel.ErrorMessages = "Loan Other Code is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    if (!lstVendorImportValidation.Any(x => x.TableName == "LOAN_OTHER" && x.Id == objFilingTransactionsModel.LoanOtherId.ToString()))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "LOAN_OTHER_ID - Column AK";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Loan Other Code";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.LoanOtherId != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "LOAN_OTHER_ID - Column AK";
                    objImportErrorMessageModel.ErrorMessages = "Loan Other should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //R_Itemized Validation
            if (objFilingTransactionsModel.RItemized == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                objImportErrorMessageModel.ErrorMessages = "Is Transaction Itemized is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            //PCFB Field Validation
            if (Session["COMM_TYPE_ID"].ToString() == "23")
            {
                if (objFilingTransactionsModel.FilingSchedId == "1")
                {
                    //R_Claim Validation
                    if (objFilingTransactionsModel.IsClaim == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_CLAIM - Column BH";
                        objImportErrorMessageModel.ErrorMessages = "Is Claim is Required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.IsClaim != "N" && objFilingTransactionsModel.IsClaim != "Y")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_CLAIM - Column BH";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Is Claim";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.IsClaim == "N")
                    {
                        //R_IN_DISTRICT Validation
                        if (objFilingTransactionsModel.InDistrict != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_IN_DISTRICT - Column BI";
                            objImportErrorMessageModel.ErrorMessages = "In District should be null";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //R_MINOR Validation
                        if (objFilingTransactionsModel.Minor != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_MINOR - Column BJ";
                            objImportErrorMessageModel.ErrorMessages = "Minor should be null";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //R_VENDOR Validation
                        if (objFilingTransactionsModel.Vendor != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_VENDOR - Column BK";
                            objImportErrorMessageModel.ErrorMessages = "Vendor should be null";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //R_LOBBYIST Validation
                        if (objFilingTransactionsModel.Lobbyist != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_LOBBYIST - Column BL";
                            objImportErrorMessageModel.ErrorMessages = "Lobbyist should be null";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else if (objFilingTransactionsModel.IsClaim == "Y")
                    {
                        //R_IN_DISTRICT Validation
                        if (objFilingTransactionsModel.InDistrict == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_IN_DISTRICT - Column BI";
                            objImportErrorMessageModel.ErrorMessages = "In District is Required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.InDistrict != "N" && objFilingTransactionsModel.InDistrict != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_IN_DISTRICT - Column BI";
                            objImportErrorMessageModel.ErrorMessages = "Invalid In District";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //R_MINOR Validation
                        if (objFilingTransactionsModel.Minor == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_MINOR - Column BJ";
                            objImportErrorMessageModel.ErrorMessages = "Minor is Required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.Minor != "N" && objFilingTransactionsModel.Minor != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_MINOR - Column BJ";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Minor";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //R_VENDOR Validation
                        if (objFilingTransactionsModel.Vendor == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_VENDOR - Column BK";
                            objImportErrorMessageModel.ErrorMessages = "Vendor is Required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.Vendor != "N" && objFilingTransactionsModel.Vendor != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_VENDOR - Column BK";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Vendor";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        //R_LOBBYIST Validation
                        if (objFilingTransactionsModel.Lobbyist == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_LOBBYIST - Column BL";
                            objImportErrorMessageModel.ErrorMessages = "Lobbyist is Required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.Lobbyist != "N" && objFilingTransactionsModel.Lobbyist != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_LOBBYIST - Column BL";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Lobbyist";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.ContributorTypeId == "5")
                    {
                        //R_CONTRIBUTIONS Validation
                        if (objFilingTransactionsModel.RContributions != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Is Contributions should be null";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else
                    {
                        //R_CONTRIBUTIONS Validation
                        if (objFilingTransactionsModel.RContributions == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Is Contributions is Required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.RContributions != "N" && objFilingTransactionsModel.RContributions != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Is Contributions";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else if (objFilingTransactionsModel.FilingSchedId == "4")
                {
                    if (objFilingTransactionsModel.ContributorTypeId == "5")
                    {
                        //R_CONTRIBUTIONS Validation
                        if (objFilingTransactionsModel.RContributions != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Is Contributions should be null";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else
                    {
                        //R_CONTRIBUTIONS Validation
                        if (objFilingTransactionsModel.RContributions == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Is Contributions is Required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.RContributions != "N" && objFilingTransactionsModel.RContributions != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Is Contributions";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else if (objFilingTransactionsModel.FilingSchedId == "9")
                {
                    if (objFilingTransactionsModel.LoanOtherId == "10")
                    {
                        //R_CONTRIBUTIONS Validation
                        if (objFilingTransactionsModel.RContributions != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Is Contributions should be null";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else
                    {
                        //R_CONTRIBUTIONS Validation
                        if (objFilingTransactionsModel.RContributions == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Is Contributions is Required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.RContributions != "N" && objFilingTransactionsModel.RContributions != "Y")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Is Contributions";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.PurposeCodeId == "51")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation)) // FIXED ON 03/02/2020
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }

            //Treasurer Address1
            if (objFilingTransactionsModel.TreasurerStreetAddress != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TreasurerStreetAddress))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ADD1 - Column AT";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    if (objFilingTransactionsModel.TreasurerStreetAddress.Length < 4)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_ADD1 - Column AT";
                        objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                if (objFilingTransactionsModel.TreasurerStreetAddress.Count() > 60)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ADD1 - Column AT";
                    objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //Treasurer City
            if (objFilingTransactionsModel.TreasurerCity != null)
            {
                if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.TreasurerCity))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_CITY - Column AU";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.TreasurerCity.Count() > 30)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_CITY - Column AU";
                    objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //Treasurer State
            if (objFilingTransactionsModel.TreasurerState != null)
            {
                if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.TreasurerState))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_STATE - Column AV";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);

                }
                if (objFilingTransactionsModel.TreasurerState.Count() > 30)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_STATE - Column AV";
                    objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //Treasurer Zipcode
            if (objFilingTransactionsModel.TreasurerZip != null)
            {
                if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.TreasurerZip))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ZIP - Column AW";
                    objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.TreasurerZip.Count() > 10)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ZIP - Column AW";
                    objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //Treasurer Occupation
            if (objFilingTransactionsModel.TreasurerOccupation != null)
            {
                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.TreasurerOccupation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_OCCUPATION - Column AR";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TreasurerOccupation.Count() > 80)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_OCCUPATION - Column AR";
                    objImportErrorMessageModel.ErrorMessages = "Treasurer Occupation should be 80 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //Treasurer Employer
            if (objFilingTransactionsModel.TreasurerEmployer != null)
            {
                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.TreasurerEmployer))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_EMPLOYER - Column AS";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TreasurerEmployer.Count() > 255)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_EMPLOYER - Column AS";
                    objImportErrorMessageModel.ErrorMessages = "Treasurer Employer should be 255 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //Election Date Validation
            if (objFilingTransactionsModel.ElectionDate != null)
            {
                //Regex re = new Regex(@"^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$");
                Match match = re.Match(objFilingTransactionsModel.ElectionDate);

                //Verify whether entered date is Valid date.
                DateTime dt;
                if (!match.Success)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECTION_DATE - Column AN";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!DateTime.TryParse(objFilingTransactionsModel.ElectionDate, out dt))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECTION_DATE - Column AN";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (Session["COMM_TYPE_ID"].ToString() == "19")
            {
                if (objFilingTransactionsModel.FilingSchedId == "6" || objFilingTransactionsModel.FilingSchedId == "14")
                {
                    if (objFilingTransactionsModel.RIESupported == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_IE_SUPPORTED - Column BE";
                        objImportErrorMessageModel.ErrorMessages = "Is Support or Oppose is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.RIESupported != "N" && objFilingTransactionsModel.RIESupported != "Y")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_IE_SUPPORTED - Column BE";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Is Support or Oppose";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.RIESupported != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_IE_SUPPORTED - Column BE";
                        objImportErrorMessageModel.ErrorMessages = "Is Support or Oppose should be NULL";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FilingSchedId == "18")
                {
                    if (objFilingTransactionsModel.SupportOppose == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_SUPPORT_OPPOSE - Column BN";
                        objImportErrorMessageModel.ErrorMessages = "Support or Oppose is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.SupportOppose != "S" && objFilingTransactionsModel.SupportOppose != "O")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_SUPPORT_OPPOSE - Column BN";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Support or Oppose";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.SupportOppose != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_SUPPORT_OPPOSE - Column BN";
                        objImportErrorMessageModel.ErrorMessages = "Support or Oppose should be NULL";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else { 
                if (objFilingTransactionsModel.RIESupported != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_IE_SUPPORTED - Column BE";
                    objImportErrorMessageModel.ErrorMessages = "Is Support or Oppose should be NULL";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.SupportOppose != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_SUPPORT_OPPOSE - Column BN";
                    objImportErrorMessageModel.ErrorMessages = "Support or Oppose should be NULL";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            ////R_IE_SUPPORTED Validation
            //if (objFilingTransactionsModel.RIESupported != null)
            //{
            //    if (objFilingTransactionsModel.RIESupported != "N" && objFilingTransactionsModel.RIESupported != "Y")
            //    {
            //        objImportErrorMessageModel = new ImportErrorMessageModel();
            //        objImportErrorMessageModel.RowNumber = rowNumber;
            //        objImportErrorMessageModel.ColumnName = "R_IE_SUPPORTED - Column BE";
            //        objImportErrorMessageModel.ErrorMessages = "Invalid IE Supported";
            //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            //    }
            //}

            //R_IE_INCLUDED Validation
            if (objFilingTransactionsModel.RIEIncluded != null)
            {
                if (objFilingTransactionsModel.RIEIncluded != "N" && objFilingTransactionsModel.RIEIncluded != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_IE_INCLUDED - Column BF";
                    objImportErrorMessageModel.ErrorMessages = "Invalid IE Included";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.FilingSchedId == "6")
            {
                if (objFilingTransactionsModel.RParent == null)
                {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_PARENT - Column BG";
                        objImportErrorMessageModel.ErrorMessages = "Is Parent is require";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //R_PARENT Validation
            if (objFilingTransactionsModel.RParent != null)
            {
                if (objFilingTransactionsModel.RParent != "N" && objFilingTransactionsModel.RParent != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_PARENT - Column BG";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Parent";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //PART_FLNG_ENT_ID Validation
            if (objFilingTransactionsModel.ParentFilingEntityId != null)
            {
                if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.ParentFilingEntityId))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PART_FLNG_ENT_ID - Column AX";
                    objImportErrorMessageModel.ErrorMessages = "Only Numbers are allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.ParentFilingEntityId.Length > 4)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PART_FLNG_ENT_ID - Column AX";
                    objImportErrorMessageModel.ErrorMessages = "Only 4 characters are allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.FilingSchedId == "18")
            {
                //Office ID Validation
                if (objFilingTransactionsModel.OfficeID == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "OFFICE_ID - Column AY";
                    objImportErrorMessageModel.ErrorMessages = "Office ID is required.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "OFFICE_ID" && x.Id == objFilingTransactionsModel.OfficeID.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "OFFICE_ID - Column AY";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Office";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                //District Validation
                if (objFilingTransactionsModel.DistrictID != null)
                {
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "DISTRICT" && x.Id == objFilingTransactionsModel.DistrictID.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "DISTRICT - Column AZ";
                        objImportErrorMessageModel.ErrorMessages = "Invalid District";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.OfficeID != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "OFFICE_ID - Column AY";
                    objImportErrorMessageModel.ErrorMessages = "Office ID should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.DistrictID != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "DISTRICT - Column AZ";
                    objImportErrorMessageModel.ErrorMessages = "District should be either NULL or blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            

            //DIST_OFF_CAND_BAL_PROP Employer
            if (objFilingTransactionsModel.DistOffCandBalProp != null)
            {
                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.DistOffCandBalProp))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "DIST_OFF_CAND_BAL_PROP - Column BA";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.DistOffCandBalProp.Count() > 500)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "DIST_OFF_CAND_BAL_PROP - Column BA";
                    objImportErrorMessageModel.ErrorMessages = "District Office Candidate Ballot Proposal should be 500 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //IE_CNTRBR_OCC Employer
            if (objFilingTransactionsModel.ContributorOccupation != null)
            {
                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.ContributorOccupation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "IE_CNTRBR_OCC - Column BB";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.ContributorOccupation.Count() > 500)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "IE_CNTRBR_OCC - Column BB";
                    objImportErrorMessageModel.ErrorMessages = "Contributor Occupation should be 500 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //IE_CNTRBR_EMP Employer
            if (objFilingTransactionsModel.ContributorEmployer != null)
            {
                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.ContributorEmployer))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "IE_CNTRBR_EMP - Column BC";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.ContributorEmployer.Count() > 100)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "IE_CNTRBR_EMP - Column BC";
                    objImportErrorMessageModel.ErrorMessages = "Contributor Employer should be 100 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //IE_DESC Employer
            if (objFilingTransactionsModel.IEDescription != null)
            {
                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.IEDescription))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "IE_DESC - Column BD";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.IEDescription.Count() > 500)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "IE_DESC - Column BD";
                    objImportErrorMessageModel.ErrorMessages = "IE Description should be 500 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //R_LIABILITY Validation
            if (objFilingTransactionsModel.RLiability != null)
            {
                if (objFilingTransactionsModel.RLiability != "N" && objFilingTransactionsModel.RLiability != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_LIABILITY - Column AM";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Liability";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else
            {
                if (Session["COMM_TYPE_ID"].ToString() == "23")
                {
                    if (objFilingTransactionsModel.FilingSchedId == "20")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "R_LIABILITY - Column AM";
                        objImportErrorMessageModel.ErrorMessages = "Liability is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }

                //ELECTION_TYPE Validation
                if (objFilingTransactionsModel.ElectionTypeId != null)
            {
                if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.ElectionTypeId))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECTION_TYPE - Column AO";
                    objImportErrorMessageModel.ErrorMessages = "Only Numbers are allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.ElectionTypeId.Length > 1)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECTION_TYPE - Column AO";
                    objImportErrorMessageModel.ErrorMessages = "Only 1 character is allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //ELECTION_YEAR Validation
            if (objFilingTransactionsModel.ElectionYear != null)
            {
                if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.ElectionYear))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECTION_YEAR - Column AP";
                    objImportErrorMessageModel.ErrorMessages = "Only Alpha/Numeric are allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.ElectionYear.Length > 4)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECTION_YEAR - Column AP";
                    objImportErrorMessageModel.ErrorMessages = "Only 4 characters are allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //TREAS_ID Validation
            if (objFilingTransactionsModel.TreasId != null)
            {
                if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.TreasId))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ID - Column AQ";
                    objImportErrorMessageModel.ErrorMessages = "Only Numbers are allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.TreasId.Length > 8)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ID - Column AQ";
                    objImportErrorMessageModel.ErrorMessages = "Only 8 characters are allow";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
        }
        #endregion


        #region CheckLoanLiabilityOriginalExists
        /// <summary>
        /// CheckLoanLiabilityOriginalExists
        /// </summary>
        /// <param name="txtFilerId"></param>
        /// <returns></returns>
        public JsonResult CheckLoanLiabilityOriginalExists(String txtFilerId)
        {
            try
            {
                IList<FilingTransactionsModel> lstFilingTransactionsModel = new List<FilingTransactionsModel>();
                lstFilingTransactionsModel = (IList<FilingTransactionsModel>)Session["FilingTransactionDataUpload"];

                // VALIDATION ON BELOW PAYMENTS.
                // 1. LOAN PAYMENT - SCHEDULE J (10).
                // 2. LOAN FORGIVEN - SCHEDULE K (11).
                // 3. LIABILITY PAYMENT - SCHEDULE F (6).
                // 4. LIABILITY FORGIVEN - SCHEDULE K (11).
                // IF EXISTS THEN VALIDATE LOAN/LIABILITY ORIGINAL EXISTS OR NOT.
                // IF NOT EXISTS THEN THROW THE ERROR MESSAGE.
                // IF EXISTS THEN CONTINUE....
                String loanLiabOrgExists = String.Empty;

                List<String> lstTransNumbers = lstFilingTransactionsModel.Select(x => x.TransNumber).ToList();

                int rowNumberFile = 0;
                foreach (var item in lstFilingTransactionsModel)
                {
                    if (item != null)
                    {
                        rowNumberFile = rowNumberFile + 1;
                        if (item.FilingSchedId == "10" || (item.FilingSchedId == "6" && item.RLiability == "Y"))
                        {
                            if (lstTransNumbers.Contains(item.TransMapping))
                            {
                                loanLiabOrgExists = "TRUE";
                            }
                            else
                            {
                                Boolean results = objItemizedReportsBroker.LoanLiabilityExistsResponse(txtFilerId, item.TransMapping, item.Loan_Lib_Number);
                                if (results)
                                {
                                    loanLiabOrgExists = "TRUE";
                                }
                                else
                                {
                                    loanLiabOrgExists = "FALSE";
                                    break;
                                }
                            }
                        }
                        else if (item.FilingSchedId == "11")
                        {
                            if (lstTransNumbers.Contains(item.TransMapping))
                            {
                                loanLiabOrgExists = "TRUE";
                            }
                            else
                            {
                                Boolean results = objItemizedReportsBroker.LoanLiabilityExistsResponse(txtFilerId, item.TransMapping, item.Loan_Lib_Number);
                                if (results)
                                {
                                    loanLiabOrgExists = "TRUE";
                                }
                                else
                                {
                                    loanLiabOrgExists = "FALSE";
                                    break;
                                }
                            }
                        }
                        else
                        {
                            loanLiabOrgExists = "TRUE";
                        }
                    }
                }

                return Json(loanLiabOrgExists, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                if (Session["UserName"] != null)
                {
                    objERClass.LogExceptionInDatabase(ConfigurationManager.AppSettings["ApplicationKey"].ToString(), ex.Message, "ImportDisclosureReportController", System.Reflection.MethodBase.GetCurrentMethod().Name, "", "", ex.Message, Session["UserName"].ToString());
                }
                throw;
            }
        }
        #endregion CheckLoanLiabilityOriginalExists

        #region CheckFilingExistsAndInTempDatabase
        /// <summary>
        /// CheckFilingExistsAndInTempDatabase
        /// </summary>
        /// <param name="txtFilerId"></param>
        /// <param name="strReportYear"></param>
        /// <returns></returns>        
        public JsonResult CheckFilingExistsAndInTempDatabase(String txtFilerId, String strReportYear)
        {
            try
            {
                //ImportDisclsoureRptsFilings objImportDisclsoureRptsFilings = new ImportDisclsoureRptsFilings();
                IList<FilingExistsAndValidationResults> lstFilingExistsAndValidationResults = new List<FilingExistsAndValidationResults>();
                FilingExistsAndValidationResults objFilingExistsAndValidationResults = new FilingExistsAndValidationResults();
                IList<FilingTransactionsModel> lstFilingTransactionsModel = new List<FilingTransactionsModel>();
                ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
                ImportErrorMessageModel objImportErrorMessageModel;

                // TO CHECK EACH AND EVERY ROW THE COLUMN COUNT 58 OR NOT
                // IF NOT THEN IT IS INSERTING RECORDS WHICH IF EXISTS COUNT = 58.
                // SO IT SHOULE NOT INSERT ANY TRANSACTIONS IF ANY ONE ROW LESS OR MORE THAN 58 IN CSV.
                // IT WILL BE ROLLBACK ALL THE TRANSACTIONS AND IT WILL NOT INSERT ANY.

                lstFilingTransactionsModel = (IList<FilingTransactionsModel>)Session["FilingTransactionDataUpload"];

                if (lstFilingTransactionsModel.Count > 0)
                {
                    // ADDED HERE BECAUSE IT HAS TO VALIDATE FILING PERIOD, ELECTION, FILING CATEGORY.
                    // GET THE MASTER TABLE DROPDOWN VALUES TO VALIDATE.                                                
                    lstVendorImportValidation = objItemizedReportsBroker.GetDropdownValueExistsValidation();

                    // GET THE ELECTION YEAR ID, ELECTION TYPE ID, OFFICE TYPE ID, FILING TYPE ID, 
                    // ... ELECTION DATE ID TO GET THE FILING DATE FROM DATABASE...
                    // THEN CHECK THAT FILING DATE FROM DATABASE AND FILING DATE IN UPLOAD FILE MATCHING OR NOT...
                    // IF NOT MATCHING THEN SEND MESSAGE. FIXED ON 12.15.2020
                    var result = objItemizedReportsBroker.GetFilingDateCheckValuesResponse(lstFilingTransactionsModel[0].FilingPeriodId, lstFilingTransactionsModel[0].ElectId);

                    if (result.Count() > 0)
                    {
                        foreach (var item in result)
                        {
                            if (item != null)
                            {
                                // FILING TYPE ID = 10 (JANUARY PERIODIC) THEN USE DIFFERENT 
                                // SESSION TO GET THE FILING DATE AND CUT OFF DATE.
                                if (item.FilingTypeId == "10")
                                    Session["VDR_ElectionYearId_FP"] = item.ElectionYearId;
                                if (item.ElectionYearId != "0")
                                    Session["VDR_ElectionYearId"] = item.ElectionYearId;
                                if (item.ElectionTypeId != "0")
                                    Session["VDR_ElectionTypeId"] = item.ElectionTypeId;
                                if (item.OfficeTypeId != "0")
                                    Session["VDR_OfficeTypeId"] = item.OfficeTypeId;
                                if (item.FilingTypeId != "0")
                                    Session["VDR_FilingTypeId"] = item.FilingTypeId;
                                if (item.ElectionDateId != "0")
                                    Session["VDR_ElectionDateId"] = item.ElectionDateId;
                                // FILING CATEGORY ID FOR FILING DATE AND CUT OFF DATE.
                                Session["VDR_FilingCategoryId"] = lstFilingTransactionsModel[0].FilingCategoryId.ToString();
                            }
                        }
                    }

                    // IF USER UPLOADING EMPTY FILE THEN IT SHOW THROW THE MESSAGE.
                    if (lstFilingTransactionsModel.Count() > 0)
                    {
                        int rowNumberCSV1 = 0;
                        foreach (var item1 in lstFilingTransactionsModel)
                        {
                            if (item1 != null)
                            {
                                // COUNT THE CSV ROW NUMBERS;
                                rowNumberCSV1 = rowNumberCSV1 + 1;
                                ValidateMainFields(item1, rowNumberCSV1.ToString(), item1.FilerId);
                            }
                        }

                        if (lstImportErrorMessageModel.Count == 0)
                        {
                            //objImportDisclsoureRptsFilings = (ImportDisclsoureRptsFilings)Session["FilingsDetails"];
                            //objImportDisclsoureRptsFilings.CreatedBy = Session["UserName"].ToString();

                            // GET THE FILING CATEGORY FOR 24 HOUR NOTICE NOT REQUIRED FILING_PERIOD_ID.
                            Session["Filing_Catogery_Id"] = lstFilingTransactionsModel[0].FilingCategoryId.ToString();

                            Boolean valid = true;
                            // SATHEESH.
                            // WHEN USER UPLOADING FILE WITH HEADER INFORMATION THEN IT HAS TO STOP.
                            // AND SHOW POPUP MESSAGE SAYING THAT HEADER INFORMATION SHOULD NOT INCLUDE IN FILE.
                            if (lstFilingTransactionsModel[0].FilerId != "FILER_ID" && lstFilingTransactionsModel[0].ElectId != "ELECT_ID" && lstFilingTransactionsModel[0].FilingPeriodId != "FILING_PERIOD_ID")
                            {
                                // VALIDATE FILINGS DATA EXISTS OR NOT.
                                // IF ANY FIELD MISSING IN FILINGS THEN IT WILL THROW ERROR MESSAGE.
                                //objErrorMessagesFiledNames = ValidationFilingsData(objImportDisclsoureRptsFilings);

                                //String strGetFilingDateSession = String.Empty;
                                // VALIDATE FILER ID IF THEY UPLOADING DIFFERENT FILER ID AND SELECT DEFFERENT FILER ID.
                                // THEN YOU HAVE TO STOP UPLOADING FILE.
                                if (txtFilerId == lstFilingTransactionsModel[0].FilerId.ToString())
                                {
                                    // CHECK THE FILING EXISTS OR NOT. IF NOT EXISTS THEN INSERT INTO FILINGS TABLE.
                                    // IF EXISTS USE THE FILINGS_ID.
                                    var results = objItemizedReportsBroker.GetFilingsIdForUploadDataResponse(lstFilingTransactionsModel[0].FilerId,
                                                                                                                lstFilingTransactionsModel[0].FilingPeriodId,
                                                                                                                lstFilingTransactionsModel[0].FilingCategoryId,
                                                                                                                lstFilingTransactionsModel[0].ElectId,
                                                                                                                lstFilingTransactionsModel[0].ResigTermTypeId,
                                                                                                                lstFilingTransactionsModel[0].RFilingDate,
                                                                                                                lstFilingTransactionsModel[0].CreatedBy);

                                    if (results.Count() > 0)
                                    {
                                        // CHECK IF ELECTION YEAR NOT MATCHING ELECT_YEAR_ID IN FILING PERIOD AND ELECTION...
                                        // IF NOT MATCHING WE ARE NOT IMPORTING IT WILL ALERT VALIDATION MESSAGE....
                                        // FIXED ON 03.12.2020
                                        String strFilingsId = results.Select(x => x.FilingsId).FirstOrDefault().ToString();
                                        if (strFilingsId != "0")
                                        {
                                            foreach (var item in results)
                                            {
                                                if (item != null)
                                                {
                                                    Session["VDR_FilingsId"] = item.FilingsId;
                                                    Session["VDR_ElectionYearId"] = item.ElectionYearId;
                                                    Session["VDR_ElectionTypeId"] = item.ElectionTypeId;
                                                    Session["VDR_OfficeTypeId"] = item.OfficeTypeId;
                                                    Session["VDR_FilingTypeId"] = item.FilingTypeId;
                                                    Session["VDR_ElectionDateId"] = item.ElectionDateId;
                                                    Session["VDR_FilingDate"] = item.FilingDate;
                                                    // FILING CATEGORY ID FOR FILING DATE AND CUT OFF DATE.
                                                    Session["VDR_FilingCategoryId"] = lstFilingTransactionsModel[0].FilingCategoryId.ToString();
                                                }
                                            }

                                            //// CHECK THE FILING DATE IS CORRECT OR NOT. -- ADDED VALIDATION - 04/23/2020
                                            //// GET THE FILING DATE FROM DATABASE AND CHECK WITH CSV FILING DATE.
                                            //// COME HERE
                                            //String strGetFilingDateSession = GetCutOffDateForFilings();
                                            //String strFilingDate = Session["FilingDate"].ToString();
                                            //// CHECK FILING DATE FROM DATABASE AND FILING DATE FROM CSV EQUAL OR NOT.
                                            //if (DateTime.Parse(strFilingDate) == DateTime.Parse(objImportDisclsoureRptsFilings.RFilingDate))
                                            //{

                                            // GET FILING CATEGORY
                                            Session["VDR_FilingCategoryId"] = lstFilingTransactionsModel[0].FilingCategoryId.ToString();

                                            // CHECK IF ANY FILINGS EXISTS IN TEMP DATABASE FOR THE FILER.
                                            String strFilingExistsNot = objItemizedReportsBroker.GetFilingsExistsorNotResponse(lstFilingTransactionsModel[0].FilerId);

                                            //lstFilingExistsAndValidationResults.Add(objFilingExistsAndValidationResults);

                                            // VALIDATE IF USER SELECT 'REPORT YEAR' AND IMPORTING FILE THEN CHECK...
                                            // CSV FILE REPORT YEAR ID AND USER SELECTED REPORT YEAR ID SAME OR NOT...
                                            // IF BOTH OR SAME THEN SHOW THE MESSAGE....                            
                                            if (strFilingExistsNot != "FALSE")
                                            {
                                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                                objImportErrorMessageModel.RowNumber = "";
                                                objImportErrorMessageModel.ColumnName = "";
                                                objImportErrorMessageModel.ErrorMessages = "Unsubmitted disclosure report exists, disclosure report cannot be imported.";
                                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);

                                                //objFilingExistsAndValidationResults.FilingExists = strFilingExistsNot;
                                                //objFilingExistsAndValidationResults.ReportYearExists = "TRUE";
                                                valid = false;

                                                //if (strReportYear != "")
                                                //{
                                                //    if (Session["VDR_ElectionYearId"].ToString() != strReportYear)
                                                //    {
                                                //        objFilingExistsAndValidationResults.FilingExists = "TRUE";
                                                //        objFilingExistsAndValidationResults.ReportYearExists = "TRUE1";
                                                //        objFilingExistsAndValidationResults.FilerIdExists = "FALSE1";
                                                //        valid = false;
                                                //    }
                                                //    else
                                                //    {
                                                //        objFilingExistsAndValidationResults.FilingExists = strFilingExistsNot;
                                                //        valid = true;
                                                //    }
                                                //}
                                                //else
                                                //{
                                                //    objFilingExistsAndValidationResults.FilingExists = strFilingExistsNot;
                                                //    valid = true;
                                                //}
                                            }
                                            //}
                                            //else // IF FILING DATE FROM DATABASE AND FILING DATE FROM CSV NOT MATCHING. ADDED 04/23/2020
                                            //{
                                            //    objFilingExistsAndValidationResults.FilingExists = "TRUE";
                                            //    objFilingExistsAndValidationResults.FilerIdExists = "FILING_DATE";
                                            //    objFilingExistsAndValidationResults.ReportYearExists = "TRUE2";
                                            //    objFilingExistsAndValidationResults.ImportFileName = Session["ImportFileName"].ToString();
                                            //    lstFilingExistsAndValidationResults.Add(objFilingExistsAndValidationResults);
                                            //    valid = false;
                                            //}
                                        }
                                        else
                                        {
                                            if (lstFilingTransactionsModel[0].FilingCategoryId.ToString() == "14")
                                            {
                                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                                objImportErrorMessageModel.RowNumber = "";
                                                objImportErrorMessageModel.ColumnName = "NO_FILINGS";
                                                objImportErrorMessageModel.ErrorMessages = "Either FILING DATE and/or ELECT_ID do not exist in the database.";
                                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                            }
                                            else
                                            {
                                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                                objImportErrorMessageModel.RowNumber = "";
                                                objImportErrorMessageModel.ColumnName = "NO_FILINGS";
                                                objImportErrorMessageModel.ErrorMessages = "Either FILING_PERIOD_ID and/or ELECT_ID do not exist in the database.";
                                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                            }                                            
                                            valid = false;
                                        }
                                    }
                                    else
                                    {
                                        if (lstFilingTransactionsModel[0].FilingCategoryId.ToString() == "14")
                                        {
                                            objImportErrorMessageModel = new ImportErrorMessageModel();
                                            objImportErrorMessageModel.RowNumber = "";
                                            objImportErrorMessageModel.ColumnName = "NO_FILINGS";
                                            objImportErrorMessageModel.ErrorMessages = "Either FILING DATE and/or ELECT_ID do not exist in the database.";
                                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                        }
                                        else
                                        {
                                            objImportErrorMessageModel = new ImportErrorMessageModel();
                                            objImportErrorMessageModel.RowNumber = "";
                                            objImportErrorMessageModel.ColumnName = "NO_FILINGS";
                                            objImportErrorMessageModel.ErrorMessages = "Either FILING_PERIOD_ID and/or ELECT_ID do not exist in the database.";
                                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                        }
                                        valid = false;
                                    }

                                    // ADD IMPORT FILE NAME.
                                    objFilingExistsAndValidationResults.ImportFileName = Session["ImportFileName"].ToString();

                                    if (valid)
                                    {
                                        String strGetFilingDateSession = GetCutOffDateForFilings();

                                        // BOTH MATCHES REPORT YEAR ID FILTER AND REPORT YEAR ID IN CSV FILE.
                                        objFilingExistsAndValidationResults.ReportYearExists = "TRUE";

                                        //// GET THE MASTER TABLE DROPDOWN VALUES TO VALIDATE.                                                
                                        //lstVendorImportValidation = objItemizedReportsBroker.GetDropdownValueExistsValidation();

                                        int rowNumberCSV = 0;
                                        // CHECK THE VALIDATION ON DATA THEN UPLOAD THE FILE.
                                        foreach (var item in lstFilingTransactionsModel)
                                        {
                                            if (item != null)
                                            {
                                                // COUNT THE CSV ROW NUMBERS;
                                                rowNumberCSV = rowNumberCSV + 1;

                                                // ASSING FILINGS_ID FOR THE LIST.
                                                item.FilingsId = Session["VDR_FilingsId"].ToString();

                                                // ITEMIZED TRANSACTIONS VALIDATION.
                                                if (Session["VDR_FilingCategoryId"].ToString() == "1")
                                                {
                                                    #region ITEMIZED FILING.                                                               
                                                    // GET THE FILING CUT-OFF DATE.
                                                    // GET THE CUT OFF DATE.                                                
                                                    if (Session["VDR_FilingTypeId"].ToString() != "12")
                                                    {
                                                        if (strGetFilingDateSession != "")
                                                            Session["CutOffDateFilings"] = strGetFilingDateSession; //GetCutOffDateForFilings();
                                                    }
                                                    else
                                                    {
                                                        //strFilingDate = lstFilingTransactionsModel[0].RFilingDate;
                                                        Session["OffCycleFilingDate"] = lstFilingTransactionsModel[0].RFilingDate.ToString();
                                                        Session["CutOffDateFilings"] = "";
                                                    }

                                                    SetValidationMessage(item, rowNumberCSV.ToString(), txtFilerId);

                                                    #endregion ITEMIZED FILING.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "4")
                                                {
                                                    #region 24-HOUR NOTICE.
                                                    // GET THE FILING CUT-OFF DATE.
                                                    // GET THE CUT OFF DATE.
                                                    if (Session["VDR_FilingTypeId"].ToString() != "12")
                                                    {
                                                        if (strGetFilingDateSession != "")
                                                            Session["CutOffDateFilings"] = strGetFilingDateSession; // GetCutOffDateForFilings(); 
                                                    }
                                                    else
                                                    {
                                                        //strFilingDate = lstFilingTransactionsModel[0].RFilingDate;
                                                        Session["OffCycleFilingDate"] = lstFilingTransactionsModel[0].RFilingDate.ToString();
                                                        Session["CutOffDateFilings"] = "";
                                                    }

                                                    // FOR SCHEDULE 1 - 18 WE HAVE TO CHECK BELOW ITEMS.
                                                    // FIRST:- ANY TRANSACTIONS IN TEMP DATABASE OR NOT.
                                                    // SECOND:- ANY VALIDATION FAILD OR NOT.
                                                    // IF TWO CONDITION SUCCESS THEN WE CAN UPLOAD THE FILE INTO DATABASE.
                                                    // UPLOAD IMPORT FILE TRANSACTIONS INTO TEMP DTABASE.
                                                    if (item.FilingSchedId.ToString() == "1") // SCHEDULE A VALIDATION.
                                                    {
                                                        //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
                                                        // CALL SCHEDULE A METHOD.
                                                        Validate24HourSchedAData(item, rowNumberCSV.ToString());
                                                        // IF VALIDATION SUCCESS THEN IF NO ERRORS.
                                                        // THEN YOU CAN GO AND IMPORT THE FILE.
                                                        //if (String.IsNullOrEmpty(objErrorMessagesFiledNames.ErrorMessage))
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "FALSE";
                                                        //}
                                                        //else
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "TRUE";
                                                        //    objFilingExistsAndValidationResults.ValidationMessages = objErrorMessagesFiledNames.ErrorMessage.Substring(0, objErrorMessagesFiledNames.ErrorMessage.Length - 2);
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = objErrorMessagesFiledNames.FieledName.Substring(0, objErrorMessagesFiledNames.FieledName.Length - 2);
                                                        //    objFilingExistsAndValidationResults.CSVRowNumber = Convert.ToString(rowNumberCSV);
                                                        //    break;
                                                        //}
                                                    }
                                                    else if (item.FilingSchedId.ToString() == "2") // SCHEDULE B VALIDATION.
                                                    {
                                                        //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
                                                        // CALL SCHEDULE A METHOD.
                                                        Validate24HourSchedBData(item, rowNumberCSV.ToString());
                                                        // IF VALIDATION SUCCESS THEN IF NO ERRORS.
                                                        // THEN YOU CAN GO AND IMPORT THE FILE.
                                                        //if (String.IsNullOrEmpty(objErrorMessagesFiledNames.ErrorMessage))
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "FALSE";
                                                        //}
                                                        //else
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "TRUE";
                                                        //    objFilingExistsAndValidationResults.ValidationMessages = objErrorMessagesFiledNames.ErrorMessage.Substring(0, objErrorMessagesFiledNames.ErrorMessage.Length - 2);
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = objErrorMessagesFiledNames.FieledName.Substring(0, objErrorMessagesFiledNames.FieledName.Length - 2);
                                                        //    objFilingExistsAndValidationResults.CSVRowNumber = Convert.ToString(rowNumberCSV);
                                                        //    break;
                                                        //}
                                                    }
                                                    else if (item.FilingSchedId.ToString() == "3") // SCHEDULE C VALIDATION.
                                                    {
                                                        //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
                                                        // CALL SCHEDULE A METHOD.
                                                        Validate24HourSchedCData(item, rowNumberCSV.ToString());
                                                        // IF VALIDATION SUCCESS THEN IF NO ERRORS.
                                                        // THEN YOU CAN GO AND IMPORT THE FILE.
                                                        //if (String.IsNullOrEmpty(objErrorMessagesFiledNames.ErrorMessage))
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "FALSE";
                                                        //}
                                                        //else
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "TRUE";
                                                        //    objFilingExistsAndValidationResults.ValidationMessages = objErrorMessagesFiledNames.ErrorMessage.Substring(0, objErrorMessagesFiledNames.ErrorMessage.Length - 2);
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = objErrorMessagesFiledNames.FieledName.Substring(0, objErrorMessagesFiledNames.FieledName.Length - 2);
                                                        //    objFilingExistsAndValidationResults.CSVRowNumber = Convert.ToString(rowNumberCSV);
                                                        //    break;
                                                        //}
                                                    }
                                                    else if (item.FilingSchedId.ToString() == "4") // SCHEDULE D VALIDATION.
                                                    {
                                                        //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
                                                        // CALL SCHEDULE A METHOD.
                                                        Validate24HourSchedDData(item, rowNumberCSV.ToString());
                                                        // IF VALIDATION SUCCESS THEN IF NO ERRORS.
                                                        // THEN YOU CAN GO AND IMPORT THE FILE.
                                                        //if (String.IsNullOrEmpty(objErrorMessagesFiledNames.ErrorMessage))
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "FALSE";
                                                        //}
                                                        //else
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "TRUE";
                                                        //    objFilingExistsAndValidationResults.ValidationMessages = objErrorMessagesFiledNames.ErrorMessage.Substring(0, objErrorMessagesFiledNames.ErrorMessage.Length - 2);
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = objErrorMessagesFiledNames.FieledName.Substring(0, objErrorMessagesFiledNames.FieledName.Length - 2);
                                                        //    objFilingExistsAndValidationResults.CSVRowNumber = Convert.ToString(rowNumberCSV);
                                                        //    break;
                                                        //}
                                                    }
                                                    else if (item.FilingSchedId.ToString() == "9") // SCHEDULE I VALIDATION.
                                                    {
                                                        //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
                                                        // CALL SCHEDULE A METHOD.
                                                        Validate24HourSchedIData(item, rowNumberCSV.ToString());
                                                        // IF VALIDATION SUCCESS THEN IF NO ERRORS.
                                                        // THEN YOU CAN GO AND IMPORT THE FILE.
                                                        //if (String.IsNullOrEmpty(objErrorMessagesFiledNames.ErrorMessage))
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "FALSE";
                                                        //}
                                                        //else
                                                        //{
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = "TRUE";
                                                        //    objFilingExistsAndValidationResults.ValidationMessages = objErrorMessagesFiledNames.ErrorMessage.Substring(0, objErrorMessagesFiledNames.ErrorMessage.Length - 2);
                                                        //    objFilingExistsAndValidationResults.ValidationFailed = objErrorMessagesFiledNames.FieledName.Substring(0, objErrorMessagesFiledNames.FieledName.Length - 2);
                                                        //    objFilingExistsAndValidationResults.CSVRowNumber = Convert.ToString(rowNumberCSV);
                                                        //    break;
                                                        //}
                                                    }
                                                    #endregion 24-HOUR NOTICE.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "7")
                                                {
                                                    #region INDEPENDENT EXPENDITURE - WEEKLY CONTRIBUTION.
                                                    //
                                                    // TO DO;
                                                    //
                                                    #endregion INDEPENDENT EXPENDITURE - WEEKLY CONTRIBUTION.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "8")
                                                {
                                                    #region INDEPENDENT EXPENDITURE - 24 HOUR CONTRIBUTION.
                                                    //
                                                    // TO DO;
                                                    //
                                                    #endregion INDEPENDENT EXPENDITURE - 24 HOUR CONTRIBUTION.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "9")
                                                {
                                                    #region INDEPENDENT EXPENDITURE - WEEKLY EXPENDITURE.
                                                    //
                                                    // TO DO;
                                                    //
                                                    #endregion INDEPENDENT EXPENDITURE - WEEKLY EXPENDITURE.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "10")
                                                {
                                                    #region INDEPENDENT EXPENDITURE - WEEKLY LIABILITIES INCURRED.
                                                    //
                                                    // TO DO;
                                                    //
                                                    #endregion INDEPENDENT EXPENDITURE - WEEKLY LIABILITIES INCURRED.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "11")
                                                {
                                                    #region INDEPENDENT EXPENDITURE - 24 HOUR EXPENDITURE.
                                                    //
                                                    // TO DO;
                                                    //
                                                    #endregion INDEPENDENT EXPENDITURE - 24 HOUR EXPENDITURE.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "12")
                                                {
                                                    #region INDEPENDENT EXPENDITURE - WEEKLY EXPENDITURE - PIDA.
                                                    //
                                                    // TO DO;
                                                    //
                                                    #endregion INDEPENDENT EXPENDITURE - WEEKLY EXPENDITURE - PIDA.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "13") // NEWLY ADDED.
                                                {
                                                    // NEWLY ADDED INDEPENDIENT EXPENDITURE - 24 HOUR EXPENDITURE - PIDA.
                                                    #region INDEPENDENT EXPENDITURE - 24 HOUR EXPENDITURE - PIDA.
                                                    //
                                                    // TO DO;
                                                    //
                                                    #endregion INDEPENDENT EXPENDITURE - 24 HOUR EXPENDITURE - PIDA.
                                                }
                                                else if (Session["VDR_FilingCategoryId"].ToString() == "14")
                                                {
                                                    #region Public Matching Fund - Weekly Claim Submission
                                                    // GET THE FILING CUT-OFF DATE.
                                                    // GET THE CUT OFF DATE.
                                                    if (Session["VDR_FilingTypeId"].ToString() != "12")
                                                    {
                                                        if (strGetFilingDateSession != "")
                                                            Session["CutOffDateFilings"] = strGetFilingDateSession; // GetCutOffDateForFilings(); 
                                                    }
                                                    else
                                                    {
                                                        //strFilingDate = lstFilingTransactionsModel[0].RFilingDate;
                                                        Session["OffCycleFilingDate"] = lstFilingTransactionsModel[0].RFilingDate.ToString();
                                                        Session["CutOffDateFilings"] = "";
                                                    }

                                                    if (Session["COMM_TYPE_ID"].ToString() == "23")
                                                    {
                                                        // FOR SCHEDULE 1 - 18 WE HAVE TO CHECK BELOW ITEMS.
                                                        // FIRST:- ANY TRANSACTIONS IN TEMP DATABASE OR NOT.
                                                        // SECOND:- ANY VALIDATION FAILD OR NOT.
                                                        // IF TWO CONDITION SUCCESS THEN WE CAN UPLOAD THE FILE INTO DATABASE.
                                                        // UPLOAD IMPORT FILE TRANSACTIONS INTO TEMP DTABASE.
                                                        if (item.FilingSchedId.ToString() == "1") // SCHEDULE A VALIDATION.
                                                        {
                                                            // CALL SCHEDULE A METHOD.
                                                            ValidatePMFWeeklyCliamSubmissionSchedAData(item, rowNumberCSV.ToString(), txtFilerId);
                                                        }
                                                        else
                                                        {
                                                            objImportErrorMessageModel = new ImportErrorMessageModel();
                                                            objImportErrorMessageModel.RowNumber = rowNumberCSV.ToString();
                                                            objImportErrorMessageModel.ColumnName = "FILING_SCHED_ID - Column G";
                                                            objImportErrorMessageModel.ErrorMessages = "Only Monetary Contributions Received From Ind. & Part. Schedule - A is allow";
                                                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        objImportErrorMessageModel = new ImportErrorMessageModel();
                                                        objImportErrorMessageModel.RowNumber = "";
                                                        objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                                                        objImportErrorMessageModel.ErrorMessages = "Public Matching Fund - Weekly Claim SubmissionFiler import allow only for PCF Filers.";
                                                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                                    }
                                                    
                                                    #endregion Public Matching Fund - Weekly Claim Submission
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (objFilingExistsAndValidationResults.FilerIdExists != "NO_FILINGS")
                                        {
                                            objFilingExistsAndValidationResults.ReportYearExists = "FALSE";
                                            objFilingExistsAndValidationResults.FilingExists = "TRUE";
                                        }
                                    }
                                }
                                else
                                {
                                    //objFilingExistsAndValidationResults.FilingExists = "TRUE";
                                    //objFilingExistsAndValidationResults.FilerIdExists = "FALSE";
                                    //// ADD IMPORT FILE NAME.
                                    //objFilingExistsAndValidationResults.ImportFileName = Session["ImportFileName"].ToString();
                                    //lstFilingExistsAndValidationResults.Add(objFilingExistsAndValidationResults);

                                    objImportErrorMessageModel = new ImportErrorMessageModel();
                                    objImportErrorMessageModel.RowNumber = "";
                                    objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                                    objImportErrorMessageModel.ErrorMessages = "The Filer ID does not match with the value selected in the Filter.";
                                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                                }
                            }
                            else
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = "";
                                objImportErrorMessageModel.ColumnName = "";
                                objImportErrorMessageModel.ErrorMessages = "First Row Header Should not be there.";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);

                                //// IT WILL STOP THE UPLOADING.
                                //// IF FILE HAS HEADER INFOR THEN IT WILL STOP.
                                //objFilingExistsAndValidationResults.FilingExists = "TRUE";
                                //objFilingExistsAndValidationResults.FilerIdExists = "NO_HEADERS_INFO";
                                //objFilingExistsAndValidationResults.ReportYearExists = "TRUE22";
                                //objFilingExistsAndValidationResults.ImportFileName = Session["ImportFileName"].ToString();
                                //objFilingExistsAndValidationResults.CSVRowNumber = "1";
                                //lstFilingExistsAndValidationResults.Add(objFilingExistsAndValidationResults);
                                valid = false;
                            }
                            Session["ErrorMessageGridData_VI"] = lstImportErrorMessageModel;
                        }
                        else
                        {
                            Session["ErrorMessageGridData_VI"] = lstImportErrorMessageModel;
                        }
                    }
                    else
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = "";
                        objImportErrorMessageModel.ColumnName = "";
                        objImportErrorMessageModel.ErrorMessages = "No data found.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                return Json(lstImportErrorMessageModel, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                if (Session["UserName"] != null)
                {
                    objERClass.LogExceptionInDatabase(ConfigurationManager.AppSettings["ApplicationKey"].ToString(), ex.Message, "ImportDisclosureReportController", System.Reflection.MethodBase.GetCurrentMethod().Name, "", "", ex.Message, Session["UserName"].ToString());
                }
                throw;
            }
        }
        #endregion CheckFilingExistsAndInTempDatabase

        public void ValidateMainFields(FilingTransactionsModel objFilingTransactionsModel, string rowNumber, string txtFilerId)
        {
            ImportErrorMessageModel objImportErrorMessageModel;
            #region Filer ID Validation
            //Filer ID Validation
            if (objFilingTransactionsModel.FilerId == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                objImportErrorMessageModel.ErrorMessages = "Filer Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.FilerId != txtFilerId)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                objImportErrorMessageModel.ErrorMessages = "The Filer ID does not match with the value selected in Filter.";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion

            #region Filing Period ID Validation
            if (objFilingTransactionsModel.FilingPeriodId == null)
            {
                if (objFilingTransactionsModel.FilingCategoryId != "4" &&
                    objFilingTransactionsModel.FilingCategoryId != "14")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FILING_PERIOD_ID - Column B";
                    objImportErrorMessageModel.ErrorMessages = "Filing Period Id is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else
            {
                if (objFilingTransactionsModel.FilingCategoryId == "4" ||
                    objFilingTransactionsModel.FilingCategoryId == "14")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FILING_PERIOD_ID - Column B";
                    objImportErrorMessageModel.ErrorMessages = "Filing Period Id should be NULL";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "FILING_PERIOD" && x.Id == objFilingTransactionsModel.FilingPeriodId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FILING_PERIOD_ID - Column B";
                        objImportErrorMessageModel.ErrorMessages = "Filing Period Id is not exists";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            #endregion

            #region Filing Category ID
            if (String.IsNullOrEmpty(objFilingTransactionsModel.FilingCategoryId))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_CAT_ID - Column C";
                objImportErrorMessageModel.ErrorMessages = "Filing Category Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "FILING_CATEGORY" && x.Id == objFilingTransactionsModel.FilingCategoryId.ToString());
                if (!results)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FILING_CAT_ID - Column C";
                    objImportErrorMessageModel.ErrorMessages = "Filing Category Id is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Elect ID
            if (objFilingTransactionsModel.ElectId == null)
            {
                if (Session["VDR_FilingTypeId"] == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECT_ID - Column D";
                    objImportErrorMessageModel.ErrorMessages = "Elect Id is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (Session["VDR_FilingTypeId"].ToString() != "12") // IT IS OFF-CYCLE THEN NO ELECT_ID.
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECT_ID - Column D";
                    objImportErrorMessageModel.ErrorMessages = "Elect Id is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "ELECTION" && x.Id == objFilingTransactionsModel.ElectId.ToString());
                if (!results)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECT_ID - Column D";
                    objImportErrorMessageModel.ErrorMessages = "Elect Id is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region RESIG_TERM_TYPE_ID validation
            if (objFilingTransactionsModel.ResigTermTypeId != null)
            {
                if (!lstVendorImportValidation.Any(x => x.TableName == "RESIGNATION_TERMINATION_TYPE" && x.Id == objFilingTransactionsModel.ResigTermTypeId.ToString()))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "RESIG_TERM_TYPE_ID - Column E";
                    objImportErrorMessageModel.ErrorMessages = "Resignation Termination Type is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region R_FILING_DATE validation
            if (objFilingTransactionsModel.RFilingDate == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                objImportErrorMessageModel.ErrorMessages = "Filing Date is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else
            {
                Regex re = new Regex(@"^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$");
                Match match = re.Match(objFilingTransactionsModel.RFilingDate);
                //Verify whether entered date is Valid date.
                DateTime dt;
                if (!match.Success)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!DateTime.TryParse(objFilingTransactionsModel.RFilingDate, out dt))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion
        }
        /// <summary>
        /// Check validation
        /// </summary>
        /// <returns></returns>
        public JsonResult CheckValidaion()
        {
            string resultsExistsValidation = string.Empty;

            IList<ImportErrorMessageModel> lstImportErrorMessageModel = new List<ImportErrorMessageModel>();
            lstImportErrorMessageModel = (IList<ImportErrorMessageModel>)Session["ErrorMessageGridData_VI"];
            if (lstImportErrorMessageModel.Count > 0)
            {
                resultsExistsValidation = "YES";
            }
            else
            {
                Session["ErrorMessageGridData_VI"] = null;
                resultsExistsValidation = "NO";
            }
            return Json(resultsExistsValidation, JsonRequestBehavior.AllowGet);
        }

        #region GetCutOffDateForFilings
        /// <summary>
        /// GetCutOffDateForFilings
        /// </summary>
        /// <returns></returns>
        public String GetCutOffDateForFilings()
        {
            IList<FilingCutOffDateModel> lstFilingCutOffDateModel = new List<FilingCutOffDateModel>();

            String strFilingDateId = String.Empty;
            String strCuttOffDateId = String.Empty;

            if (Session["VDR_OfficeTypeId"].ToString() == "1")
                Session["VDR_OfficeTypeId"] = "4";

            if (Session["VDR_FilingCategoryId"] != null)
            {
                if (Session["VDR_FilingCategoryId"].ToString() == "1")
                {
                    if (Session["VDR_FilingTypeId"] != null)
                    {
                        if (Session["VDR_FilingTypeId"].ToString() == "1") // 32 Day Pre-Primary
                        {
                            strFilingDateId = "59";
                            strCuttOffDateId = "60";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "2") // 11 Day Pre-Primary
                        {
                            strFilingDateId = "61";
                            strCuttOffDateId = "62";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "3") // 10 Day Post-Primary
                        {
                            strFilingDateId = "65";
                            strCuttOffDateId = "66";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "4") // 32 Day Pre-General
                        {
                            strFilingDateId = "104";
                            strCuttOffDateId = "105";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "5") // 11 Day Pre-General
                        {
                            strFilingDateId = "106";
                            strCuttOffDateId = "107";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "6") // 27 Day Post-General
                        {
                            strFilingDateId = "108";
                            strCuttOffDateId = "109";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "7") // 32 Day Pre-Speceial
                        {
                            strFilingDateId = "122";
                            strCuttOffDateId = "123";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "8") // 11 Day Pre-Special
                        {
                            strFilingDateId = "124";
                            strCuttOffDateId = "125";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "9") // 27 Day Post-Special
                        {
                            strFilingDateId = "126";
                            strCuttOffDateId = "127";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "10") // January Periodic
                        {
                            strFilingDateId = "69";
                            strCuttOffDateId = "70";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "11") // July Periodic
                        {
                            strFilingDateId = "71";
                            strCuttOffDateId = "72";
                        }
                        else if (Session["VDR_FilingTypeId"].ToString() == "12") // Off Cycle
                        {
                            //strFilingDateId = "108";
                            //strCuttOffDateId = "109";
                        }
                    }
                }
                else if (Session["VDR_FilingCategoryId"].ToString() == "4")
                {
                    strFilingDateId = "63";
                    strCuttOffDateId = "64";
                }
                else if (Session["VDR_FilingCategoryId"].ToString() == "14")
                {
                    string tempFilingDateVar = Convert.ToDateTime(Session["VDR_FilingDate"].ToString()).ToString("MM/dd/yyyy");
                    if (Session["VDR_ElectionTypeId"].ToString() == "2")
                    {   
                        if (tempFilingDateVar == "05/13/2024")
                        {
                            strFilingDateId = "142";
                            strCuttOffDateId = "143";
                        }
                        else if (tempFilingDateVar == "06/03/2024")
                        {
                            strFilingDateId = "144";
                            strCuttOffDateId = "145";
                        }
                        else
                        {
                            strFilingDateId = "";
                            strCuttOffDateId = "";
                        }

                    }
                    else if (Session["VDR_ElectionTypeId"].ToString() == "3")
                    {
                        if (tempFilingDateVar == "09/23/2024")
                        {
                            strFilingDateId = "142";
                            strCuttOffDateId = "143";
                        }
                        else if (tempFilingDateVar == "10/15/2024")
                        {
                            strFilingDateId = "144";
                            strCuttOffDateId = "145";
                        }
                        else
                        {
                            strFilingDateId = "";
                            strCuttOffDateId = "";
                        }
                    }
                    if (Session["VDR_ElectionTypeId"].ToString() == "1")
                    {
                        if (tempFilingDateVar == "04/14/2025")
                        {
                            strFilingDateId = "142";
                            strCuttOffDateId = "143";
                        }
                        else if (tempFilingDateVar == "05/05/2025")
                        {
                            strFilingDateId = "144";
                            strCuttOffDateId = "145";
                        }
                        else
                        {
                            strFilingDateId = "";
                            strCuttOffDateId = "";
                        }

                    }
                    else
                    {
                        strFilingDateId = "";
                        strCuttOffDateId = "";
                    }
                }
                else if (Session["VDR_FilingCategoryId"].ToString() == "8" || Session["VDR_FilingCategoryId"].ToString() == "11")
                {
                    strFilingDateId = "67";
                    strCuttOffDateId = "68";
                }
            }
            if (Session["VDR_ElectionYearId"] != null && Session["VDR_ElectionTypeId"] != null && Session["VDR_OfficeTypeId"] != null)
            {
                if (Session["VDR_ElectionDateId"] != null)
                {
                    // IF IT IS 24 HOUR NOTICE THEN THEER IS NO FILING TYPE NO DISCLOSURE PERIOD NO FILING_PERIOD_ID.
                    // THEN WE NO NEED TO CHECK FILING TYPE EITHER JANUARY OR JULLY FOR 24 HOUR NOTICE ONLY FOR ITEMIZED.
                    if (Session["VDR_FilingCategoryId"].ToString() != "4" &&
                        Session["VDR_FilingCategoryId"].ToString() != "14")
                    {
                        if (Session["VDR_FilingTypeId"].ToString() == "10")
                        {
                            // FOR JANUARY PERIODIC IT HAS TO USE ELECTION YEAR ID FROM FILING PERIOD TABLE. ADDED - 02/01/2021
                            lstFilingCutOffDateModel = objItemizedReportsBroker.GetFilingCutOffDateDataResponse(Session["VDR_ElectionYearId_FP"].ToString(), Session["VDR_ElectionTypeId"].ToString(), Session["VDR_OfficeTypeId"].ToString(), strFilingDateId, strCuttOffDateId, Session["VDR_ElectionDateId"].ToString());
                        }
                        else
                        {
                            lstFilingCutOffDateModel = objItemizedReportsBroker.GetFilingCutOffDateDataResponse(Session["VDR_ElectionYearId"].ToString(), Session["VDR_ElectionTypeId"].ToString(), Session["VDR_OfficeTypeId"].ToString(), strFilingDateId, strCuttOffDateId, Session["VDR_ElectionDateId"].ToString());
                        }
                    }
                    else
                    {
                        lstFilingCutOffDateModel = objItemizedReportsBroker.GetFilingCutOffDateDataResponse(Session["VDR_ElectionYearId"].ToString(), Session["VDR_ElectionTypeId"].ToString(), Session["VDR_OfficeTypeId"].ToString(), strFilingDateId, strCuttOffDateId, Session["VDR_ElectionDateId"].ToString());
                    }
                }
                else
                {
                    // IF NOT ELECTION DATE EXISTS THEN IT WILL TAKE BLANK.
                    lstFilingCutOffDateModel = objItemizedReportsBroker.GetFilingCutOffDateDataResponse(Session["VDR_ElectionYearId"].ToString(), Session["VDR_ElectionTypeId"].ToString(), Session["VDR_OfficeTypeId"].ToString(), strFilingDateId, strCuttOffDateId, "");
                }
            }

            String strCutOffDate = String.Empty;
            foreach (var item in lstFilingCutOffDateModel)
            {
                if (item != null)
                {
                    if (Session["VDR_FilingCategoryId"].ToString() == "4" || Session["VDR_FilingCategoryId"].ToString() == "8" || Session["VDR_FilingCategoryId"].ToString() == "11" || Session["VDR_FilingCategoryId"].ToString() == "14")
                    {
                        if (item.FilingDueDate != null)
                            strCutOffDate = item.FilingDueDate;
                        else
                            Session["FilingDate"] = item.CutOffDate;
                    }
                    else
                    {
                        if (item.FilingDueDate != null)
                            Session["FilingDate"] = item.FilingDueDate;
                        else
                            strCutOffDate = item.CutOffDate;
                    }
                }
            }

            return strCutOffDate;
        }
        #endregion GetCutOffDateForFilings

        #region SaveImportDisclosureRptsData
        /// <summary>
        /// SaveImportDisclosureRptsData
        /// </summary>
        /// <param name="txtFilerId"></param>
        /// <param name="strReportYear"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult SaveImportDisclosureRptsData(String txtFilerId, String strReportYear, String lstVendorName)
        {
            try
            {
                IList<FilingTransactionsModel> lstFilingTransactionsModel = new List<FilingTransactionsModel>();
                VendorImportDataModel objVendorImportDataModel;
                objVendorImportDataModel = new VendorImportDataModel();
                objVendorImportDataModel.FilingsId = Session["VDR_FilingsId"].ToString();
                objVendorImportDataModel.VendorId = lstVendorName;
                objVendorImportDataModel.VendorFileSize = Session["FileSize"].ToString();
                objVendorImportDataModel.VendorTransCount = Session["RowsCountCSV"].ToString();
                objVendorImportDataModel.CreatedBy = Session["UserName"].ToString();
                objVendorImportDataModel.strLastSetOfTrans = "FALSE";
                // GET THE DATE.
                objVendorImportDataModel.dtCreatedDate = DateTime.Now;

                lstFilingTransactionsModel = (IList<FilingTransactionsModel>)Session["FilingTransactionDataUpload"];

                //// SET LAST SET TRANSACTIONS FLAG.
                //objVendorImportDataModel.strLastSetOfTrans = "TRUE";

                //System.Web.HttpContext.Current.Server.ScriptTimeout = 600;

                //// OLD CODE.
                //Boolean returnValue = objItemizedReportsBroker.AddVendorImportFileIntoTempDatabaseResponse(lstFilingTransactionsModel, objVendorImportDataModel);
                //return Json(returnValue, JsonRequestBehavior.AllowGet);

                System.Web.HttpContext.Current.Server.ScriptTimeout = 600;

                // BELOW LOGIC HAS TO BE IMPLEMENT TO SEND EVERY TIME 50 RECORDS TO DAL LAYER.
                // BEFORE CALLING SERVEICE AND DAL THIS CODE HAS TO SEND EVERY 50 RECORDS AT A TIME IF MORE THAN 50 TRANSACTIONS.
                // AFTER DISCUSSION WITH PANKAJ WE NEED ADD THIS LOGIC DECIDED ON 03.05.2021.
                // WILL IMPLEMENT LATER THIS ONE.                
                Boolean returnValue = false;
                //var lstFilingTransactionsModelTemp = new List<FilingTransactionsModel>();
                //int callCount = 50;
                //int count = 0;
                //int recordsCount = lstFilingTransactionsModel.Count;

                //if (recordsCount >= 50)
                //{
                //    foreach (var element in lstFilingTransactionsModel)
                //    {
                //        if (count++ == callCount)
                //        {
                //            // CALL DATABASE METHOD EVERY 50 TRANSACTIONS.
                //            returnValue = objItemizedReportsBroker.AddVendorImportFileIntoTempDatabaseResponse(lstFilingTransactionsModelTemp, objVendorImportDataModel);
                //            count = 1;
                //            lstFilingTransactionsModelTemp = new List<FilingTransactionsModel>();
                //        }
                //        lstFilingTransactionsModelTemp.Add(element);
                //    }
                //    // WHEN COMING OUT FROM LOOP THEN LAST TRANSACTIONS WILL BE LESS THAN <50.
                //    // CALL DATABASE METHOD LAST <50 TRANSACTIONS.
                //    // SET LAST SET TRANSACTIONS FLAG.
                //    objVendorImportDataModel.strLastSetOfTrans = "TRUE";
                //    returnValue = objItemizedReportsBroker.AddVendorImportFileIntoTempDatabaseResponse(lstFilingTransactionsModelTemp, objVendorImportDataModel);
                //}
                //else
                //{
                //    // SET LAST SET TRANSACTIONS FLAG.
                //    objVendorImportDataModel.strLastSetOfTrans = "TRUE";
                //    returnValue = objItemizedReportsBroker.AddVendorImportFileIntoTempDatabaseResponse(lstFilingTransactionsModel, objVendorImportDataModel);
                //}

                // SET LAST SET TRANSACTIONS FLAG.
                objVendorImportDataModel.strLastSetOfTrans = "TRUE";
                returnValue = objItemizedReportsBroker.AddVendorImportFileIntoTempDatabaseResponse(lstFilingTransactionsModel, objVendorImportDataModel);

                return Json(returnValue, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                //objERClass.LogExceptionInDatabase(ConfigurationManager.AppSettings["ApplicationKey"].ToString(), ex.Message, "ImportDisclosureReportController", "SaveImportDisclosureRptsData", "", "", "Filer Error Found", Session["UserName"].ToString());
                //throw;
                return Json(true, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion SaveImportDisclosureRptsDat

        #region ValidationFilingsData
        /// <summary>
        /// ValidationFilingsData
        /// </summary>
        /// <param name="objImportDisclsoureRptsFilings"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationFilingsData(ImportDisclsoureRptsFilings objImportDisclsoureRptsFilings)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            if (String.IsNullOrEmpty(objImportDisclsoureRptsFilings.FilerId))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Filer Id is required." + ", ";
                objErrorMessagesFiledNames.FieledName = "FILER_ID" + ", ";
            }
            else if (String.IsNullOrEmpty(objImportDisclsoureRptsFilings.FilingPeriodId))
            {
                if (Session["Filing_Catogery_Id"] != null)
                {
                    if (Session["Filing_Catogery_Id"].ToString() != "4" &&
                        Session["Filing_Catogery_Id"].ToString() != "14")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Filing Period Id is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FILING_PERIOD_ID" + ", ";
                    }
                }
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "FILING_PERIOD" && x.Id == objImportDisclsoureRptsFilings.FilingPeriodId.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Filing Period Id is not exists" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FILING_PERIOD_ID" + ", ";
                }
            }

            if (String.IsNullOrEmpty(objImportDisclsoureRptsFilings.FilingCategoryId))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Filing Category Id is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FILING_CAT_ID" + ", ";
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "FILING_CATEGORY" && x.Id == objImportDisclsoureRptsFilings.FilingCategoryId.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Filing Category Id is not exists" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FILING_PERIOD_ID" + ", ";
                }
            }

            if (String.IsNullOrEmpty(objImportDisclsoureRptsFilings.ElectId))
            {
                if (Session["VDR_FilingTypeId"] != null)
                {
                    if (Session["VDR_FilingTypeId"].ToString() != "12") // IT IS OFF-CYCLE THEN NO ELECT_ID.
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Elect Id is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ELECT_ID" + ", ";
                    }
                }
                else
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Elect Id is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ELECT_ID" + ", ";
                }
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "ELECTION" && x.Id == objImportDisclsoureRptsFilings.ElectId.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Elect Id is not exists" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FILING_PERIOD_ID" + ", ";
                }
            }

            if (String.IsNullOrEmpty(objImportDisclsoureRptsFilings.RFilingDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Filing Date is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_FILING_DATE" + ", ";
            }
            else if (String.IsNullOrEmpty(objImportDisclsoureRptsFilings.FilingScheduleId))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Filing Schedule Id is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FILING_SCHED_ID" + ", ";
            }

            // CHECK FILING_PERIOD_ID AND ELECT ID THE ELECTION_YEAR_ID SHOULD MATCH...
            // IF NOT MATCHING THEN ITS WORNG DATA SO WE CAN'T UPLOAD SHOW VALIDATION MESSAGE....


            return objErrorMessagesFiledNames;
        }
        #endregion ValidationFilingsData

        #region ValidationScheduleData_A
        /// <summary>
        /// ValidationScheduleAData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleAData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE A DATA 
            #region FormValidationScheduleA      
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off " +
                        "Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ContributorTypeId == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contributor Code is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                }

                if (objFilingTransactionsModel.ContributorTypeId == "5")
                {
                    if (objFilingTransactionsModel.FlngEntName == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name should be 40 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.ContributorTypeId != null)
                    {
                        if (objFilingTransactionsModel.FlngEntFirstName == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }

                        if (objFilingTransactionsModel.FlngEntMiddleName != null)
                        {
                            if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntLastName == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }

                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation)) // FIXED ON 03/02/2020
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    if (objFilingTransactionsModel.PaymentTypeId != "0")
                    {
                        //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                        Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                        if (!results)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    if (objFilingTransactionsModel.ContributorTypeId != null)
                    {
                        if (objFilingTransactionsModel.ContributorTypeId != "0")
                        {
                            //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                            Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                            if (!results)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Contributor Code" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                            }
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleA

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_A

        #region ValidationScheduleData_B
        /// <summary>
        /// ValidationScheduleBData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleBData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE B DATA 
            #region FormValidationScheduleB 
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off " +
                        "Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name should be 40 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }

                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleB

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_B

        #region ValidationScheduleData_C
        /// <summary>
        /// ValidationScheduleCData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleCData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE C DATA 
            #region FormValidationScheduleC
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off " +
                        "Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ContributorTypeId == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contributor Type Code is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name should be 40 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Contributor Code" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                    }
                }
            }
            else
            { // UNITEMIZED TRANSACTIONS.
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }

                //// REMOVED THIS AFTER GET UPDATE FROM BUSINESS UNIT
                //// CONTRIBUTOR TYPE NOT REQUIRED FOR UN-ITEMIZED TRANSACTIONS.
                //// REMOVED ON 07.06.2021 AS DISCUSSED.
                //// ADDING VALIDATION FOR SCHEDULE C UNITEMIZED CONTRIBUTOR TYPE IS REQUIRED.
                //// DEFECT: - ADDED ON 05.25.2021
                //if (objFilingTransactionsModel.ContributorTypeId == null)
                //{
                //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contributor Type Code is required" + ", ";
                //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                //}
                //if (objFilingTransactionsModel.ContributorTypeId != null)
                //{
                //    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                //    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                //    if (!results)
                //    {
                //        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Contributor Code" + ", ";
                //        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                //    }

                //    // ADDED THIS SCHEDULE C UNITEMIZED REQUIRED CONTRIBUTOR TYPE 
                //    // BUT IF THEY CHOOSE CONTRIBUTOR TYPE = 11 (Professional/Limited Liability Company (PLLC/LLC))
                //    // THEN IT WILL CONVERT TO ITEMIZED AND THEY HAVE TO DO ITEMIZED TRANSACTION.
                //    // CONTRIBUTOR TYPE = 11 NOT ALLOWING UNITEMIZED TRANSACTIONS.
                //    // ADDED ON 05.25.2021
                //    if (objFilingTransactionsModel.ContributorTypeId.ToString() == "11")
                //    {
                //        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contributor Type - Professional/Limited Liability Company (PLLC/LLC) is not allowed in unitemized" + ", ";
                //        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                //    }
                //}                                
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleC

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_C

        #region ValidationScheduleData_D
        /// <summary>
        /// ValidationScheduleDData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleDData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE D DATA 
            #region FormValidationScheduleD
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off " +
                        "Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ContributorTypeId == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contributor Code is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                }

                if (objFilingTransactionsModel.ContributorTypeId == "5" || objFilingTransactionsModel.ContributorTypeId == "6" || objFilingTransactionsModel.ContributorTypeId == "7" || objFilingTransactionsModel.ContributorTypeId == "9" || objFilingTransactionsModel.ContributorTypeId == "10" || objFilingTransactionsModel.ContributorTypeId == "12" || objFilingTransactionsModel.ContributorTypeId == "11" || objFilingTransactionsModel.ContributorTypeId == "13" || objFilingTransactionsModel.ContributorTypeId == "14")
                {
                    if (objFilingTransactionsModel.FlngEntName == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name should be 40 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntFirstName == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntMiddleName != null)
                    {
                        if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntLastName == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    if (objFilingTransactionsModel.PaymentTypeId == "1")
                    {
                        if (objFilingTransactionsModel.PayNumber == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                    }
                    else if (objFilingTransactionsModel.PaymentTypeId == "8")
                    {
                        if (objFilingTransactionsModel.PayNumber == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                    }
                    else if (objFilingTransactionsModel.PaymentTypeId == "7")
                    {
                        if (objFilingTransactionsModel.TransExplanation == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                        else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Contributor Code" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBR_TYPE_ID" + ", ";
                    }
                }

                if (objFilingTransactionsModel.ContributionTypeId != null)
                {
                    //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTION_TYPE", objFilingTransactionsModel.ContributionTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTION_TYPE" && x.Id == objFilingTransactionsModel.ContributionTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Contribution Type" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBN_TYPE_ID" + ", ";
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }
            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.

            if (objFilingTransactionsModel.ContributionTypeId == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contribution Type is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "CNTRBN_TYPE_ID" + ", ";
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleD

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_D

        #region ValidationScheduleData_E
        /// <summary>
        /// ValidationScheduleEData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleEData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE E DATA 
            #region FormValidationScheduleE
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off " +
                        "Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Receipt Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Receipt Name should be 40 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    if (objFilingTransactionsModel.PaymentTypeId == "1")
                    {
                        if (objFilingTransactionsModel.PayNumber == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                    }
                    else if (objFilingTransactionsModel.PaymentTypeId == "8")
                    {
                        if (objFilingTransactionsModel.PayNumber == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                        else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                        }
                    }
                    else if (objFilingTransactionsModel.PaymentTypeId == "7")
                    {
                        if (objFilingTransactionsModel.TransExplanation == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                        else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.ReceiptTypeId != null)
                {
                    if (objFilingTransactionsModel.ReceiptTypeId == "3")
                    {
                        if (objFilingTransactionsModel.TransExplanation == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                        else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.ReceiptTypeId != null)
                {
                    //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("RECEIPT_TYPE", objFilingTransactionsModel.ReceiptTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "RECEIPT_TYPE" && x.Id == objFilingTransactionsModel.ReceiptTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Receipt Type" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "RECEIPT_TYPE_ID" + ", ";
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_E(objFilingTransactionsModel.OrgAmt)) // ONLY SCHEDULE E ALLOWING LESS THAN $1.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleE

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_E

        #region ValidationScheduleData_F
        /// <summary>
        /// ValidationScheduleFData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleFData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE F DATA 
            #region FormValidationScheduleF
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off " +
                        "Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Payor Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Payor Name should be 40 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }

                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PurposeCodeId != null)
                {
                    if (Regex.IsMatch(objFilingTransactionsModel.PurposeCodeId, @"^\d+$"))
                    {
                        //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PURPOSE_CODE", objFilingTransactionsModel.PurposeCodeId.ToString());
                        Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PURPOSE_CODE" && x.Id == objFilingTransactionsModel.PurposeCodeId.ToString());
                        if (!results)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Purpose Code should be numeric" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PURPOSE_CODE_ID" + ", ";
                        }
                    }
                    else
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Purpose Code" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PURPOSE_CODE_ID" + ", ";
                    }
                }

                if (objFilingTransactionsModel.IsExpPartialPay == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Is Expenditure a Partial Payment should be either Y or N" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "Is Expenditure a Partial Payment? " + ", ";

                    if (objFilingTransactionsModel.IsExistingLiab == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Is thi existing Liability should be either Y or N" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "Is this existing Liability?" + ", ";
                    }
                }
                if (objFilingTransactionsModel.IsExpSubcontractor == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Subcontractor should be either Y or N" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "Is Expenditure Subcontracted?" + ", ";
                }
                if (objFilingTransactionsModel.IsExpPartialPay == "Y")
                {
                    if (objFilingTransactionsModel.TransMapping == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_MAPPING" + ", ";
                    }
                    if (objFilingTransactionsModel.Loan_Lib_Number == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Loan Liability Number is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "LOAN_LIB_NUMBER" + ", ";
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.RItemized == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Itemized should be either Y or N" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleF

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_F

        #region ValidationScheduleData_G
        /// <summary>
        /// ValidationScheduleGData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleGData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE G DATA 
            #region FormValidationScheduleG 
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Transferred is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "SCHED_DATE valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Transferred cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Transferred cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntName == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transferor Name is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transferor Name should be 40 characters" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!resultsData)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.TransferTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("TRANSFER_TYPE", objFilingTransactionsModel.TransferTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "TRANSFER_TYPE" && x.Id == objFilingTransactionsModel.TransferTypeId.ToString());
                if (!resultsData)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANSFER_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }
            else
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transdfer Type is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANSFER_TYPE_ID" + ", ";
            }


            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.RItemized != "Y")
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Itemized should be 'Y'" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleG

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_G

        #region ValidationScheduleData_H
        /// <summary>
        /// ValidationScheduleHData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleHData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE H DATA 
            #region FormValidationScheduleH 
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Transferred is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Transferred cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Transferred cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntName == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transferor Name is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transferor Name should be 40 characters" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!resultsData)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }


            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransferTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("TRANSFER_TYPE", objFilingTransactionsModel.TransferTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "TRANSFER_TYPE" && x.Id == objFilingTransactionsModel.TransferTypeId.ToString());
                if (!resultsData)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANSFER_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }
            else
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transdfer Type is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANSFER_TYPE_ID" + ", ";
            }

            if (objFilingTransactionsModel.RItemized != "Y")
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Itemized should be 'Y'" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleH

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_H

        #region ValidationScheduleData_I
        /// <summary>
        /// ValidationScheduleIData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleIData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE I DATA 
            #region FormValidationScheduleI
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.LoanOtherId == "1" || objFilingTransactionsModel.LoanOtherId == "2" || objFilingTransactionsModel.LoanOtherId == "3" || objFilingTransactionsModel.LoanOtherId == "4" || objFilingTransactionsModel.LoanOtherId == "6"
                || objFilingTransactionsModel.LoanOtherId == "7" || objFilingTransactionsModel.LoanOtherId == "8" || objFilingTransactionsModel.LoanOtherId == "9")
            {
                if (objFilingTransactionsModel.FlngEntFirstName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                if (objFilingTransactionsModel.FlngEntMiddleName != null)
                {
                    if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntLastName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
            }
            else if (objFilingTransactionsModel.LoanOtherId == "10" || objFilingTransactionsModel.LoanOtherId == "11" || objFilingTransactionsModel.LoanOtherId == "12" || objFilingTransactionsModel.LoanOtherId == "13")
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Lender Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Lender Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!resultsData)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleI

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_I

        #region ValidationScheduleData_J
        /// <summary>
        /// ValidationScheduleJData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleJData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE J DATA 
            #region FormValidationScheduleJ
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.LoanOtherId == "1" || objFilingTransactionsModel.LoanOtherId == "2" || objFilingTransactionsModel.LoanOtherId == "3" || objFilingTransactionsModel.LoanOtherId == "4" || objFilingTransactionsModel.LoanOtherId == "6"
                || objFilingTransactionsModel.LoanOtherId == "7" || objFilingTransactionsModel.LoanOtherId == "8" || objFilingTransactionsModel.LoanOtherId == "9")
            {
                if (objFilingTransactionsModel.FlngEntFirstName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntMiddleName != null)
                {
                    if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntLastName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
            }
            else if (objFilingTransactionsModel.LoanOtherId == "10" || objFilingTransactionsModel.LoanOtherId == "11" || objFilingTransactionsModel.LoanOtherId == "12" || objFilingTransactionsModel.LoanOtherId == "13")
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Lender Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!resultsData)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            // VALIDATE OUTSTANDING AMOUNT.
            // FOR SCHEDULE J OWED_AMT NOT REQUIRED. FIXED ON - 02/01/2021
            //if (objFilingTransactionsModel.OwedAmt == null) // FIXED ON 03/02/2020
            //{
            //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Outstanding Amount is required" + ", ";
            //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            //}
            //else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OwedAmt))
            //{
            //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
            //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            //}
            //else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OwedAmt))
            //{
            //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
            //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            //}
            //else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OwedAmt))
            //{
            //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
            //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            //}
            //else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OwedAmt)) // OWED_AMT SHOULD BE ZERO. FIXED 04/30/2020
            //{
            //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
            //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            //}

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }

            if (objFilingTransactionsModel.TransMapping == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_MAPPING" + ", ";
            }

            if (objFilingTransactionsModel.Loan_Lib_Number == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "LOAN_LIB_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleJ

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_J

        #region ValidationScheduleData_K
        /// <summary>
        /// ValidationScheduleKData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleKData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE K DATA 
            #region FormValidationScheduleK
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntName == null)
            {
                if (objFilingTransactionsModel.FlngEntFirstName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntMiddleName != null)
                {
                    if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntLastName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
            }
            else if (objFilingTransactionsModel.FlngEntFirstName == null)
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Lender/Payee Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!resultsData)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.IsExistingLiab != null)
            {
                if (objFilingTransactionsModel.OrgAmt == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount Forgiven is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                }
                else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                }
                else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                }
                else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                }
                else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                }
            }
            else
            {
                if (objFilingTransactionsModel.IsExistingLiab == "N" || objFilingTransactionsModel.IsExistingLiab == "Y")
                {
                    // VALIDATE ORG AMOUNT
                    if (objFilingTransactionsModel.OrgAmt == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount Forgiven is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
                    }

                    // VALIDATE OUTSTANDING AMOUNT.
                    if (objFilingTransactionsModel.OwedAmt == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Outstanding Amount is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OwedAmt))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OwedAmt))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OwedAmt))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
                    }
                    //else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OwedAmt)) // OWED_AMT SHOULD BE ZERO. FIXED 04/30/2020
                    //{
                    //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                    //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
                    //}
                }
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }

            if (objFilingTransactionsModel.TransMapping == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_MAPPING" + ", ";
            }

            if (objFilingTransactionsModel.Loan_Lib_Number == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "LOAN_LIB_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleK

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_K

        #region ValidationScheduleData_L
        /// <summary>
        /// ValidationScheduleLData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleLData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE L DATA 
            #region FormValidationScheduleL
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Refunded Paid is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Refunded Paid cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntName == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Payor Name is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Payor Name should be 40 characters" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.RItemized != "Y")
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Itemized should be 'Y'" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }

            if (objFilingTransactionsModel.TransMapping == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_MAPPING" + ", ";
            }
            #endregion FormValidationScheduleL

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_L

        #region ValidationScheduleData_M
        /// <summary>
        /// ValidationScheduleMData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleMData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE M DATA 
            #region FormValidationScheduleM
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Refunded Paid is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Refunded Paid cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntName == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contributor Name is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }
            else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Contributor Name should be 40 characters" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.RItemized != "Y")
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Itemized should be 'Y'" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }

            if (objFilingTransactionsModel.TransMapping == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_MAPPING" + ", ";
            }
            #endregion FormValidationScheduleM

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_M

        #region ValidationScheduleData_N
        /// <summary>
        /// ValidationScheduleNData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleNData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE N DATA 
            #region FormValidationScheduleN
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntName != null)
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Creditor Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Creditor Name should be 40 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
            }
            else
            {
                if (objFilingTransactionsModel.FlngEntFirstName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntMiddleName != null)
                {
                    if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntLastName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                }
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }


                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "8")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                }
            }
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                }
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            // OUTSTANDING AMOUNT
            if (objFilingTransactionsModel.OwedAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OwedAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OwedAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OwedAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            }
            //else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OwedAmt)) // OWED_AMT SHOULD BE ZERO. FIXED 04/30/2020
            //{
            //    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
            //    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OWED_AMT" + ", ";
            //}

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }

            if (objFilingTransactionsModel.Loan_Lib_Number == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Loan Liability Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "LOAN_LIB_NUMBER" + ", ";
            }

            if (objFilingTransactionsModel.OrgAmt != null && objFilingTransactionsModel.OwedAmt != null)
            {
                if (objFilingTransactionsModel.OrgAmt.ToString() != objFilingTransactionsModel.OwedAmt.ToString())
                {
                    if (objFilingTransactionsModel.TransMapping == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping Number is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_MAPPING" + ", ";
                    }
                }
            }
            #endregion FormValidationScheduleN

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_N

        #region ValidationScheduleData_O
        /// <summary>
        /// ValidationSchedulePData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleOData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE P DATA 
            #region FormValidationScheduleO
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            if (objFilingTransactionsModel.RItemized == "Y")
            {
                if (objFilingTransactionsModel.FlngEntName != null)
                {
                    if (objFilingTransactionsModel == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = "Partner Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = "FLNG_ENT_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntName != null)
                    {
                        if (!objCommonErrorsServerSide.NameValidatePartnerDetails(objFilingTransactionsModel.FlngEntName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partner Name should be 40 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                        }
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntFirstName == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntFirstName != null)
                    {
                        if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntMiddleName != null)
                    {
                        if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntLastName == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntLastName != null)
                    {
                        if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount Attributed is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }

            if (objFilingTransactionsModel.TransMapping == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Mapping is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_MAPPING" + ", ";
            }
            #endregion FormValidationScheduleO

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_O

        #region ValidationScheduleData_P
        /// <summary>
        /// ValidationSchedulePData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationSchedulePData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE P DATA 
            #region FormValidationScheduleP
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ReceiptCodeId != "1")
                {
                    if (objFilingTransactionsModel.FlngEntName == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name should be 40 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.ReceiptCodeId != null)
                    {
                        if (objFilingTransactionsModel.FlngEntFirstName == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
                        }

                        if (objFilingTransactionsModel.FlngEntMiddleName != null)
                        {
                            if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntLastName == null)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                        else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.ReceiptCodeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("RECEIPT_CODE", objFilingTransactionsModel.ReceiptCodeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "RECEIPT_CODE" && x.Id == objFilingTransactionsModel.ReceiptCodeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Receipt Code" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "RECEIPT_CODE_ID" + ", ";
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleP

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_P

        #region ValidationScheduleData_Q
        /// <summary>
        /// ValidationScheduleQData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleQData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE Q DATA 
            #region FormValidationScheduleQ
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Received is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Received cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -.,& are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Partnership Name should be 40 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_NAME" + ", ";
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Two letters are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address must contain at least four characters" + ", ";
                                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Street Address should be 60 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ADD1" + ", ";
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "City should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_CITY" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "State should be 30 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_STATE" + ", ";
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and - are allowed" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Zip Code should be 10 characters" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_ZIP" + ", ";
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Check should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order # is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters and numbers are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Money Order should be 30 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAY_NUMBER" + ", ";
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation is required" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Method" + ", ";
                            objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PAYMENT_TYPE_ID" + ", ";
                        }
                    }
                }

                // ADDED SCHEDULE Q PURPOSE CODE IS REQUIRED.
                // ADDED ON 07.19.2021.
                if (objFilingTransactionsModel.PurposeCodeId == null)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Purpose Code is required" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PURPOSE_CODE" + ", ";
                }

                if (objFilingTransactionsModel.PurposeCodeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PURPOSE_CODE", objFilingTransactionsModel.PurposeCodeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PURPOSE_CODE" && x.Id == objFilingTransactionsModel.PurposeCodeId.ToString());
                    if (!results)
                    {
                        objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Purpose Code" + ", ";
                        objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "PURPOSE_CODE_ID" + ", ";
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Is Transaction Itemized" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "R_ITEMIZED" + ", ";
                }
            }
            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";

                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Explanation should be 250 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleQ

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_Q

        #region ValidationScheduleData_R
        /// <summary>
        /// ValidationScheduleRData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public ErrorMessagesFiledNames ValidationScheduleRData(FilingTransactionsModel objFilingTransactionsModel)
        {
            ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE R DATA 
            #region FormValidationScheduleR
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Country should be United States." + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_COUNTRY" + ", ";
                }
            }
            DateTime dDate;
            // Current Date.
            if (objFilingTransactionsModel.SchedDate == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = "Date Allocated is required" + ", ";
                objErrorMessagesFiledNames.FieledName = "SCHED_DATE" + ", ";
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid date format (MM/DD/YYYY)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }
            else if (Session["VDR_ElectionTypeId"].ToString() == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Allocated cannot be later than Cut Off Date" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, strCutOffDate))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Date Allocated cannot be later than Cut Off Date" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "SCHED_DATE" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntFirstName == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
            }
            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
            }
            else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "First Name should be 30 characters" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_FIRST_NAME" + ", ";
            }

            if (objFilingTransactionsModel.FlngEntMiddleName != null)
            {
                if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                }
                else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Middle Name should be 30 characters" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_MIDDLE_NAME" + ", ";
                }
            }

            if (objFilingTransactionsModel.FlngEntLastName == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
            }
            else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
            }
            else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Last Name should be 30 characters" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "FLNG_ENT_LAST_NAME" + ", ";
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Amount is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }
            else if (!objCommonErrorsServerSide.AmountZeroValSched_ABC(objFilingTransactionsModel.OrgAmt)) // ADDED LESS THAN $1 ON 05.24.2021.
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Enter valid Amount (999999999.99)" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "ORG_AMT" + ", ";
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Letters, numbers and characters '# -., are allowed" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_EXPLNTN" + ", ";
                }
            }
            if (objFilingTransactionsModel.OfficeID != null)
            {
                //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("OFFICE_ID", objFilingTransactionsModel.OfficeID.ToString());
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "OFFICE_ID" && x.Id == objFilingTransactionsModel.OfficeID.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid Office" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OFFICE_ID" + ", ";
                }
            }
            else if (objFilingTransactionsModel.OfficeID == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Office is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "OFFICE_ID" + ", ";
            }

            if (objFilingTransactionsModel.DistrictID != null)
            {
                //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("DISTRICT", objFilingTransactionsModel.DistrictID.ToString());
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "DISTRICT" && x.Id == objFilingTransactionsModel.DistrictID.ToString());
                if (!results)
                {
                    objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Invalid District" + ", ";
                    objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "DISTRICT" + ", ";
                }
            }
            else if (objFilingTransactionsModel.DistrictID == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "District is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "DISTRICT" + ", ";
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objErrorMessagesFiledNames.ErrorMessage = objErrorMessagesFiledNames.ErrorMessage + "Transaction Number is required" + ", ";
                objErrorMessagesFiledNames.FieledName = objErrorMessagesFiledNames.FieledName + "TRANS_NUMBER" + ", ";
            }
            #endregion FormValidationScheduleR

            return objErrorMessagesFiledNames;
        }
        #endregion ValidationScheduleData_R

        #region ValidateScheduleData_24Hour_A
        /// <summary>
        /// Validate24HourSchedAData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public void Validate24HourSchedAData(FilingTransactionsModel objFilingTransactionsModel, String rowNumber)
        {            
            ImportErrorMessageModel objImportErrorMessageModel;
            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE A DATA 
            #region FormValidationScheduleA         
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country should be United States";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);                    
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);                
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);                
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.ElectionTypeId == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                    objImportErrorMessageModel.ErrorMessages = "Date Received cannot be later than Cut Off";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            if (!objCommonErrorsServerSide.CuttOffDateValidation24HourNotice(objFilingTransactionsModel.SchedDate, strCutOffDate, Session["FilingDate"].ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received should be between From Date and To Date";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ContributorTypeId == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                    objImportErrorMessageModel.ErrorMessages = "Contributor Code is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.ContributorTypeId == "5")
                {
                    if (objFilingTransactionsModel.FlngEntName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Partnership Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Partnership Name should be 40 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.ContributorTypeId != null)
                    {
                        if (objFilingTransactionsModel.FlngEntFirstName == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                            objImportErrorMessageModel.ErrorMessages = "First Name is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                            objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        if (objFilingTransactionsModel.FlngEntMiddleName != null)
                        {
                            if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                                objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntLastName == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                            objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                            objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check # is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.FilingScheduleId == "1")
                    {
                        if (objFilingTransactionsModel.PayNumber == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Money Order # is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Money Order should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else
                    {
                        if (objFilingTransactionsModel.PayNumber != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation)) // FIXED ON 03/02/2020
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    if (objFilingTransactionsModel.PaymentTypeId != "0")
                    {
                        //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                        Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                        if (!results)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Method";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                            if (paymentTypeVal == "8")
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                                objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Itemized Monetary Contributions Received From Ind. & Part.";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FilingSchedId != "4"
                            && objFilingTransactionsModel.FilingSchedId != "11"
                            && objFilingTransactionsModel.FilingSchedId != "14"
                            && objFilingTransactionsModel.FilingSchedId != "15"
                            && objFilingTransactionsModel.FilingSchedId != "18")

                    {
                        if (objFilingTransactionsModel.PurposeCodeId != "11"
                            && objFilingTransactionsModel.PurposeCodeId != "29")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Method is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    if (objFilingTransactionsModel.ContributorTypeId != null)
                    {
                        if (objFilingTransactionsModel.ContributorTypeId != "0")
                        {
                            //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                            Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                            if (!results)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                                objImportErrorMessageModel.ErrorMessages = "Invalid Contributor Code";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Amount is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion FormValidationScheduleA
        }
        #endregion ValidateScheduleData_24Hour_A

        #region ValidateScheduleData_24Hour_B
        /// <summary>
        /// Validate24HourSchedBData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public void Validate24HourSchedBData(FilingTransactionsModel objFilingTransactionsModel, String rowNumber)
        {
            //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
            ImportErrorMessageModel objImportErrorMessageModel;

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE B DATA 
            #region FormValidationScheduleB 
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country should be United States";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.ElectionTypeId == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, objFilingTransactionsModel.FilingDate))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                    objImportErrorMessageModel.ErrorMessages = "Date Received cannot be later than Cut Off Date";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation24HourNotice(objFilingTransactionsModel.SchedDate, strCutOffDate, Session["FilingDate"].ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received should be between From Date and To Date";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Partnership Name is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Partnership Name should be 40 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);                                
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check # is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                //else if (objFilingTransactionsModel.PaymentTypeId == "8")
                //{
                //    if (objFilingTransactionsModel.PayNumber == null)
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                //        objImportErrorMessageModel.ErrorMessages = "Money Order # is required";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                //        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                //        objImportErrorMessageModel.ErrorMessages = "Money Order should be 30 characters";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //}
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Method";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Itemized Monetary Contributions Received From Ind. & Part.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FilingSchedId != "4"
                            && objFilingTransactionsModel.FilingSchedId != "11"
                            && objFilingTransactionsModel.FilingSchedId != "14"
                            && objFilingTransactionsModel.FilingSchedId != "15"
                            && objFilingTransactionsModel.FilingSchedId != "18")

                    {
                        if (objFilingTransactionsModel.PurposeCodeId != "11"
                            && objFilingTransactionsModel.PurposeCodeId != "29")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Method is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Amount is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion FormValidationScheduleB
        }
        #endregion ValidateScheduleData_24Hour_B

        #region ValidateScheduleData_24Hour_C
        /// <summary>
        /// Validate24HourSchedCData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public void Validate24HourSchedCData(FilingTransactionsModel objFilingTransactionsModel, String rowNumber)
        {
            //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
            ImportErrorMessageModel objImportErrorMessageModel;

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE C DATA 
            #region FormValidationScheduleC
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country should be United States";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.ElectionTypeId == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, objFilingTransactionsModel.FilingDate))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                    objImportErrorMessageModel.ErrorMessages = "Date Received cannot be later than Cut Off Date";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation24HourNotice(objFilingTransactionsModel.SchedDate, strCutOffDate, Session["FilingDate"].ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received should be between From Date and To Date";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ContributorTypeId == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                    objImportErrorMessageModel.ErrorMessages = "Contributor Type Code is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Partnership Name is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Partnership Name should be 40 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check # is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                //else if (objFilingTransactionsModel.PaymentTypeId == "8")
                //{
                //    if (objFilingTransactionsModel.PayNumber == null)
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                //        objImportErrorMessageModel.ErrorMessages = "Money Order # is required";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                //        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                //    {
                //        objImportErrorMessageModel = new ImportErrorMessageModel();
                //        objImportErrorMessageModel.RowNumber = rowNumber;
                //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                //        objImportErrorMessageModel.ErrorMessages = "Money Order should be 30 characters";
                //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                //    }
                //}
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Method";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Itemized Monetary Contributions Received From Ind. & Part.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FilingSchedId != "4"
                            && objFilingTransactionsModel.FilingSchedId != "11"
                            && objFilingTransactionsModel.FilingSchedId != "14"
                            && objFilingTransactionsModel.FilingSchedId != "15"
                            && objFilingTransactionsModel.FilingSchedId != "18")

                    {
                        if (objFilingTransactionsModel.PurposeCodeId != "11"
                            && objFilingTransactionsModel.PurposeCodeId != "29")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Method is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Contributor Code";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Amount is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion FormValidationScheduleC
        }
        #endregion ValidateScheduleData_24Hour_C

        #region ValidateScheduleData_24Hour_D
        /// <summary>
        /// Validate24HourSchedDData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public void Validate24HourSchedDData(FilingTransactionsModel objFilingTransactionsModel, String rowNumber)
        {
            //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
            ImportErrorMessageModel objImportErrorMessageModel;

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE D DATA 
            #region FormValidationScheduleD
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country should be United States";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.ElectionTypeId == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, objFilingTransactionsModel.FilingDate))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                    objImportErrorMessageModel.ErrorMessages = "Date Received cannot be later than Cut Off Date";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation24HourNotice(objFilingTransactionsModel.SchedDate, strCutOffDate, Session["FilingDate"].ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received should be between From Date and To Date";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ContributorTypeId == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                    objImportErrorMessageModel.ErrorMessages = "Contributor Code is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.ContributorTypeId == "5" || objFilingTransactionsModel.ContributorTypeId == "6" || objFilingTransactionsModel.ContributorTypeId == "7" || objFilingTransactionsModel.ContributorTypeId == "9" || objFilingTransactionsModel.ContributorTypeId == "10" || objFilingTransactionsModel.ContributorTypeId == "12" || objFilingTransactionsModel.ContributorTypeId == "11")
                {
                    if (objFilingTransactionsModel.FlngEntName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Partnership Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Partnership Name should be 40 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntFirstName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                        objImportErrorMessageModel.ErrorMessages = "First Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                        objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.FlngEntMiddleName != null)
                    {
                        if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                            objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntLastName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                        objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                        objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCity == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    if (objFilingTransactionsModel.PaymentTypeId == "1")
                    {
                        if (objFilingTransactionsModel.PayNumber == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Check # is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Check should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    //else if (objFilingTransactionsModel.PaymentTypeId == "8")
                    //{
                    //    if (objFilingTransactionsModel.PayNumber == null)
                    //    {
                    //        objImportErrorMessageModel = new ImportErrorMessageModel();
                    //        objImportErrorMessageModel.RowNumber = rowNumber;
                    //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    //        objImportErrorMessageModel.ErrorMessages = "Money Order # is required";
                    //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    //    }
                    //    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    //    {
                    //        objImportErrorMessageModel = new ImportErrorMessageModel();
                    //        objImportErrorMessageModel.RowNumber = rowNumber;
                    //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    //        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                    //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    //    }
                    //    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    //    {
                    //        objImportErrorMessageModel = new ImportErrorMessageModel();
                    //        objImportErrorMessageModel.RowNumber = rowNumber;
                    //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    //        objImportErrorMessageModel.ErrorMessages = "Money Order should be 30 characters";
                    //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    //    }
                    //}
                    else if (objFilingTransactionsModel.PaymentTypeId == "7")
                    {
                        if (objFilingTransactionsModel.TransExplanation == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                            objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                            objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        if (objFilingTransactionsModel.PayNumber != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else
                    {
                        if (objFilingTransactionsModel.PayNumber != null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                            objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Method";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        if (paymentTypeVal == "8")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Itemized Monetary Contributions Received From Ind. & Part.";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.FilingSchedId != "4"
                            && objFilingTransactionsModel.FilingSchedId != "11"
                            && objFilingTransactionsModel.FilingSchedId != "14"
                            && objFilingTransactionsModel.FilingSchedId != "15"
                            && objFilingTransactionsModel.FilingSchedId != "18")

                    {
                        if (objFilingTransactionsModel.PurposeCodeId != "11"
                            && objFilingTransactionsModel.PurposeCodeId != "29")
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Method is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Contributor Code";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.ContributionTypeId != null)
                {
                    //Boolean result = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTION_TYPE", objFilingTransactionsModel.ContributionTypeId.ToString());
                    Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTION_TYPE" && x.Id == objFilingTransactionsModel.ContributionTypeId.ToString());
                    if (!results)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "CNTRBN_TYPE_ID - Column N";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Contribution Type";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.

            if (objFilingTransactionsModel.ContributionTypeId == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "CNTRBN_TYPE_ID - Column N";
                objImportErrorMessageModel.ErrorMessages = "Contribution Type is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Amount is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion FormValidationScheduleD
        }
        #endregion ValidateScheduleData_24Hour_D

        #region ValidateScheduleData_24Hour_I
        /// <summary>
        /// Validate24HourSchedIData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public void Validate24HourSchedIData(FilingTransactionsModel objFilingTransactionsModel, String rowNumber)
        {
            //ErrorMessagesFiledNames objErrorMessagesFiledNames = new ErrorMessagesFiledNames();
            ImportErrorMessageModel objImportErrorMessageModel;

            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            // VALIDATE SCHEDULE I DATA 
            #region FormValidationScheduleI
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country should be United States";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.ElectionTypeId == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, objFilingTransactionsModel.FilingDate))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                    objImportErrorMessageModel.ErrorMessages = "Date Received cannot be later than Cut Off Date";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else if (!objCommonErrorsServerSide.CuttOffDateValidation24HourNotice(objFilingTransactionsModel.SchedDate, strCutOffDate, Session["FilingDate"].ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received should be between From Date and To Date";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.LoanOtherId == "1" || objFilingTransactionsModel.LoanOtherId == "2" || objFilingTransactionsModel.LoanOtherId == "3" || objFilingTransactionsModel.LoanOtherId == "4" || objFilingTransactionsModel.LoanOtherId == "6"
                || objFilingTransactionsModel.LoanOtherId == "7" || objFilingTransactionsModel.LoanOtherId == "8" || objFilingTransactionsModel.LoanOtherId == "9")
            {
                if (objFilingTransactionsModel.FlngEntFirstName == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                    objImportErrorMessageModel.ErrorMessages = "First Name is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                    objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.FlngEntMiddleName != null)
                {
                    if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                        objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntLastName == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                    objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                    objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else if (objFilingTransactionsModel.LoanOtherId == "10" || objFilingTransactionsModel.LoanOtherId == "11" || objFilingTransactionsModel.LoanOtherId == "12" || objFilingTransactionsModel.LoanOtherId == "13")
            {
                if (objFilingTransactionsModel.FlngEntName == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Lender Name is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntName))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.FlngEntName.Count() > 30)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                    objImportErrorMessageModel.ErrorMessages = "Lender Name should be 30 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
            {
                if (objFilingTransactionsModel.FlngEntCountry != "United States")
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                        objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "Letters and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                        objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (objFilingTransactionsModel.FlngEntCity == "United States")
                    {
                        if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntState.Length != 2)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowe";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (objFilingTransactionsModel.FlngEntCountry == "United States")
                    {
                        if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    else // Other Country
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                        objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else // Other Country
            {
                if (objFilingTransactionsModel.FlngEntCountry != null)
                {
                    if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntStrName != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                        objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }


                if (objFilingTransactionsModel.FlngEntCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                        objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                        objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.FlngEntZip != null)
                {
                    if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                        objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId == "1")
            {
                if (objFilingTransactionsModel.PayNumber == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    objImportErrorMessageModel.ErrorMessages = "Check # is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    objImportErrorMessageModel.ErrorMessages = "Check should be 30 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            //else if (objFilingTransactionsModel.PaymentTypeId == "8")
            //{
            //    if (objFilingTransactionsModel.PayNumber == null)
            //    {
            //        objImportErrorMessageModel = new ImportErrorMessageModel();
            //        objImportErrorMessageModel.RowNumber = rowNumber;
            //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
            //        objImportErrorMessageModel.ErrorMessages = "Money Order # is required";
            //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            //    }
            //    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
            //    {
            //        objImportErrorMessageModel = new ImportErrorMessageModel();
            //        objImportErrorMessageModel.RowNumber = rowNumber;
            //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
            //        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
            //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            //    }
            //    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
            //    {
            //        objImportErrorMessageModel = new ImportErrorMessageModel();
            //        objImportErrorMessageModel.RowNumber = rowNumber;
            //        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
            //        objImportErrorMessageModel.ErrorMessages = "Money Order should be 30 characters";
            //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            //    }
            //}
            else if (objFilingTransactionsModel.PaymentTypeId == "7")
            {
                if (objFilingTransactionsModel.TransExplanation == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.PayNumber != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else
            {
                if (objFilingTransactionsModel.PayNumber != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                    objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.PaymentTypeId != null)
            {
                //Boolean resultsData = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                Boolean resultsData = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                if (!resultsData)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Method";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else
                {
                    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                    if (paymentTypeVal == "8")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Itemized Monetary Contributions Received From Ind. & Part.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.FilingSchedId != "4"
                            && objFilingTransactionsModel.FilingSchedId != "11"
                            && objFilingTransactionsModel.FilingSchedId != "14"
                            && objFilingTransactionsModel.FilingSchedId != "15"
                            && objFilingTransactionsModel.FilingSchedId != "18")

                {
                    if (objFilingTransactionsModel.PurposeCodeId != "11"
                            && objFilingTransactionsModel.PurposeCodeId != "29")
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        objImportErrorMessageModel.ErrorMessages = "Method is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }

            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Amount is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (objFilingTransactionsModel.RItemized == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            if (objFilingTransactionsModel.RItemized != "Y")
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.TransNumber == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion FormValidationScheduleI
        }
        #endregion ValidateScheduleData_24Hour_I

        #region ValidatePMFWeeklyCliamSubmissionSchedAData_A
        /// <summary>
        /// ValidatePMFWeeklyCliamSubmissionSchedAData
        /// </summary>
        /// <param name="objFilingTransactionsModel"></param>
        /// <returns></returns>
        public void ValidatePMFWeeklyCliamSubmissionSchedAData(FilingTransactionsModel objFilingTransactionsModel, String rowNumber, string txtFilerId)
        {
            ImportErrorMessageModel objImportErrorMessageModel;
            // GET THE CUT OFF DATE.
            String strCutOffDate = Session["CutOffDateFilings"].ToString();

            var regexItem = new Regex("^[a-zA-Z0-9 #'.,&()%-]*$");
            var regexItemCheckNumber = new Regex("^[a-zA-Z0-9]*$");
            var regexItemCity = new Regex("^[a-zA-Z #'.,%-]*$");
            Regex re = new Regex(@"^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$");

            #region Filer ID Validation
            //Filer ID Validation
            if (objFilingTransactionsModel.FilerId == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                objImportErrorMessageModel.ErrorMessages = "Filer Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.FilerId != txtFilerId)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILER_ID - Column A";
                objImportErrorMessageModel.ErrorMessages = "The Filer ID does not match with the value selected in Filter.";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion

            #region Filing Period ID Validation
            if (objFilingTransactionsModel.FilingPeriodId != null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_PERIOD_ID - Column B";
                objImportErrorMessageModel.ErrorMessages = "Filing Period Id should be NULL";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }            
            #endregion

            #region Filing Category ID
            if (String.IsNullOrEmpty(objFilingTransactionsModel.FilingCategoryId))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_CAT_ID - Column C";
                objImportErrorMessageModel.ErrorMessages = "Filing Category Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "FILING_CATEGORY" && x.Id == objFilingTransactionsModel.FilingCategoryId.ToString());
                if (!results)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FILING_CAT_ID - Column C";
                    objImportErrorMessageModel.ErrorMessages = "Filing Category Id is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region Elect ID
            if (objFilingTransactionsModel.ElectId == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ELECT_ID - Column D";
                objImportErrorMessageModel.ErrorMessages = "Elect Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else
            {
                Boolean results = lstVendorImportValidation.Any(x => x.TableName == "ELECTION" && x.Id == objFilingTransactionsModel.ElectId.ToString());
                if (!results)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "ELECT_ID - Column D";
                    objImportErrorMessageModel.ErrorMessages = "Elect Id is not exists";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            #endregion

            #region RESIG_TERM_TYPE_ID validation
            if (objFilingTransactionsModel.ResigTermTypeId != null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "RESIG_TERM_TYPE_ID - Column E";
                objImportErrorMessageModel.ErrorMessages = "Resignation Termination should be NULL";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion

            #region R_FILING_DATE validation
            if (objFilingTransactionsModel.RFilingDate == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                objImportErrorMessageModel.ErrorMessages = "Filing Date is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else
            {
                Match match = re.Match(objFilingTransactionsModel.RFilingDate);
                //Verify whether entered date is Valid date.
                DateTime dt;
                if (!match.Success)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (!DateTime.TryParse(objFilingTransactionsModel.RFilingDate, out dt))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_FILING_DATE - Column F";
                    objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }//Remove pcfb monthly filings code
            }//Remove pcfb monthly filings code
            #endregion

            #region Filing Sched ID Validation
            //Filing Sched ID Validation
            if (objFilingTransactionsModel.FilingSchedId == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_SCHED_ID - Column G";
                objImportErrorMessageModel.ErrorMessages = "Filing Schedule Id is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!lstVendorImportValidation.Any(x => x.TableName == "FILING_SCHEDULES" && x.Id == objFilingTransactionsModel.FilingSchedId.ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "FILING_SCHED_ID - Column G";
                objImportErrorMessageModel.ErrorMessages = "Filing Schedule Id is incorrect.";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion

            //R_Claim Validation
            if (objFilingTransactionsModel.IsClaim == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_CLAIM - Column BH";
                objImportErrorMessageModel.ErrorMessages = "Is Claim is Required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.IsClaim != "Y")
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_CLAIM - Column BH";
                objImportErrorMessageModel.ErrorMessages = "Is Claim always be Y";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.IsClaim == "Y")
            {
                //R_IN_DISTRICT Validation
                if (objFilingTransactionsModel.InDistrict == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_IN_DISTRICT - Column BI";
                    objImportErrorMessageModel.ErrorMessages = "In District is Required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.InDistrict != "N" && objFilingTransactionsModel.InDistrict != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_IN_DISTRICT - Column BI";
                    objImportErrorMessageModel.ErrorMessages = "Invalid In District";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //R_MINOR Validation
                if (objFilingTransactionsModel.Minor == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_MINOR - Column BJ";
                    objImportErrorMessageModel.ErrorMessages = "Minor is Required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.Minor != "N" && objFilingTransactionsModel.Minor != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_MINOR - Column BJ";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Minor";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //R_VENDOR Validation
                if (objFilingTransactionsModel.Vendor == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_VENDOR - Column BK";
                    objImportErrorMessageModel.ErrorMessages = "Vendor is Required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.Vendor != "N" && objFilingTransactionsModel.Vendor != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_VENDOR - Column BK";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Vendor";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //R_LOBBYIST Validation
                if (objFilingTransactionsModel.Lobbyist == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_LOBBYIST - Column BL";
                    objImportErrorMessageModel.ErrorMessages = "Lobbyist is Required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.Lobbyist != "N" && objFilingTransactionsModel.Lobbyist != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_LOBBYIST - Column BL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Lobbyist";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            //R_IE_INCLUDED Validation
            if (objFilingTransactionsModel.RIEIncluded != null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "R_IE_INCLUDED - Column BF";
                objImportErrorMessageModel.ErrorMessages = "IE Included should be NULL";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.ContributorTypeId == "5")
            {
                //R_CONTRIBUTIONS Validation
                if (objFilingTransactionsModel.RContributions != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                    objImportErrorMessageModel.ErrorMessages = "Is Contributions should be null";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //Treasurer Address1
                if (objFilingTransactionsModel.TreasurerStreetAddress != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ADD1 - Column AT";
                    objImportErrorMessageModel.ErrorMessages = "Employer Street Address should be NULL";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //Treasurer City
                if (objFilingTransactionsModel.TreasurerCity != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_CITY - Column AU";
                    objImportErrorMessageModel.ErrorMessages = "Employer City should be NULL";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //Treasurer State
                if (objFilingTransactionsModel.TreasurerState != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_STATE - Column AV";
                    objImportErrorMessageModel.ErrorMessages = "Employer State should be null";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //Treasurer Zipcode
                if (objFilingTransactionsModel.TreasurerZip != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_ZIP - Column AW";
                    objImportErrorMessageModel.ErrorMessages = "Employer Zip Code should be null";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //Treasurer Occupation
                if (objFilingTransactionsModel.TreasurerOccupation != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_OCCUPATION - Column AR";
                    objImportErrorMessageModel.ErrorMessages = "Occupation should be null";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //Treasurer Employer
                if (objFilingTransactionsModel.TreasurerEmployer != null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TREAS_EMPLOYER - Column AS";
                    objImportErrorMessageModel.ErrorMessages = "Employer name should be null";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            else
            {
                //R_CONTRIBUTIONS Validation
                if (objFilingTransactionsModel.RContributions == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                    objImportErrorMessageModel.ErrorMessages = "Is Contributions is Required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.RContributions != "N" && objFilingTransactionsModel.RContributions != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_CONTRIBUTIONS - Column BM";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Contributions";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                //Treasurer Address1
                if (objFilingTransactionsModel.TreasurerStreetAddress != null)
                {
                    if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TreasurerStreetAddress))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_ADD1 - Column AT";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.TreasurerStreetAddress.Length < 4)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "TREAS_ADD1 - Column AT";
                            objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                    if (objFilingTransactionsModel.TreasurerStreetAddress.Count() > 60)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_ADD1 - Column AT";
                        objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                //Treasurer City
                if (objFilingTransactionsModel.TreasurerCity != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.TreasurerCity))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_CITY - Column AU";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    if (objFilingTransactionsModel.TreasurerCity.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_CITY - Column AU";
                        objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                //Treasurer State
                if (objFilingTransactionsModel.TreasurerState != null)
                {
                    if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.TreasurerState))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_STATE - Column AV";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);

                    }
                    if (objFilingTransactionsModel.TreasurerState.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_STATE - Column AV";
                        objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                //Treasurer Zipcode
                if (objFilingTransactionsModel.TreasurerZip != null)
                {
                    if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.TreasurerZip))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_ZIP - Column AW";
                        objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.TreasurerZip.Count() > 10)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_ZIP - Column AW";
                        objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                //Treasurer Occupation
                if (objFilingTransactionsModel.TreasurerOccupation != null)
                {
                    if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.TreasurerOccupation))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_OCCUPATION - Column AR";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.TreasurerOccupation.Count() > 80)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_OCCUPATION - Column AR";
                        objImportErrorMessageModel.ErrorMessages = "Treasurer Occupation should be 80 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                //Treasurer Employer
                if (objFilingTransactionsModel.TreasurerEmployer != null)
                {
                    if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.TreasurerEmployer))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_EMPLOYER - Column AS";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.TreasurerEmployer.Count() > 255)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TREAS_EMPLOYER - Column AS";
                        objImportErrorMessageModel.ErrorMessages = "Treasurer Employer should be 255 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
            }

                        

            // VALIDATE SCHEDULE A DATA 
            #region FormValidationScheduleA         
            // ADDED THIS TO VALIDATE THE COUNTY SHOULD BE 'United States'.
            // SO VALIDATING 'USA' WORD COMES IN FILE THEN IT HAS TO STOP. ADDED - 05.26.2021
            if (objFilingTransactionsModel.FlngEntCountry != null)
            {
                if (objFilingTransactionsModel.FlngEntCountry == "USA")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                    objImportErrorMessageModel.ErrorMessages = "Country should be United States";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }
            DateTime dDate;
            // Current Date.
            if (String.IsNullOrEmpty(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.DateUS(objFilingTransactionsModel.SchedDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!DateTime.TryParse(objFilingTransactionsModel.SchedDate, out dDate))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Enter valid date format (MM/DD/YYYY)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.ElectionTypeId == "6")
            {
                if (!objCommonErrorsServerSide.CuttOffDateValidation(objFilingTransactionsModel.SchedDate, Session["VDR_FilingDate"].ToString()))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                    objImportErrorMessageModel.ErrorMessages = "Date Received cannot be later than Cut Off";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            if (Session["FilingDate"] == null)
            {
                Session["FilingDate"] = "05/21/2024";
            }
            if (!objCommonErrorsServerSide.CuttOffDateValidation24HourNotice(objFilingTransactionsModel.SchedDate, strCutOffDate, Session["FilingDate"].ToString()))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "SCHED_DATE - Column K";
                objImportErrorMessageModel.ErrorMessages = "Date Received should be between From Date and To Date";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }


            if (objFilingTransactionsModel.RItemized == "Y") // Itemized Transaction
            {
                if (objFilingTransactionsModel.ContributorTypeId == null)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                    objImportErrorMessageModel.ErrorMessages = "Contributor Code is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.ContributorTypeId == "5")
                {
                    if (objFilingTransactionsModel.FlngEntName == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Partnership Name is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.EntityNameValidate(objFilingTransactionsModel.FlngEntName))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.FlngEntName.Count() > 40)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_NAME - Column W";
                        objImportErrorMessageModel.ErrorMessages = "Partnership Name should be 40 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.ContributorTypeId != null)
                    {
                        if (objFilingTransactionsModel.FlngEntFirstName == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                            objImportErrorMessageModel.ErrorMessages = "First Name is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntFirstName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntFirstName.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_FIRST_NAME - Column X";
                            objImportErrorMessageModel.ErrorMessages = "First Name should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }

                        if (objFilingTransactionsModel.FlngEntMiddleName != null)
                        {
                            if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntMiddleName))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntMiddleName.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_MIDDLE_NAME - Column Y";
                                objImportErrorMessageModel.ErrorMessages = "Middle Name should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntLastName == null)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                            objImportErrorMessageModel.ErrorMessages = "Last Name is required";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (!objCommonErrorsServerSide.NameValidate(objFilingTransactionsModel.FlngEntLastName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -.,& are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else if (objFilingTransactionsModel.FlngEntLastName.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_LAST_NAME - Column Z";
                            objImportErrorMessageModel.ErrorMessages = "Last Name should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }

                if (objFilingTransactionsModel.FlngEntCountry == "United States") // United States Country.
                {
                    if (objFilingTransactionsModel.FlngEntCountry != "United States")
                    {
                        if (objFilingTransactionsModel.FlngEntCountry != null)
                        {
                            if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            else if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                                objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.ValidateAlphaSpecial(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }

                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.AlphabetsValState(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                            if (objFilingTransactionsModel.FlngEntState.Length != 2)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Two letters are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (objFilingTransactionsModel.FlngEntCountry == "United States")
                        {
                            if (!objCommonErrorsServerSide.FomatZipcode(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        else // Other Country
                        {
                            if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                                objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }
                }
                else // Other Country
                {
                    if (objFilingTransactionsModel.FlngEntCountry != null)
                    {
                        if (!objCommonErrorsServerSide.AlphabetsVal(objFilingTransactionsModel.FlngEntCountry))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Letters are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntCountry == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                        objImportErrorMessageModel.ErrorMessages = "Country is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else
                    {
                        if (objFilingTransactionsModel.FlngEntCountry.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_COUNTRY - Column AE";
                            objImportErrorMessageModel.ErrorMessages = "Country should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntStrName != null)
                    {
                        if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.FlngEntStrName))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        else
                        {
                            if (objFilingTransactionsModel.FlngEntStrName.Length < 4)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                                objImportErrorMessageModel.ErrorMessages = "Street Address must contain at least four characters";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                        if (objFilingTransactionsModel.FlngEntStrName.Count() > 60)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ADD1 - Column AA";
                            objImportErrorMessageModel.ErrorMessages = "Street Address should be 60 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }


                    if (objFilingTransactionsModel.FlngEntCity != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialNumOtherCntry(objFilingTransactionsModel.FlngEntCity))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntCity.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_CITY - Column AB";
                            objImportErrorMessageModel.ErrorMessages = "City should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntState != null)
                    {
                        if (!objCommonErrorsServerSide.AlphaSpecialStateOtherCntry(objFilingTransactionsModel.FlngEntState))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntState.Count() > 30)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_STATE - Column AC";
                            objImportErrorMessageModel.ErrorMessages = "State should be 30 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                    if (objFilingTransactionsModel.FlngEntZip != null)
                    {
                        if (!objCommonErrorsServerSide.OtherCountryZipVal(objFilingTransactionsModel.FlngEntZip))
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Letters, numbers and - are allowed";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        if (objFilingTransactionsModel.FlngEntZip.Count() > 10)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "FLNG_ENT_ZIP - Column AD";
                            objImportErrorMessageModel.ErrorMessages = "Zip Code should be 10 characters";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                    }

                }

                if (objFilingTransactionsModel.PaymentTypeId == "1")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check # is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Check should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "8")
                {
                    if (objFilingTransactionsModel.PayNumber == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Money Order # is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.AlphaNumeric(objFilingTransactionsModel.PayNumber))
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Letters and numbers are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.PayNumber.Count() > 30)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Money Order should be 30 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else if (objFilingTransactionsModel.PaymentTypeId == "7")
                {
                    if (objFilingTransactionsModel.TransExplanation == null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation is required";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation)) // FIXED ON 03/02/2020
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                    else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                        objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }

                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }
                else
                {
                    if (objFilingTransactionsModel.PayNumber != null)
                    {
                        objImportErrorMessageModel = new ImportErrorMessageModel();
                        objImportErrorMessageModel.RowNumber = rowNumber;
                        objImportErrorMessageModel.ColumnName = "PAY_NUMBER - Column AG";
                        objImportErrorMessageModel.ErrorMessages = "Pay Number # Should be blank.";
                        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                    }
                }

                if (objFilingTransactionsModel.PaymentTypeId != null)
                {
                    if (objFilingTransactionsModel.PaymentTypeId != "0")
                    {
                        //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("PAYMENT_TYPE", objFilingTransactionsModel.PaymentTypeId.ToString());
                        Boolean results = lstVendorImportValidation.Any(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString());
                        if (!results)
                        {
                            objImportErrorMessageModel = new ImportErrorMessageModel();
                            objImportErrorMessageModel.RowNumber = rowNumber;
                            objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                            objImportErrorMessageModel.ErrorMessages = "Invalid Method";
                            lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        }
                        //else
                        //{
                        //    string paymentTypeVal = lstVendorImportValidation.Where(x => x.TableName == "PAYMENT_TYPE" && x.Id == objFilingTransactionsModel.PaymentTypeId.ToString()).Select(x => x.Id).FirstOrDefault().ToString();
                        //    if (paymentTypeVal == "8")
                        //    {
                        //        objImportErrorMessageModel = new ImportErrorMessageModel();
                        //        objImportErrorMessageModel.RowNumber = rowNumber;
                        //        objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                        //        objImportErrorMessageModel.ErrorMessages = "Invalid Method. Money Order is only allow for Itemized Monetary Contributions Received From Ind. & Part.";
                        //        lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                        //    }
                        //}
                    }
                }
                else
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "PAYMENT_TYPE_ID - Column AF";
                    objImportErrorMessageModel.ErrorMessages = "Method is required";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }

                if (objFilingTransactionsModel.ContributorTypeId != null)
                {
                    if (objFilingTransactionsModel.ContributorTypeId != null)
                    {
                        if (objFilingTransactionsModel.ContributorTypeId != "0")
                        {
                            //Boolean results = objItemizedReportsBroker.GetDropdownValueExistsResponse("CONTRIBUTOR_TYPE", objFilingTransactionsModel.ContributorTypeId.ToString());
                            Boolean results = lstVendorImportValidation.Any(x => x.TableName == "CONTRIBUTOR_TYPE" && x.Id == objFilingTransactionsModel.ContributorTypeId.ToString());
                            if (!results)
                            {
                                objImportErrorMessageModel = new ImportErrorMessageModel();
                                objImportErrorMessageModel.RowNumber = rowNumber;
                                objImportErrorMessageModel.ColumnName = "CNTRBR_TYPE_ID - Column M";
                                objImportErrorMessageModel.ErrorMessages = "Invalid Contributor Code";
                                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                            }
                        }
                    }
                }
            }
            else
            {
                if (objFilingTransactionsModel.RItemized != "N" && objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                if (objFilingTransactionsModel.RItemized != "Y")
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "R_ITEMIZED - Column AL";
                    objImportErrorMessageModel.ErrorMessages = "Invalid Is Transaction Itemized";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            // Unitemized Transaction // UN-ITEMIZED TRANSACTIONS.
            if (objFilingTransactionsModel.OrgAmt == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Amount is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountValidate(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.NumbersOnly(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.Amount12DigitVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (!objCommonErrorsServerSide.AmountZeroVal(objFilingTransactionsModel.OrgAmt))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "ORG_AMT - Column AI";
                objImportErrorMessageModel.ErrorMessages = "Enter valid Amount (999999999.99)";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }

            if (objFilingTransactionsModel.TransExplanation != null)
            {
                if (!objCommonErrorsServerSide.ValidateAlphaNumericAddress(objFilingTransactionsModel.TransExplanation))
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Letters, numbers and characters '# -., are allowed";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
                else if (objFilingTransactionsModel.TransExplanation.Count() > 250)
                {
                    objImportErrorMessageModel = new ImportErrorMessageModel();
                    objImportErrorMessageModel.RowNumber = rowNumber;
                    objImportErrorMessageModel.ColumnName = "TRANS_EXPLNTN - Column AJ";
                    objImportErrorMessageModel.ErrorMessages = "Explanation should be 250 characters";
                    lstImportErrorMessageModel.Add(objImportErrorMessageModel);
                }
            }

            #region Loan Liability Number Validation
            //Loan Liability Number Validation
            if (objFilingTransactionsModel.Loan_Lib_Number != null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "LOAN_LIB_NUMBER - Column H";
                objImportErrorMessageModel.ErrorMessages = "Loan Liability Number should be NULL";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }            
            #endregion

            #region TRANS_NUMBER Validation
            //Filing TRANS_NUMBER Validation
            if (objFilingTransactionsModel.TransNumber == null)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number is required";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objFilingTransactionsModel.TransNumber.Count() > 200)
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number should be 200 characters or less";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            else if (objItemizedReportsBroker.LoanLiabilityExistsResponse(txtFilerId, objFilingTransactionsModel.TransNumber, ""))
            {
                objImportErrorMessageModel = new ImportErrorMessageModel();
                objImportErrorMessageModel.RowNumber = rowNumber;
                objImportErrorMessageModel.ColumnName = "TRANS_NUMBER - Column I";
                objImportErrorMessageModel.ErrorMessages = "Transaction Number already exists for this filer.";
                lstImportErrorMessageModel.Add(objImportErrorMessageModel);
            }
            #endregion
            
            #endregion FormValidationScheduleA
        }
        #endregion ValidatePMFWeeklyCliamSubmissionSchedAData_A

        #region GetDefaultLookUpsValues
        /// <summary>
        /// GetDefaultLookUpsValues
        /// </summary>
        public void GetDefaultLookUpsValues()
        {
            IList<FilerCommitteeModel> lstFilerCommitteeModel = new List<FilerCommitteeModel>();
            //lstFilerCommitteeModel = objItemizedReportsBroker.GetFilerCommitteeDataResponse(Session["PersonId"].ToString());
            lstFilerCommitteeModel = objItemizedReportsBroker.GetFilerCommitteeDataResponse(Session["FilerID"].ToString());
            // Filer ID
            ViewData["txtFilerID"] = new SelectList(lstFilerCommitteeModel, "FilerId", "FilerId");

            ViewBag.txtFilerType = Session["Office_Type_Desc"].ToString();

            if (Session["Cand_Comm_Name"] != null)
            {
                ViewBag.txtCommitteeNameVI = Session["Cand_Comm_Name"].ToString();
            }
            else
            {
                Response.Redirect("~/RoleMap/RoleMap");
            }

            String strFilerId = lstFilerCommitteeModel.Select(x => x.FilerId).First().ToString();
            lstFilerCommitteeModel = lstFilerCommitteeModel.Where(x => x.FilerId == strFilerId).ToList();
            String strCommId = lstFilerCommitteeModel.Select(x => x.CommitteeId).FirstOrDefault().ToString();
            // Committee Name
            ViewData["txtCommitteeName"] = new SelectList(lstFilerCommitteeModel, "CommitteeName", "CommitteeName");

            IList<ElectionYearModel> lstElectionYearModel = new List<ElectionYearModel>();
            lstElectionYearModel = objItemizedReportsBroker.GetElectionYearDataResponse(Session["FilerID"].ToString());
            // Report Year
            ViewData["lstElectionCycle"] = new SelectList(lstElectionYearModel, "ElectionYearId", "ElectionYearValue");

            // GET VENDOR NAMES.
            IList<VendorNames> lstVendorNames = new List<VendorNames>();
            lstVendorNames = objItemizedReportsBroker.GetVendorNamesDataResponse();
            ViewData["lstVendorName"] = new SelectList(lstVendorNames, "VendorId", "VendorName");

        }
        #endregion GetDefaultLookUpsValues

        /// <summary>
        /// BindErrorGrid
        /// </summary>
        /// <returns></returns>
        public JsonResult BindErrorGrid()
        {
            try
            {
                IList<ImportErrorMessageModel> lstImportErrorMessageModel = new List<ImportErrorMessageModel>();
                lstImportErrorMessageModel = (IList<ImportErrorMessageModel>)Session["ErrorMessageGridData_VI"];
                return Json(new
                {
                    aaData = lstImportErrorMessageModel.Select(x => new[] {
                    "",
                    x.RowNumber,
                    x.ColumnName,
                    x.ErrorMessages
                })
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                if (Session["UserName"] != null)
                {
                    objERClass.LogExceptionInDatabase(ConfigurationManager.AppSettings["ApplicationKey"].ToString(), ex.Message, "ContributionsCandIndFamilyController", System.Reflection.MethodBase.GetCurrentMethod().Name, "", "", ex.Message, Session["UserName"].ToString());
                }
                throw;
            }

        }

        #region Export To CSV
        /// <summary>
        /// Export To CSV
        /// </summary>
        /// <param name="data"></param>
        /// <param name="fileName"></param>
        protected void btnExportCSV_Click(IEnumerable data, string fileName)
        {
            GridView GridView1 = new GridView();
            GridView1.DataSource = data;
            System.Web.HttpContext.Current.Response.Clear();
            System.Web.HttpContext.Current.Response.Buffer = true;
            System.Web.HttpContext.Current.Response.AddHeader("content-disposition", "attachment;filename=" + fileName + ".csv");
            System.Web.HttpContext.Current.Response.Charset = "";
            System.Web.HttpContext.Current.Response.ContentType = "application/csv";
            GridView1.AllowPaging = false;
            GridView1.DataBind();
            StringBuilder sb = new StringBuilder();
            for (int k = 0; k < GridView1.HeaderRow.Cells.Count; k++)
            {
                //add separator      
                if (GridView1.HeaderRow.Cells[k].Text.ToString() == "RowNumber")
                {
                    GridView1.HeaderRow.Cells[k].Text = "Row Number";
                }

                if (GridView1.HeaderRow.Cells[k].Text.ToString() == "ColumnName")
                {
                    GridView1.HeaderRow.Cells[k].Text = "Column Name";
                }

                if (GridView1.HeaderRow.Cells[k].Text.ToString() == "ErrorMessages")
                {
                    GridView1.HeaderRow.Cells[k].Text = "Error Messages";
                }

                sb.Append(GridView1.HeaderRow.Cells[k].Text + ',');
            }
            var index = sb.ToString().LastIndexOf(',');
            if (index >= 0)
                sb.Remove(index, 1);

            //append new line 
            sb.Append("\r\n");
            for (int i = 0; i < GridView1.Rows.Count; i++)
            {
                for (int k = 0; k < GridView1.HeaderRow.Cells.Count; k++)
                {
                    //add separator 
                    if (GridView1.Rows[i].Cells[k].Text.ToString() == "&nbsp;")
                    {
                        GridView1.Rows[i].Cells[k].Text = "";
                    }

                    // Start - Special Characters
                    var result = GridView1.Rows[i].Cells[k].Text.ToString();

                    if (result.Contains("&#39;"))
                        result = result.Replace("&#39;", "'");

                    if (result.Contains("&amp;"))
                        result = result.Replace("&amp;", "&");

                    if (result.Contains("â€˜"))
                        result = result.Replace("â€˜", "'");

                    if (result.Contains("‘"))
                        result = result.Replace("‘", "'");

                    sb.Append("\"" + result + "\"" + ',');
                    // End
                }
                //append new line 
                sb.Append("\r\n");
            }
            System.Web.HttpContext.Current.Response.Output.Write(sb.ToString());
            System.Web.HttpContext.Current.Response.Flush();
            System.Web.HttpContext.Current.Response.End();
        }
        #endregion

        #region Grid Help
        /// <summary>
        /// ActiveDeactiveFilerGridHelp
        /// </summary>
        /// <returns></returns>
        //public ActionResult ActiveDeactiveFilerGridHelp()
        //{
        //    return View("ActiveDeactiveFilerGridHelp");
        //}
        #endregion Grid Help

        #region Filer Help
        /// <summary>
        /// ImportDisclosureReportSearchHelp
        /// </summary>
        /// <returns></returns>
        public ActionResult ImportDisclosureReportSearchHelp()
        {
            return View("ImportDisclosureReportSearchHelp");
        }
        #endregion Filer Help    
    }
}
