// ViewAllDisclosures Region by Creighton Newsom
// ViewSupportingDocuments Region by Creighton Newsom
// Loan and Liability Reconciliation Region by Creighton Newsom 
using CAPASFIDAS_EFS_DAL;
using Entities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.SqlClient;
using System.Linq;
using CAPASFIDAS_EFS_DAL.ReportExecutionService;
using System.Configuration;
using System.Net;
using System.Xml.Serialization;
using System.IO;
using System.Xml.Linq;
using System.Globalization;
//using EntityFramework.BulkInsert.Extensions;

namespace Repository
{
    public class EFSRepository
    {
        //EFSEntities entities = new EFSEntities();
        CAPASFIDAS_RLSEntities capasfidastempEntities = new CAPASFIDAS_RLSEntities();
        CAPASFIDASTEMPEntities1 authenticateEntites = new CAPASFIDASTEMPEntities1();

        public class CommonException : Exception
        {
            public CommonException(string message)
               : base(message)
            {
            }
        }

        public EFSRepository()
        {
            EFSEntities db = new EFSEntities();
            IObjectContextAdapter dbcontextadapter = (IObjectContextAdapter)db;
            dbcontextadapter.ObjectContext.CommandTimeout = 200;

        }



        /// <summary>
        /// GetContactData
        /// </summary>
        /// <returns></returns>
        public IList<ShowAddressEntity> GetAddressData(String strPersonId)
        {
            IList<ShowAddressEntity> lstShowAddressEntity = new List<ShowAddressEntity>();
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    ShowAddressEntity objShowAddressEntity;

                    var results = entities.SP_S_GetAddressData(string.IsNullOrEmpty(strPersonId) ? (long?)null : Convert.ToInt64(strPersonId));

                    foreach (var item in results)
                    {
                        objShowAddressEntity = new ShowAddressEntity();
                        objShowAddressEntity.AddressId = Convert.ToString(item.ADDR_ID);
                        objShowAddressEntity.BestContactId = Convert.ToString(item.BEST_CONTACT_ID);
                        objShowAddressEntity.BestContractDesc = item.BEST_CONTACT_DESC;
                        objShowAddressEntity.AddressTypeId = Convert.ToString(item.ADDR_TYPE_ID);
                        objShowAddressEntity.AddressTypeDesc = item.ADDR_TYPE_DESC;
                        objShowAddressEntity.AddressStreetNumber = item.ADDR_STR_NUM;
                        objShowAddressEntity.AddressStreetName = item.ADDR_STR_NAME;
                        objShowAddressEntity.AddressAddress1 = item.ADDR_ADDR1;
                        objShowAddressEntity.AddressAddress2 = item.ADDR_ADDR2;
                        objShowAddressEntity.AddressCity = item.ADDR_CITY;
                        objShowAddressEntity.AddressState = item.ADDR_STATE;
                        objShowAddressEntity.AddressZip = Convert.ToString(item.ADDR_ZIP);
                        objShowAddressEntity.AddressZip4 = Convert.ToString(item.ADDR_ZIP4);
                        lstShowAddressEntity.Add(objShowAddressEntity);
                    }
                    return lstShowAddressEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetContactData
        /// </summary>
        /// <returns></returns>
        public IList<ShowContactEntity> GetContactData(String strPersonId)
        {
            IList<ShowContactEntity> lstShowContactEntity = new List<ShowContactEntity>();
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    ShowContactEntity objShowContactEntity;
                    var results = entities.SP_S_GetContactData(string.IsNullOrEmpty(strPersonId) ? (long?)null : Convert.ToInt64(strPersonId));

                    foreach (var item in results)
                    {
                        objShowContactEntity = new ShowContactEntity();
                        objShowContactEntity.ContractId = Convert.ToString(item.CONTACT_ID);
                        objShowContactEntity.PersonId = Convert.ToString(item.PERSON_ID);
                        //objShowContactEntity.ContactTypeId = Convert.ToString(item.CONTACT_TYPE_ID);
                        //objShowContactEntity.ContactTypeDescription = item.CONTACT_TYPE_DESC;
                        objShowContactEntity.BestContactId = Convert.ToString(item.BEST_CONTACT_ID);
                        objShowContactEntity.BestContract_Desc = item.BEST_CONTACT_DESC;
                        objShowContactEntity.Phone = item.PHONE.ToString();
                        objShowContactEntity.EmailAddress = item.EMAIL.ToString();
                        objShowContactEntity.FAX = item.FAX.ToString();
                        objShowContactEntity.URL = item.URL.ToString();
                        //if (item.CONTACT_TYPE_DESC == "Phone")
                        //    objShowContactEntity.Phone = item.CONTACT_VALUE;
                        //if (item.CONTACT_TYPE_DESC == "Email")
                        //    objShowContactEntity.EmailAddress = item.CONTACT_VALUE;
                        //if (item.CONTACT_TYPE_DESC == "FAX")
                        //    objShowContactEntity.FAX = item.CONTACT_VALUE;
                        //if (item.CONTACT_TYPE_DESC == "URL")
                        //    objShowContactEntity.URL = item.CONTACT_VALUE;
                        lstShowContactEntity.Add(objShowContactEntity);
                    }
                    return lstShowContactEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetDepositoryBankInfoData
        /// </summary>
        /// <param name="strPersonId"></param>
        /// <returns></returns>
        public IList<DepositoryBankInfoEntity> GetDepositoryBankInfoData(String strPersonId)
        {
            IList<DepositoryBankInfoEntity> lstDepositoryBankInfoEntity = new List<DepositoryBankInfoEntity>();
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    DepositoryBankInfoEntity objDepositoryBankInfoEntity;

                    var results = entities.SP_S_GetDepositoryBankInfoData(string.IsNullOrEmpty(strPersonId) ? (long?)null : Convert.ToInt64(strPersonId));

                    foreach (var item in results)
                    {
                        objDepositoryBankInfoEntity = new DepositoryBankInfoEntity();
                        objDepositoryBankInfoEntity.BankId = Convert.ToString(item.BANK_ID);
                        objDepositoryBankInfoEntity.AddressId = Convert.ToString(item.ADDR_ID);
                        objDepositoryBankInfoEntity.CandidateId = Convert.ToString(item.CAND_ID);
                        objDepositoryBankInfoEntity.DepositoryBankName = item.BANK_NAME;
                        objDepositoryBankInfoEntity.BankAccountTypeId = Convert.ToString(item.ACCOUNT_TYPE_ID);
                        objDepositoryBankInfoEntity.StreetNumber = item.ADDR_STR_NUM;
                        objDepositoryBankInfoEntity.StreetName = item.ADDR_STR_NAME;
                        objDepositoryBankInfoEntity.City = item.ADDR_CITY;
                        objDepositoryBankInfoEntity.State = item.ADDR_STATE;
                        objDepositoryBankInfoEntity.Zip = Convert.ToString(item.ADDR_ZIP);
                        objDepositoryBankInfoEntity.Zip4 = Convert.ToString(item.ADDR_ZIP4);
                        lstDepositoryBankInfoEntity.Add(objDepositoryBankInfoEntity);
                    }
                    return lstDepositoryBankInfoEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetCandAuthCommitteesData
        /// </summary>
        /// <param name="strPersonId"></param>
        /// <returns></returns>
        public IList<CandAuthCommitteesEntity> GetCandAuthCommitteesData(String strPersonId)
        {
            IList<CandAuthCommitteesEntity> lstCandAuthCommitteesEntity = new List<CandAuthCommitteesEntity>();
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    CandAuthCommitteesEntity objCandAuthCommitteesEntity;

                    var results = entities.SP_S_GetCandAuthCommitteesData(string.IsNullOrEmpty(strPersonId) ? (long?)null : Convert.ToInt64(strPersonId));

                    foreach (var item in results)
                    {
                        objCandAuthCommitteesEntity = new CandAuthCommitteesEntity();
                        objCandAuthCommitteesEntity.FilerId = Convert.ToString(item.FILER_ID);
                        objCandAuthCommitteesEntity.CommitteeName = item.COMM_NAME;
                        objCandAuthCommitteesEntity.Status = item.R_STATUS;
                        objCandAuthCommitteesEntity.RegistrationDate = item.COMM_REG_DATE;
                        objCandAuthCommitteesEntity.TerminationDate = item.COMM_TERM_DATE;
                        lstCandAuthCommitteesEntity.Add(objCandAuthCommitteesEntity);
                    }
                    return lstCandAuthCommitteesEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetCandidateHeaderData
        /// </summary>
        /// <param name="strPersonId"></param>
        /// <returns></returns>
        public IList<CandidateHeaderDataEntity> GetCandidateHeaderData(String strPersonId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<CandidateHeaderDataEntity> lstCandidateHeaderDataEntity = new List<CandidateHeaderDataEntity>();
                    CandidateHeaderDataEntity objCandidateHeaderDataEntity;

                    var results = entities.SP_S_GetCandidatePofileDetailsData(string.IsNullOrEmpty(strPersonId) ? (long?)null : Convert.ToInt64(strPersonId));

                    foreach (var item in results)
                    {
                        objCandidateHeaderDataEntity = new CandidateHeaderDataEntity();
                        objCandidateHeaderDataEntity.FilerType = item.OFFICE_TYPE_DESC;
                        objCandidateHeaderDataEntity.Office = item.OFFICE_DESC;
                        objCandidateHeaderDataEntity.District = Convert.ToString(item.DIST_ID);
                        objCandidateHeaderDataEntity.Municipality = item.MUNICIPALITY_DESC;
                        objCandidateHeaderDataEntity.ElectionYear = Convert.ToString(item.ELECT_YEAR);
                        objCandidateHeaderDataEntity.CandidateId = Convert.ToString(item.CAND_ID);
                        objCandidateHeaderDataEntity.SSN = item.PERSON_SSN;
                        objCandidateHeaderDataEntity.PoliticalParty = item.PARTY_DESC;
                        objCandidateHeaderDataEntity.RegistrationDate = item.CAND_REG_DATE;
                        objCandidateHeaderDataEntity.Status = item.R_STATUS;
                        objCandidateHeaderDataEntity.TerminationDate = item.CAND_TERM_DATE;
                        objCandidateHeaderDataEntity.Prefix = item.PERSON_PREFIX;
                        objCandidateHeaderDataEntity.LastName = item.PERSON_LAST_NAME;
                        objCandidateHeaderDataEntity.FirstName = item.PERSON_FIRST_NAME;
                        objCandidateHeaderDataEntity.MiddleName = item.PERSON_MIDDLE_NAME;
                        objCandidateHeaderDataEntity.Suffix = item.PERSON_SUFFIX;
                        lstCandidateHeaderDataEntity.Add(objCandidateHeaderDataEntity);
                    }
                    return lstCandidateHeaderDataEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// AddAddressData
        /// </summary>
        /// <param name="objAddressDataEntity"></param>
        /// <returns></returns>
        public Boolean AddAddressData(AddressDataEntity objAddressDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_AddAddress(string.IsNullOrEmpty(objAddressDataEntity.AddressTypeId) ? (int?)null : Convert.ToInt32(objAddressDataEntity.AddressTypeId), string.IsNullOrEmpty(objAddressDataEntity.PersonId) ? (long?)null : Convert.ToInt64(objAddressDataEntity.PersonId),
                                string.IsNullOrEmpty(objAddressDataEntity.BestContactId) ? (int?)null : Convert.ToInt32(objAddressDataEntity.BestContactId), objAddressDataEntity.AddressAddress1,
                                objAddressDataEntity.AddressAddress2, objAddressDataEntity.AdresssCity, objAddressDataEntity.AddressState,
                                objAddressDataEntity.AddressZip, objAddressDataEntity.CreatedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// UpdateAddressData
        /// </summary>
        /// <param name="objAddressDataEntity"></param>
        /// <returns></returns>
        public Boolean UpdateAddressData(AddressDataEntity objAddressDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_UpdateAddress(string.IsNullOrEmpty(objAddressDataEntity.AddressId) ? (long?)null : Convert.ToInt64(objAddressDataEntity.AddressId), string.IsNullOrEmpty(objAddressDataEntity.AddressTypeId) ? (int?)null : Convert.ToInt32(objAddressDataEntity.AddressTypeId),
                    string.IsNullOrEmpty(objAddressDataEntity.BestContactId) ? (int?)null : Convert.ToInt32(objAddressDataEntity.BestContactId), objAddressDataEntity.AddressStreetName, objAddressDataEntity.AdresssCity, objAddressDataEntity.AddressState,
                    objAddressDataEntity.AddressZip, objAddressDataEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// DeleteAddressData
        /// </summary>
        /// <param name="objAddressDataEntity"></param>
        /// <returns></returns>
        public Boolean DeleteAddressData(AddressDataEntity objAddressDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_DeleteAddress(string.IsNullOrEmpty(objAddressDataEntity.AddressId) ? (long?)null : Convert.ToInt64(objAddressDataEntity.AddressId), objAddressDataEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetAddressTypesData
        /// </summary>
        /// <returns></returns>
        public IList<AddressTypesEntity> GetAddressTypesData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<AddressTypesEntity> lstAddressTypesEntity = new List<AddressTypesEntity>();
                    AddressTypesEntity objAddressTypesEntity;

                    var results = entities.SP_S_AddressTypes();

                    foreach (var item in results)
                    {
                        objAddressTypesEntity = new AddressTypesEntity();
                        objAddressTypesEntity.AddressTypeId = Convert.ToString(item.ADDR_TYPE_ID);
                        objAddressTypesEntity.AddressTypeDescription = item.ADDR_TYPE_DESC;
                        lstAddressTypesEntity.Add(objAddressTypesEntity);
                    }
                    return lstAddressTypesEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetBestContactTypesData
        /// </summary>
        /// <returns></returns>
        public IList<BestContactTypesEntity> GetBestContactTypesData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<BestContactTypesEntity> lstBestContactTypesEntity = new List<BestContactTypesEntity>();
                    BestContactTypesEntity objBestContactTypesEntity;

                    var results = entities.SP_S_BestContactTypes();

                    foreach (var item in results)
                    {
                        objBestContactTypesEntity = new BestContactTypesEntity();
                        objBestContactTypesEntity.BestContactTypeId = Convert.ToString(item.BEST_CONTACT_ID);
                        objBestContactTypesEntity.BestContactTypeDesc = item.BEST_CONTACT_DESC;
                        lstBestContactTypesEntity.Add(objBestContactTypesEntity);
                    }

                    return lstBestContactTypesEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetContactTypesData
        /// </summary>
        /// <returns></returns>
        public IList<ContactTypesEntity> GetContactTypesData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContactTypesEntity> lstContactTypesEntity = new List<ContactTypesEntity>();
                    ContactTypesEntity objContactTypesEntity;

                    var results = entities.SP_S_ContactTypes();

                    foreach (var item in results)
                    {
                        objContactTypesEntity = new ContactTypesEntity();
                        objContactTypesEntity.ContactTypeId = Convert.ToString(item.CONTACT_TYPE_ID);
                        objContactTypesEntity.ContactTypeDescription = item.CONTACT_TYPE_DESC;
                        lstContactTypesEntity.Add(objContactTypesEntity);
                    }

                    return lstContactTypesEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// AddContactData
        /// </summary>
        /// <param name="objShowContactEntity"></param>
        /// <returns></returns>
        public Boolean AddContactData(ShowContactEntity objShowContactEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = 0;

                    returnValue = entities.SP_I_AddContact(string.IsNullOrEmpty(objShowContactEntity.PersonId) ? (long?)null : Convert.ToInt64(objShowContactEntity.PersonId), string.IsNullOrEmpty(objShowContactEntity.BestContactId) ? (int?)null : Convert.ToInt32(objShowContactEntity.BestContactId),
                                                                    objShowContactEntity.Phone, objShowContactEntity.EmailAddress, objShowContactEntity.FAX,
                                                                    objShowContactEntity.URL, objShowContactEntity.CreatedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// UpdateContactData
        /// </summary>
        /// <param name="objShowContactEntity"></param>
        /// <returns></returns>
        public Boolean UpdateContactData(ShowContactEntity objShowContactEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_UpdateContact(string.IsNullOrEmpty(objShowContactEntity.ContractId) ? (int?)null : Convert.ToInt32(objShowContactEntity.ContractId),
                                string.IsNullOrEmpty(objShowContactEntity.BestContactId) ? (int?)null : Convert.ToInt32(objShowContactEntity.BestContactId), objShowContactEntity.Phone,
                                objShowContactEntity.EmailAddress, objShowContactEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// DeleteContactData
        /// </summary>
        /// <param name="objShowContactEntity"></param>
        /// <returns></returns>
        public Boolean DeleteContactData(ShowContactEntity objShowContactEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_DeleteContact(string.IsNullOrEmpty(objShowContactEntity.ContractId) ? (int?)null : Convert.ToInt32(objShowContactEntity.ContractId), objShowContactEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Treasurer Profile Information
        /// </summary>
        /// <param name="personID"></param>
        /// <returns></returns>
        public IList<TreasurerProfileEntity> GetTreasurerProfileInfo(string personID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasurerProfileEntity> lstTreasurerProfileEntity = new List<TreasurerProfileEntity>();
                    TreasurerProfileEntity objTreasurerProfileEntity;

                    var results = entities.SP_S_TreasurerProfile(string.IsNullOrEmpty(personID) ? (long?)null : Convert.ToInt64(personID));

                    foreach (var item in results)
                    {
                        objTreasurerProfileEntity = new TreasurerProfileEntity();
                        objTreasurerProfileEntity.TransID = Convert.ToString(item.TREAS_ID);
                        objTreasurerProfileEntity.PersonID = item.PERSON_ID.ToString();
                        objTreasurerProfileEntity.TransRegDate = item.TREAS_REG_DATE.ToString();
                        objTreasurerProfileEntity.Status = item.R_STATUS;
                        objTreasurerProfileEntity.TransTermDate = item.TREAS_TERM_DATE.ToString();
                        objTreasurerProfileEntity.PersonPrefix = item.PERSON_PREFIX;
                        objTreasurerProfileEntity.PersonFirstName = item.PERSON_FIRST_NAME;
                        objTreasurerProfileEntity.PersonMiddleName = item.PERSON_MIDDLE_NAME;
                        objTreasurerProfileEntity.PersonLastName = item.PERSON_LAST_NAME;
                        objTreasurerProfileEntity.PersonSuffix = item.PERSON_SUFFIX;
                        lstTreasurerProfileEntity.Add(objTreasurerProfileEntity);
                    }

                    return lstTreasurerProfileEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Get Committee Information
        /// </summary>
        /// <param name="transID"></param>
        /// <returns></returns>
        public IList<TreasurerCommitteeInformationEntity> GetTreasurerCommitteeInformation(string transID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasurerCommitteeInformationEntity> lstTreasurerCommitteeInformationEntity = new List<TreasurerCommitteeInformationEntity>();
                    TreasurerCommitteeInformationEntity objTreasurerCommitteeInformationEntity;

                    var results = entities.SP_S_Treas_CommitteeInformation(string.IsNullOrEmpty(transID) ? (long?)null : Convert.ToInt64(transID));

                    foreach (var item in results)
                    {
                        objTreasurerCommitteeInformationEntity = new TreasurerCommitteeInformationEntity();
                        objTreasurerCommitteeInformationEntity.CommID = Convert.ToString(item.COMM_ID);
                        objTreasurerCommitteeInformationEntity.FilerID = Convert.ToString(item.FILER_ID);
                        objTreasurerCommitteeInformationEntity.PersonID = item.PERSON_ID.ToString();
                        objTreasurerCommitteeInformationEntity.CommitteeName = item.COMM_NAME.ToString();
                        objTreasurerCommitteeInformationEntity.Status = item.R_STATUS;
                        objTreasurerCommitteeInformationEntity.CommitteeRegDate = item.COMM_REG_DATE.ToString();
                        objTreasurerCommitteeInformationEntity.CommitteeTermDate = item.COMM_TERM_DATE.ToString();
                        objTreasurerCommitteeInformationEntity.CommitteeTypeDesc = item.COMM_TYPE_DESC.ToString();
                        lstTreasurerCommitteeInformationEntity.Add(objTreasurerCommitteeInformationEntity);
                    }

                    return lstTreasurerCommitteeInformationEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Get Transurer Assistant Information
        /// </summary>
        /// <param name="commID"></param>
        /// <returns></returns>
        public IList<TreasAssistantInformationEntity> GetTreasurerAssistantInformation(string commID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasAssistantInformationEntity> lstTreasAssistantInformationEntity = new List<TreasAssistantInformationEntity>();
                    TreasAssistantInformationEntity objTreasAssistantInformationEntity;

                    var results = entities.SP_S_Treas_AssistantTrensInformation(string.IsNullOrEmpty(commID) ? (long?)null : Convert.ToInt64(commID));

                    foreach (var item in results)
                    {
                        objTreasAssistantInformationEntity = new TreasAssistantInformationEntity();
                        objTreasAssistantInformationEntity.PersonPrefix = item.PERSON_PREFIX;
                        objTreasAssistantInformationEntity.PersonFirstName = item.PERSON_FIRST_NAME;
                        objTreasAssistantInformationEntity.PersonMiddleName = item.PERSON_MIDDLE_NAME;
                        objTreasAssistantInformationEntity.PersonLastName = item.PERSON_LAST_NAME;
                        objTreasAssistantInformationEntity.PersonSuffix = item.PERSON_SUFFIX;
                        objTreasAssistantInformationEntity.PersonID = item.PERSON_ID.ToString();
                        lstTreasAssistantInformationEntity.Add(objTreasAssistantInformationEntity);
                    }

                    return lstTreasAssistantInformationEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Treasurer History Information
        /// </summary>
        /// <param name="commID"></param>
        /// <param name="transID"></param>
        /// <returns></returns>
        public IList<TreasurerHistoryEntity> GetTreasurerHistoryInformation(string commID, string transID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasurerHistoryEntity> lstTreasurerHistoryEntity = new List<TreasurerHistoryEntity>();
                    TreasurerHistoryEntity objTreasurerHistoryEntity;

                    var results = entities.SP_S_TreasurerHistory(string.IsNullOrEmpty(commID) ? (long?)null : Convert.ToInt64(commID), string.IsNullOrEmpty(transID) ? (long?)null : Convert.ToInt64(transID));

                    foreach (var item in results)
                    {
                        objTreasurerHistoryEntity = new TreasurerHistoryEntity();
                        objTreasurerHistoryEntity.PersonPrefix = item.PERSON_PREFIX;
                        objTreasurerHistoryEntity.PersonFirstName = item.PERSON_FIRST_NAME;
                        objTreasurerHistoryEntity.PersonMiddleName = item.PERSON_MIDDLE_NAME;
                        objTreasurerHistoryEntity.PersonLastName = item.PERSON_LAST_NAME;
                        objTreasurerHistoryEntity.PersonSuffix = item.PERSON_SUFFIX;
                        objTreasurerHistoryEntity.Status = item.R_STATUS;
                        objTreasurerHistoryEntity.RegDate = item.REG_DATE.ToString();
                        objTreasurerHistoryEntity.TermDate = item.TERM_DATE.ToString();
                        objTreasurerHistoryEntity.PersonID = item.PERSON_ID.ToString();
                        lstTreasurerHistoryEntity.Add(objTreasurerHistoryEntity);
                    }

                    return lstTreasurerHistoryEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Get Treasurer Additional Committee Contact
        /// </summary>
        /// <param name="commID"></param>
        /// <returns></returns>
        public IList<TreasAdditionalCommitteeContactEntity> GetTreasurerAdditionalCommitteeContact(string commID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasAdditionalCommitteeContactEntity> lstTreasAdditionalCommitteeContactEntity = new List<TreasAdditionalCommitteeContactEntity>();
                    TreasAdditionalCommitteeContactEntity objTreasAdditionalCommitteeContactEntity;

                    var results = entities.SP_S_Trea_AdditionalCommitteeContact(string.IsNullOrEmpty(commID) ? (long?)null : Convert.ToInt64(commID));

                    foreach (var item in results)
                    {
                        objTreasAdditionalCommitteeContactEntity = new TreasAdditionalCommitteeContactEntity();
                        objTreasAdditionalCommitteeContactEntity.PersonPrefix = item.PERSON_PREFIX;
                        objTreasAdditionalCommitteeContactEntity.PersonFirstName = item.PERSON_FIRST_NAME;
                        objTreasAdditionalCommitteeContactEntity.PersonMiddleName = item.PERSON_MIDDLE_NAME;
                        objTreasAdditionalCommitteeContactEntity.PersonLastName = item.PERSON_LAST_NAME;
                        objTreasAdditionalCommitteeContactEntity.PersonSuffix = item.PERSON_SUFFIX;
                        lstTreasAdditionalCommitteeContactEntity.Add(objTreasAdditionalCommitteeContactEntity);
                    }

                    return lstTreasAdditionalCommitteeContactEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Get Treasurer Depository Bank Information
        /// </summary>
        /// <param name="commID"></param>
        /// <returns></returns>
        public IList<TreasDepositoryBankInformationEntity> GetTreasurerDepositoryBankInformation(string commID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasDepositoryBankInformationEntity> lstTreasDepositoryBankInformationEntity = new List<TreasDepositoryBankInformationEntity>();
                    TreasDepositoryBankInformationEntity objTreasDepositoryBankInformationEntity;

                    var results = entities.SP_S_Trea_DepositoryBankInformation(string.IsNullOrEmpty(commID) ? (long?)null : Convert.ToInt64(commID));

                    foreach (var item in results)
                    {
                        objTreasDepositoryBankInformationEntity = new TreasDepositoryBankInformationEntity();
                        objTreasDepositoryBankInformationEntity.BankID = item.BANK_ID.ToString();
                        objTreasDepositoryBankInformationEntity.BankName = item.BANK_NAME;
                        objTreasDepositoryBankInformationEntity.AddrNum = item.ADDR_STR_NUM;
                        objTreasDepositoryBankInformationEntity.AddrStrName = item.ADDR_STR_NAME;
                        objTreasDepositoryBankInformationEntity.AddrCity = item.ADDR_CITY;
                        objTreasDepositoryBankInformationEntity.AddrState = item.ADDR_STATE;
                        objTreasDepositoryBankInformationEntity.AddrZip = item.ADDR_ZIP.ToString();
                        objTreasDepositoryBankInformationEntity.AddrZip4 = item.ADDR_ZIP4.ToString();
                        objTreasDepositoryBankInformationEntity.ADDR_ID = item.ADDR_ID.ToString();
                        objTreasDepositoryBankInformationEntity.PERSON_ID = item.PERSON_ID.ToString();
                        objTreasDepositoryBankInformationEntity.COMM_ID = item.COMM_ID.ToString();
                        lstTreasDepositoryBankInformationEntity.Add(objTreasDepositoryBankInformationEntity);
                    }

                    return lstTreasDepositoryBankInformationEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        public IList<TreasCandidateSupportOpposeEntity> GetTreasurerCandidateSupposeOppose(string commID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasCandidateSupportOpposeEntity> lstTreasCandidateSupportOpposeEntity = new List<TreasCandidateSupportOpposeEntity>();
                    TreasCandidateSupportOpposeEntity objTreasCandidateSupportOpposeEntity;

                    var results = entities.SP_S_Trea_Candidate_Suppot_Oppose(string.IsNullOrEmpty(commID) ? (long?)null : Convert.ToInt64(commID));

                    foreach (var item in results)
                    {
                        objTreasCandidateSupportOpposeEntity = new TreasCandidateSupportOpposeEntity();
                        objTreasCandidateSupportOpposeEntity.ElectionYear = item.ELECT_YEAR.ToString();
                        objTreasCandidateSupportOpposeEntity.OfficeDesc = item.OFFICE_DESC;
                        objTreasCandidateSupportOpposeEntity.DistID = item.DIST_ID.ToString();
                        objTreasCandidateSupportOpposeEntity.PersonFirstName = item.PERSON_FIRST_NAME;
                        objTreasCandidateSupportOpposeEntity.PersonMiddleName = item.PERSON_MIDDLE_NAME;
                        objTreasCandidateSupportOpposeEntity.PersonLastName = item.PERSON_LAST_NAME;
                        objTreasCandidateSupportOpposeEntity.SupposeOppose = item.SUPPONE_OPPOSE.ToString();
                        if (item.AUTHORIZED_DATE != null)
                        {
                            objTreasCandidateSupportOpposeEntity.AuthorizedDate = item.AUTHORIZED_DATE.ToString();
                        }
                        else
                        {
                            objTreasCandidateSupportOpposeEntity.AuthorizedDate = "";
                        }
                        if (item.NON_EXPENDITURE_DATE != null)
                        {
                            objTreasCandidateSupportOpposeEntity.NonExpenditureDate = item.NON_EXPENDITURE_DATE.ToString();
                        }
                        else
                        {
                            objTreasCandidateSupportOpposeEntity.NonExpenditureDate = "";
                        }

                        lstTreasCandidateSupportOpposeEntity.Add(objTreasCandidateSupportOpposeEntity);
                    }

                    return lstTreasCandidateSupportOpposeEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Get Treasurer Authorized To Sign Check Conract
        /// </summary>
        /// <param name="commID"></param>
        /// <returns></returns>
        public IList<TreasAuthorizedToSignCheckEntity> GetTreasurerAuthorizedToSignCheckContact(string commID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasAuthorizedToSignCheckEntity> lstTreasAuthorizedToSignCheckEntity = new List<TreasAuthorizedToSignCheckEntity>();
                    TreasAuthorizedToSignCheckEntity objTreasAuthorizedToSignCheckEntity;

                    var results = entities.SP_S_Trea_AuthorizedToSignCheck(string.IsNullOrEmpty(commID) ? (long?)null : Convert.ToInt64(commID));

                    foreach (var item in results)
                    {
                        objTreasAuthorizedToSignCheckEntity = new TreasAuthorizedToSignCheckEntity();
                        objTreasAuthorizedToSignCheckEntity.PersonPrefix = item.PERSON_PREFIX;
                        objTreasAuthorizedToSignCheckEntity.PersonFirstName = item.PERSON_FIRST_NAME;
                        objTreasAuthorizedToSignCheckEntity.PersonMiddleName = item.PERSON_MIDDLE_NAME;
                        objTreasAuthorizedToSignCheckEntity.PersonLastName = item.PERSON_LAST_NAME;
                        objTreasAuthorizedToSignCheckEntity.PersonSuffix = item.PERSON_SUFFIX;
                        objTreasAuthorizedToSignCheckEntity.AuthSignedID = item.AUTH_SIGN_ID.ToString();
                        objTreasAuthorizedToSignCheckEntity.PersonID = item.PERSON_ID.ToString();
                        objTreasAuthorizedToSignCheckEntity.StartDate = item.START_DATE.ToString();
                        objTreasAuthorizedToSignCheckEntity.EndDate = item.END_DATE.ToString();
                        objTreasAuthorizedToSignCheckEntity.Status = item.STATUS.ToString();
                        lstTreasAuthorizedToSignCheckEntity.Add(objTreasAuthorizedToSignCheckEntity);
                    }

                    return lstTreasAuthorizedToSignCheckEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Get Treasurer Ballot Issues Contract
        /// </summary>
        /// <param name="commID"></param>
        /// <returns></returns>
        public IList<TreasBallotIssuesEntity> GetTreasurerBallotIssuesContact(string commID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TreasBallotIssuesEntity> lstTreasBallotIssuesEntity = new List<TreasBallotIssuesEntity>();
                    TreasBallotIssuesEntity objTreasBallotIssuesEntity;

                    var results = entities.SP_S_Trea_BallotIssues(string.IsNullOrEmpty(commID) ? (long?)null : Convert.ToInt64(commID));

                    foreach (var item in results)
                    {
                        objTreasBallotIssuesEntity = new TreasBallotIssuesEntity();
                        objTreasBallotIssuesEntity.BallotIssues = item.BALLOT_ISSUES.ToString();
                        objTreasBallotIssuesEntity.SupposeOppose = item.SUPPONE_OPPOSE.ToString();
                        lstTreasBallotIssuesEntity.Add(objTreasBallotIssuesEntity);
                    }

                    return lstTreasBallotIssuesEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// AddDepositoryBankInfo
        /// </summary>
        /// <param name="objDepositoryBankInfoEntity"></param>
        /// <returns></returns>
        public Boolean AddDepositoryBankInfo(DepositoryBankInfoEntity objDepositoryBankInfoEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_DepositoryBankInfo(string.IsNullOrEmpty(objDepositoryBankInfoEntity.PersonId) ? (long?)null : Convert.ToInt64(objDepositoryBankInfoEntity.PersonId),
                                                               string.IsNullOrEmpty(objDepositoryBankInfoEntity.CandidateId) ? (long?)null : Convert.ToInt64(objDepositoryBankInfoEntity.CandidateId),
                                                               objDepositoryBankInfoEntity.DepositoryBankName,
                                                               string.IsNullOrEmpty(objDepositoryBankInfoEntity.BankAccountTypeId) ? (int?)null : Convert.ToInt32(objDepositoryBankInfoEntity.BankAccountTypeId),
                                                               objDepositoryBankInfoEntity.StreetName,
                                                               objDepositoryBankInfoEntity.City,
                                                               objDepositoryBankInfoEntity.State,
                                                               objDepositoryBankInfoEntity.Zip,
                                                               objDepositoryBankInfoEntity.CreatedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// AddDepositoryBankInfo
        /// </summary>
        /// <param name="objDepositoryBankInfoEntity"></param>
        /// <returns></returns>
        public Boolean AddDepositoryBankInfoTreasurer(TreasDepositoryBankInformationEntity objDepositoryBankInfoEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_DepositoryBankInfoForTrea(string.IsNullOrEmpty(objDepositoryBankInfoEntity.PERSON_ID) ? (long?)null : Convert.ToInt64(objDepositoryBankInfoEntity.PERSON_ID),
                string.IsNullOrEmpty(objDepositoryBankInfoEntity.COMM_ID) ? (long?)null : Convert.ToInt64(objDepositoryBankInfoEntity.COMM_ID), objDepositoryBankInfoEntity.BankName,
                string.IsNullOrEmpty(objDepositoryBankInfoEntity.BankAccountTypeID) ? (int?)null : Convert.ToInt32(objDepositoryBankInfoEntity.BankAccountTypeID),
                objDepositoryBankInfoEntity.AddrStrName, objDepositoryBankInfoEntity.AddrCity,
                objDepositoryBankInfoEntity.AddrState, objDepositoryBankInfoEntity.AddrZip, objDepositoryBankInfoEntity.CreatedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }



        /// <summary>
        /// UpdateDepositoryBankInfo
        /// </summary>
        /// <param name="objDepositoryBankInfoEntity"></param>
        /// <returns></returns>
        public Boolean UpdateDepositoryBankInfo(DepositoryBankInfoEntity objDepositoryBankInfoEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_DepositoryBankInfo(string.IsNullOrEmpty(objDepositoryBankInfoEntity.AddressId) ? (long?)null : Convert.ToInt64(objDepositoryBankInfoEntity.AddressId), string.IsNullOrEmpty(objDepositoryBankInfoEntity.BankId) ? (int?)null : Convert.ToInt32(objDepositoryBankInfoEntity.BankId),
                objDepositoryBankInfoEntity.DepositoryBankName, string.IsNullOrEmpty(objDepositoryBankInfoEntity.BankAccountTypeId) ? (int?)null : Convert.ToInt32(objDepositoryBankInfoEntity.BankAccountTypeId),
                objDepositoryBankInfoEntity.StreetName, objDepositoryBankInfoEntity.City,
                objDepositoryBankInfoEntity.State, objDepositoryBankInfoEntity.Zip, objDepositoryBankInfoEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// DeleteDepositoryBankInfo
        /// </summary>
        /// <param name="objDepositoryBankInfoEntity"></param>
        /// <returns></returns>
        public Boolean DeleteDepositoryBankInfo(DepositoryBankInfoEntity objDepositoryBankInfoEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_DepositoryBankInfo(string.IsNullOrEmpty(objDepositoryBankInfoEntity.BankId) ? (int?)null : Convert.ToInt32(objDepositoryBankInfoEntity.BankId),
                objDepositoryBankInfoEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// GetBankAccountTypes
        /// </summary>
        /// <returns></returns>
        public IList<BankAccountTypesEntity> GetBankAccountTypes()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<BankAccountTypesEntity> lstBankAccountTypesEntity = new List<BankAccountTypesEntity>();
                    BankAccountTypesEntity objBankAccountTypesEntity;

                    var results = entities.SP_S_BankAccountType();

                    foreach (var item in results)
                    {
                        objBankAccountTypesEntity = new BankAccountTypesEntity();
                        objBankAccountTypesEntity.AccountTypeId = Convert.ToString(item.ACCOUNT_TYPE_ID);
                        objBankAccountTypesEntity.AccountTypeDesc = item.ACCOUNT_TYPE_DESC;
                        lstBankAccountTypesEntity.Add(objBankAccountTypesEntity);
                    }

                    return lstBankAccountTypesEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        public Boolean AddSubTreasurerData(SubTreasurerPersonEntity objSubTreasurerPersonEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_SubTresurer(string.IsNullOrEmpty(objSubTreasurerPersonEntity.StateDate) ? (DateTime?)null : Convert.ToDateTime(objSubTreasurerPersonEntity.StateDate),
                objSubTreasurerPersonEntity.RStatus, objSubTreasurerPersonEntity.FirstName, objSubTreasurerPersonEntity.MiddleName,
                objSubTreasurerPersonEntity.LastName, objSubTreasurerPersonEntity.Suffix, objSubTreasurerPersonEntity.Preffix,
                string.IsNullOrEmpty(objSubTreasurerPersonEntity.TreasurerId) ? (long?)null : Convert.ToInt64(objSubTreasurerPersonEntity.TreasurerId), objSubTreasurerPersonEntity.CreatedBy);

                    if (returnValue >= 2)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }

        }

        public Boolean UpdateSubTreasurerData(SubTreasurerPersonEntity objSubTreasurerPersonEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_SubTreasurer(string.IsNullOrEmpty(objSubTreasurerPersonEntity.PersonId) ? (long?)null : Convert.ToInt64(objSubTreasurerPersonEntity.PersonId),
                                objSubTreasurerPersonEntity.FirstName, objSubTreasurerPersonEntity.MiddleName,
                                objSubTreasurerPersonEntity.LastName, objSubTreasurerPersonEntity.Suffix,
                                objSubTreasurerPersonEntity.Preffix, string.IsNullOrEmpty(objSubTreasurerPersonEntity.SubTreasurerId) ? (long?)null : Convert.ToInt64(objSubTreasurerPersonEntity.SubTreasurerId),
                                objSubTreasurerPersonEntity.RStatus, string.IsNullOrEmpty(objSubTreasurerPersonEntity.StateDate) ? (DateTime?)null : Convert.ToDateTime(objSubTreasurerPersonEntity.StateDate),
                                objSubTreasurerPersonEntity.ModifiedBy);

                    if (returnValue >= 2)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetFilingTransactionsData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransactionsData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    //var results1 = entities.SP_S_ElectionYear();

                    var results = entities.SP_S_Filing_Transactions_Data(string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                        string.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId), string.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                        string.IsNullOrEmpty(objFilingTransDataEntity.DisclosurePeriod) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.DisclosurePeriod), string.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType), string.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                        string.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate), string.IsNullOrEmpty(objFilingTransDataEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.MunicipalityID));

                    //var results = entities.SP_S_FilingTransactionsData(objFilingTransDataEntity.FilerId,
                    //  objFilingTransDataEntity.ReportYearId, objFilingTransDataEntity.OfficeTypeId,
                    //  objFilingTransDataEntity.DisclosurePeriod);

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_ABBREV;
                        objFilingTransactionDataEntity.TransferTypeDesc = item.TRANSFER_TYPE_ABBREV;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_ABBREV;
                        objFilingTransactionDataEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                        objFilingTransactionDataEntity.ReceiptCodeId = item.RECEIPT_CODE_ID;
                        objFilingTransactionDataEntity.RLiability = item.R_LIABILITY;
                        objFilingTransactionDataEntity.RSubcontractor = item.R_SUBCONTRACTOR;
                        if (item.ORG_DATE != "")
                            objFilingTransactionDataEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.OriginalDate = "";
                        //objFilingTransactionDataEntity.LoanerCode = item.R_BANK_LOAN;
                        objFilingTransactionDataEntity.ElectionYear = item.ELECTION_YEAR;
                        objFilingTransactionDataEntity.Office = Convert.ToString(item.OFFICE_ID);
                        objFilingTransactionDataEntity.District = Convert.ToString(item.DISTRICT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyID = Convert.ToString(item.COUNTY_ID);
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        objFilingTransactionDataEntity.MunicipalityID = Convert.ToString(item.MUNICIPALITY_ID);
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOAN_OTHER_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOAN_OTHER_DESC);
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        objFilingTransactionDataEntity.FilingsId = Convert.ToString(item.FILINGS_ID);
                        objFilingTransactionDataEntity.Office_Desc = item.OFFICE_DESC;
                        if (item.R_CLAIM == "Y")
                        {
                            objFilingTransactionDataEntity.RClaim = "Yes";
                        }
                        else if (item.R_CLAIM == "N")
                        {
                            objFilingTransactionDataEntity.RClaim = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RClaim = "";
                        }

                        if (item.R_IN_DISTRICT == "Y")
                        {
                            objFilingTransactionDataEntity.InDistrict = "Yes";
                        }
                        else if (item.R_IN_DISTRICT == "N")
                        {
                            objFilingTransactionDataEntity.InDistrict = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.InDistrict = "";
                        }

                        if (item.R_MINOR == "Y")
                        {
                            objFilingTransactionDataEntity.RMinor = "Yes";
                        }
                        else if (item.R_MINOR == "N")
                        {
                            objFilingTransactionDataEntity.RMinor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RMinor = "";
                        }

                        if (item.R_VENDOR == "Y")
                        {
                            objFilingTransactionDataEntity.RVendor = "Yes";
                        }
                        else if (item.R_VENDOR == "N")
                        {
                            objFilingTransactionDataEntity.RVendor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RVendor = "";
                        }

                        if (item.R_LOBBYIST == "Y")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "Yes";
                        }
                        else if (item.R_LOBBYIST == "N")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RLobbyist = "";
                        }

                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objFilingTransactionDataEntity.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objFilingTransactionDataEntity.RContributions = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RContributions = "";
                        }

                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreaAddress = item.TREAS_ADDRESS;
                        objFilingTransactionDataEntity.TreaAddr1 = item.TREAS_ADDR1;
                        objFilingTransactionDataEntity.TreaCity = item.TREAS_CITY;
                        objFilingTransactionDataEntity.TreaState = item.TREAS_STATE;
                        objFilingTransactionDataEntity.TreaZipCode = item.TREAS_ZIP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else if (item.R_IE_SUPPORTED == "N")
                            objFilingTransactionDataEntity.IESupported = "No";
                        else
                            objFilingTransactionDataEntity.IESupported = "";

                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        public IList<ContributionTypeEntity> GetContributionTypeData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContributionTypeEntity> lstContributionTypeEntity = new List<ContributionTypeEntity>();
                    ContributionTypeEntity objContributionTypeEntity;

                    var results = entities.SP_S_ContributionType();

                    foreach (var item in results)
                    {
                        objContributionTypeEntity = new ContributionTypeEntity();
                        objContributionTypeEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                        objContributionTypeEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objContributionTypeEntity.ContributionTypeAbbrev = item.CNTRBN_TYPE_ABBREV;
                        lstContributionTypeEntity.Add(objContributionTypeEntity);
                    }

                    return lstContributionTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<ContributorNameEntity> GetContributionNameData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContributorNameEntity> lstContributorNameEntity = new List<ContributorNameEntity>();
                    ContributorNameEntity objContributorNameEntity;

                    var results = entities.SP_S_ContributorTypesInKind();

                    foreach (var item in results)
                    {
                        objContributorNameEntity = new ContributorNameEntity();
                        objContributorNameEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objContributorNameEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objContributorNameEntity.ContributorTypeAbbrev = item.CNTRBR_TYPE_ABBREV;
                        lstContributorNameEntity.Add(objContributorNameEntity);
                    }

                    return lstContributorNameEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<DisclosurePreiodEntity> GetDisclosurePeriodData(String strElectTypeId, String strfilerID, String strElectYearId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosurePreiodEntity> lstDisclosurePreiodEntity = new List<DisclosurePreiodEntity>();
                    DisclosurePreiodEntity objDisclosurePreiodEntity;

                    var results = entities.SP_S_DisclosurePeriod(string.IsNullOrEmpty(strElectTypeId) ? (int?)null : Convert.ToInt32(strElectTypeId), 
                        string.IsNullOrEmpty(strfilerID) ? (long?)null : Convert.ToInt64(strfilerID),
                        string.IsNullOrEmpty(strElectYearId) ? (int?)null : Convert.ToInt32(strElectYearId));

                    foreach (var item in results)
                    {
                        objDisclosurePreiodEntity = new DisclosurePreiodEntity();
                        objDisclosurePreiodEntity.FilingTypeId = Convert.ToString(item.FILING_TYPE_ID);
                        objDisclosurePreiodEntity.FilingDesc = item.FILING_DESC;
                        objDisclosurePreiodEntity.FilingAbbrev = item.FILING_ABBREV;
                        lstDisclosurePreiodEntity.Add(objDisclosurePreiodEntity);
                    }

                    return lstDisclosurePreiodEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<ElectionDateEntity> GetElectionDateData(String strElectYearId, String strElectTypeId, String strOfficeTypeId, String strCounty, String strMunicipality)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionDateEntity> lstElectionDateEntity = new List<ElectionDateEntity>();
                    ElectionDateEntity objElectionDateEntity;

                    var results = entities.SP_S_ElectionDateFileDisclosure(string.IsNullOrEmpty(strElectYearId) ? (int?)null : Convert.ToInt32(strElectYearId), string.IsNullOrEmpty(strElectTypeId) ? (int?)null : Convert.ToInt32(strElectTypeId), string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), string.IsNullOrEmpty(strCounty) ? (int?)null : Convert.ToInt32(strCounty), string.IsNullOrEmpty(strMunicipality) ? (int?)null : Convert.ToInt32(strMunicipality));

                    foreach (var item in results)
                    {
                        objElectionDateEntity = new ElectionDateEntity();
                        objElectionDateEntity.ElectId = Convert.ToString(item.POL_CAL_DATE_ID);
                        objElectionDateEntity.ElectDate = Convert.ToDateTime(item.ELECTION_DATE).ToShortDateString();
                        lstElectionDateEntity.Add(objElectionDateEntity);
                    }

                    return lstElectionDateEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        public IList<FilerCommitteeEntity> GetFilerCommitteeData(String strfilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilerCommitteeEntity> lstFilerCommitteeEntity = new List<FilerCommitteeEntity>();
                    FilerCommitteeEntity objFilerCommitteeEntity;

                    var results = entities.SP_S_GetFilerCommittee_FilerMapping(string.IsNullOrEmpty(strfilerID) ? (long?)null : Convert.ToInt64(strfilerID));

                    foreach (var item in results)
                    {
                        objFilerCommitteeEntity = new FilerCommitteeEntity();
                        objFilerCommitteeEntity.FilerId = Convert.ToString(item.FILER_ID);
                        objFilerCommitteeEntity.CommitteeId = Convert.ToString(item.COMM_ID);
                        objFilerCommitteeEntity.CommitteeName = item.COMM_NAME;
                        objFilerCommitteeEntity.OfficeId = item.OFFICE_ID;
                        objFilerCommitteeEntity.personID = Convert.ToString(item.PERSON_ID);
                        objFilerCommitteeEntity.TreasurerId = Convert.ToString(item.TREAS_ID);
                        objFilerCommitteeEntity.CommTypeId = Convert.ToString(item.COMM_TYPE_ID);
                        if (item.OFFICE_TYPE_ID == null)
                        {
                            objFilerCommitteeEntity.OfficTypeID = "";
                        }
                        else
                        {
                            objFilerCommitteeEntity.OfficTypeID = Convert.ToString(item.OFFICE_TYPE_ID);
                        }

                        if (item.OFFICE_TYPE_DESC == null)
                        {
                            objFilerCommitteeEntity.OfficeTypeDesc = "";
                        }
                        else
                        {
                            objFilerCommitteeEntity.OfficeTypeDesc = Convert.ToString(item.OFFICE_TYPE_DESC);
                        }

                        lstFilerCommitteeEntity.Add(objFilerCommitteeEntity);
                    }

                    return lstFilerCommitteeEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<PaymentMethodEntity> GetPaymentMethodData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PaymentMethodEntity> lstPaymentMethodEntity = new List<PaymentMethodEntity>();
                    PaymentMethodEntity objPaymentMethodEntity;

                    var results = entities.SP_S_PaymentMethod();

                    foreach (var item in results)
                    {
                        objPaymentMethodEntity = new PaymentMethodEntity();
                        objPaymentMethodEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        objPaymentMethodEntity.PaymentTypeDesc = Convert.ToString(item.PAYMENT_TYPE_DESC);
                        objPaymentMethodEntity.PaymentTypeAbbrev = item.PAYMENT_TYPE_ABBREV;
                        lstPaymentMethodEntity.Add(objPaymentMethodEntity);
                    }

                    return lstPaymentMethodEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<PurposeCodeEntity> GetPurposeCodeData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCode();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<ReceiptCodeEntity> GetReceiptCodeData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ReceiptCodeEntity> lstReceiptCodeEntity = new List<ReceiptCodeEntity>();
                    ReceiptCodeEntity objReceiptCodeEntity;

                    var results = entities.SP_S_ReceiptCode();

                    foreach (var item in results)
                    {
                        objReceiptCodeEntity = new ReceiptCodeEntity();
                        objReceiptCodeEntity.ReceiptCodeId = Convert.ToString(item.RECEIPT_CODE_ID);
                        objReceiptCodeEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                        objReceiptCodeEntity.ReceiptCodeAbbrev = item.RECEIPT_CODE_ABBREV;
                        lstReceiptCodeEntity.Add(objReceiptCodeEntity);
                    }

                    return lstReceiptCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<ReceiptTypeEntity> GetReceiptTypeData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ReceiptTypeEntity> lstReceiptTypeEntity = new List<ReceiptTypeEntity>();
                    ReceiptTypeEntity objReceiptTypeEntity;

                    var results = entities.SP_S_ReceiptType();

                    foreach (var item in results)
                    {
                        objReceiptTypeEntity = new ReceiptTypeEntity();
                        objReceiptTypeEntity.ReceiptTypeId = Convert.ToString(item.RECEIPT_TYPE_ID);
                        objReceiptTypeEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_DESC;
                        objReceiptTypeEntity.ReceiptTypeAbbrev = item.RECEIPT_TYPE_ABBREV;
                        lstReceiptTypeEntity.Add(objReceiptTypeEntity);
                    }

                    return lstReceiptTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetTransferTypeData
        /// </summary>
        /// <returns></returns>
        public IList<TransferTypeEntity> GetTransferTypeData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransferTypeEntity> lstTransferTypeEntity = new List<TransferTypeEntity>();
                    TransferTypeEntity objTransferTypeEntity;

                    var results = entities.SP_S_TransferType();

                    foreach (var item in results)
                    {
                        objTransferTypeEntity = new TransferTypeEntity();
                        objTransferTypeEntity.TransferTypeId = Convert.ToString(item.TRANSFER_TYPE_ID);
                        objTransferTypeEntity.TransferTypeDesc = item.TRANSFER_TYPE_DESC;
                        objTransferTypeEntity.TransferTypeAbbrev = item.TRANSFER_TYPE_ABBREV;
                        lstTransferTypeEntity.Add(objTransferTypeEntity);
                    }

                    return lstTransferTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetElectionYearData
        /// </summary>
        /// <returns></returns>
        public IList<ElectionYearEntity> GetElectionYearData(String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionYearEntity> lstElectionYearEntity = new List<ElectionYearEntity>();
                    ElectionYearEntity objElectionYearEntity;

                    //var results = entities.SP_S_ElectionYear();
                    //Created New SP for PCFB - Election Year will show 2022 or later and for all other Filer, it will be the old logic.
                    var results = entities.SP_S_ElectionYear_EFS(string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objElectionYearEntity = new ElectionYearEntity();
                        objElectionYearEntity.ElectionYearId = Convert.ToString(item.ELECTION_YEAR_ID);
                        objElectionYearEntity.ElectionYearValue = Convert.ToString(item.ELECT_YEAR);
                        lstElectionYearEntity.Add(objElectionYearEntity);
                    }

                    return lstElectionYearEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetElectionTypeData
        /// </summary>
        /// <param name="strElectionYearId"></param>
        /// <returns></returns>
        public IList<ElectionTypeEntity> GetElectionTypeData(String strElectionYearId,
            String strOfficeTypeId, String strCountyId, String strMunicipalityId, String strCommTypeId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionTypeEntity> lstElectionTypeEntity = new List<ElectionTypeEntity>();
                    ElectionTypeEntity objElectionTypeEntity;

                    var results = entities.SP_S_EFSElectionType(string.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId), string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId),
                        string.IsNullOrEmpty(strCountyId) ? (int?)null : Convert.ToInt32(strCountyId), string.IsNullOrEmpty(strMunicipalityId) ? (int?)null : Convert.ToInt32(strMunicipalityId),
                        string.IsNullOrEmpty(strCommTypeId) ? (int?)null : Convert.ToInt32(strCommTypeId));

                    foreach (var item in results)
                    {
                        objElectionTypeEntity = new ElectionTypeEntity();
                        objElectionTypeEntity.ElectionTypeId = Convert.ToString(item.ELECT_TYPE_ID);
                        objElectionTypeEntity.ElectionTypeDesc = item.ELECT_TYPE_DESC;
                        lstElectionTypeEntity.Add(objElectionTypeEntity);
                    }

                    return lstElectionTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetFilingCutOffDateData
        /// </summary>
        /// <param name="strElectYearId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <returns></returns>
        public IList<FilingCutOffDateEntity> GetFilingCutOffDateData(String strElectYearId, String strFilingTypeId, String strOfficeTypeId,
            String strFilingDateId, String strCuttOffDateId, String strElectionDateId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingCutOffDateEntity> lstFilingCutOffDateEntity = new List<FilingCutOffDateEntity>();
                    FilingCutOffDateEntity objFilingCutOffDateEntity;

                    var results = entities.SP_S_FilingAndCutOffDate(string.IsNullOrEmpty(strElectYearId) ? (int?)null : Convert.ToInt32(strElectYearId), string.IsNullOrEmpty(strFilingTypeId) ? (int?)null : Convert.ToInt32(strFilingTypeId), string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), string.IsNullOrEmpty(strFilingDateId) ? (int?)null : Convert.ToInt32(strFilingDateId), string.IsNullOrEmpty(strCuttOffDateId) ? (int?)null : Convert.ToInt32(strCuttOffDateId), strElectionDateId);

                    foreach (var item in results)
                    {
                        objFilingCutOffDateEntity = new FilingCutOffDateEntity();
                        objFilingCutOffDateEntity.PoliticalCalDateId = Convert.ToString(item.POL_CAL_DATE_ID);
                        objFilingCutOffDateEntity.PoliticalCalLabelId = Convert.ToString(item.POL_CAL_LBL_ID);
                        if (Convert.ToString(item.POL_CAL_LBL_ID) == strFilingDateId)
                            objFilingCutOffDateEntity.FilingDueDate = item.FILING_AND_CUTT_OFF_DATE;
                        if (Convert.ToString(item.POL_CAL_LBL_ID) == strCuttOffDateId)
                            objFilingCutOffDateEntity.CutOffDate = item.FILING_AND_CUTT_OFF_DATE;
                        lstFilingCutOffDateEntity.Add(objFilingCutOffDateEntity);
                    }

                    return lstFilingCutOffDateEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetContributorTypesData
        /// </summary>
        /// <returns></returns>
        public IList<ContributorTypesEntity> GetContributorTypesData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContributorTypesEntity> lstContributorTypesEntity = new List<ContributorTypesEntity>();
                    ContributorTypesEntity objContributorTypesEntity;

                    var results = entities.SP_S_ContributorTypes();

                    foreach (var item in results)
                    {
                        objContributorTypesEntity = new ContributorTypesEntity();
                        objContributorTypesEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objContributorTypesEntity.ContributoryTypeDesc = item.CNTRBR_TYPE_DESC;
                        lstContributorTypesEntity.Add(objContributorTypesEntity);
                    }

                    return lstContributorTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetTransactionTypesData
        /// </summary>
        /// <returns></returns>
        public IList<TransactionTypesEntity> GetTransactionTypesData(String strCandCommId = "")
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionTypesEntity> lstTransactionTypesEntity = new List<TransactionTypesEntity>();
                    TransactionTypesEntity objTransactionTypesEntity;

                    var results = entities.SP_S_TransactionTypes(string.IsNullOrEmpty(strCandCommId) ? (long?)null : Convert.ToInt64(strCandCommId));

                    foreach (var item in results)
                    {
                        objTransactionTypesEntity = new TransactionTypesEntity();
                        objTransactionTypesEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objTransactionTypesEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objTransactionTypesEntity.FilingSchedAbbrev = item.FILING_SCHED_ABBREV;
                        lstTransactionTypesEntity.Add(objTransactionTypesEntity);
                    }

                    return lstTransactionTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetDisclosureTypesData
        /// </summary>
        /// <returns></returns>
        public IList<DisclosureTypesEntity> GetDisclosureTypesData(String strCandCommId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosureTypesEntity> lstDisclosureTypesEntity = new List<DisclosureTypesEntity>();
                    DisclosureTypesEntity objDisclosureTypesEntity;
                    
                    var results = entities.SP_S_DisclosureTypes(string.IsNullOrEmpty(strCandCommId) ? (long?)null : Convert.ToInt64(strCandCommId));

                    foreach (var item in results)
                    {
                        objDisclosureTypesEntity = new DisclosureTypesEntity();
                        objDisclosureTypesEntity.DisclosureTypeId = Convert.ToString(item.FILING_CAT_ID);
                        if (item.FILING_CAT_ID == 7)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 8)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 9)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 10)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 11)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 12)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 13)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 14)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        lstDisclosureTypesEntity.Add(objDisclosureTypesEntity);
                    }

                    return lstDisclosureTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddFilingTransactionsData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddFlngTransContrInKindData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string result = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_FlngTransContrInKindData(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        objFilingTransactionsEntity.PayNumber,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntFirstName,
                        objFilingTransactionsEntity.FlngEntLastName,
                        objFilingTransactionsEntity.FlngEntMiddleName,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.RItemized,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        objFilingTransactionsEntity.CreatedBy,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                        objFilingTransactionsEntity.RContributions);


                    foreach (var item in returnValue)
                    {
                        result = item.AG_FILING_TRANS_ID.ToString();
                    }
                    return result;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<OfficeTypeEntity> GetOfficeType()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OfficeTypeEntity> lstOfficeTypeEntity = new List<OfficeTypeEntity>();
                    OfficeTypeEntity objOfficeTypeEntity;

                    var results = entities.SP_S_OfficeTypeAll();

                    foreach (var item in results)
                    {
                        objOfficeTypeEntity = new OfficeTypeEntity();
                        objOfficeTypeEntity.OfficeTypeId = Convert.ToString(item.OFFICE_TYPE_ID);
                        //if (item.OFFICE_TYPE_DESC == "County")
                        //    objOfficeTypeEntity.OfficeTypeDesc = "Local";
                        //else
                        objOfficeTypeEntity.OfficeTypeDesc = item.OFFICE_TYPE_DESC;
                        lstOfficeTypeEntity.Add(objOfficeTypeEntity);
                    }

                    return lstOfficeTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<CountyEntity> GetCounty()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<CountyEntity> lstCountyEntity = new List<CountyEntity>();
                    CountyEntity objCountyEntity;

                    var results = entities.SP_S_CountyAll();

                    foreach (var item in results)
                    {
                        objCountyEntity = new CountyEntity();
                        objCountyEntity.CountyId = Convert.ToString(item.COUNTY_ID);
                        objCountyEntity.CountyDesc = item.CNTY_BOARD;
                        lstCountyEntity.Add(objCountyEntity);
                    }

                    return lstCountyEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<MunicipalityEntity> GetMunicipality(String strCountyId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<MunicipalityEntity> lstMunicipalityEntity = new List<MunicipalityEntity>();
                    MunicipalityEntity objMunicipalityEntity;

                    Int32 intCountyId;
                    if (strCountyId != "")
                        intCountyId = Int32.Parse(strCountyId);
                    else
                        intCountyId = 0;
                    var results = entities.SP_S_Muncipality(intCountyId);

                    foreach (var item in results)
                    {
                        objMunicipalityEntity = new MunicipalityEntity();
                        objMunicipalityEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                        objMunicipalityEntity.MunicipalityDesc = item.MUNICIPALITY_DESC;
                        lstMunicipalityEntity.Add(objMunicipalityEntity);
                    }

                    return lstMunicipalityEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetAutoCompleteNameAddress
        /// </summary>
        /// <param name="name"></param>
        /// <param name="strFilerId"></param>
        /// <returns></returns>
        public IList<AutoCompFLNameAddressEntity> GetAutoCompleteNameAddress(String name, String strFilerId, String strFLName)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<AutoCompFLNameAddressEntity> lstAutoCompFLNameAddressEntity = new List<AutoCompFLNameAddressEntity>();
                    AutoCompFLNameAddressEntity objAutoCompFLNameAddressEntity;

                    var results = (dynamic)null;

                    if (strFLName == "FName")
                        results = entities.SP_S_AutoCompleteFirstNameAndAddr(name, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));
                    else if (strFLName == "LName")
                        results = entities.SP_S_AutoCompleteLastNameAndAddr(name, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));
                    else if (strFLName == "EName")
                        results = entities.SP_S_AutoCompleteEntityNameAndAddr(name, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    if (strFLName == "EName")
                    {
                        foreach (var item in results)
                        {
                            objAutoCompFLNameAddressEntity = new AutoCompFLNameAddressEntity();
                            objAutoCompFLNameAddressEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                            objAutoCompFLNameAddressEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objAutoCompFLNameAddressEntity.FilingEntityStreetNum = item.FLNG_ENT_STR_NUM;
                            objAutoCompFLNameAddressEntity.FilingEntityStreetName = item.FLNG_ENT_STR_NAME;
                            objAutoCompFLNameAddressEntity.FilingEntityCity = item.FLNG_ENT_CITY;
                            objAutoCompFLNameAddressEntity.FilingEntityState = item.FLNG_ENT_STATE;
                            objAutoCompFLNameAddressEntity.FilingEntityState = objAutoCompFLNameAddressEntity.FilingEntityState.Trim();
                            objAutoCompFLNameAddressEntity.FilingEntityZip = item.FLNG_ENT_ZIP;
                            objAutoCompFLNameAddressEntity.FilingEntityCountry = item.FLNG_ENT_COUNTRY;
                            objAutoCompFLNameAddressEntity.FilingEntityNameAndAddress = item.FILING_ENTITY_NAME_ADDRESS;
                            lstAutoCompFLNameAddressEntity.Add(objAutoCompFLNameAddressEntity);
                        }
                    }
                    else
                    {
                        foreach (var item in results)
                        {
                            objAutoCompFLNameAddressEntity = new AutoCompFLNameAddressEntity();
                            objAutoCompFLNameAddressEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                            objAutoCompFLNameAddressEntity.FilingEntityFirstName = item.FLNG_ENT_FIRST_NAME;
                            objAutoCompFLNameAddressEntity.FilingEntityMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objAutoCompFLNameAddressEntity.FilingEntityLastName = item.FLNG_ENT_LAST_NAME;
                            objAutoCompFLNameAddressEntity.FilingEntityStreetNum = item.FLNG_ENT_STR_NUM;
                            objAutoCompFLNameAddressEntity.FilingEntityStreetName = item.FLNG_ENT_STR_NAME;
                            objAutoCompFLNameAddressEntity.FilingEntityCity = item.FLNG_ENT_CITY;
                            objAutoCompFLNameAddressEntity.FilingEntityState = item.FLNG_ENT_STATE;
                            objAutoCompFLNameAddressEntity.FilingEntityState = objAutoCompFLNameAddressEntity.FilingEntityState.Trim();
                            objAutoCompFLNameAddressEntity.FilingEntityZip = item.FLNG_ENT_ZIP;
                            objAutoCompFLNameAddressEntity.FilingEntityCountry = item.FLNG_ENT_COUNTRY;
                            objAutoCompFLNameAddressEntity.FilingEntityNameAndAddress = item.FILING_ENTITY_NAME_ADDRESS;
                            lstAutoCompFLNameAddressEntity.Add(objAutoCompFLNameAddressEntity);
                        }
                    }

                    return lstAutoCompFLNameAddressEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// DeleteFilingTransactionsData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean DeleteFilingTransactionsData(String strTransNumber, String strModifiedBy, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_FilingTransactionsData(strTransNumber, strModifiedBy, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// DeleteFlngTransExpPaySchedFNData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean DeleteFlngTransExpPaySchedFNData(String strLoanLiabNumberOrg, String strTransNumberOrg, String strRLiability, String strModifiedBy, String strFilerID, String strSchedID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    if (strSchedID == "20")
                    {
                        var returnValue = entities.SP_D_EFS_QualifiedExpendituresSchedT(strLoanLiabNumberOrg, strTransNumberOrg, strRLiability, strModifiedBy, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                    }
                    else
                    {
                        var returnValue = entities.SP_D_FlngTransExpPaymentsSchedFNData(strLoanLiabNumberOrg, strTransNumberOrg, strRLiability, strModifiedBy, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                    }
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateFilingTransactionsData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateFilingTransContrInKindData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_Filing_TransContrInKindData(objFilingTransactionsEntity.FilingTransId,
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                objFilingTransactionsEntity.PayNumber,
                string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                objFilingTransactionsEntity.TransExplanation,
                objFilingTransactionsEntity.FlngEntName,
                objFilingTransactionsEntity.FlngEntFirstName,
                objFilingTransactionsEntity.FlngEntMiddleName,
                objFilingTransactionsEntity.FlngEntLastName,
                objFilingTransactionsEntity.FlngEntCountry,
                objFilingTransactionsEntity.FlngEntStrName,
                objFilingTransactionsEntity.FlngEntCity,
                objFilingTransactionsEntity.FlngEntState,
                objFilingTransactionsEntity.FlngEntZip,
                objFilingTransactionsEntity.ModifiedBy,
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                objFilingTransactionsEntity.TreasurerEmployer,
                objFilingTransactionsEntity.TreasurerOccupation,
                objFilingTransactionsEntity.TreasurerStreetAddress,
                objFilingTransactionsEntity.TreasurerCity,
                objFilingTransactionsEntity.TreasurerState,
                objFilingTransactionsEntity.TreasurerZip,
                string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                objFilingTransactionsEntity.RContributions
                );

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Viewable Column
        /// </summary>
        /// <param name="strUniqueID"></param>
        /// <param name="strApplicationName"></param>
        /// <param name="strPageName"></param>
        /// <returns></returns>
        public IList<ViewableColumnEntity> GetViewableColumns(String strUniqueID, String strApplicationName, String strPageName)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ViewableColumnEntity> lstViewableColumnEntity = new List<ViewableColumnEntity>();
                    ViewableColumnEntity objViewableColumnEntity;
                    var results = entities.SP_S_ViewableColumn(strUniqueID, strApplicationName, strPageName);
                    foreach (var item in results)
                    {
                        objViewableColumnEntity = new ViewableColumnEntity();
                        objViewableColumnEntity.ViewableFieldID = item.Viewable_Field_ID.ToString();
                        objViewableColumnEntity.UniqueID = item.Unique_ID;
                        objViewableColumnEntity.ColumnName = item.Column_Name;
                        objViewableColumnEntity.Viewable = item.Viewable;
                        lstViewableColumnEntity.Add(objViewableColumnEntity);
                    }
                    return lstViewableColumnEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<ContributorNameEntity> GetPartnerSubContractorData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContributorNameEntity> lstContributorNameEntity = new List<ContributorNameEntity>();
                    ContributorNameEntity objContributorNameEntity;

                    var results = entities.SP_S_ContributorTypesPartnerSubContractor();

                    foreach (var item in results)
                    {
                        objContributorNameEntity = new ContributorNameEntity();
                        objContributorNameEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objContributorNameEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objContributorNameEntity.ContributorTypeAbbrev = item.CNTRBR_TYPE_ABBREV;
                        lstContributorNameEntity.Add(objContributorNameEntity);
                    }

                    return lstContributorNameEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }




        public Boolean UpdateColumnValue(String uniqueID, String applicationName, String pageName, String uniqueValue, String modifyBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_U_ColumnField(uniqueID,
                                                         applicationName,
                                                         pageName,
                                                         uniqueValue,
                                                         modifyBy);

                    return true;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddContrInKindPartnersData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddContrInKindPartnersData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_FlngTransContrInKindPartnersData(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                objFilingTransactionsEntity.TransNumber,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                objFilingTransactionsEntity.FlngEntName,
                                objFilingTransactionsEntity.FlngEntFirstName,
                                objFilingTransactionsEntity.FlngEntLastName,
                                objFilingTransactionsEntity.FlngEntMiddleName,
                                objFilingTransactionsEntity.FlngEntStrName,
                                objFilingTransactionsEntity.FlngEntCity,
                                objFilingTransactionsEntity.FlngEntState,
                                objFilingTransactionsEntity.FlngEntZip,
                                objFilingTransactionsEntity.FlngEntCountry,
                                objFilingTransactionsEntity.TransExplanation,
                                objFilingTransactionsEntity.RItemized,
                                objFilingTransactionsEntity.CreatedBy,
                                objFilingTransactionsEntity.TreasurerEmployer,
                                objFilingTransactionsEntity.TreasurerOccupation,
                                objFilingTransactionsEntity.TreasurerStreetAddress,
                                objFilingTransactionsEntity.TreasurerCity,
                                objFilingTransactionsEntity.TreasurerState,
                                objFilingTransactionsEntity.TreasurerZip,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                                objFilingTransactionsEntity.RContributions
                                );

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;

                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetContrInKindPartnersData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<ContrInKindPartnersEntity> GetContrInKindPartnersData(String strFilingTransId, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContrInKindPartnersEntity> lstContrInKindPartnersEntity = new List<ContrInKindPartnersEntity>();
                    ContrInKindPartnersEntity objContrInKindPartnersEntity;

                    var results = entities.SP_S_ContrInKindPartnersData(strFilingTransId, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objContrInKindPartnersEntity = new ContrInKindPartnersEntity();
                        objContrInKindPartnersEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objContrInKindPartnersEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                        objContrInKindPartnersEntity.PartnershipName = item.FLNG_ENT_NAME;
                        objContrInKindPartnersEntity.PartnerFirstName = item.FLNG_ENT_FIRST_NAME;
                        objContrInKindPartnersEntity.PartnerMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objContrInKindPartnersEntity.PartnerLastName = item.FLNG_ENT_LAST_NAME;
                        objContrInKindPartnersEntity.PartnerStreetNo = item.FLNG_ENT_STR_NUM;
                        objContrInKindPartnersEntity.PartnerStreetName = item.LNG_ENT_STR_NAME;
                        objContrInKindPartnersEntity.PartnerCity = item.FLNG_ENT_CITY;
                        objContrInKindPartnersEntity.PartnerState = item.FLNG_ENT_STATE;
                        objContrInKindPartnersEntity.PartnerZip5 = item.FLNG_ENT_ZIP;
                        objContrInKindPartnersEntity.PartnershipCountry = item.FLNG_ENT_COUNTRY;
                        objContrInKindPartnersEntity.PartnerAmountAttributed = String.Format("{0:0.00}", item.ORG_AMT);
                        objContrInKindPartnersEntity.PartnerExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objContrInKindPartnersEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objContrInKindPartnersEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objContrInKindPartnersEntity.RItemized = "No";
                        objContrInKindPartnersEntity.TransNumber = item.TRANS_NUMBER;
                        objContrInKindPartnersEntity.TransMapping = item.TRANS_MAPPING;
                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objContrInKindPartnersEntity.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objContrInKindPartnersEntity.RContributions = "No";
                        }
                        else
                        {
                            objContrInKindPartnersEntity.RContributions = "";
                        }

                        objContrInKindPartnersEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objContrInKindPartnersEntity.TreasurerOccupation = item.TREAS_OCCUPATION;
                        objContrInKindPartnersEntity.TreaAddress = item.TREAS_ADDRESS;
                        objContrInKindPartnersEntity.TreaAddr1 = item.TREAS_ADDR1;
                        objContrInKindPartnersEntity.TreaCity = item.TREAS_CITY;
                        objContrInKindPartnersEntity.TreaState = item.TREAS_STATE;
                        objContrInKindPartnersEntity.TreaZipCode = item.TREAS_ZIP;
                        lstContrInKindPartnersEntity.Add(objContrInKindPartnersEntity);
                    }

                    return lstContrInKindPartnersEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// DeleteContrInKindPartnersData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strFilingTransMapping"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean DeleteContrInKindPartnersData(String strTransNumber, String strModifiedBy, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_ContrInKindPartnersData(strTransNumber, strModifiedBy, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateContrInKindPartnersData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateContrInKindPartnersData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_ContrInKindPartnersData(objFilingTransactionsEntity.TransNumber,
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId), objFilingTransactionsEntity.FlngEntName,
                objFilingTransactionsEntity.FlngEntFirstName, objFilingTransactionsEntity.FlngEntMiddleName,
                objFilingTransactionsEntity.FlngEntLastName, objFilingTransactionsEntity.FlngEntStrName,
                 objFilingTransactionsEntity.FlngEntCity, objFilingTransactionsEntity.FlngEntState,
                 objFilingTransactionsEntity.FlngEntZip, objFilingTransactionsEntity.FlngEntCountry,
                 string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt), objFilingTransactionsEntity.TransExplanation,
                 objFilingTransactionsEntity.ModifiedBy,
                 string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                 objFilingTransactionsEntity.TreasurerEmployer,
                 objFilingTransactionsEntity.TreasurerOccupation,
                 objFilingTransactionsEntity.TreasurerStreetAddress,
                 objFilingTransactionsEntity.TreasurerCity,
                 objFilingTransactionsEntity.TreasurerState,
                 objFilingTransactionsEntity.TreasurerZip,
                 string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                 objFilingTransactionsEntity.RContributions);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Add Transfer In scheudled data
        /// </summary>
        /// <param name="objFilingTransactionsContract"></param>
        /// <returns></returns>
        public string AddFilingTransaction_TransferIn(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTransaction_TransferIn(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.TransferTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.TransferTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                                        objFilingTransactionsEntity.PayNumber,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                                        objFilingTransactionsEntity.FlngEntZip4,
                                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Update Filing Transaction
        /// </summary>
        /// <param name="objFilingTransactionsContract"></param>
        /// <returns></returns>
        public Boolean UpdateFilingTransaction_TransferIn(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_U_FilingTransaction_TransferIn(string.IsNullOrEmpty(objFilingTransactionsEntity.TransferTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.TransferTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                        objFilingTransactionsEntity.FlngEntZip4,
                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                        objFilingTransactionsEntity.TransNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (result >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddFilingTransaction_NonCompHKReceipts
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddFilingTransaction_NonCompHKReceipts(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_I_FlngTransNonCompHKReceipts(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ReceiptCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ReceiptCodeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                objFilingTransactionsEntity.PayNumber,
                string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                objFilingTransactionsEntity.TransExplanation,
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                objFilingTransactionsEntity.FlngEntName,
                objFilingTransactionsEntity.FlngEntFirstName,
                objFilingTransactionsEntity.FlngEntLastName,
                objFilingTransactionsEntity.FlngEntMiddleName,
                objFilingTransactionsEntity.FlngEntCountry,
                objFilingTransactionsEntity.FlngEntStrName,
                objFilingTransactionsEntity.FlngEntCity,
                objFilingTransactionsEntity.FlngEntState,
                objFilingTransactionsEntity.FlngEntZip,
                objFilingTransactionsEntity.RItemized,
                objFilingTransactionsEntity.CreatedBy,
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in results)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateFilingTransNonCompHKReceipts
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateFilingTransNonCompHKReceipts(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FilingTransaction_NonCompHKReceipts(objFilingTransactionsEntity.TransNumber,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.ReceiptCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ReceiptCodeId),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                objFilingTransactionsEntity.PayNumber,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                objFilingTransactionsEntity.TransExplanation,
                                objFilingTransactionsEntity.FlngEntName,
                                objFilingTransactionsEntity.FlngEntFirstName,
                                objFilingTransactionsEntity.FlngEntMiddleName,
                                objFilingTransactionsEntity.FlngEntLastName,
                                objFilingTransactionsEntity.FlngEntCountry,
                                objFilingTransactionsEntity.FlngEntStrName,
                                objFilingTransactionsEntity.FlngEntCity,
                                objFilingTransactionsEntity.FlngEntState,
                                objFilingTransactionsEntity.FlngEntZip,
                                objFilingTransactionsEntity.ModifiedBy,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// /AddFlngTransContrMonetaryData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddFlngTransContrMonetaryData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string result = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_FlngTransContrMonetaryData(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        objFilingTransactionsEntity.PayNumber,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntFirstName,
                        objFilingTransactionsEntity.FlngEntLastName,
                        objFilingTransactionsEntity.FlngEntMiddleName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.RItemized,
                        objFilingTransactionsEntity.FlngEntCountry,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        objFilingTransactionsEntity.CreatedBy,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.IsClaim,
                        objFilingTransactionsEntity.InDistrict,
                        objFilingTransactionsEntity.Minor,
                        objFilingTransactionsEntity.Vendor,
                        objFilingTransactionsEntity.Lobbyist,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                        objFilingTransactionsEntity.RContributions);

                    foreach (var item in returnValue)
                    {
                        result = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return result;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region UpdateFlngTransMonetaryContrData
        /// <summary>
        /// UpdateFlngTransMonetaryContrData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateFlngTransMonetaryContrData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_Flng_TransMonetaryContrData(objFilingTransactionsEntity.TransNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                    objFilingTransactionsEntity.PayNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                    objFilingTransactionsEntity.TransExplanation,
                                    objFilingTransactionsEntity.FlngEntName,
                                    objFilingTransactionsEntity.FlngEntFirstName,
                                    objFilingTransactionsEntity.FlngEntMiddleName,
                                    objFilingTransactionsEntity.FlngEntLastName,
                                    objFilingTransactionsEntity.FlngEntStrName,
                                    objFilingTransactionsEntity.FlngEntCity,
                                    objFilingTransactionsEntity.FlngEntState,
                                    objFilingTransactionsEntity.FlngEntZip,
                                    objFilingTransactionsEntity.FlngEntCountry,
                                    objFilingTransactionsEntity.ModifiedBy,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                    objFilingTransactionsEntity.IsClaim,
                                    objFilingTransactionsEntity.InDistrict,
                                    objFilingTransactionsEntity.Minor,
                                    objFilingTransactionsEntity.Vendor,
                                    objFilingTransactionsEntity.Lobbyist,
                                    objFilingTransactionsEntity.TreasurerEmployer,
                                    objFilingTransactionsEntity.TreasurerOccupation,
                                    objFilingTransactionsEntity.TreasurerStreetAddress,
                                    objFilingTransactionsEntity.TreasurerCity,
                                    objFilingTransactionsEntity.TreasurerState,
                                    objFilingTransactionsEntity.TreasurerZip,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                                    objFilingTransactionsEntity.RContributions);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion UpdateFlngTransMonetaryContrData

        /// <summary>
        /// AddFlngTransExpenditureData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public String AddFlngTransExpenditureData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    if (objFilingTransactionsEntity.SchedID == "20")
                    {
                        ObjectParameter objReturnValue = new ObjectParameter("RETURN_IDENTITY", typeof(int));
                        String strReturnValue = String.Empty;
                        var returnValue = entities.SP_I_EFS_QualifiedExpendituresSchedT_Add(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                    objFilingTransactionsEntity.TransNumber,
                                    objFilingTransactionsEntity.TransNumberOrg,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                    objFilingTransactionsEntity.PayNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.OrgDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.LiabilityOrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.LiabilityOrgAmt),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.LiabilityPartialAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.LiabilityPartialAmt),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.LiabilityOwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.LiabilityOwedAmt),
                                    objFilingTransactionsEntity.RLiability,
                                    objFilingTransactionsEntity.RSubcontractor,
                                    objFilingTransactionsEntity.RItemized,
                                    objFilingTransactionsEntity.RLiabilityExists,
                                    objFilingTransactionsEntity.TransExplanation,
                                    objFilingTransactionsEntity.LiabilityTransExplanation,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                    objFilingTransactionsEntity.FlngEntName,
                                    objFilingTransactionsEntity.FlngEntCountry,
                                    objFilingTransactionsEntity.FlngEntStrName,
                                    objFilingTransactionsEntity.FlngEntCity,
                                    objFilingTransactionsEntity.FlngEntState,
                                    objFilingTransactionsEntity.FlngEntZip,
                                    objFilingTransactionsEntity.CreatedBy,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID), objReturnValue);

                        strReturnValue = Convert.ToString(objReturnValue.Value);
                        return strReturnValue;
                    }
                    else
                    {
                        ObjectParameter objReturnValue = new ObjectParameter("RETURN_IDENTITY", typeof(int));
                        String strReturnValue = String.Empty;
                        var returnValue = entities.SP_I_FlngTransExpenditurePaymentsSchedFN(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                    objFilingTransactionsEntity.TransNumber,
                                    objFilingTransactionsEntity.TransNumberOrg,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                    objFilingTransactionsEntity.PayNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.OrgDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.LiabilityOrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.LiabilityOrgAmt),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.LiabilityPartialAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.LiabilityPartialAmt),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.LiabilityOwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.LiabilityOwedAmt),
                                    objFilingTransactionsEntity.RLiability,
                                    objFilingTransactionsEntity.RSubcontractor,
                                    objFilingTransactionsEntity.RItemized,
                                    objFilingTransactionsEntity.RLiabilityExists,
                                    objFilingTransactionsEntity.TransExplanation,
                                    objFilingTransactionsEntity.LiabilityTransExplanation,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                    objFilingTransactionsEntity.FlngEntName,
                                    objFilingTransactionsEntity.FlngEntCountry,
                                    objFilingTransactionsEntity.FlngEntStrName,
                                    objFilingTransactionsEntity.FlngEntCity,
                                    objFilingTransactionsEntity.FlngEntState,
                                    objFilingTransactionsEntity.FlngEntZip,
                                    objFilingTransactionsEntity.CreatedBy,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID), objFilingTransactionsEntity.RIESupported,
                                    objReturnValue);

                        strReturnValue = Convert.ToString(objReturnValue.Value);
                        return strReturnValue;
                    }
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }         
        }

        /// <summary>
        /// Add Transfer Out scheudled data
        /// </summary>
        /// <param name="objFilingTransactionsContract"></param>
        /// <returns></returns>
        public string AddFilingTransaction_TransferOut(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTransaction_TransferOut(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.TransferTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.TransferTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                        objFilingTransactionsEntity.FlngEntZip4,
                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Update Filing Transaction
        /// </summary>
        /// <param name="objFilingTransactionsContract"></param>
        /// <returns></returns>
        public Boolean UpdateFilingTransaction_TransferOut(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_U_FilingTransaction_TransferOut(string.IsNullOrEmpty(objFilingTransactionsEntity.TransferTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.TransferTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                        objFilingTransactionsEntity.FlngEntZip4,
                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                        objFilingTransactionsEntity.TransNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (result >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Add Loan Received scheudled data
        /// </summary>
        /// <param name="objFilingTransactionsContract"></param>
        /// <returns></returns>
        public string AddFilingTransaction_LoanReceived(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultdata = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTransaction_LoanReceived(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OtherFilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OtherFilingSchedId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.TransferTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.TransferTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        objFilingTransactionsEntity.OtherTransExplanation,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                        objFilingTransactionsEntity.FlngEntFirstName,
                                                                        objFilingTransactionsEntity.FlngEntMiddleName,
                                                                        objFilingTransactionsEntity.FlngEntLastName,
                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                        objFilingTransactionsEntity.FlngEntZip4,
                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                                                                        objFilingTransactionsEntity.TreasurerEmployer,
                                                                        objFilingTransactionsEntity.TreasurerOccupation,
                                                                        objFilingTransactionsEntity.TreasurerStreetAddress,
                                                                        objFilingTransactionsEntity.TreasurerCity,
                                                                        objFilingTransactionsEntity.TreasurerState,
                                                                        objFilingTransactionsEntity.TreasurerZip,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID));
                    

                    return resultdata;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public string AddFilingTransaction_LoanRepayment(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTransaction_LoanRepayment(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OtherFilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OtherFilingSchedId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.TransferTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.TransferTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                                        objFilingTransactionsEntity.PayNumber,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                                        objFilingTransactionsEntity.OtherTransExplanation,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                                        objFilingTransactionsEntity.FlngEntFirstName,
                                                                                        objFilingTransactionsEntity.FlngEntMiddleName,
                                                                                        objFilingTransactionsEntity.FlngEntLastName,
                                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OtherAmount) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OtherAmount),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                                        objFilingTransactionsEntity.Loan_Lib_Number,
                                                                                        objFilingTransactionsEntity.TransNumber,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Update Filing Transaction
        /// </summary>
        /// <param name="objFilingTransactionsContract"></param>
        /// <returns></returns>
        public Boolean UpdateFilingTransaction_LoanReceived(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_U_FilingTransaction_LoanReceived(string.IsNullOrEmpty(objFilingTransactionsEntity.TransferTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.TransferTypeId),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        objFilingTransactionsEntity.OtherTransExplanation,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                        objFilingTransactionsEntity.FlngEntFirstName,
                                                                        objFilingTransactionsEntity.FlngEntMiddleName,
                                                                        objFilingTransactionsEntity.FlngEntLastName,
                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                        objFilingTransactionsEntity.ModifiedBy,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                                                                        objFilingTransactionsEntity.IsAmtChanged,
                                                                        objFilingTransactionsEntity.Loan_Lib_Number,
                                                                        objFilingTransactionsEntity.TransNumber, 
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                        objFilingTransactionsEntity.TreasurerEmployer,
                                                                        objFilingTransactionsEntity.TreasurerOccupation,
                                                                        objFilingTransactionsEntity.TreasurerStreetAddress,
                                                                        objFilingTransactionsEntity.TreasurerCity,
                                                                        objFilingTransactionsEntity.TreasurerState,
                                                                        objFilingTransactionsEntity.TreasurerZip,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID));

                    if (result >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get Loaner Code
        /// </summary>
        /// <returns></returns>
        public IList<LoanerCodeEntity> GetLoanerCode()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LoanerCodeEntity> lstLoanerCodeEntity = new List<LoanerCodeEntity>();
                    LoanerCodeEntity objLoanerCodeEntity;

                    var results = entities.SP_S_LoanerCode();

                    foreach (var item in results)
                    {
                        objLoanerCodeEntity = new LoanerCodeEntity();
                        objLoanerCodeEntity.LoanerID = Convert.ToString(item.LOAN_OTHER_ID);
                        objLoanerCodeEntity.LoanerDesc = item.LOAN_OTHER_DESC;
                        lstLoanerCodeEntity.Add(objLoanerCodeEntity);
                    }
                    return lstLoanerCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetAutoCompleteCreditorNameLiab
        /// </summary>
        /// <param name="name"></param>
        /// <param name="strFilerId"></param>
        /// <returns></returns>
        public IList<OutstandingLiabilityEntity> GetAutoCompleteCreditorNameLiab(String name, String strFilerId, String strNameFlag)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OutstandingLiabilityEntity> lstOutstandingLiabilityEntity = new List<OutstandingLiabilityEntity>();
                    OutstandingLiabilityEntity objOutstandingLiabilityEntity;

                    if (strNameFlag == "Yes")
                    {
                        var results = entities.SP_S_GetEntityNameLiabilityExists(name, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                        foreach (var item in results)
                        {
                            objOutstandingLiabilityEntity = new OutstandingLiabilityEntity();
                            objOutstandingLiabilityEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                            objOutstandingLiabilityEntity.PayeeName = item.FLNG_ENT_NAME;
                            objOutstandingLiabilityEntity.FlngEntCountry = item.FLNG_ENT_COUNTRY;
                            objOutstandingLiabilityEntity.LiabilityStreetName = item.FLNG_ENT_STR_NAME;
                            objOutstandingLiabilityEntity.LiabilityCity = item.FLNG_ENT_CITY;
                            objOutstandingLiabilityEntity.LiabilityState = item.FLNG_ENT_STATE;
                            objOutstandingLiabilityEntity.LiabilityZipCode = item.FLNG_ENT_ZIP;
                            objOutstandingLiabilityEntity.FilingEntityNameAndAddress = item.FILING_ENTITY_NAME_ADDRESS;
                            lstOutstandingLiabilityEntity.Add(objOutstandingLiabilityEntity);
                        }
                    }
                    else
                    {
                        var results = entities.SP_S_AutoCompleteEntityNameLiability(name, strFilerId);

                        foreach (var item in results)
                        {
                            objOutstandingLiabilityEntity = new OutstandingLiabilityEntity();
                            objOutstandingLiabilityEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                            objOutstandingLiabilityEntity.PayeeName = item.FLNG_ENT_NAME;
                            objOutstandingLiabilityEntity.FlngEntCountry = item.FLNG_ENT_COUNTRY;
                            objOutstandingLiabilityEntity.LiabilityStreetName = item.FLNG_ENT_STR_NAME;
                            objOutstandingLiabilityEntity.LiabilityCity = item.FLNG_ENT_CITY;
                            objOutstandingLiabilityEntity.LiabilityState = item.FLNG_ENT_STATE;
                            objOutstandingLiabilityEntity.LiabilityZipCode = item.FLNG_ENT_ZIP;
                            objOutstandingLiabilityEntity.FilingEntityNameAndAddress = item.FILING_ENTITY_NAME_ADDRESS;
                            lstOutstandingLiabilityEntity.Add(objOutstandingLiabilityEntity);
                        }
                    }

                    return lstOutstandingLiabilityEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetDateIncurredLiabData
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public IList<DateIncurredEntity> GetDateIncurredLiabData(String strFilingEntityId, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DateIncurredEntity> lstDateIncurredEntity = new List<DateIncurredEntity>();
                    DateIncurredEntity objDateIncurredEntity;

                    var results = entities.SP_S_DateInccuredLiability(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objDateIncurredEntity = new DateIncurredEntity();
                        objDateIncurredEntity.DateIncurredId = Convert.ToString(item.TRANS_NUMBER);
                        objDateIncurredEntity.DateIncurredValue = item.SCHED_DATE;
                        objDateIncurredEntity.AmountLiability = String.Format("{0:0.00}", item.ORG_AMT);
                        lstDateIncurredEntity.Add(objDateIncurredEntity);
                    }
                    return lstDateIncurredEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetDateIncurredLiabData
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public IList<DateIncurredEntity> GetDateIncurredLiabDataForForgiven(String strFilingEntityId, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DateIncurredEntity> lstDateIncurredEntity = new List<DateIncurredEntity>();
                    DateIncurredEntity objDateIncurredEntity;

                    var results = entities.SP_S_DateInccuredLiabilityForForgiven(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objDateIncurredEntity = new DateIncurredEntity();
                        objDateIncurredEntity.DateIncurredId = Convert.ToString(item.TRANS_NUMBER);
                        objDateIncurredEntity.DateIncurredValue = item.SCHED_DATE;
                        objDateIncurredEntity.AmountLiability = String.Format("{0:0.00}", item.ORG_AMT);
                        objDateIncurredEntity.OutstandingAmount = String.Format("{0:0.00}", item.OUTSTANDING_AMT);
                        lstDateIncurredEntity.Add(objDateIncurredEntity);
                    }
                    return lstDateIncurredEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOriginalAmountLiabData
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public IList<OriginalAmountEntity> GetOutstandingAmountLiabData(String strFilingEntityId, String strUpdateStatus, String strFilingTransId, String strFilingsId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OriginalAmountEntity> lstOriginalAmountEntity = new List<OriginalAmountEntity>();
                    OriginalAmountEntity objOriginalAmountEntity;

                    var results = entities.SP_S_OutstandingAmountLiability(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), strFilingTransId, string.IsNullOrEmpty(strFilingsId) ? (long?)null : Convert.ToInt64(strFilingsId), strUpdateStatus);

                    foreach (var item in results)
                    {
                        objOriginalAmountEntity = new OriginalAmountEntity();
                        objOriginalAmountEntity.OriginalAmountId = Convert.ToString(item.LOAN_LIB_NUMBER);
                        objOriginalAmountEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        lstOriginalAmountEntity.Add(objOriginalAmountEntity);
                    }
                    return lstOriginalAmountEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetExpenditureLiabilityExists
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public String GetExpenditureLiabilityExists(String strFilingEntityId, String strFlngEntyName, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String returnFlngEntityId = String.Empty;

                    var results = entities.SP_S_GetExpenditureLiabilityExists(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), strFlngEntyName, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        returnFlngEntityId = item.Value.ToString();
                    }

                    return returnFlngEntityId;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetExpPaymentsLiabilityData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<ExpPaymentLiabilityEntity> GetExpPaymentsLiabilityData(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentLiabilityEntity> lstExpPaymentLiabilityEntity = new List<ExpPaymentLiabilityEntity>();
                    ExpPaymentLiabilityEntity objExpPaymentLiabilityEntity;

                    var results = entities.SP_S_GetExpPaymentsLiabilityData(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentLiabilityEntity = new ExpPaymentLiabilityEntity();
                        objExpPaymentLiabilityEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objExpPaymentLiabilityEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                        objExpPaymentLiabilityEntity.PayeeName = item.FLNG_ENT_NAME;
                        objExpPaymentLiabilityEntity.DateIncurred = item.ORG_DATE;
                        objExpPaymentLiabilityEntity.OrignalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objExpPaymentLiabilityEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        objExpPaymentLiabilityEntity.CreditorName = item.FLNG_ENT_NAME;
                        objExpPaymentLiabilityEntity.LiabilityStreetName = item.LNG_ENT_STR_NAME;
                        objExpPaymentLiabilityEntity.LiabilityCity = item.FLNG_ENT_CITY;
                        objExpPaymentLiabilityEntity.LiabilityState = item.FLNG_ENT_STATE;
                        objExpPaymentLiabilityEntity.LiabilityZipCode = item.FLNG_ENT_ZIP;
                        objExpPaymentLiabilityEntity.LiabilityExplanation = item.TRANS_EXPLNTN;
                        lstExpPaymentLiabilityEntity.Add(objExpPaymentLiabilityEntity);
                    }

                    return lstExpPaymentLiabilityEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public Boolean UpdateFlngTransExpenditureData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    if (objFilingTransactionsEntity.SchedID == "20")
                    {
                        var returnValue = entities.SP_U_EFS_QualifiedExpendituresSchedT_Update(string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                        objFilingTransactionsEntity.PayNumber,
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                        objFilingTransactionsEntity.TransExplanation,
                                        objFilingTransactionsEntity.RLiability,
                                        objFilingTransactionsEntity.RSubcontractor,
                                        objFilingTransactionsEntity.RItemized,
                                        objFilingTransactionsEntity.FlngEntName,
                                        objFilingTransactionsEntity.FlngEntCountry,
                                        objFilingTransactionsEntity.FlngEntStrName,
                                        objFilingTransactionsEntity.FlngEntCity,
                                        objFilingTransactionsEntity.FlngEntState,
                                        objFilingTransactionsEntity.FlngEntZip,
                                        objFilingTransactionsEntity.ModifiedBy,
                                        objFilingTransactionsEntity.LoanLiabNumberOrg,
                                        objFilingTransactionsEntity.TransNumberOrg,
                                        objFilingTransactionsEntity.IsAmtChanged,
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                    }
                    else
                    {
                        var returnValue = entities.SP_U_FlngTransExpLiabSchedFN(string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                        objFilingTransactionsEntity.PayNumber,
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                        objFilingTransactionsEntity.TransExplanation,
                                        objFilingTransactionsEntity.RLiability,
                                        objFilingTransactionsEntity.RSubcontractor,
                                        objFilingTransactionsEntity.RItemized,
                                        objFilingTransactionsEntity.FlngEntName,
                                        objFilingTransactionsEntity.FlngEntCountry,
                                        objFilingTransactionsEntity.FlngEntStrName,
                                        objFilingTransactionsEntity.FlngEntCity,
                                        objFilingTransactionsEntity.FlngEntState,
                                        objFilingTransactionsEntity.FlngEntZip,
                                        objFilingTransactionsEntity.ModifiedBy,
                                        objFilingTransactionsEntity.LoanLiabNumberOrg,
                                        objFilingTransactionsEntity.TransNumberOrg,
                                        objFilingTransactionsEntity.IsAmtChanged,
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                        objFilingTransactionsEntity.RIESupported);

                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                    }                    
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetSubcontracorsExists
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public Boolean GetSubcontracorsExists(String strFilingTransId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String returnFilingMappingValue = String.Empty;

                    var results = entities.SP_S_GetSubcontractorsExists(string.IsNullOrEmpty(strFilingTransId) ? (long?)null : Convert.ToInt64(strFilingTransId));

                    foreach (var item in results)
                    {
                        returnFilingMappingValue = item.Value.ToString();
                    }

                    if (returnFilingMappingValue != String.Empty)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get Date
        /// </summary>
        /// <returns></returns>
        public IList<GetSearchForScheduledI> GetDate_SchedueledJ(string FILING_ENTITY_NAME, string ORG_AMT, string flng_Ent_FirstName,
                                                                 string flng_Ent_MiddleName, string flng_Ent_LastName, string filer_ID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetSearchForScheduledI> lstGetSearchForScheduledI = new List<GetSearchForScheduledI>();
                    GetSearchForScheduledI objGetSearchForScheduledI;

                    var results = entities.SP_S_Loan_Repayment_SearchByDate(FILING_ENTITY_NAME, string.IsNullOrEmpty(ORG_AMT) ? (double?)null : Convert.ToDouble(ORG_AMT), flng_Ent_FirstName, flng_Ent_MiddleName, flng_Ent_LastName, string.IsNullOrEmpty(filer_ID) ? (long?)null : Convert.ToInt64(filer_ID));

                    foreach (var item in results)
                    {
                        objGetSearchForScheduledI = new GetSearchForScheduledI();
                        if (item.TRANS_NUMBER == null)
                        {
                            objGetSearchForScheduledI.Trans_Number = "";
                        }
                        else
                        {
                            objGetSearchForScheduledI.Trans_Number = item.TRANS_NUMBER.ToString();
                        }

                        if (item.LOAN_LIB_NUMBER == null)
                        {
                            objGetSearchForScheduledI.Loan_Lib_Number = "";
                        }
                        else
                        {
                            objGetSearchForScheduledI.Loan_Lib_Number = item.LOAN_LIB_NUMBER.ToString();
                        }

                        objGetSearchForScheduledI.Date = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString().ToString();
                        lstGetSearchForScheduledI.Add(objGetSearchForScheduledI);
                    }
                    return lstGetSearchForScheduledI;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get Amount
        /// </summary>
        /// <param name="filing_date"></param>
        /// <returns></returns>
        public IList<GetSearchForScheduledI> GetAmount_SchedueledJ(string FILING_ENTITY_NAME, string flng_Ent_FirstName,
                                                                 string flng_Ent_MiddleName, string flng_Ent_LastName, string filer_ID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetSearchForScheduledI> lstGetSearchForScheduledI = new List<GetSearchForScheduledI>();
                    GetSearchForScheduledI objGetSearchForScheduledI;

                    var results = entities.SP_S_Loan_Repayment_SearchByAmount(FILING_ENTITY_NAME, flng_Ent_FirstName, flng_Ent_MiddleName, flng_Ent_LastName, string.IsNullOrEmpty(filer_ID) ? (long?)null : Convert.ToInt64(filer_ID));

                    foreach (var item in results)
                    {
                        objGetSearchForScheduledI = new GetSearchForScheduledI();
                        objGetSearchForScheduledI.Amount = String.Format("{0:0.00}", item.ORG_AMT); //item.ORG_AMT.ToString();
                        lstGetSearchForScheduledI.Add(objGetSearchForScheduledI);
                    }
                    return lstGetSearchForScheduledI;
                }

            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filing_date"></param>
        /// <param name="org_amt"></param>
        /// <returns></returns>
        public IList<GetSearchForScheduledI> GetName_SchedueledJ(String filer_ID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetSearchForScheduledI> lstGetSearchForScheduledI = new List<GetSearchForScheduledI>();
                    GetSearchForScheduledI objGetSearchForScheduledI;

                    var results = entities.SP_S_Loan_Repayment_SearchByName(string.IsNullOrEmpty(filer_ID) ? (long?)null : Convert.ToInt64(filer_ID));

                    foreach (var item in results)
                    {
                        objGetSearchForScheduledI = new GetSearchForScheduledI();
                        if (item.FLNG_ENT_NAME == null)
                        {
                            objGetSearchForScheduledI.Name = "";
                        }
                        else
                        {
                            objGetSearchForScheduledI.Name = Convert.ToString(item.FLNG_ENT_NAME);
                        }
                        if (item.FLNG_ENT_FIRST_NAME == null)
                        {
                            objGetSearchForScheduledI.flng_Ent_FirstName = "";
                        }
                        else
                        {
                            objGetSearchForScheduledI.flng_Ent_FirstName = Convert.ToString(item.FLNG_ENT_FIRST_NAME);
                        }

                        if (item.FLNG_ENT_MIDDLE_NAME == null)
                        {
                            objGetSearchForScheduledI.flng_Ent_MiddleName = "";
                        }
                        else
                        {
                            objGetSearchForScheduledI.flng_Ent_MiddleName = Convert.ToString(item.FLNG_ENT_MIDDLE_NAME);
                        }

                        if (item.FLNG_ENT_LAST_NAME == null)
                        {
                            objGetSearchForScheduledI.flng_Ent_LastName = "";
                        }
                        else
                        {
                            objGetSearchForScheduledI.flng_Ent_LastName = Convert.ToString(item.FLNG_ENT_LAST_NAME);
                        }
                        lstGetSearchForScheduledI.Add(objGetSearchForScheduledI);
                    }
                    return lstGetSearchForScheduledI;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddFilingTransExpReimbursmentData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddFilingTransExpReimbursmentData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_FlngTransExpReimbursementSchedF(objFilingTransactionsEntity.TransNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.RItemized,
                    objFilingTransactionsEntity.CreatedBy,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;

                    //if(objFilingTransactionsEntity.SchedID == "20")
                    //{
                    //    var returnValue = entities.SP_I_EFS_QualifiedExpendituresSchedT_Add_Reims(objFilingTransactionsEntity.TransNumber,
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    //objFilingTransactionsEntity.TransExplanation,
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    //objFilingTransactionsEntity.FlngEntName,
                    //objFilingTransactionsEntity.FlngEntCountry,
                    //objFilingTransactionsEntity.FlngEntStrName,
                    //objFilingTransactionsEntity.FlngEntCity,
                    //objFilingTransactionsEntity.FlngEntState,
                    //objFilingTransactionsEntity.FlngEntZip,
                    //objFilingTransactionsEntity.RItemized,
                    //objFilingTransactionsEntity.CreatedBy,
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    //    if (returnValue >= 1)
                    //        return true;
                    //    else
                    //        return false;
                    //}
                    //else
                    //{
                    //    var returnValue = entities.SP_I_FlngTransExpReimbursementSchedF(objFilingTransactionsEntity.TransNumber,
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    //objFilingTransactionsEntity.TransExplanation,
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    //objFilingTransactionsEntity.FlngEntName,
                    //objFilingTransactionsEntity.FlngEntCountry,
                    //objFilingTransactionsEntity.FlngEntStrName,
                    //objFilingTransactionsEntity.FlngEntCity,
                    //objFilingTransactionsEntity.FlngEntState,
                    //objFilingTransactionsEntity.FlngEntZip,
                    //objFilingTransactionsEntity.RItemized,
                    //objFilingTransactionsEntity.CreatedBy,
                    //string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    //    if (returnValue >= 1)
                    //        return true;
                    //    else
                    //        return false;
                    //}

                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetFlngTransExpReimbursementData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionsEntity> GetFlngTransExpReimbursementData(String strTransNumber, String strFilerId, String strSchedID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionsEntity> lstFilingTransactionsEntity = new List<FilingTransactionsEntity>();
                    FilingTransactionsEntity objFilingTransactionsEntity;

                    if (strSchedID == "20")
                    {
                        var results = entities.SP_S_EFS_QualifiedExpendituresSchedT_Rem_Credit_Data(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                        foreach (var item in results)
                        {
                            objFilingTransactionsEntity = new FilingTransactionsEntity();
                            objFilingTransactionsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objFilingTransactionsEntity.FilingEntId = Convert.ToString(item.FLNG_ENT_ID);
                            objFilingTransactionsEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                            objFilingTransactionsEntity.SchedDate = item.SCHED_DATE;
                            objFilingTransactionsEntity.FlngEntName = item.FLNG_ENT_NAME;
                            objFilingTransactionsEntity.FlngEntCountry = item.FLNG_ENT_COUNTRY;
                            objFilingTransactionsEntity.FlngEntStrName = item.FLNG_ENT_STR_NAME;
                            objFilingTransactionsEntity.FlngEntCity = item.FLNG_ENT_CITY;
                            objFilingTransactionsEntity.FlngEntState = item.FLNG_ENT_STATE;
                            objFilingTransactionsEntity.FlngEntZip = item.FLNG_ENT_ZIP;
                            objFilingTransactionsEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                            objFilingTransactionsEntity.OrgAmt = String.Format("{0:0.00}", item.ORG_AMT);
                            objFilingTransactionsEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objFilingTransactionsEntity.RItemized = item.R_ITEMIZED;
                            objFilingTransactionsEntity.TransNumber = item.TRANS_NUMBER;
                            lstFilingTransactionsEntity.Add(objFilingTransactionsEntity);
                        }
                    }
                    else
                    {
                        var results = entities.SP_S_GetExpPaymentsReimbursementData(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                        foreach (var item in results)
                        {
                            objFilingTransactionsEntity = new FilingTransactionsEntity();
                            objFilingTransactionsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objFilingTransactionsEntity.FilingEntId = Convert.ToString(item.FLNG_ENT_ID);
                            objFilingTransactionsEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                            objFilingTransactionsEntity.SchedDate = item.SCHED_DATE;
                            objFilingTransactionsEntity.FlngEntName = item.FLNG_ENT_NAME;
                            objFilingTransactionsEntity.FlngEntCountry = item.FLNG_ENT_COUNTRY;
                            objFilingTransactionsEntity.FlngEntStrName = item.FLNG_ENT_STR_NAME;
                            objFilingTransactionsEntity.FlngEntCity = item.FLNG_ENT_CITY;
                            objFilingTransactionsEntity.FlngEntState = item.FLNG_ENT_STATE;
                            objFilingTransactionsEntity.FlngEntZip = item.FLNG_ENT_ZIP;
                            objFilingTransactionsEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                            objFilingTransactionsEntity.OrgAmt = String.Format("{0:0.00}", item.ORG_AMT);
                            objFilingTransactionsEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objFilingTransactionsEntity.RItemized = item.R_ITEMIZED;
                            objFilingTransactionsEntity.TransNumber = item.TRANS_NUMBER;
                            lstFilingTransactionsEntity.Add(objFilingTransactionsEntity);
                        }
                    }

                    return lstFilingTransactionsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetReimbursementDetailsAmt
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public String GetReimbursementDetailsAmt(String strTransNumber, String strFilerId, String strSchedID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strReimbursementDetailsAmt = String.Empty;

                    if (strSchedID == "20")
                    {
                        var results = entities.SP_S_EFS_QualifiedExpendituresSchedT_Rem_Credit_DetailAmt(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                        foreach (var item in results)
                        {
                            if (item != null)
                            {
                                strReimbursementDetailsAmt = String.Format("{0:0.00}", item.Value);
                            }
                            else
                            {
                                strReimbursementDetailsAmt = "0.00";
                            }

                        }
                    }
                    else
                    {
                        var results = entities.SP_S_GetReimbursementDetailsAmt(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                        foreach (var item in results)
                        {
                            if (item != null)
                            {
                                strReimbursementDetailsAmt = String.Format("{0:0.00}", item.Value);
                            }
                            else
                            {
                                strReimbursementDetailsAmt = "0.00";
                            }

                        }
                    }

                    return strReimbursementDetailsAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get Scheudled J Entity Data
        /// </summary>
        /// <param name="filing_Trans_ID"></param>
        /// <returns></returns>
        public IList<FilingTransactionsEntity> GetScheduleJ_EntityData(string trans_Number, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionsEntity> lstFilingTransactionsEntity = new List<FilingTransactionsEntity>();
                    FilingTransactionsEntity objFilingTransactionsEntity;

                    var results = entities.SP_S_Loan_Repayment_GetDataFromScheI(trans_Number, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objFilingTransactionsEntity = new FilingTransactionsEntity();
                        if (item.LOAN_LIB_NUMBER == null)
                        {
                            objFilingTransactionsEntity.Loan_Lib_Number = "";
                        }
                        else
                        {
                            objFilingTransactionsEntity.Loan_Lib_Number = Convert.ToString(item.LOAN_LIB_NUMBER);
                        }

                        if (item.TRANS_NUMBER == null)
                        {
                            objFilingTransactionsEntity.TransNumber = "";
                        }
                        else
                        {
                            objFilingTransactionsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        }

                        if (item.FLNG_ENT_NAME == null)
                        {
                            objFilingTransactionsEntity.FlngEntName = "";
                        }
                        else
                        {
                            objFilingTransactionsEntity.FlngEntName = Convert.ToString(item.FLNG_ENT_NAME);
                        }


                        objFilingTransactionsEntity.FlngEntFirstName = Convert.ToString(item.FLNG_ENT_FIRST_NAME);
                        objFilingTransactionsEntity.FlngEntMiddleName = Convert.ToString(item.FLNG_ENT_MIDDLE_NAME);
                        objFilingTransactionsEntity.FlngEntLastName = Convert.ToString(item.FLNG_ENT_LAST_NAME);
                        objFilingTransactionsEntity.FlngEntStrName = Convert.ToString(item.FLNG_ENT_STR_NAME);
                        objFilingTransactionsEntity.FlngEntCity = Convert.ToString(item.FLNG_ENT_CITY);
                        objFilingTransactionsEntity.FlngEntState = Convert.ToString(item.FLNG_ENT_STATE);
                        objFilingTransactionsEntity.FlngEntZip = Convert.ToString(item.FLNG_ENT_ZIP);
                        objFilingTransactionsEntity.FlngEntCountry = Convert.ToString(item.FLNG_ENT_COUNTRY);
                        objFilingTransactionsEntity.OrgAmt = String.Format("{0:0.00}", item.ORG_AMT);
                        if (item.LOAN_OTHER_ID == null)
                        {
                            objFilingTransactionsEntity.LoanOtherId = "";
                        }
                        else
                        {
                            objFilingTransactionsEntity.LoanOtherId = Convert.ToString(item.LOAN_OTHER_ID);
                        }

                        objFilingTransactionsEntity.FilingEntId = Convert.ToString(item.FLNG_ENT_ID);
                        objFilingTransactionsEntity.SchedDate = Convert.ToString(item.SCHED_DATE);
                        if (item.PAYMENT_TYPE_ID == null)
                        {
                            objFilingTransactionsEntity.PaymentTypeId = "";
                        }
                        else
                        {
                            objFilingTransactionsEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        }

                        if (item.PAY_NUMBER == null)
                        {
                            objFilingTransactionsEntity.PayNumber = "";
                        }
                        else
                        {
                            objFilingTransactionsEntity.PayNumber = Convert.ToString(item.PAY_NUMBER);
                        }

                        lstFilingTransactionsEntity.Add(objFilingTransactionsEntity);
                    }
                    return lstFilingTransactionsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Validate Scheduled J Amount
        /// </summary>
        /// <param name="filing_Trans_ID"></param>
        /// <returns></returns>
        public IList<GetSearchForScheduledI> ValidateSchedJ_Amount(string trans_Number, string status, string FilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetSearchForScheduledI> lstGetSearchForScheduledI = new List<GetSearchForScheduledI>();
                    GetSearchForScheduledI objGetSearchForScheduledI;

                    var results = entities.SP_S_Loan_Repayment_Amount_Validation(trans_Number, status,
                        string.IsNullOrEmpty(FilerID) ? (long?)null : Convert.ToInt64(FilerID));

                    foreach (var item in results)
                    {
                        objGetSearchForScheduledI = new GetSearchForScheduledI();
                        objGetSearchForScheduledI.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                        objGetSearchForScheduledI.Original_Amt = String.Format("{0:0.00}", item.ORIGINAL_AMOUNT);
                        if (item.ORG_DATE != null)
                        {
                            objGetSearchForScheduledI.Date = Convert.ToDateTime(item.ORG_DATE).ToString("MM/dd/yyyy");
                        }
                        else
                        {
                            objGetSearchForScheduledI.Date = "";
                        }

                        lstGetSearchForScheduledI.Add(objGetSearchForScheduledI);
                    }
                    return lstGetSearchForScheduledI;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<GetSearchForScheduledI> ValidateForUpdateScheJ(string filing_Trans_ID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetSearchForScheduledI> lstGetSearchForScheduledI = new List<GetSearchForScheduledI>();
                    GetSearchForScheduledI objGetSearchForScheduledI;

                    var results = entities.SP_S_Loan_Repayment_UpdateAmount_Validation(filing_Trans_ID);

                    foreach (var item in results)
                    {
                        objGetSearchForScheduledI = new GetSearchForScheduledI();
                        objGetSearchForScheduledI.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                        objGetSearchForScheduledI.Original_Amt = item.ORIGINAL_AMOUNT.ToString();
                        lstGetSearchForScheduledI.Add(objGetSearchForScheduledI);
                    }
                    return lstGetSearchForScheduledI;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public Boolean UpdateLoanRepaymentData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    if (objFilingTransactionsEntity.FilingSchedId == "10")
                    {
                        var returnValue = entities.SP_U_FilingTransaction_LoanRepayment(string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                objFilingTransactionsEntity.PayNumber,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.OtherAmount) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OtherAmount),
                                objFilingTransactionsEntity.TransExplanation,
                                objFilingTransactionsEntity.ModifiedBy,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                objFilingTransactionsEntity.FlngEntName,
                                objFilingTransactionsEntity.FlngEntFirstName,
                                objFilingTransactionsEntity.FlngEntMiddleName,
                                objFilingTransactionsEntity.FlngEntLastName,
                                objFilingTransactionsEntity.FlngEntStrName,
                                objFilingTransactionsEntity.FlngEntCity,
                                objFilingTransactionsEntity.FlngEntState,
                                objFilingTransactionsEntity.FlngEntZip,
                                objFilingTransactionsEntity.FlngEntCountry,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                                objFilingTransactionsEntity.Loan_Lib_Number,
                                objFilingTransactionsEntity.TransNumber,
                                objFilingTransactionsEntity.IsAmtChanged,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));
                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                    }
                    else
                    {
                        var returnValue = entities.SP_U_LiabilitiesLoans_LoanRepayment(string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTransId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingTransId),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                objFilingTransactionsEntity.PayNumber,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.OtherAmount) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OtherAmount),
                                objFilingTransactionsEntity.TransExplanation,
                                objFilingTransactionsEntity.OtherTransExplanation,
                                objFilingTransactionsEntity.ModifiedBy);

                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                    }
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Delete Loan Received Entry
        /// </summary>
        /// <param name="filing_Trans_ID"></param>
        /// <param name="modify_By"></param>
        /// <returns></returns>
        public Boolean DeleteLoanReceived(String transNumber, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_LoanReceived(transNumber, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }


        /// <summary>
        /// Delete Loan Repayment Entry
        /// </summary>
        /// <param name="filing_Trans_ID"></param>
        /// <param name="modify_By"></param>
        /// <returns></returns>
        public Boolean DeleteLoanRepayment(String loan_Lib_Number, String transNumber, String modify_By, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_LoanRepayment(loan_Lib_Number, transNumber, modify_By, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<FilingTransactionDataEntity> GetFilingTransactionsForScheduledIJN(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    if (objFilingTransDataEntity.SchedName == "LoanRepayment")
                    {
                        var results = entities.SP_S_GetLoanReceived_LoanRepayment(objFilingTransDataEntity.Loan_Lib_Num, string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId));
                        foreach (var item in results)
                        {
                            objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                            objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                            objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                            objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                            objFilingTransactionDataEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                            objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                            if (item.SCHED_DATE != "")
                                objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.SchedDate = "";
                            objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                            objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                            objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                            objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                            objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                            objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                            objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                            objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                            objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                            objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                            objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                            objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                            objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                            objFilingTransactionDataEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_ABBREV;
                            objFilingTransactionDataEntity.TransferTypeDesc = item.TRANSFER_TYPE_ABBREV;
                            objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                            objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_ABBREV;
                            objFilingTransactionDataEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                            objFilingTransactionDataEntity.ReceiptCodeId = item.RECEIPT_CODE_ID;
                            objFilingTransactionDataEntity.RLiability = item.R_LIABILITY;
                            objFilingTransactionDataEntity.RSubcontractor = item.R_SUBCONTRACTOR;
                            if (item.ORG_DATE != "")
                                objFilingTransactionDataEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.OriginalDate = "";
                            objFilingTransactionDataEntity.LoanerCode = item.LOAN_OTHER_DESC;
                            objFilingTransactionDataEntity.ElectionYear = item.ELECTION_YEAR;
                            objFilingTransactionDataEntity.Office = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.District = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                            objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objFilingTransactionDataEntity.RItemized = item.R_ITEMIZED;
                            objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                            lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                        }
                    }
                    else if (objFilingTransDataEntity.SchedName == "LoanLiabilities")
                    {
                        var results = entities.SP_S_GetLoanReceived_OutStandingLiabilities(objFilingTransDataEntity.Loan_Lib_Num, string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId));
                        foreach (var item in results)
                        {
                            objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                            objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                            objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                            objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                            objFilingTransactionDataEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                            objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                            if (item.SCHED_DATE != "")
                                objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.SchedDate = "";
                            objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                            objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                            objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                            objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                            objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                            objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                            objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                            objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                            objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                            objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                            objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                            objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                            objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                            objFilingTransactionDataEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_ABBREV;
                            objFilingTransactionDataEntity.TransferTypeDesc = item.TRANSFER_TYPE_ABBREV;
                            objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                            objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_ABBREV;
                            objFilingTransactionDataEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                            objFilingTransactionDataEntity.ReceiptCodeId = item.RECEIPT_CODE_ID;
                            objFilingTransactionDataEntity.RLiability = item.R_LIABILITY;
                            objFilingTransactionDataEntity.RSubcontractor = item.R_SUBCONTRACTOR;
                            if (item.ORG_DATE != "")
                                objFilingTransactionDataEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.OriginalDate = "";
                            objFilingTransactionDataEntity.LoanerCode = item.LOAN_OTHER_DESC;
                            objFilingTransactionDataEntity.ElectionYear = item.ELECTION_YEAR;
                            objFilingTransactionDataEntity.Office = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.District = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                            objFilingTransactionDataEntity.RItemized = item.R_ITEMIZED;
                            objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                            lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                        }
                    }
                    else if (objFilingTransDataEntity.SchedName == "LoanReceived")
                    {
                        var results = entities.SP_S_GetLoanRepayment_LoanReceived(objFilingTransDataEntity.Loan_Lib_Num, string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId));
                        foreach (var item in results)
                        {
                            objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                            objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                            objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                            objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                            objFilingTransactionDataEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                            objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                            if (item.SCHED_DATE != "")
                                objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.SchedDate = "";
                            objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                            objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                            objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                            objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                            objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                            objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                            objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                            objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                            objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                            objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                            objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                            objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                            objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                            objFilingTransactionDataEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_ABBREV;
                            objFilingTransactionDataEntity.TransferTypeDesc = item.TRANSFER_TYPE_ABBREV;
                            objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                            objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_ABBREV;
                            objFilingTransactionDataEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                            objFilingTransactionDataEntity.ReceiptCodeId = item.RECEIPT_CODE_ID;
                            objFilingTransactionDataEntity.RLiability = item.R_LIABILITY;
                            objFilingTransactionDataEntity.RSubcontractor = item.R_SUBCONTRACTOR;
                            if (item.ORG_DATE != "")
                                objFilingTransactionDataEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.OriginalDate = "";
                            objFilingTransactionDataEntity.LoanerCode = item.LOAN_OTHER_DESC;
                            objFilingTransactionDataEntity.ElectionYear = item.ELECTION_YEAR;
                            objFilingTransactionDataEntity.Office = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.District = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                            objFilingTransactionDataEntity.RItemized = item.R_ITEMIZED;
                            objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                            lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                        }
                    }
                    else if (objFilingTransDataEntity.SchedName == "LoanForgiven")
                    {
                        var results = entities.SP_S_GetLoanReceived_LoanForgiven(objFilingTransDataEntity.Loan_Lib_Num, string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId));
                        foreach (var item in results)
                        {
                            objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                            objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                            objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                            objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                            objFilingTransactionDataEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                            objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                            if (item.SCHED_DATE != "")
                                objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.SchedDate = "";
                            objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                            objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                            objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                            objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                            objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                            objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                            objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                            objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                            objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                            objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                            objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                            objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                            objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                            objFilingTransactionDataEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_ABBREV;
                            objFilingTransactionDataEntity.TransferTypeDesc = item.TRANSFER_TYPE_ABBREV;
                            objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                            objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_ABBREV;
                            objFilingTransactionDataEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                            objFilingTransactionDataEntity.ReceiptCodeId = item.RECEIPT_CODE_ID;
                            objFilingTransactionDataEntity.RLiability = item.R_LIABILITY;
                            objFilingTransactionDataEntity.RSubcontractor = item.R_SUBCONTRACTOR;
                            if (item.ORG_DATE != "")
                                objFilingTransactionDataEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                            else
                                objFilingTransactionDataEntity.OriginalDate = "";
                            objFilingTransactionDataEntity.LoanerCode = item.LOAN_OTHER_DESC;
                            objFilingTransactionDataEntity.ElectionYear = item.ELECTION_YEAR;
                            objFilingTransactionDataEntity.Office = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.District = item.DIST_OFF_CAND_BAL_PROP;
                            objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                            objFilingTransactionDataEntity.RItemized = item.R_ITEMIZED;
                            objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                            lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                        }
                    }
                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateFilingTransExpReimbursmentData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateFilingTransExpReimbursmentData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FlngTransExpReimbursementSchedF(objFilingTransactionsEntity.TransNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.CreatedBy,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// DeleteFlngTransReimbursementDataSchedF
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strFilingTransMapping"></param>
        /// <param name="strModififedBy"></param>
        /// <returns></returns>
        public Boolean DeleteFlngTransReimbursementDataSchedF(String strTransNumber, String strModififedBy, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_FlngTransReimbursementData(strTransNumber, strModififedBy, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddFilingTransNonCompaignHKExpensesData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public String AddFilingTransNonCompaignHKExpensesData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    ObjectParameter objReturnValue = new ObjectParameter("RETURN_TRANS_IDENTITY", typeof(int));
                    String strReturnValue = String.Empty;

                    var returnValue = entities.SP_I_FlngTransNonCompHKExpensesSchedQ(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        objFilingTransactionsEntity.PayNumber,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.RItemized,
                        objFilingTransactionsEntity.CreatedBy,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objReturnValue);

                    strReturnValue = Convert.ToString(objReturnValue.Value);
                    return strReturnValue;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetNCHKExpensesReimbursementData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionsEntity> GetNCHKExpensesReimbursementData(String strFilingTransId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionsEntity> lstFilingTransactionsEntity = new List<FilingTransactionsEntity>();
                    FilingTransactionsEntity objFilingTransactionsEntity;

                    var results = entities.SP_S_GetNCHKExpensesReimbursementData(string.IsNullOrEmpty(strFilingTransId) ? (long?)null : Convert.ToInt64(strFilingTransId));

                    foreach (var item in results)
                    {
                        objFilingTransactionsEntity = new FilingTransactionsEntity();
                        objFilingTransactionsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionsEntity.FilingEntId = Convert.ToString(item.FLNG_ENT_ID);
                        objFilingTransactionsEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objFilingTransactionsEntity.SchedDate = item.SCHED_DATE;
                        if (item.R_ITEMIZED == "N")
                            objFilingTransactionsEntity.FlngEntName = "";
                        else
                            objFilingTransactionsEntity.FlngEntName = item.FLNG_ENT_NAME;
                        objFilingTransactionsEntity.FlngEntCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionsEntity.FlngEntStrName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionsEntity.FlngEntCity = item.FLNG_ENT_CITY;
                        objFilingTransactionsEntity.FlngEntState = item.FLNG_ENT_STATE;
                        objFilingTransactionsEntity.FlngEntZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionsEntity.OrgAmt = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionsEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objFilingTransactionsEntity.RItemized = item.R_ITEMIZED;
                        objFilingTransactionsEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        lstFilingTransactionsEntity.Add(objFilingTransactionsEntity);
                    }

                    return lstFilingTransactionsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateNonCompaignHKExpensesSchedQData
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateNonCompaignHKExpensesSchedQData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FilingTransaction_NonCompHKExpenses(objFilingTransactionsEntity.TransNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    objFilingTransactionsEntity.PayNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.ModifiedBy,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                        if (returnValue >= 1)
                            return true;
                        else
                            return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }


        /// <summary>
        /// Update Outstanding Loans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateOutStandingLoansData(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FilingTransaction_OutstandingLoans(string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTransId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingTransId),
                        objFilingTransactionsEntity.TransExplanation,
                        objFilingTransactionsEntity.OtherTransExplanation,
                        objFilingTransactionsEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Check Scheduled for Outstanding Loans
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionsEntity> CheckOutstandingScheduled(String strFilingTransId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionsEntity> lstFilingTransactionsEntity = new List<FilingTransactionsEntity>();
                    FilingTransactionsEntity objFilingTransactionsEntity;

                    var results = entities.SP_S_GetOutstanding_SchedI_SchedJ(string.IsNullOrEmpty(strFilingTransId) ? (long?)null : Convert.ToInt64(strFilingTransId));

                    foreach (var item in results)
                    {
                        objFilingTransactionsEntity = new FilingTransactionsEntity();
                        objFilingTransactionsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        lstFilingTransactionsEntity.Add(objFilingTransactionsEntity);
                    }

                    return lstFilingTransactionsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Validate Loan Received Amount
        /// </summary>
        /// <param name="filing_Trans_ID"></param>
        /// <returns></returns>
        public IList<GetSearchForScheduledI> ValidateSchedI_UpdateAmount(string trans_Number, string FilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetSearchForScheduledI> lstGetSearchForScheduledI = new List<GetSearchForScheduledI>();
                    GetSearchForScheduledI objGetSearchForScheduledI;

                    var results = entities.SP_S_Loan_Received_UpdateAmount_Validation(trans_Number,
                        string.IsNullOrEmpty(FilerID) ? (long?)null : Convert.ToInt64(FilerID));

                    foreach (var item in results)
                    {
                        objGetSearchForScheduledI = new GetSearchForScheduledI();
                        objGetSearchForScheduledI.Amount = String.Format("{0:0.00}", item.OWED_AMT);
                        lstGetSearchForScheduledI.Add(objGetSearchForScheduledI);
                    }
                    return lstGetSearchForScheduledI;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetExpLiabilityOwedAmt
        /// </summary>
        /// <param name="strFlngEntityId"></param>
        /// <returns></returns>
        public String GetExpLiabilityOwedAmt(String strFlngEntityId, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExpLiabilityOwedAmt = String.Empty;

                    var results = entities.SP_S_GetExpLiabilityOwedAmt(string.IsNullOrEmpty(strFlngEntityId) ? (long?)null : Convert.ToInt64(strFlngEntityId), string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        if (item != null)
                            strExpLiabilityOwedAmt = String.Format("{0:0.00}", item.Value);
                        else
                            strExpLiabilityOwedAmt = "0";
                    }

                    return strExpLiabilityOwedAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetExpSubContrTotAmt
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public String GetExpSubContrTotAmt(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExpSubContrTotAmt = String.Empty;

                    var results = entities.SP_S_GetExpSubContrAmtTot(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        if (item != null)
                            strExpSubContrTotAmt = String.Format("{0:0.00}", item.Value);
                        else
                            strExpSubContrTotAmt = "";
                    }

                    return strExpSubContrTotAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOutstandingLiabilityAmount
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <param name="strUpdateStatus"></param>
        /// <returns></returns>
        public String GetOutstandingLiabilityAmount(String strFilingEntityId, String strFlngTransId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strOutstandingLiablityAmount = String.Empty;

                    var results = entities.SP_S_GetOutstandingLiabilityAmount(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), string.IsNullOrEmpty(strFlngTransId) ? (long?)null : Convert.ToInt64(strFlngTransId));

                    foreach (var item in results)
                    {
                        if (item != null)
                            strOutstandingLiablityAmount = String.Format("{0:0.00}", item.Value);
                        else
                            strOutstandingLiablityAmount = "";
                    }

                    return strOutstandingLiablityAmount;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetExpPayTotalLiabAmount
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <param name="strFlngTransId"></param>
        /// <returns></returns>
        public String GetExpPayTotalLiabAmount(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExpPayTotalLiabAmount = String.Empty;

                    var results = entities.SP_S_GetExpPaymentsTotalLiabAmount(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        if (item != null)
                            strExpPayTotalLiabAmount = String.Format("{0:0.00}", item.Value);
                        else
                            strExpPayTotalLiabAmount = "";
                    }

                    return strExpPayTotalLiabAmount;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Add Loan Forgiven
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddFilingTransaction_LoanForgiven(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTransaction_LoanForgiven(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OtherFilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OtherFilingSchedId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OtherAmount) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OtherAmount),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                        objFilingTransactionsEntity.FlngEntFirstName,
                                                                        objFilingTransactionsEntity.FlngEntMiddleName,
                                                                        objFilingTransactionsEntity.FlngEntLastName,
                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                        objFilingTransactionsEntity.Loan_Lib_Number,
                                                                        objFilingTransactionsEntity.TransNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetContributorTypesSchedC
        /// </summary>
        /// <returns></returns>
        public IList<ContributorNameEntity> GetContributorTypesSchedC()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContributorNameEntity> lstContributorNameEntity = new List<ContributorNameEntity>();
                    ContributorNameEntity objContributorNameEntity;

                    var results = entities.SP_S_ContributorTypesSchedC();

                    foreach (var item in results)
                    {
                        objContributorNameEntity = new ContributorNameEntity();
                        objContributorNameEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objContributorNameEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objContributorNameEntity.ContributorTypeAbbrev = item.CNTRBR_TYPE_ABBREV;
                        lstContributorNameEntity.Add(objContributorNameEntity);
                    }

                    return lstContributorNameEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }


        /// <summary>
        /// Delete Loan Forgiven Record
        /// </summary>
        /// <param name="filing_Trans_ID"></param>
        /// <param name="modify_By"></param>
        /// <returns></returns>
        public Boolean DeleteLoanForgiven(String loan_Lib_Number, String transNumber, String modify_By, String strLiability, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = 0;
                    if (strLiability == "Y")
                    {
                        returnValue = entities.SP_D_LiabilityForgiven(loan_Lib_Number, transNumber, modify_By, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));
                    }
                    else
                    {
                        returnValue = entities.SP_D_LoanForgiven(loan_Lib_Number, transNumber, modify_By, string.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));
                    }

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetPurposeCodeReimburDetailsData
        /// </summary>
        /// <returns></returns>
        public IList<PurposeCodeEntity> GetPurposeCodeReimburDetailsData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCodeReimburDetails();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }


        /// <summary>
        /// Add Authorized To Sign Check Entry
        /// </summary>
        /// <param name="objAuthorizedToSignCheckEntity"></param>
        /// <returns></returns>
        public Boolean AddAuthorizedToSignCheck(AuthorizedToSignCheckEntity objAuthorizedToSignCheckEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_Trea_AuthorizedToSignCheck(string.IsNullOrEmpty(objAuthorizedToSignCheckEntity.CommID) ? (long?)null : Convert.ToInt64(objAuthorizedToSignCheckEntity.CommID),
                                string.IsNullOrEmpty(objAuthorizedToSignCheckEntity.StartDate) ? (DateTime?)null : Convert.ToDateTime(objAuthorizedToSignCheckEntity.StartDate), objAuthorizedToSignCheckEntity.Status, string.IsNullOrEmpty(objAuthorizedToSignCheckEntity.EndDate) ? (DateTime?)null : Convert.ToDateTime(objAuthorizedToSignCheckEntity.EndDate),
                                objAuthorizedToSignCheckEntity.Prefix, objAuthorizedToSignCheckEntity.FirstName, objAuthorizedToSignCheckEntity.MiddleName,
                                objAuthorizedToSignCheckEntity.LastName, objAuthorizedToSignCheckEntity.Suffix, objAuthorizedToSignCheckEntity.Signature,
                                objAuthorizedToSignCheckEntity.CreatedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetPurposeCodeSubcontractorSchedF
        /// </summary>
        /// <returns></returns>
        public IList<PurposeCodeEntity> GetPurposeCodeSubcontractorSchedF()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCodeSubcontractorSchedF();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetPurposeCodeCreditCardItemSchedF
        /// </summary>
        /// <returns></returns>
        public IList<PurposeCodeEntity> GetPurposeCodeCreditCardItemSchedF()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCodeCreditCardItem();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetExpPayTransIdPopUpSchedF
        /// </summary>
        /// <returns></returns>
        public IList<ExpPaymentTransIdPopUpSchedFEntity> GetExpPayTransIdPopUpSchedF(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentTransIdPopUpSchedFEntity> lstExpPaymentTransIdPopUpSchedFEntity = new List<ExpPaymentTransIdPopUpSchedFEntity>();
                    ExpPaymentTransIdPopUpSchedFEntity objExpPaymentTransIdPopUpSchedFEntity;

                    var results = entities.SP_S_ExpPaymentsTransIdPopUpSchedF(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objExpPaymentTransIdPopUpSchedFEntity = new ExpPaymentTransIdPopUpSchedFEntity();
                        objExpPaymentTransIdPopUpSchedFEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objExpPaymentTransIdPopUpSchedFEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objExpPaymentTransIdPopUpSchedFEntity.ScheduleDate = item.SCHED_DATE;
                        objExpPaymentTransIdPopUpSchedFEntity.OrgAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        lstExpPaymentTransIdPopUpSchedFEntity.Add(objExpPaymentTransIdPopUpSchedFEntity);
                    }

                    return lstExpPaymentTransIdPopUpSchedFEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Add Loan Forgiven Liabilities
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddFilingTransaction_LoanForgiven_Liabiliites(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTransaction_LoanForgiven_Liabilities(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                        objFilingTransactionsEntity.RLiabilityExists,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        objFilingTransactionsEntity.FlngEntName,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                        objFilingTransactionsEntity.FlngEntStrName,
                                                                        objFilingTransactionsEntity.FlngEntCity,
                                                                        objFilingTransactionsEntity.FlngEntState,
                                                                        objFilingTransactionsEntity.FlngEntZip,
                                                                        objFilingTransactionsEntity.FlngEntCountry,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OtherAmount) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OtherAmount),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                        objFilingTransactionsEntity.CreatedBy,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                        objFilingTransactionsEntity.TransNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    return true;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetDateIncurredLiabUpdateData
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public IList<DateIncurredEntity> GetDateIncurredLiabUpdateData(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DateIncurredEntity> lstDateIncurredEntity = new List<DateIncurredEntity>();
                    DateIncurredEntity objDateIncurredEntity;

                    var results = entities.SP_S_DateInccuredLiabilityUpdate(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objDateIncurredEntity = new DateIncurredEntity();
                        objDateIncurredEntity.DateIncurredId = Convert.ToString(item.TRANS_NUMBER);
                        objDateIncurredEntity.DateIncurredValue = item.SCHED_DATE;
                        objDateIncurredEntity.AmountLiability = String.Format("{0:0.00}", item.ORG_AMT);
                        lstDateIncurredEntity.Add(objDateIncurredEntity);
                    }
                    return lstDateIncurredEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        // Add Other Receipts Received Transaction Data.
        /// <summary>
        /// AddOtherReceivedReceiptsSchedE
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddOtherReceivedReceiptsSchedE(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FlngTransOtherReceiptsReceivedSchedE(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                objFilingTransactionsEntity.FlngEntName,
                objFilingTransactionsEntity.FlngEntCountry,
                objFilingTransactionsEntity.FlngEntStrName,
                objFilingTransactionsEntity.FlngEntCity,
                objFilingTransactionsEntity.FlngEntState,
                objFilingTransactionsEntity.FlngEntZip,
                string.IsNullOrEmpty(objFilingTransactionsEntity.ReceiptTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ReceiptTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                objFilingTransactionsEntity.PayNumber,
                string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                objFilingTransactionsEntity.TransExplanation,
                objFilingTransactionsEntity.RItemized,
                string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                objFilingTransactionsEntity.CreatedBy,
                string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        // Update Other Receipts Received Transactions.
        /// <summary>
        /// UpdateOtherReceiptsReceivedSchedE
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateOtherReceiptsReceivedSchedE(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FlngTransOtherReceiptsReceivedSchedE(objFilingTransactionsEntity.TransNumber,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                objFilingTransactionsEntity.FlngEntName,
                                objFilingTransactionsEntity.FlngEntCountry,
                                objFilingTransactionsEntity.FlngEntStrName,
                                objFilingTransactionsEntity.FlngEntCity,
                                objFilingTransactionsEntity.FlngEntState,
                                objFilingTransactionsEntity.FlngEntZip,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.ReceiptTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ReceiptTypeId),
                                string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                objFilingTransactionsEntity.PayNumber,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                objFilingTransactionsEntity.TransExplanation,
                                objFilingTransactionsEntity.RItemized,
                                objFilingTransactionsEntity.ModifiedBy,
                                string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOriginalName
        /// </summary>
        /// <returns></returns>
        public IList<ExpPaymentOriginalNameEntity> GetOriginalName(String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalNameEntity> lstExpPaymentOriginalNameEntity = new List<ExpPaymentOriginalNameEntity>();
                    ExpPaymentOriginalNameEntity objExpPaymentOriginalNameEntity;

                    var results = entities.SP_S_ExpPaymentOrginalName(string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalNameEntity = new ExpPaymentOriginalNameEntity();
                        objExpPaymentOriginalNameEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                        objExpPaymentOriginalNameEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        lstExpPaymentOriginalNameEntity.Add(objExpPaymentOriginalNameEntity);
                    }

                    return lstExpPaymentOriginalNameEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOriginalAmount
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public IList<ExpPaymentOriginalAmountEntity> GetOriginalAmount(String strFilingEntityId, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalAmountEntity> lstExpPaymentOriginalAmountEntity = new List<ExpPaymentOriginalAmountEntity>();
                    ExpPaymentOriginalAmountEntity objExpPaymentOriginalAmountEntity;

                    var results = entities.SP_S_ExpPaymentOrginalAmount(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalAmountEntity = new ExpPaymentOriginalAmountEntity();
                        objExpPaymentOriginalAmountEntity.TransNumber = item.TRANS_NUMBER;
                        objExpPaymentOriginalAmountEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        lstExpPaymentOriginalAmountEntity.Add(objExpPaymentOriginalAmountEntity);
                    }

                    return lstExpPaymentOriginalAmountEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOriginalExpeseDate
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<ExpPaymentOriginalExpenseDateEntity> GetOriginalExpeseDate(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalExpenseDateEntity> lstExpPaymentOriginalExpenseDateEntity = new List<ExpPaymentOriginalExpenseDateEntity>();
                    ExpPaymentOriginalExpenseDateEntity objExpPaymentOriginalExpenseDateEntity;

                    var results = entities.SP_S_ExpPaymentOrginalExpenseDate(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalExpenseDateEntity = new ExpPaymentOriginalExpenseDateEntity();
                        objExpPaymentOriginalExpenseDateEntity.TransNumber = item.TRANS_NUMBER;
                        objExpPaymentOriginalExpenseDateEntity.OriginalExpenseDate = item.SCHED_DATE;
                        lstExpPaymentOriginalExpenseDateEntity.Add(objExpPaymentOriginalExpenseDateEntity);
                    }

                    return lstExpPaymentOriginalExpenseDateEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddExpenditureRefundedSchedL
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddExpenditureRefundsSchedL(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FlngTransExpenditureRefundsSchedL(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                    objFilingTransactionsEntity.TransNumberOrg,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    objFilingTransactionsEntity.PayNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                    objFilingTransactionsEntity.CreatedBy,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOutstaningAmtExpRefunded
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public String GetOutstaningAmtExpRefunded(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strOutstaningExpRefundedAmt = String.Empty;

                    var results = entities.SP_S_OutstandingAmtRefundedSchedL(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        if (item != null)
                            strOutstaningExpRefundedAmt = String.Format("{0:0.00}", item.Value);
                    }

                    return strOutstaningExpRefundedAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateExpenditureRefundedSchedL
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateExpenditureRefundedSchedL(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FlngTransExpenditureRefundedSchedL(objFilingTransactionsEntity.TransNumber,
                                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                    objFilingTransactionsEntity.FlngEntName,
                                                    objFilingTransactionsEntity.FlngEntCountry,
                                                    objFilingTransactionsEntity.FlngEntStrName,
                                                    objFilingTransactionsEntity.FlngEntCity,
                                                    objFilingTransactionsEntity.FlngEntState,
                                                    objFilingTransactionsEntity.FlngEntZip,
                                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                    objFilingTransactionsEntity.PayNumber,
                                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                    objFilingTransactionsEntity.TransExplanation,
                                                    objFilingTransactionsEntity.ModifiedBy,
                                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOriginalAmtRefundedSchedL
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<ExpPaymentOriginalAmountEntity> GetOriginalAmtRefundedSchedL(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalAmountEntity> lstExpPaymentOriginalAmountEntity = new List<ExpPaymentOriginalAmountEntity>();
                    ExpPaymentOriginalAmountEntity objExpPaymentOriginalAmountEntity;

                    var results = entities.SP_S_OriginalAmtRefundedSchedL(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalAmountEntity = new ExpPaymentOriginalAmountEntity();
                        objExpPaymentOriginalAmountEntity.TransNumber = item.TRANS_NUMBER;
                        objExpPaymentOriginalAmountEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        lstExpPaymentOriginalAmountEntity.Add(objExpPaymentOriginalAmountEntity);
                    }

                    return lstExpPaymentOriginalAmountEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetContributorOriginalName
        /// </summary>
        /// <returns></returns>
        public IList<ExpPaymentOriginalNameEntity> GetContributorOriginalName(String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalNameEntity> lstExpPaymentOriginalNameEntity = new List<ExpPaymentOriginalNameEntity>();
                    ExpPaymentOriginalNameEntity objExpPaymentOriginalNameEntity;

                    var results = entities.SP_S_ContrbutorOrginalName(string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalNameEntity = new ExpPaymentOriginalNameEntity();
                        objExpPaymentOriginalNameEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                        objExpPaymentOriginalNameEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        lstExpPaymentOriginalNameEntity.Add(objExpPaymentOriginalNameEntity);
                    }

                    return lstExpPaymentOriginalNameEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetContributorOriginalAmount
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public IList<ExpPaymentOriginalAmountEntity> GetContributorOriginalAmount(String strFilingEntityId, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalAmountEntity> lstExpPaymentOriginalAmountEntity = new List<ExpPaymentOriginalAmountEntity>();
                    ExpPaymentOriginalAmountEntity objExpPaymentOriginalAmountEntity;

                    var results = entities.SP_S_ContributorOrginalAmount(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalAmountEntity = new ExpPaymentOriginalAmountEntity();
                        objExpPaymentOriginalAmountEntity.TransNumber = item.TRANS_NUMBER;
                        objExpPaymentOriginalAmountEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        lstExpPaymentOriginalAmountEntity.Add(objExpPaymentOriginalAmountEntity);
                    }

                    return lstExpPaymentOriginalAmountEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetContributorOriginalContributionDate
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<ExpPaymentOriginalExpenseDateEntity> GetContributorOriginalContributionDate(String strFilingEntityId, String strOriginalAmt, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalExpenseDateEntity> lstExpPaymentOriginalExpenseDateEntity = new List<ExpPaymentOriginalExpenseDateEntity>();
                    ExpPaymentOriginalExpenseDateEntity objExpPaymentOriginalExpenseDateEntity;

                    var results = entities.SP_S_ContributorOrginalContributionDate(string.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId),
                                                                                    string.IsNullOrEmpty(strOriginalAmt) ? (double?)null : Convert.ToDouble(strOriginalAmt),
                                                                                    string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalExpenseDateEntity = new ExpPaymentOriginalExpenseDateEntity();
                        objExpPaymentOriginalExpenseDateEntity.TransNumber = item.TRANS_NUMBER;
                        objExpPaymentOriginalExpenseDateEntity.OriginalExpenseDate = item.SCHED_DATE;
                        lstExpPaymentOriginalExpenseDateEntity.Add(objExpPaymentOriginalExpenseDateEntity);
                    }

                    return lstExpPaymentOriginalExpenseDateEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOutstaningAmtContrRefunded
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public String GetOutstaningAmtContrRefunded(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strOutstaningExpRefundedAmt = String.Empty;

                    var results = entities.SP_S_OutstandingAmtRefundedSchedM(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        if (item != null)
                            strOutstaningExpRefundedAmt = String.Format("{0:0.00}", item.Value);
                    }

                    return strOutstaningExpRefundedAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOriginalAmtRefundedSchedM
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<ExpPaymentOriginalAmountEntity> GetOriginalAmtRefundedSchedM(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpPaymentOriginalAmountEntity> lstExpPaymentOriginalAmountEntity = new List<ExpPaymentOriginalAmountEntity>();
                    ExpPaymentOriginalAmountEntity objExpPaymentOriginalAmountEntity;

                    var results = entities.SP_S_OriginalAmtRefundedSchedM(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objExpPaymentOriginalAmountEntity = new ExpPaymentOriginalAmountEntity();
                        objExpPaymentOriginalAmountEntity.TransNumber = item.TRANS_NUMBER;
                        objExpPaymentOriginalAmountEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        lstExpPaymentOriginalAmountEntity.Add(objExpPaymentOriginalAmountEntity);
                    }

                    return lstExpPaymentOriginalAmountEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddContributionsRefundedSchedM
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddContributionsRefundedSchedM(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FlngTransContributionsRefundedSchedM(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                                    objFilingTransactionsEntity.TransNumberOrg,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                    objFilingTransactionsEntity.FlngEntName,
                                    objFilingTransactionsEntity.FlngEntCountry,
                                    objFilingTransactionsEntity.FlngEntStrName,
                                    objFilingTransactionsEntity.FlngEntCity,
                                    objFilingTransactionsEntity.FlngEntState,
                                    objFilingTransactionsEntity.FlngEntZip,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                    objFilingTransactionsEntity.PayNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                    objFilingTransactionsEntity.TransExplanation,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                    objFilingTransactionsEntity.CreatedBy,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID));

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }

            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateContributionsRefundedSchedM
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateContributionsRefundedSchedM(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FlngTransContributionsRefundedSchedM(objFilingTransactionsEntity.TransNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    objFilingTransactionsEntity.PayNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    objFilingTransactionsEntity.ModifiedBy,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddOutstandingLiabilitySchedN
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddOutstandingLiabilitySchedN(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FlngTransOutstandingLiabilitySchedN(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTransId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingTransId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                    objFilingTransactionsEntity.FlngEntName,
                                    objFilingTransactionsEntity.FlngEntStrName,
                                    objFilingTransactionsEntity.FlngEntCity,
                                    objFilingTransactionsEntity.FlngEntState,
                                    objFilingTransactionsEntity.FlngEntZip,
                                    objFilingTransactionsEntity.FlngEntCountry,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                    objFilingTransactionsEntity.PayNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                                    objFilingTransactionsEntity.TransExplanation,
                                    objFilingTransactionsEntity.CreatedBy,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                                    objFilingTransactionsEntity.RIESupported);

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateOutstandingLiabilitySchedN
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateOutstandingLiabilitySchedN(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FlngTransOutstandingLiabilitySchedN(objFilingTransactionsEntity.TransNumber,
                                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                            objFilingTransactionsEntity.FlngEntName,
                                                                            objFilingTransactionsEntity.FlngEntStrName,
                                                                            objFilingTransactionsEntity.FlngEntCity,
                                                                            objFilingTransactionsEntity.FlngEntState,
                                                                            objFilingTransactionsEntity.FlngEntZip,
                                                                            objFilingTransactionsEntity.FlngEntCountry,
                                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                                                                            objFilingTransactionsEntity.PayNumber,
                                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                                                                            objFilingTransactionsEntity.TransExplanation,
                                                                            objFilingTransactionsEntity.ModifiedBy,
                                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                            objFilingTransactionsEntity.RIESupported);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// OutstandingLiabilityChildExists
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public String OutstandingLiabilityChildExists(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExists = String.Empty;

                    var results = entities.SP_S_OutstandingLiabilityExistsSchedN(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        strExists = item.RETURN_VALUE.ToString();
                    }

                    return strExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// DeleteOutstandingLiabilitySchedN
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean DeleteOutstandingLiabilitySchedN(String strTransNumber, String strFilingsId, String strModifiedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = 0;
                    try
                    {
                        returnValue = entities.SP_D_OutstandingLiabilitySchedN(strTransNumber, string.IsNullOrEmpty(strFilingsId) ? (long?)null : Convert.ToInt64(strFilingsId), strModifiedBy);
                    }
                    catch (Exception e)
                    {
                        returnValue = 0;
                    }

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetEditTransactionData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetEditTransactionData(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_EditFilingTransactionData(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objFilingTransactionDataEntity.LoanLiablityNumber = Convert.ToString(item.LOAN_LIB_NUMBER);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_ABBREV;
                        objFilingTransactionDataEntity.TransferTypeDesc = item.TRANSFER_TYPE_ABBREV;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_ABBREV;
                        objFilingTransactionDataEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                        objFilingTransactionDataEntity.ReceiptCodeId = item.RECEIPT_CODE_ID;
                        objFilingTransactionDataEntity.RLiability = item.R_LIABILITY;
                        objFilingTransactionDataEntity.RSubcontractor = item.R_SUBCONTRACTOR;
                        if (item.ORG_DATE != "")
                            objFilingTransactionDataEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.OriginalDate = "";
                        objFilingTransactionDataEntity.LoanerCode = item.R_BANK_LOAN;
                        objFilingTransactionDataEntity.ElectionYear = item.ELECTION_YEAR;
                        objFilingTransactionDataEntity.Office = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.District = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.LoanerCodeId = item.LOANER_CODE_ID.ToString();
                        objFilingTransactionDataEntity.LoanerCode = item.LOAN_OTHER_DESC;
                        objFilingTransactionDataEntity.Office = Convert.ToString(item.OFFICE_ID);
                        objFilingTransactionDataEntity.District = item.DISTRICT;
                        objFilingTransactionDataEntity.CountyID = Convert.ToString(item.COUNTY_ID);
                        objFilingTransactionDataEntity.CountyDesc = item.CNTY_DESC;
                        objFilingTransactionDataEntity.MunicipalityID = Convert.ToString(item.MUNICIPALITY_ID);
                        objFilingTransactionDataEntity.MunicipalityDesc = item.MUNICIPALITY_DESC;
                        objFilingTransactionDataEntity.Original_Sched_Date = item.ORIGINAL_SCHED_DATE;
                        if (item.R_CLAIM == "Y")
                        {
                            objFilingTransactionDataEntity.RClaim = "Yes";
                        }
                        else if (item.R_CLAIM == "N")
                        {
                            objFilingTransactionDataEntity.RClaim = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RClaim = "";
                        }

                        if (item.R_IN_DISTRICT == "Y")
                        {
                            objFilingTransactionDataEntity.InDistrict = "Yes";
                        }
                        else if (item.R_IN_DISTRICT == "N")
                        {
                            objFilingTransactionDataEntity.InDistrict = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.InDistrict = "";
                        }

                        if (item.R_MINOR == "Y")
                        {
                            objFilingTransactionDataEntity.RMinor = "Yes";
                        }
                        else if (item.R_MINOR == "N")
                        {
                            objFilingTransactionDataEntity.RMinor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RMinor = "";
                        }

                        if (item.R_VENDOR == "Y")
                        {
                            objFilingTransactionDataEntity.RVendor = "Yes";
                        }
                        else if (item.R_VENDOR == "N")
                        {
                            objFilingTransactionDataEntity.RVendor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RVendor = "";
                        }

                        if (item.R_LOBBYIST == "Y")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "Yes";
                        }
                        else if (item.R_LOBBYIST == "N")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RLobbyist = "";
                        }

                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objFilingTransactionDataEntity.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objFilingTransactionDataEntity.RContributions = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RContributions = "";
                        }

                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreaAddress = item.TREAS_ADDRESS;
                        objFilingTransactionDataEntity.TreaAddr1 = item.TREAS_ADDR1;
                        objFilingTransactionDataEntity.TreaCity = item.TREAS_CITY;
                        objFilingTransactionDataEntity.TreaState = item.TREAS_STATE;
                        objFilingTransactionDataEntity.TreaZipCode = item.TREAS_ZIP;
                        objFilingTransactionDataEntity.RIESupported = item.R_IE_SUPPORTED;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetOriginalAmountLiabData
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <returns></returns>
        public IList<OriginalAmountEntity> GetOutstandingAmountForForgiven(String strFilingTransId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OriginalAmountEntity> lstOriginalAmountContract = new List<OriginalAmountEntity>();
                    OriginalAmountEntity objOriginalAmountContract;

                    var results = entities.SP_S_GetOutstandingForLoanForgiven(string.IsNullOrEmpty(strFilingTransId) ? (long?)null : Convert.ToInt64(strFilingTransId));

                    foreach (var item in results)
                    {
                        objOriginalAmountContract = new OriginalAmountEntity();
                        objOriginalAmountContract.OriginalAmountId = Convert.ToString(item.FILING_TRANS_ID);
                        objOriginalAmountContract.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        lstOriginalAmountContract.Add(objOriginalAmountContract);
                    }
                    return lstOriginalAmountContract;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get and Authenticate value from Temp CAPASFIDAS Database
        /// </summary>
        /// <param name="filerID"></param>
        /// <param name="roleID"></param>
        /// <param name="userID"></param>
        /// <returns></returns>
        public IList<ValidateFilerInfo> GetAuthenticateFilerInfo(String userID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ValidateFilerInfo> lstValidateFilerInfo = new List<ValidateFilerInfo>();
                    ValidateFilerInfo objValidateFilerInfo;
                    var results = entities.SP_S_GetAuthorizedFiler(userID);

                    foreach (var item in results)
                    {
                        objValidateFilerInfo = new ValidateFilerInfo();
                        objValidateFilerInfo.FilerID = Convert.ToString(item.FilerID);
                        objValidateFilerInfo.RoleID = item.RoleID.ToString();
                        objValidateFilerInfo.Name = Convert.ToString(item.NAME);
                        lstValidateFilerInfo.Add(objValidateFilerInfo);
                    }
                    return lstValidateFilerInfo;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Add Amount Allocation Scheduled R
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddAmountAllocationSchedN(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTransaction_AmountAllocationScheR(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                    objFilingTransactionsEntity.FlngEntFirstName,
                                    objFilingTransactionsEntity.FlngEntMiddleName,
                                    objFilingTransactionsEntity.FlngEntLastName,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeID),
                                    objFilingTransactionsEntity.DistrictID,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                    objFilingTransactionsEntity.TransExplanation,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                    objFilingTransactionsEntity.CreatedBy,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                    objFilingTransactionsEntity.SupportOppose,
                                    objFilingTransactionsEntity.TransNumber);

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Update Amount Allocation Sched R
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateAmountAllocationSchedN(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FilingTransaction_AmountAllocationScheR(objFilingTransactionsEntity.TransNumber,
                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                            objFilingTransactionsEntity.TransExplanation,
                                                            objFilingTransactionsEntity.ModifiedBy,
                                                            string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                            objFilingTransactionsEntity.SupportOppose);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get All Amount for Amount Allocation Sched R
        /// </summary>
        /// <param name="filing_Ent_ID"></param>
        /// <param name="elect_Year"></param>
        /// <param name="municipalityID"></param>
        /// <param name="officeID"></param>
        /// <param name="distID"></param>
        /// <returns></returns>
        public String GetAllAmount(String filing_Ent_ID, String elect_Year, String municipalityID, String officeID, String distID, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strAmount = String.Empty;

                    var results = entities.SP_S_GetAllAmountAllocation(string.IsNullOrEmpty(filing_Ent_ID) ? (long?)null : Convert.ToInt64(filing_Ent_ID), elect_Year, string.IsNullOrEmpty(municipalityID) ? (int?)null : Convert.ToInt32(municipalityID), string.IsNullOrEmpty(officeID) ? (int?)null : Convert.ToInt32(officeID), distID, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        strAmount = item.AMOUNT.ToString();
                    }

                    return strAmount;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<DistrictEntity> GetDistrictsForOffice(String strOfficeID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DistrictEntity> listGetDistrictsEntity = new List<DistrictEntity>();
                    DistrictEntity objGetDistrictsEntity;
                    //data from stored procedure
                    var results = entities.SP_S_District(string.IsNullOrEmpty(strOfficeID) ? (int?)null : Convert.ToInt32(strOfficeID));

                    foreach (var item in results)
                    {
                        //create GetDistrictsEntity object
                        objGetDistrictsEntity = new DistrictEntity();
                        //modify object's attributes
                        objGetDistrictsEntity.District_ID = Convert.ToString(item.DIST_ID);
                        objGetDistrictsEntity.Parent_District_ID = Convert.ToString(item.PARENT_DISTRICT_ID);
                        //add object to list
                        listGetDistrictsEntity.Add(objGetDistrictsEntity);
                    }
                    return listGetDistrictsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public IList<OfficeEntity> GetOffices(String strMunicipalityID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OfficeEntity> listGetOfficeEntity = new List<OfficeEntity>();
                    OfficeEntity objGetOfficeEntity;
                    //data from stored procedure
                    var results = entities.SP_S_OfficeForSchedR(string.IsNullOrEmpty(strMunicipalityID) ? (int?)null : Convert.ToInt32(strMunicipalityID));

                    foreach (var item in results)
                    {
                        //create GetDistrictsEntity object
                        objGetOfficeEntity = new OfficeEntity();
                        //modify object's attributes
                        objGetOfficeEntity.OfficeId = Convert.ToString(item.OFFICE_ID);
                        objGetOfficeEntity.OfficeDesc = Convert.ToString(item.OFFICE_DESC);
                        //add object to list
                        listGetOfficeEntity.Add(objGetOfficeEntity);
                    }
                    return listGetOfficeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Auto Complete of Sched R
        /// </summary>
        /// <param name="name"></param>
        /// <param name="strFilerId"></param>
        /// <returns></returns>
        public IList<AutoCompleteSchedREntity> GetAutoCompleteSchedR(String name, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<AutoCompleteSchedREntity> lstAutoCompleteSchedREntity = new List<AutoCompleteSchedREntity>();
                    AutoCompleteSchedREntity objAutoCompleteSchedREntity;

                    var results = entities.SP_S_AutoCompleteSchedR(name, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objAutoCompleteSchedREntity = new AutoCompleteSchedREntity();
                        objAutoCompleteSchedREntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                        objAutoCompleteSchedREntity.EntityName = Convert.ToString(item.ENT_NAME);
                        objAutoCompleteSchedREntity.Org_Amt = Convert.ToString(item.ORG_AMT);
                        objAutoCompleteSchedREntity.FirstName = item.FLNG_ENT_FIRST_NAME;
                        objAutoCompleteSchedREntity.MiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objAutoCompleteSchedREntity.LastName = item.FLNG_ENT_LAST_NAME;
                        objAutoCompleteSchedREntity.ElectionYear = item.ELECTION_YEAR;
                        objAutoCompleteSchedREntity.Office_ID = Convert.ToString(item.OFFICE_ID);
                        objAutoCompleteSchedREntity.Dist_ID = Convert.ToString(item.DIST_ID);
                        lstAutoCompleteSchedREntity.Add(objAutoCompleteSchedREntity);
                    }

                    return lstAutoCompleteSchedREntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region GetOriginalLiabilityData GET ORIGINAL SCHEDULE 'N' TRANSACTIONS.
        /// <summary>
        /// GetOriginalLiabilityData
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public IList<LiabilityDetailsEntity> GetOriginalLiabilityData(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LiabilityDetailsEntity> lstLiabilityDetailsEntity = new List<LiabilityDetailsEntity>();
                    LiabilityDetailsEntity objLiabilityDetailsEntity;

                    var results = entities.SP_S_LiabilityOriginalSchedN(strTransNumber,
                        string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objLiabilityDetailsEntity = new LiabilityDetailsEntity();
                        objLiabilityDetailsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objLiabilityDetailsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objLiabilityDetailsEntity.ContributionType = item.CNTRBR_TYPE_DESC;
                        if (item.SCHED_DATE != "")
                            objLiabilityDetailsEntity.TransactionDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objLiabilityDetailsEntity.TransactionDate = "";
                        objLiabilityDetailsEntity.TransactionType = item.FILING_SCHED_DESC;
                        objLiabilityDetailsEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objLiabilityDetailsEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objLiabilityDetailsEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objLiabilityDetailsEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objLiabilityDetailsEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objLiabilityDetailsEntity.FilingCity = item.FLNG_ENT_CITY;
                        objLiabilityDetailsEntity.FilingState = item.FLNG_ENT_STATE;
                        objLiabilityDetailsEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objLiabilityDetailsEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objLiabilityDetailsEntity.PaymentType = item.PAYMENT_TYPE_DESC;
                        objLiabilityDetailsEntity.PayNumber = item.PAY_NUMBER;
                        objLiabilityDetailsEntity.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                        objLiabilityDetailsEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        objLiabilityDetailsEntity.RecieptType = item.RECEIPT_TYPE_ABBREV;
                        objLiabilityDetailsEntity.TransferType = item.TRANSFER_TYPE_ABBREV;
                        objLiabilityDetailsEntity.ContributionType = item.CNTRBN_TYPE_DESC;
                        objLiabilityDetailsEntity.PurposeCode = item.PURPOSE_CODE_ABBREV;
                        objLiabilityDetailsEntity.RecieptCdoe = item.RECEIPT_CODE_DESC;
                        if (item.ORG_DATE != "")
                            objLiabilityDetailsEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                        else
                            objLiabilityDetailsEntity.OriginalDate = "";
                        objLiabilityDetailsEntity.LoanerCode = item.LOAN_OTHER_DESC;
                        objLiabilityDetailsEntity.ElectionYear = item.ELECTION_YEAR;
                        if (item.OFFICE_ID != 0)
                            objLiabilityDetailsEntity.Office = Convert.ToString(item.OFFICE_ID);
                        else
                            objLiabilityDetailsEntity.Office = "";
                        objLiabilityDetailsEntity.District = Convert.ToString(item.DISTRICT);
                        objLiabilityDetailsEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objLiabilityDetailsEntity.RItemized = item.R_ITEMIZED;
                        objLiabilityDetailsEntity.CountId = Convert.ToString(item.COUNTY_ID);
                        objLiabilityDetailsEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                        objLiabilityDetailsEntity.County = item.CNTY_DESC;
                        objLiabilityDetailsEntity.Municipality = item.MUNICIPALITY_DESC;
                        objLiabilityDetailsEntity.CreatedDate = item.CREATED_DATE;
                        lstLiabilityDetailsEntity.Add(objLiabilityDetailsEntity);
                    }

                    return lstLiabilityDetailsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetOriginalLiabilityData GET ORIGINAL SCHEDULE 'N' TRANSACTIONS.

        #region GetExpenditurePaymentLiabilityData GET EXPENDITURE PAYMENT SCHEDULE 'F' TRANSACTIONS.
        /// <summary>
        /// GetExpenditurePaymentLiabilityData
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public IList<LiabilityDetailsEntity> GetExpenditurePaymentLiabilityData(String strTransNumber, String filerID, String strSchedID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LiabilityDetailsEntity> lstLiabilityDetailsEntity = new List<LiabilityDetailsEntity>();
                    LiabilityDetailsEntity objLiabilityDetailsEntity;

                    if (strSchedID == "6")
                    {
                        var results = entities.SP_S_ExpPaymentLiabilitySchedF(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                        foreach (var item in results)
                        {
                            objLiabilityDetailsEntity = new LiabilityDetailsEntity();
                            objLiabilityDetailsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objLiabilityDetailsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                            objLiabilityDetailsEntity.ContributionType = item.CNTRBR_TYPE_DESC;
                            if (item.SCHED_DATE != "")
                                objLiabilityDetailsEntity.TransactionDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                            else
                                objLiabilityDetailsEntity.TransactionDate = "";
                            objLiabilityDetailsEntity.TransactionType = item.FILING_SCHED_DESC;
                            objLiabilityDetailsEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objLiabilityDetailsEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                            objLiabilityDetailsEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objLiabilityDetailsEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                            objLiabilityDetailsEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                            objLiabilityDetailsEntity.FilingCity = item.FLNG_ENT_CITY;
                            objLiabilityDetailsEntity.FilingState = item.FLNG_ENT_STATE;
                            objLiabilityDetailsEntity.FilingZip = item.FLNG_ENT_ZIP;
                            objLiabilityDetailsEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                            objLiabilityDetailsEntity.PaymentType = item.PAYMENT_TYPE_DESC;
                            objLiabilityDetailsEntity.PayNumber = item.PAY_NUMBER;
                            objLiabilityDetailsEntity.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                            objLiabilityDetailsEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                            objLiabilityDetailsEntity.RecieptType = item.RECEIPT_TYPE_ABBREV;
                            objLiabilityDetailsEntity.TransferType = item.TRANSFER_TYPE_ABBREV;
                            objLiabilityDetailsEntity.ContributionType = item.CNTRBN_TYPE_DESC;
                            objLiabilityDetailsEntity.PurposeCode = item.PURPOSE_CODE_ABBREV;
                            objLiabilityDetailsEntity.RecieptCdoe = item.RECEIPT_CODE_DESC;
                            if (item.ORG_DATE != "")
                                objLiabilityDetailsEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                            else
                                objLiabilityDetailsEntity.OriginalDate = "";
                            objLiabilityDetailsEntity.LoanerCode = item.LOAN_OTHER_DESC;
                            objLiabilityDetailsEntity.ElectionYear = item.ELECTION_YEAR;
                            if (item.OFFICE_ID != 0)
                                objLiabilityDetailsEntity.Office = Convert.ToString(item.OFFICE_ID);
                            else
                                objLiabilityDetailsEntity.Office = "";
                            objLiabilityDetailsEntity.District = Convert.ToString(item.DISTRICT);
                            objLiabilityDetailsEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objLiabilityDetailsEntity.RItemized = item.R_ITEMIZED;
                            objLiabilityDetailsEntity.CountId = Convert.ToString(item.COUNTY_ID);
                            objLiabilityDetailsEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                            objLiabilityDetailsEntity.County = item.CNTY_DESC;
                            objLiabilityDetailsEntity.Municipality = item.MUNICIPALITY_DESC;
                            objLiabilityDetailsEntity.CreatedDate = item.CREATED_DATE;
                            lstLiabilityDetailsEntity.Add(objLiabilityDetailsEntity);
                        }
                    }
                    else if(strSchedID == "20")
                    {
                        var results = entities.SP_S_EFS_QualifiedExpendituresSchedT_LiabilityT(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                        foreach (var item in results)
                        {
                            objLiabilityDetailsEntity = new LiabilityDetailsEntity();
                            objLiabilityDetailsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objLiabilityDetailsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                            objLiabilityDetailsEntity.ContributionType = item.CNTRBR_TYPE_DESC;
                            if (item.SCHED_DATE != "")
                                objLiabilityDetailsEntity.TransactionDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                            else
                                objLiabilityDetailsEntity.TransactionDate = "";
                            objLiabilityDetailsEntity.TransactionType = item.FILING_SCHED_DESC;
                            objLiabilityDetailsEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objLiabilityDetailsEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                            objLiabilityDetailsEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objLiabilityDetailsEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                            objLiabilityDetailsEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                            objLiabilityDetailsEntity.FilingCity = item.FLNG_ENT_CITY;
                            objLiabilityDetailsEntity.FilingState = item.FLNG_ENT_STATE;
                            objLiabilityDetailsEntity.FilingZip = item.FLNG_ENT_ZIP;
                            objLiabilityDetailsEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                            objLiabilityDetailsEntity.PaymentType = item.PAYMENT_TYPE_DESC;
                            objLiabilityDetailsEntity.PayNumber = item.PAY_NUMBER;
                            objLiabilityDetailsEntity.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                            objLiabilityDetailsEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                            objLiabilityDetailsEntity.RecieptType = item.RECEIPT_TYPE_ABBREV;
                            objLiabilityDetailsEntity.TransferType = item.TRANSFER_TYPE_ABBREV;
                            objLiabilityDetailsEntity.ContributionType = item.CNTRBN_TYPE_DESC;
                            objLiabilityDetailsEntity.PurposeCode = item.PURPOSE_CODE_ABBREV;
                            objLiabilityDetailsEntity.RecieptCdoe = item.RECEIPT_CODE_DESC;
                            if (item.ORG_DATE != "")
                                objLiabilityDetailsEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                            else
                                objLiabilityDetailsEntity.OriginalDate = "";
                            objLiabilityDetailsEntity.LoanerCode = item.LOAN_OTHER_DESC;
                            objLiabilityDetailsEntity.ElectionYear = item.ELECTION_YEAR;
                            if (item.OFFICE_ID != 0)
                                objLiabilityDetailsEntity.Office = Convert.ToString(item.OFFICE_ID);
                            else
                                objLiabilityDetailsEntity.Office = "";
                            objLiabilityDetailsEntity.District = Convert.ToString(item.DISTRICT);
                            objLiabilityDetailsEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objLiabilityDetailsEntity.RItemized = item.R_ITEMIZED;
                            objLiabilityDetailsEntity.CountId = Convert.ToString(item.COUNTY_ID);
                            objLiabilityDetailsEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                            objLiabilityDetailsEntity.County = item.CNTY_DESC;
                            objLiabilityDetailsEntity.Municipality = item.MUNICIPALITY_DESC;
                            objLiabilityDetailsEntity.CreatedDate = item.CREATED_DATE;
                            lstLiabilityDetailsEntity.Add(objLiabilityDetailsEntity);
                        }
                    }
                    else
                    {
                        var results = entities.SP_S_ExpPaymentLiabilitySchedF(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                        foreach (var item in results)
                        {
                            objLiabilityDetailsEntity = new LiabilityDetailsEntity();
                            objLiabilityDetailsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                            objLiabilityDetailsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                            objLiabilityDetailsEntity.ContributionType = item.CNTRBR_TYPE_DESC;
                            if (item.SCHED_DATE != "")
                                objLiabilityDetailsEntity.TransactionDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                            else
                                objLiabilityDetailsEntity.TransactionDate = "";
                            objLiabilityDetailsEntity.TransactionType = item.FILING_SCHED_DESC;
                            objLiabilityDetailsEntity.FilingEntityName = item.FLNG_ENT_NAME;
                            objLiabilityDetailsEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                            objLiabilityDetailsEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                            objLiabilityDetailsEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                            objLiabilityDetailsEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                            objLiabilityDetailsEntity.FilingCity = item.FLNG_ENT_CITY;
                            objLiabilityDetailsEntity.FilingState = item.FLNG_ENT_STATE;
                            objLiabilityDetailsEntity.FilingZip = item.FLNG_ENT_ZIP;
                            objLiabilityDetailsEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                            objLiabilityDetailsEntity.PaymentType = item.PAYMENT_TYPE_DESC;
                            objLiabilityDetailsEntity.PayNumber = item.PAY_NUMBER;
                            objLiabilityDetailsEntity.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                            objLiabilityDetailsEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                            objLiabilityDetailsEntity.RecieptType = item.RECEIPT_TYPE_ABBREV;
                            objLiabilityDetailsEntity.TransferType = item.TRANSFER_TYPE_ABBREV;
                            objLiabilityDetailsEntity.ContributionType = item.CNTRBN_TYPE_DESC;
                            objLiabilityDetailsEntity.PurposeCode = item.PURPOSE_CODE_ABBREV;
                            objLiabilityDetailsEntity.RecieptCdoe = item.RECEIPT_CODE_DESC;
                            if (item.ORG_DATE != "")
                                objLiabilityDetailsEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                            else
                                objLiabilityDetailsEntity.OriginalDate = "";
                            objLiabilityDetailsEntity.LoanerCode = item.LOAN_OTHER_DESC;
                            objLiabilityDetailsEntity.ElectionYear = item.ELECTION_YEAR;
                            if (item.OFFICE_ID != 0)
                                objLiabilityDetailsEntity.Office = Convert.ToString(item.OFFICE_ID);
                            else
                                objLiabilityDetailsEntity.Office = "";
                            objLiabilityDetailsEntity.District = Convert.ToString(item.DISTRICT);
                            objLiabilityDetailsEntity.TransExplanation = item.TRANS_EXPLNTN;
                            objLiabilityDetailsEntity.RItemized = item.R_ITEMIZED;
                            objLiabilityDetailsEntity.CountId = Convert.ToString(item.COUNTY_ID);
                            objLiabilityDetailsEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                            objLiabilityDetailsEntity.County = item.CNTY_DESC;
                            objLiabilityDetailsEntity.Municipality = item.MUNICIPALITY_DESC;
                            objLiabilityDetailsEntity.CreatedDate = item.CREATED_DATE;
                            lstLiabilityDetailsEntity.Add(objLiabilityDetailsEntity);
                        }
                    }

                    return lstLiabilityDetailsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetExpenditurePaymentLiabilityData GET EXPENDITURE PAYMENT SCHEDULE 'F' TRANSACTIONS.

        #region GetOutstandingLiabilityData GET OUTSTANDING LIABILITY SCHEDULE 'N' TRANSACTIONS.
        /// <summary>
        /// GetOutstandingLiabilityData
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public IList<LiabilityDetailsEntity> GetOutstandingLiabilityData(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LiabilityDetailsEntity> lstLiabilityDetailsEntity = new List<LiabilityDetailsEntity>();
                    LiabilityDetailsEntity objLiabilityDetailsEntity;

                    var results = entities.SP_S_ExpPayOutstandingLiabilitySchedN(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objLiabilityDetailsEntity = new LiabilityDetailsEntity();
                        objLiabilityDetailsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objLiabilityDetailsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objLiabilityDetailsEntity.ContributionType = item.CNTRBR_TYPE_DESC;
                        if (item.SCHED_DATE != "")
                            objLiabilityDetailsEntity.TransactionDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objLiabilityDetailsEntity.TransactionDate = "";
                        objLiabilityDetailsEntity.TransactionType = item.FILING_SCHED_DESC;
                        objLiabilityDetailsEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objLiabilityDetailsEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objLiabilityDetailsEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objLiabilityDetailsEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objLiabilityDetailsEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objLiabilityDetailsEntity.FilingCity = item.FLNG_ENT_CITY;
                        objLiabilityDetailsEntity.FilingState = item.FLNG_ENT_STATE;
                        objLiabilityDetailsEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objLiabilityDetailsEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objLiabilityDetailsEntity.PaymentType = item.PAYMENT_TYPE_DESC;
                        objLiabilityDetailsEntity.PayNumber = item.PAY_NUMBER;
                        objLiabilityDetailsEntity.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                        objLiabilityDetailsEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        objLiabilityDetailsEntity.RecieptType = item.RECEIPT_TYPE_ABBREV;
                        objLiabilityDetailsEntity.TransferType = item.TRANSFER_TYPE_ABBREV;
                        objLiabilityDetailsEntity.ContributionType = item.CNTRBN_TYPE_DESC;
                        objLiabilityDetailsEntity.PurposeCode = item.PURPOSE_CODE_ABBREV;
                        objLiabilityDetailsEntity.RecieptCdoe = item.RECEIPT_CODE_DESC;
                        if (item.ORG_DATE != "")
                            objLiabilityDetailsEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                        else
                            objLiabilityDetailsEntity.OriginalDate = "";
                        objLiabilityDetailsEntity.LoanerCode = item.LOAN_OTHER_DESC;
                        objLiabilityDetailsEntity.ElectionYear = item.ELECTION_YEAR;
                        if (item.OFFICE_ID != 0)
                            objLiabilityDetailsEntity.Office = Convert.ToString(item.OFFICE_ID);
                        else
                            objLiabilityDetailsEntity.Office = "";
                        objLiabilityDetailsEntity.District = Convert.ToString(item.DISTRICT);
                        objLiabilityDetailsEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objLiabilityDetailsEntity.RItemized = item.R_ITEMIZED;
                        objLiabilityDetailsEntity.CountId = Convert.ToString(item.COUNTY_ID);
                        objLiabilityDetailsEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                        objLiabilityDetailsEntity.County = item.CNTY_DESC;
                        objLiabilityDetailsEntity.Municipality = item.MUNICIPALITY_DESC;
                        objLiabilityDetailsEntity.CreatedDate = item.CREATED_DATE;
                        lstLiabilityDetailsEntity.Add(objLiabilityDetailsEntity);
                    }

                    return lstLiabilityDetailsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetOutstandingLiabilityData GET OUTSTANDING LIABILITY SCHEDULE 'N' TRANSACTIONS.

        #region GetLiabilityForgivenData GET LIABILITY FORGIVEN SCHEDULE 'K' TRANSACTIONS.
        /// <summary>
        /// GetLiabilityForgivenData
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public IList<LiabilityDetailsEntity> GetLiabilityForgivenData(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LiabilityDetailsEntity> lstLiabilityDetailsEntity = new List<LiabilityDetailsEntity>();
                    LiabilityDetailsEntity objLiabilityDetailsEntity;

                    var results = entities.SP_S_ExpPayLiabilityForgivenSchedK(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objLiabilityDetailsEntity = new LiabilityDetailsEntity();
                        objLiabilityDetailsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objLiabilityDetailsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objLiabilityDetailsEntity.ContributionType = item.CNTRBR_TYPE_DESC;
                        if (item.SCHED_DATE != "")
                            objLiabilityDetailsEntity.TransactionDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objLiabilityDetailsEntity.TransactionDate = "";
                        objLiabilityDetailsEntity.TransactionType = item.FILING_SCHED_DESC;
                        objLiabilityDetailsEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objLiabilityDetailsEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objLiabilityDetailsEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objLiabilityDetailsEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objLiabilityDetailsEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objLiabilityDetailsEntity.FilingCity = item.FLNG_ENT_CITY;
                        objLiabilityDetailsEntity.FilingState = item.FLNG_ENT_STATE;
                        objLiabilityDetailsEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objLiabilityDetailsEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objLiabilityDetailsEntity.PaymentType = item.PAYMENT_TYPE_DESC;
                        objLiabilityDetailsEntity.PayNumber = item.PAY_NUMBER;
                        objLiabilityDetailsEntity.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                        objLiabilityDetailsEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        objLiabilityDetailsEntity.RecieptType = item.RECEIPT_TYPE_ABBREV;
                        objLiabilityDetailsEntity.TransferType = item.TRANSFER_TYPE_ABBREV;
                        objLiabilityDetailsEntity.ContributionType = item.CNTRBN_TYPE_DESC;
                        objLiabilityDetailsEntity.PurposeCode = item.PURPOSE_CODE_ABBREV;
                        objLiabilityDetailsEntity.RecieptCdoe = item.RECEIPT_CODE_DESC;
                        if (item.ORG_DATE != "")
                            objLiabilityDetailsEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                        else
                            objLiabilityDetailsEntity.OriginalDate = "";
                        objLiabilityDetailsEntity.LoanerCode = item.LOAN_OTHER_DESC;
                        objLiabilityDetailsEntity.ElectionYear = item.ELECTION_YEAR;
                        if (item.OFFICE_ID != 0)
                            objLiabilityDetailsEntity.Office = Convert.ToString(item.OFFICE_ID);
                        else
                            objLiabilityDetailsEntity.Office = "";
                        objLiabilityDetailsEntity.District = Convert.ToString(item.DISTRICT);
                        objLiabilityDetailsEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objLiabilityDetailsEntity.RItemized = item.R_ITEMIZED;
                        objLiabilityDetailsEntity.CountId = Convert.ToString(item.COUNTY_ID);
                        objLiabilityDetailsEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                        objLiabilityDetailsEntity.County = item.CNTY_DESC;
                        objLiabilityDetailsEntity.Municipality = item.MUNICIPALITY_DESC;
                        objLiabilityDetailsEntity.CreatedDate = item.CREATED_DATE;
                        lstLiabilityDetailsEntity.Add(objLiabilityDetailsEntity);
                    }

                    return lstLiabilityDetailsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetLiabilityForgivenData GET LIABILITY FORGIVEN SCHEDULE 'K' TRANSACTIONS.

        //========================================================================================================================================
        // NON-ITEMIZED TRANSACTIONS - SATART >>>>>>>>>>>>
        //========================================================================================================================================
        #region GetInLieuOfStatementData
        /// <summary>
        /// GetInLieuOfStatementData
        /// </summary>
        /// <param name="strElectionYearId"></param>
        /// <param name="strElectTypeId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <returns></returns>
        public IList<InLieuOfStatementNonItemEntity> GetInLieuOfStatementData(String strFilerid, String strElectionDate,
            String strElectionYearId, String strElectionYear, String strElectTypeId,
            String strOfficeTypeId, String strFilingTypeId, String strFilingDate)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<InLieuOfStatementNonItemEntity> lstInLieuOfStatementNonItemEntity = new List<InLieuOfStatementNonItemEntity>();
                    InLieuOfStatementNonItemEntity objInLieuOfStatementNonItemEntity;

                    var results = entities.SP_S_NonItemInLieuOfStatement(string.IsNullOrEmpty(strFilerid) ? (long?)null : Convert.ToInt64(strFilerid), string.IsNullOrEmpty(strElectionDate) ? (DateTime?)null : Convert.ToDateTime(strElectionDate), string.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId), string.IsNullOrEmpty(strElectionYear) ? (int?)null : Convert.ToInt32(strElectionYear),
                        string.IsNullOrEmpty(strElectTypeId) ? (int?)null : Convert.ToInt32(strElectTypeId), string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), string.IsNullOrEmpty(strFilingTypeId) ? (int?)null : Convert.ToInt32(strFilingTypeId), string.IsNullOrEmpty(strFilingDate) ? (DateTime?)null : Convert.ToDateTime(strFilingDate));

                    foreach (var item in results)
                    {
                        objInLieuOfStatementNonItemEntity = new InLieuOfStatementNonItemEntity();
                        objInLieuOfStatementNonItemEntity.FilingsId = Convert.ToString(item.FILINGS_ID);
                        objInLieuOfStatementNonItemEntity.ElectionYear = Convert.ToString(item.ELECT_YEAR);
                        objInLieuOfStatementNonItemEntity.OfficeType = item.OFFICE_TYPE_DESC;
                        objInLieuOfStatementNonItemEntity.ElectionType = item.ELECT_TYPE_DESC;
                        objInLieuOfStatementNonItemEntity.ElectionDate = item.ELECTION_DATE;
                        objInLieuOfStatementNonItemEntity.DisclosurePeriod = item.FILING_DESC;
                        objInLieuOfStatementNonItemEntity.DateSubmitted = Convert.ToString(item.CREATED_DATE);
                        lstInLieuOfStatementNonItemEntity.Add(objInLieuOfStatementNonItemEntity);
                    }

                    return lstInLieuOfStatementNonItemEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }


        }
        #endregion GetInLieuOfStatementData

        #region AddInLieuOfStatement
        /// <summary>
        /// AddInLieuOfStatement
        /// </summary>
        /// <param name="objAddInLieuOfStatementEntity"></param>
        /// <returns></returns>
        public Boolean AddInLieuOfStatement(AddInLieuOfStatementEntity objAddInLieuOfStatementEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_I_NonItem_InLieuOfStatement(string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilerId) ? (long?)null : Convert.ToInt64(objAddInLieuOfStatementEntity.FilerId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objAddInLieuOfStatementEntity.ElectionDate),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionTypeId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.OfficeTypeId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.FilingTypeId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingCategoryId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.FilingCategoryId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectYearId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionYear),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.CountyId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.CountyId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.MunicipalityId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.MunicipalityId),
                                objAddInLieuOfStatementEntity.CreatedBy,
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionDateId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objAddInLieuOfStatementEntity.FilingDate));

                    if (results >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddInLieuOfStatement

        #region DeleteInLieuOfStatement
        /// <summary>
        /// DeleteInLieuOfStatement
        /// </summary>
        /// <param name="strFilingsId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean DeleteInLieuOfStatement(String strFilingsId, String strModifiedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_D_NonItemInLieuOfStatement(string.IsNullOrEmpty(strFilingsId) ? (long?)null : Convert.ToInt64(strFilingsId), strModifiedBy);

                    if (results >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion DeleteInLieuOfStatement

        #region GetPersonNameAndTreasurerData
        /// <summary>
        /// GetPersonNameAndTreasurerData
        /// </summary>
        /// <param name="strPersonId"></param>
        /// <returns></returns>
        public IList<PersonNameAndTreasurerDataEntity> GetPersonNameAndTreasurerData(String strPersonId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PersonNameAndTreasurerDataEntity> lstPersonNameAndTreasurerDataEntity = new List<PersonNameAndTreasurerDataEntity>();
                    PersonNameAndTreasurerDataEntity objPersonNameAndTreasurerDataEntity;

                    var results = entities.SP_S_NonItemPersonName(string.IsNullOrEmpty(strPersonId) ? (long?)null : Convert.ToInt64(strPersonId));

                    foreach (var item in results)
                    {
                        objPersonNameAndTreasurerDataEntity = new PersonNameAndTreasurerDataEntity();
                        objPersonNameAndTreasurerDataEntity.PersonName = item.PERSON_NAME;
                        objPersonNameAndTreasurerDataEntity.TreasId = Convert.ToString(item.TREAS_ID);
                        lstPersonNameAndTreasurerDataEntity.Add(objPersonNameAndTreasurerDataEntity);
                    }

                    return lstPersonNameAndTreasurerDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetPersonNameAndTreasurerData

        #region GetNoActivityReporttData
        /// <summary>
        /// GetNoActivityReporttData
        /// </summary>
        /// <param name="strFilerid"></param>
        /// <param name="strElectionDate"></param>
        /// <param name="strElectionYearId"></param>
        /// <param name="strElectionYear"></param>
        /// <param name="strElectTypeId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <returns></returns>
        public IList<InLieuOfStatementNonItemEntity> GetNoActivityReporttData(String strFilerid, String strElectionDate,
            String strElectionYearId, String strElectionYear, String strElectTypeId,
            String strOfficeTypeId, String strFilingTypeId, String strFilingDate)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<InLieuOfStatementNonItemEntity> lstInLieuOfStatementNonItemEntity = new List<InLieuOfStatementNonItemEntity>();
                    InLieuOfStatementNonItemEntity objInLieuOfStatementNonItemEntity;

                    var results = entities.SP_S_NonItemNoActivityReport(string.IsNullOrEmpty(strFilerid) ? (long?)null : Convert.ToInt64(strFilerid),
                        string.IsNullOrEmpty(strElectionDate) ? (DateTime?)null : Convert.ToDateTime(strElectionDate),
                        string.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId),
                        string.IsNullOrEmpty(strElectionYear) ? (int?)null : Convert.ToInt32(strElectionYear),
                        string.IsNullOrEmpty(strElectTypeId) ? (int?)null : Convert.ToInt32(strElectTypeId),
                        string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId),
                        string.IsNullOrEmpty(strFilingTypeId) ? (int?)null : Convert.ToInt32(strFilingTypeId),
                        string.IsNullOrEmpty(strFilingDate) ? (DateTime?)null : Convert.ToDateTime(strFilingDate));

                    foreach (var item in results)
                    {
                        objInLieuOfStatementNonItemEntity = new InLieuOfStatementNonItemEntity();
                        objInLieuOfStatementNonItemEntity.FilingsId = Convert.ToString(item.FILINGS_ID);
                        objInLieuOfStatementNonItemEntity.ElectionYear = Convert.ToString(item.ELECT_YEAR);
                        objInLieuOfStatementNonItemEntity.OfficeType = item.OFFICE_TYPE_DESC;
                        objInLieuOfStatementNonItemEntity.ElectionType = item.ELECT_TYPE_DESC;
                        objInLieuOfStatementNonItemEntity.ElectionDate = item.ELECTION_DATE;
                        objInLieuOfStatementNonItemEntity.DisclosurePeriod = item.FILING_DESC;
                        objInLieuOfStatementNonItemEntity.DateSubmitted = Convert.ToString(item.CREATED_DATE);
                        lstInLieuOfStatementNonItemEntity.Add(objInLieuOfStatementNonItemEntity);
                    }

                    return lstInLieuOfStatementNonItemEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }


        }
        #endregion GetNoActivityReporttData

        #region AddNoActivityReport
        /// <summary>
        /// AddNoActivityReport
        /// </summary>
        /// <param name="objAddInLieuOfStatementEntity"></param>
        /// <returns></returns>
        public Boolean AddNoActivityReport(AddInLieuOfStatementEntity objAddInLieuOfStatementEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_I_NonItem_NoActivityReport(string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilerId) ? (long?)null : Convert.ToInt64(objAddInLieuOfStatementEntity.FilerId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objAddInLieuOfStatementEntity.ElectionDate),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionTypeId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.OfficeTypeId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.FilingTypeId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingCategoryId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.FilingCategoryId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectYearId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionYear),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.CountyId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.CountyId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.MunicipalityId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.MunicipalityId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ResigTermTypeId),
                                objAddInLieuOfStatementEntity.CreatedBy,
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionDateId),
                                string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objAddInLieuOfStatementEntity.FilingDate));

                    if (results >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNoActivityReport

        #region GetItemizedTransSubmitted
        /// <summary>
        /// GetItemizedTransSubmitted
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <param name="strElectionYearId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <returns></returns>
        public Boolean GetItemizedTransSubmitted(String strFilerId, String strElectionYearId, String strOfficeTypeId,
            String strFilingTypeId, String strFilingCatId, String strElectTypeID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    Boolean strSubmitted = false;

                    var results = entities.SP_S_NonItemizedSubmittedItemizedOrNot(string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId),
                        string.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId),
                        string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId),
                        string.IsNullOrEmpty(strFilingTypeId) ? (int?)null : Convert.ToInt32(strFilingTypeId),
                        string.IsNullOrEmpty(strFilingCatId) ? (int?)null : Convert.ToInt32(strFilingCatId),
                        string.IsNullOrEmpty(strElectTypeID) ? (int?)null : Convert.ToInt32(strElectTypeID));

                    foreach (var item in results)
                    {
                        if (item.RETURN_VALUE.ToString() == "TRUE")
                            strSubmitted = true;
                        else
                            strSubmitted = false;
                    }

                    return strSubmitted;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetItemizedTransSubmitted

        #region AddNoticeOfNonParticipation
        /// <summary>
        /// AddNoticeOfNonParticipation
        /// </summary>
        /// <param name="objAddInLieuOfStatementEntity"></param>
        /// <returns></returns>
        public Boolean AddNoticeOfNonParticipation(AddInLieuOfStatementEntity objAddInLieuOfStatementEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_I_NonItem_NoticeOfNonParticipation(string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilerId) ? (long?)null : Convert.ToInt64(objAddInLieuOfStatementEntity.FilerId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objAddInLieuOfStatementEntity.ElectionDate),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionTypeId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.OfficeTypeId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.FilingTypeId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingCategoryId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.FilingCategoryId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectYearId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionYear),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.CountyId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.CountyId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.MunicipalityId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.MunicipalityId),
                    objAddInLieuOfStatementEntity.CreatedBy,
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objAddInLieuOfStatementEntity.ElectionDateId),
                    string.IsNullOrEmpty(objAddInLieuOfStatementEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objAddInLieuOfStatementEntity.FilingDate));

                        if (results >= 1)
                            return true;
                        else
                            return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNoticeOfNonParticipation

        #region GetNoticeOfNonParticipationtData
        /// <summary>
        /// GetNoticeOfNonParticipationtData
        /// </summary>
        /// <param name="strFilerid"></param>
        /// <param name="strElectionDate"></param>
        /// <param name="strElectionYearId"></param>
        /// <param name="strElectionYear"></param>
        /// <param name="strElectTypeId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <returns></returns>
        public IList<InLieuOfStatementNonItemEntity> GetNoticeOfNonParticipationtData(String strFilerid, String strElectionDate,
            String strElectionYearId, String strElectionYear, String strElectTypeId,
            String strOfficeTypeId, String strFilingTypeId, String strCountyId, String strMunicipalityId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<InLieuOfStatementNonItemEntity> lstInLieuOfStatementNonItemEntity = new List<InLieuOfStatementNonItemEntity>();
                    InLieuOfStatementNonItemEntity objInLieuOfStatementNonItemEntity;

                    var results = entities.SP_S_NonItemNoticeOfNonParticipation(string.IsNullOrEmpty(strFilerid) ? (long?)null : Convert.ToInt64(strFilerid),
                                        string.IsNullOrEmpty(strElectionDate) ? (DateTime?)null : Convert.ToDateTime(strElectionDate),
                                        string.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId),
                                        string.IsNullOrEmpty(strElectionYear) ? (int?)null : Convert.ToInt32(strElectionYear),
                                        string.IsNullOrEmpty(strElectTypeId) ? (int?)null : Convert.ToInt32(strElectTypeId),
                                        string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId),
                                        string.IsNullOrEmpty(strFilingTypeId) ? (int?)null : Convert.ToInt32(strFilingTypeId),
                                        string.IsNullOrEmpty(strCountyId) ? (int?)null : Convert.ToInt32(strCountyId),
                                        string.IsNullOrEmpty(strMunicipalityId) ? (int?)null : Convert.ToInt32(strMunicipalityId));

                    foreach (var item in results)
                    {
                        objInLieuOfStatementNonItemEntity = new InLieuOfStatementNonItemEntity();
                        objInLieuOfStatementNonItemEntity.FilingsId = Convert.ToString(item.FILINGS_ID);
                        objInLieuOfStatementNonItemEntity.ElectionYear = Convert.ToString(item.ELECT_YEAR);
                        objInLieuOfStatementNonItemEntity.OfficeType = item.OFFICE_TYPE_DESC;
                        objInLieuOfStatementNonItemEntity.ElectionType = item.ELECT_TYPE_DESC;
                        objInLieuOfStatementNonItemEntity.ElectionDate = item.ELECTION_DATE;
                        objInLieuOfStatementNonItemEntity.DisclosurePeriod = item.FILING_DESC;
                        objInLieuOfStatementNonItemEntity.DateSubmitted = Convert.ToString(item.CREATED_DATE);
                        lstInLieuOfStatementNonItemEntity.Add(objInLieuOfStatementNonItemEntity);
                    }

                    return lstInLieuOfStatementNonItemEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetNoticeOfNonParticipationtData

        #region GetTransactionTypes24HNoticeData
        /// <summary>
        /// GetTransactionTypes24HNoticeData
        /// </summary>
        /// <returns></returns>
        public IList<TransactionTypesEntity> GetTransactionTypes24HNoticeData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionTypesEntity> lstTransactionTypesEntity = new List<TransactionTypesEntity>();
                    TransactionTypesEntity objTransactionTypesEntity;

                    var results = entities.SP_S_TransactionTypes24HourNotice();

                    foreach (var item in results)
                    {
                        objTransactionTypesEntity = new TransactionTypesEntity();
                        objTransactionTypesEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objTransactionTypesEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objTransactionTypesEntity.FilingSchedAbbrev = item.FILING_SCHED_ABBREV;
                        lstTransactionTypesEntity.Add(objTransactionTypesEntity);
                    }

                    return lstTransactionTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetTransactionTypes24HNoticeData

        #region GetFilingTrans24HourNoticeData
        /// <summary>
        /// GetFilingTrans24HourNoticeData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTrans24HourNoticeData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItem24HourNoticeTrans(string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                    string.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                    string.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                    string.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                    string.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                    string.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTrans24HourNoticeData

        #region GetFilingTrans24HourNoticeHistoryData
        /// <summary>
        /// GetFilingTrans24HourNoticeHistoryData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTrans24HourNoticeHistoryData(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItem24HourNoticeTransHistory(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTrans24HourNoticeHistoryData

        #region AddNonItem24HourNoticeFlngTrans
        /// <summary>
        /// AddNonItem24HourNoticeFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItem24HourNoticeFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemized24HNoticeFlngTrans(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                        objFilingTransactionsEntity.PayNumber,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntFirstName,
                        objFilingTransactionsEntity.FlngEntLastName,
                        objFilingTransactionsEntity.FlngEntMiddleName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                        objFilingTransactionsEntity.CreatedBy);


                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItem24HourNoticeFlngTrans

        #region Update24HNoticeFlngTrans
        /// <summary>
        /// Update24HNoticeFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean Update24HNoticeFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItem24HNoticeFlngTrans(objFilingTransactionsEntity.TransNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    objFilingTransactionsEntity.SubmissionDate,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    objFilingTransactionsEntity.PayNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntFirstName,
                    objFilingTransactionsEntity.FlngEntMiddleName,
                    objFilingTransactionsEntity.FlngEntLastName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.ModifiedBy,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion Update24HNoticeFlngTrans

        #region Submit24HNoticeFlngTrans
        /// <summary>
        /// Submit24HNoticeFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean Submit24HNoticeFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItem24HNoticeFlngTransSubmit(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                    objFilingTransactionsEntity.TransNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    objFilingTransactionsEntity.PayNumber,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                    objFilingTransactionsEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion Submit24HNoticeFlngTrans

        #region Delete24HNoticeFlngTrans
        /// <summary>
        /// Delete24HNoticeFlngTrans
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean Delete24HNoticeFlngTrans(String strTransNumber, String strModifiedBy, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_NonItem24HourNoticeFlngTrans(strTransNumber, strModifiedBy,
                                                                                 string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion Delete24HNoticeFlngTrans

        #region GetNonItemChildTransExists
        /// <summary>
        /// GetNonItemChildTransExists
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public Boolean GetNonItemChildTransExists(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    Boolean strChildTransExists = false;

                    var results = entities.SP_S_NonItemizedChildTransExists(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        if (item.RETURN_VALUE.ToString() == "TRUE")
                            strChildTransExists = true;
                        else
                            strChildTransExists = false;
                    }

                    return strChildTransExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetNonItemChildTransExists

        #region GetNonItemParentTransExists
        /// <summary>
        /// GetNonItemParentTransExists
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public Boolean GetNonItemParentTransExists(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    Boolean strChildTransExists = false;

                    var results = entities.SP_S_NonItemizedParentTransExists(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        if (item.RETURN_VALUE.ToString() == "TRUE")
                            strChildTransExists = true;
                        else
                            strChildTransExists = false;
                    }

                    return strChildTransExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetNonItemParentTransExists

        #region GetCommEdit24HourNoticeTransData
        /// <summary>
        /// GetCommEdit24HourNoticeTransData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetCommEdit24HourNoticeTransData(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemized24HNoticeCommEditTrans(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        //objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        //objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetCommEdit24HourNoticeTransData

        #region GetFilingTransIEWeeklyContributioneData
        /// <summary>
        /// GetFilingTransIEWeeklyContributioneData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIEWeeklyContributioneData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIEWeeklyContributionTrans(string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.MunicipalityID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else if (item.R_IE_SUPPORTED == "N")
                            objFilingTransactionDataEntity.IESupported = "No";
                        else
                            objFilingTransactionDataEntity.IESupported = "";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIEWeeklyContributioneData

        #region GetIEWeeklyContrbutionTreasurerData
        /// <summary>
        /// GetIEWeeklyContrbutionTreasurerData
        /// </summary>
        /// <param name="strTreasurerId"></param>
        /// <returns></returns>
        public IList<NonItemIETreasurerData> GetIEWeeklyContrbutionTreasurerData(String strTreasurerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<NonItemIETreasurerData> lstNonItemIETreasurerData = new List<NonItemIETreasurerData>();
                    NonItemIETreasurerData objNonItemIETreasurerData;

                    var results = entities.SP_S_NonItemIEWeeklyCntrbTreasurerData(String.IsNullOrEmpty(strTreasurerId) ? (long?)null : Convert.ToInt64(strTreasurerId));

                    foreach (var item in results)
                    {
                        objNonItemIETreasurerData = new NonItemIETreasurerData();
                        objNonItemIETreasurerData.AddressId = Convert.ToString(item.ADDR_ID);
                        objNonItemIETreasurerData.PersonId = Convert.ToString(item.PERSON_ID);
                        objNonItemIETreasurerData.TreasurerName = item.TREASURER_NAME;
                        objNonItemIETreasurerData.TreasurerOccupation = item.TREAS_OCCUPATION;
                        objNonItemIETreasurerData.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objNonItemIETreasurerData.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objNonItemIETreasurerData.TreasurerCity = item.ADDR_CITY;
                        objNonItemIETreasurerData.TreasurerState = item.ADDR_STATE;
                        objNonItemIETreasurerData.TreasurerZip = item.ADDR_ZIP;
                        lstNonItemIETreasurerData.Add(objNonItemIETreasurerData);
                    }

                    return lstNonItemIETreasurerData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetIEWeeklyContrbutionTreasurerData

        #region AddNonItemIEWeeklyContrFlngTrans
        /// <summary>
        /// AddNonItemIEWeeklyContrFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemIEWeeklyContrFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedIEWeeklyContrFlngTrans(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                        objFilingTransactionsEntity.PayNumber,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntFirstName,
                        objFilingTransactionsEntity.FlngEntLastName,
                        objFilingTransactionsEntity.FlngEntMiddleName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        objFilingTransactionsEntity.CandBallotPropReference,
                        objFilingTransactionsEntity.ContributorOccupation,
                        objFilingTransactionsEntity.ContributorEmployer,
                        objFilingTransactionsEntity.IEDescription,
                        objFilingTransactionsEntity.R_Supported,
                        objFilingTransactionsEntity.CreatedBy,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemIEWeeklyContrFlngTrans

        #region UpdateIEWeeklyContrFlngTrans
        /// <summary>
        /// UpdateIEWeeklyContrFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateIEWeeklyContrFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItemizedIEWeeklyContrFlngTrans(objFilingTransactionsEntity.TransNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                    objFilingTransactionsEntity.SubmissionDate,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    objFilingTransactionsEntity.PayNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntFirstName,
                    objFilingTransactionsEntity.FlngEntMiddleName,
                    objFilingTransactionsEntity.FlngEntLastName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.TreasurerStreetAddress,
                    objFilingTransactionsEntity.TreasurerCity,
                    objFilingTransactionsEntity.TreasurerState,
                    objFilingTransactionsEntity.TreasurerZip,
                    objFilingTransactionsEntity.ContributorOccupation,
                    objFilingTransactionsEntity.ContributorEmployer,
                    objFilingTransactionsEntity.IEDescription,
                    objFilingTransactionsEntity.TreasurerOccupation,
                    objFilingTransactionsEntity.TreasurerEmployer,
                    objFilingTransactionsEntity.R_Supported,
                    objFilingTransactionsEntity.CandBallotPropReference,
                    objFilingTransactionsEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion UpdateIEWeeklyContrFlngTrans

        #region SubmitIEWeeklyContrFlngTrans
        /// <summary>
        /// SubmitIEWeeklyContrFlngTrans
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean SubmitIEWeeklyContrFlngTrans(String strTransNumber, String strModifiedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItemizedIEWeeklyContrFlngTransSubmit(strTransNumber, strModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion SubmitIEWeeklyContrFlngTrans

        #region GetFilingTransIETransHistoryData
        /// <summary>
        /// GetFilingTransIETransHistoryData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIETransHistoryData(String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIEWeeklyContributionTransHistory(strTransNumber);

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.IESupported = item.R_IE_SUPPORTED;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;

                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIETransHistoryData

        #region GetItemizedNonItemIETransactions
        /// <summary>
        /// GetItemizedNonItemIETransactions
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <param name="strElectionYearId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strElectionTypeId"></param>
        /// <param name="strElectionDateId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetItemizedNonItemIETransactions(String strFilerId, String strElectionYearId, String strOfficeTypeId, String strElectionTypeId, String strElectionDateId, String strMunicipalityId, string strFilingDate)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_ItemizedNonItemIETransactions(String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId), 
                        String.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId), 
                        String.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), 
                        String.IsNullOrEmpty(strElectionTypeId) ? (int?)null : Convert.ToInt32(strElectionTypeId), 
                        String.IsNullOrEmpty(strElectionDateId) ? (int?)null : Convert.ToInt32(strElectionDateId), 
                        String.IsNullOrEmpty(strMunicipalityId) ? (int?)null : Convert.ToInt32(strMunicipalityId),
                        string.IsNullOrEmpty(strFilingDate) ? (DateTime?)null : Convert.ToDateTime(strFilingDate));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.IEType = item.FILING_CAT_SUBTYPE;
                        objFilingTransactionDataEntity.TreasurerName = item.TREASURER_NAME;
                        objFilingTransactionDataEntity.ContributorName = item.CONTRIBUTOR_NAME;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetItemizedNonItemIETransactions

        #region AddItemizedIETransactionsData
        /// <summary>
        /// AddItemizedIETransactionsData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strFilerId"></param>
        /// <param name="strElectionYearId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <param name="strElectionTypeId"></param>
        /// <param name="strElectionDateId"></param>
        /// <param name="strCreatedBy"></param>
        /// <returns></returns>
        public Boolean AddItemizedIETransactionsData(IList<String> strTransNumber, String strFilerId, String strElectionYearId, String strOfficeTypeId, String strFilingTypeId, String strElectionTypeId, String strElectionDateId, String strCreatedBy, String strFilingDate)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    IList<FILING_TRANSACTIONS> lstFILING_TRANSACTIONS = new List<FILING_TRANSACTIONS>();
                    IList<FILING_TRANSACTIONS> lstFILING_TRANSACTIONS_SCHED_F = new List<FILING_TRANSACTIONS>();
                    IList<FILING_TRANSACTIONS> lstFILING_TRANSACTIONS_SCHED_I = new List<FILING_TRANSACTIONS>();

                    foreach (var item in strTransNumber)
                    {
                        // GET THE ITEMIZED IE TRANSACTIONS DATA.
                        var results = entities.SP_S_ItemizedIETransactionsData(item, strFilerId, strElectionYearId, strOfficeTypeId, strFilingTypeId, strElectionTypeId, strElectionDateId, strCreatedBy, strFilingDate);

                        foreach (var itemData in results)
                        {
                            objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                            objFilingTransactionDataEntity.TransNumber = Convert.ToString(itemData.TRANS_NUMBER);
                            objFilingTransactionDataEntity.FilingEntityId = Convert.ToString(itemData.FLNG_ENT_ID);
                            objFilingTransactionDataEntity.FilingsId = itemData.FILINGS_ID;
                            objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(itemData.FILING_SCHED_ID);
                            objFilingTransactionDataEntity.ContributorTypeId = itemData.CNTRBR_TYPE_ID;
                            objFilingTransactionDataEntity.ContributionTypeId = itemData.CNTRBN_TYPE_ID;
                            objFilingTransactionDataEntity.PaymentTypeId = itemData.PAYMENT_TYPE_ID;
                            objFilingTransactionDataEntity.LoanerCodeId = itemData.LOAN_OTHER_ID;
                            objFilingTransactionDataEntity.PurposeCodeId = itemData.PURPOSE_CODE_ID;
                            objFilingTransactionDataEntity.SchedDate = itemData.SCHED_DATE.Trim();
                            objFilingTransactionDataEntity.PayNumber = itemData.PAY_NUMBER;
                            objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", itemData.ORG_AMT);
                            if (itemData.OWED_AMT != null)
                                objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", itemData.OWED_AMT);
                            else
                                objFilingTransactionDataEntity.OwedAmount = "";
                            if (itemData.LIAB_EXISTS_ORG_AMT != "")
                                objFilingTransactionDataEntity.LiabExistsOrigAmount = String.Format("{0:0.00}", Convert.ToDouble(itemData.LIAB_EXISTS_ORG_AMT));
                            else
                                objFilingTransactionDataEntity.LiabExistsOrigAmount = "";
                            objFilingTransactionDataEntity.LiabExistsTransId = itemData.EXISTS_LIAB_TRANS_NUMBER;
                            objFilingTransactionDataEntity.LoanLibNumberSchedN = itemData.EXISTS_LIAB_LOAN_LIB_NUMBER;
                            objFilingTransactionDataEntity.TransExplanation = itemData.TRANS_EXPLNTN;
                            objFilingTransactionDataEntity.RItemized = itemData.R_ITEMIZED;
                            objFilingTransactionDataEntity.IESupported = itemData.R_IE_SUPPORTED;
                            objFilingTransactionDataEntity.RSubcontractor = itemData.R_SUBCONTRACTOR;
                            objFilingTransactionDataEntity.RLiability = itemData.R_LIABILITY;
                            objFilingTransactionDataEntity.CreatedDate = itemData.CREATED_DATE;
                            objFilingTransactionDataEntity.LoanLiablityNumber = itemData.LOAN_LIB_NUMBER;
                            objFilingTransactionDataEntity.TransNumber = itemData.TRANS_NUMBER;
                            objFilingTransactionDataEntity.TransMapping = itemData.TRANS_MAPPING;
                            lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                        }
                    }

                    lstFilingTransactionDataEntity = lstFilingTransactionDataEntity.OrderBy(x => x.CreatedDate).ToList();

                    // ADD ITEMIZED IE TRANSACTIONS DATA IN SELECTED DISCLOUSER PERIOD.                      
                    foreach (var itemAddData in lstFilingTransactionDataEntity)
                    {
                        lstFILING_TRANSACTIONS_SCHED_F = new List<FILING_TRANSACTIONS>();
                        lstFILING_TRANSACTIONS_SCHED_I = new List<FILING_TRANSACTIONS>();

                        if (itemAddData.FilingSchedId != "6") // NOT SCHEDULE 'F' - TRANSACTIONS.
                        {
                            if (itemAddData.FilingSchedId != "9") // NOT LOAN RECIEVED SCHEDULE 'I' - TRANSACTION.
                            {
                                if (itemAddData.FilingSchedId != "14") // NOT OUTSTANING LIATILITY SCHEDULE 'N' - TRANSACTION.
                                {
                                    String strNewId = Guid.NewGuid().ToString().ToUpper();

                                    FILING_TRANSACTIONS objAdd = new FILING_TRANSACTIONS
                                    {
                                        FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                        TRANS_NUMBER = strNewId,
                                        FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                        FILING_SCHED_ID = Convert.ToInt32(itemAddData.FilingSchedId),
                                        CNTRBR_TYPE_ID = itemAddData.ContributorTypeId != "" ? Convert.ToInt32(itemAddData.ContributorTypeId) : (Int32?)null,
                                        CNTRBN_TYPE_ID = itemAddData.ContributionTypeId != "" ? Convert.ToInt32(itemAddData.ContributionTypeId) : (Int32?)null,
                                        PAYMENT_TYPE_ID = itemAddData.PaymentTypeId != "" ? Convert.ToInt32(itemAddData.PaymentTypeId) : (Int32?)null,
                                        PURPOSE_CODE_ID = itemAddData.PurposeCodeId != "" ? Convert.ToInt32(itemAddData.PurposeCodeId) : (Int32?)null,
                                        LOAN_OTHER_ID = itemAddData.LoanerCodeId != "" ? Convert.ToInt32(itemAddData.LoanerCodeId) : (Int32?)null,
                                        SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                        PAY_NUMBER = itemAddData.PayNumber,
                                        ORG_AMT = Convert.ToDouble(itemAddData.OriginalAmount),
                                        OWED_AMT = itemAddData.OwedAmount != "" ? Convert.ToDouble(itemAddData.OwedAmount) : (Double?)null,
                                        TRANS_EXPLNTN = itemAddData.TransExplanation,
                                        R_IE_SUPPORTED = itemAddData.IESupported,
                                        R_ITEMIZED = itemAddData.RItemized,
                                        R_STATUS = "A",
                                        CREATED_BY = strCreatedBy,
                                        CREATED_DATE = DateTime.Now
                                    };

                                    lstFILING_TRANSACTIONS.Add(objAdd);
                                }
                                else // IF OUTSTANDING LIABILITY SCHEDULE 'N' - TRANSACTION.
                                {
                                    String strNewId = Guid.NewGuid().ToString().ToUpper();
                                    String strLoanLiabNoID = Guid.NewGuid().ToString().ToUpper();

                                    FILING_TRANSACTIONS objAdd = new FILING_TRANSACTIONS
                                    {
                                        FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                        LOAN_LIB_NUMBER = strLoanLiabNoID,
                                        TRANS_NUMBER = strNewId,
                                        FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                        FILING_SCHED_ID = Convert.ToInt32(itemAddData.FilingSchedId),
                                        CNTRBR_TYPE_ID = itemAddData.ContributorTypeId != "" ? Convert.ToInt32(itemAddData.ContributorTypeId) : (Int32?)null,
                                        CNTRBN_TYPE_ID = itemAddData.ContributionTypeId != "" ? Convert.ToInt32(itemAddData.ContributionTypeId) : (Int32?)null,
                                        PAYMENT_TYPE_ID = itemAddData.PaymentTypeId != "" ? Convert.ToInt32(itemAddData.PaymentTypeId) : (Int32?)null,
                                        PURPOSE_CODE_ID = itemAddData.PurposeCodeId != "" ? Convert.ToInt32(itemAddData.PurposeCodeId) : (Int32?)null,
                                        LOAN_OTHER_ID = itemAddData.LoanerCodeId != "" ? Convert.ToInt32(itemAddData.LoanerCodeId) : (Int32?)null,
                                        SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                        PAY_NUMBER = itemAddData.PayNumber,
                                        ORG_AMT = Convert.ToDouble(itemAddData.OriginalAmount),
                                        OWED_AMT = itemAddData.OwedAmount != "" ? Convert.ToDouble(itemAddData.OwedAmount) : (Double?)null,
                                        TRANS_EXPLNTN = itemAddData.TransExplanation,
                                        R_IE_SUPPORTED = itemAddData.IESupported,
                                        R_LIABILITY = "Y",
                                        R_ITEMIZED = itemAddData.RItemized,
                                        R_STATUS = "A",
                                        CREATED_BY = strCreatedBy,
                                        CREATED_DATE = DateTime.Now
                                    };

                                    lstFILING_TRANSACTIONS.Add(objAdd);
                                }
                            }
                            else // SCHEDULE 'LOAN RECEIVED' 9 AND SCHEDULE '10' OUTSTANDING LIABILITY
                            {
                                String strNewIdSchedI = Guid.NewGuid().ToString().ToUpper();
                                String strLoanLiabNoID = Guid.NewGuid().ToString().ToUpper();

                                FILING_TRANSACTIONS objAddSchedI = new FILING_TRANSACTIONS // SCHEDULE 'I' '9'
                                {
                                    FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                    LOAN_LIB_NUMBER = strLoanLiabNoID,
                                    TRANS_NUMBER = strNewIdSchedI,
                                    FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                    FILING_SCHED_ID = Convert.ToInt32(itemAddData.FilingSchedId),
                                    CNTRBR_TYPE_ID = itemAddData.ContributorTypeId != "" ? Convert.ToInt32(itemAddData.ContributorTypeId) : (Int32?)null,
                                    CNTRBN_TYPE_ID = itemAddData.ContributionTypeId != "" ? Convert.ToInt32(itemAddData.ContributionTypeId) : (Int32?)null,
                                    PAYMENT_TYPE_ID = itemAddData.PaymentTypeId != "" ? Convert.ToInt32(itemAddData.PaymentTypeId) : (Int32?)null,
                                    PURPOSE_CODE_ID = itemAddData.PurposeCodeId != "" ? Convert.ToInt32(itemAddData.PurposeCodeId) : (Int32?)null,
                                    LOAN_OTHER_ID = itemAddData.LoanerCodeId != "" ? Convert.ToInt32(itemAddData.LoanerCodeId) : (Int32?)null,
                                    SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                    PAY_NUMBER = itemAddData.PayNumber,
                                    ORG_AMT = Convert.ToDouble(itemAddData.OriginalAmount),
                                    OWED_AMT = itemAddData.OwedAmount != "" ? Convert.ToDouble(itemAddData.OwedAmount) : (Double?)null,
                                    TRANS_EXPLNTN = itemAddData.TransExplanation,
                                    R_IE_SUPPORTED = itemAddData.IESupported,
                                    R_ITEMIZED = itemAddData.RItemized,
                                    R_STATUS = "A",
                                    CREATED_BY = strCreatedBy,
                                    CREATED_DATE = DateTime.Now
                                };

                                lstFILING_TRANSACTIONS_SCHED_I.Add(objAddSchedI);

                                String strNewIdSchedN = Guid.NewGuid().ToString().ToUpper();

                                FILING_TRANSACTIONS objAddSchedN = new FILING_TRANSACTIONS  // SCHEDULE 'N' '14'
                                {
                                    FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                    LOAN_LIB_NUMBER = strLoanLiabNoID,
                                    TRANS_NUMBER = strNewIdSchedN,
                                    TRANS_MAPPING = strNewIdSchedI,
                                    FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                    FILING_SCHED_ID = Convert.ToInt32("14"),   //itemAddData.FilingSchedId),
                                    CNTRBR_TYPE_ID = itemAddData.ContributorTypeId != "" ? Convert.ToInt32(itemAddData.ContributorTypeId) : (Int32?)null,
                                    CNTRBN_TYPE_ID = itemAddData.ContributionTypeId != "" ? Convert.ToInt32(itemAddData.ContributionTypeId) : (Int32?)null,
                                    PAYMENT_TYPE_ID = itemAddData.PaymentTypeId != "" ? Convert.ToInt32(itemAddData.PaymentTypeId) : (Int32?)null,
                                    PURPOSE_CODE_ID = itemAddData.PurposeCodeId != "" ? Convert.ToInt32(itemAddData.PurposeCodeId) : (Int32?)null,
                                    LOAN_OTHER_ID = itemAddData.LoanerCodeId != "" ? Convert.ToInt32(itemAddData.LoanerCodeId) : (Int32?)null,
                                    SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                    PAY_NUMBER = itemAddData.PayNumber,
                                    ORG_AMT = Convert.ToDouble(itemAddData.OriginalAmount),
                                    OWED_AMT = itemAddData.OriginalAmount != "" ? Convert.ToDouble(itemAddData.OriginalAmount) : (Double?)null,
                                    TRANS_EXPLNTN = itemAddData.TransExplanation,
                                    R_IE_SUPPORTED = itemAddData.IESupported,
                                    R_ITEMIZED = itemAddData.RItemized,
                                    R_STATUS = "A",
                                    CREATED_BY = strCreatedBy,
                                    CREATED_DATE = DateTime.Now
                                };

                                lstFILING_TRANSACTIONS_SCHED_I.Add(objAddSchedN);
                            }
                        }
                        else // SCHEDULE 'F' - EXPENDITURE PAYMENTS - TRANSACTIONS NON-ITEMIMZED IE - SCHEDULE 6
                        {
                            // ITS SCHEDULE 'F' TRANSACTIONS WITH LIABILITY OR NOT.
                            // ELSE NOT LIABILITY TRANSACTIONS....ITS EITHER NORMAL SCHEDULE 'F' PAYMENT OR SUBCONTRACTOR PAYMENT.
                            if (itemAddData.RLiability == "Y")
                            {
                                // NOT EXISTING LIABILITY ITS NEW LIABILITY SO WILL CREATE...
                                // ORIGINAL TRANSACTION SCHEDULE 'N' AND WILL CREATE OUTSTANDING TRANSACTION SCHEUDLE 'N'...
                                // AND WILL CREATE EXPENDITURE PAYMENT TRANSACTION SCHEDULE 'F'....
                                // TOTAL WILL CREATE 3 TRANSACTION IN ITEMIZED TRANSACTIONS.
                                if (itemAddData.LiabExistsTransId == "") // NOT EXISTING LIABILIT ITS NEW LIABILITY
                                {
                                    Double dblOriginalAmount = Convert.ToDouble(itemAddData.OriginalAmount) + Convert.ToDouble(itemAddData.OwedAmount);

                                    String strLoanLibNumber = Guid.NewGuid().ToString().ToUpper();
                                    String strTransNumberNewIdSchedNOrg = Guid.NewGuid().ToString().ToUpper();

                                    // SCHEDULE - 'N' - ORIGINAL TRANSACTION
                                    FILING_TRANSACTIONS objAddSchedN = new FILING_TRANSACTIONS
                                    {
                                        FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                        LOAN_LIB_NUMBER = strLoanLibNumber,
                                        TRANS_NUMBER = strTransNumberNewIdSchedNOrg,
                                        FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                        FILING_SCHED_ID = 14, // ITS SCHEDULE F - EXPENDITURE PAYMENT
                                        PAYMENT_TYPE_ID = Convert.ToInt32(itemAddData.PaymentTypeId),
                                        PURPOSE_CODE_ID = Convert.ToInt32(itemAddData.PurposeCodeId),
                                        SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                        PAY_NUMBER = itemAddData.PayNumber,
                                        ORG_AMT = dblOriginalAmount,
                                        OWED_AMT = dblOriginalAmount,
                                        TRANS_EXPLNTN = itemAddData.TransExplanation,
                                        R_IE_SUPPORTED = itemAddData.IESupported,
                                        R_SUBCONTRACTOR = itemAddData.RSubcontractor,
                                        R_LIABILITY = itemAddData.RLiability,
                                        R_ITEMIZED = itemAddData.RItemized,
                                        R_STATUS = "A",
                                        CREATED_BY = strCreatedBy,
                                        CREATED_DATE = DateTime.Now
                                    };

                                    lstFILING_TRANSACTIONS_SCHED_F.Add(objAddSchedN);

                                    String strTransNumberNewIdSchedF = Guid.NewGuid().ToString().ToUpper();

                                    // SCHEDULE - 'F'
                                    FILING_TRANSACTIONS objAdd = new FILING_TRANSACTIONS
                                    {
                                        FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                        LOAN_LIB_NUMBER = strLoanLibNumber,
                                        TRANS_NUMBER = strTransNumberNewIdSchedF,
                                        TRANS_MAPPING = strTransNumberNewIdSchedNOrg,
                                        FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                        FILING_SCHED_ID = Convert.ToInt32(itemAddData.FilingSchedId), // ITS SCHEDULE F - EXPENDITURE PAYMENT
                                        PAYMENT_TYPE_ID = Convert.ToInt32(itemAddData.PaymentTypeId),
                                        PURPOSE_CODE_ID = Convert.ToInt32(itemAddData.PurposeCodeId),
                                        SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                        PAY_NUMBER = itemAddData.PayNumber,
                                        ORG_AMT = Convert.ToDouble(itemAddData.OriginalAmount),
                                        TRANS_EXPLNTN = itemAddData.TransExplanation,
                                        R_IE_SUPPORTED = itemAddData.IESupported,
                                        R_SUBCONTRACTOR = itemAddData.RSubcontractor,
                                        R_LIABILITY = itemAddData.RLiability,
                                        R_ITEMIZED = itemAddData.RItemized,
                                        R_STATUS = "A",
                                        CREATED_BY = strCreatedBy,
                                        CREATED_DATE = DateTime.Now,
                                        R_PARENT = "Y"
                                    };

                                    lstFILING_TRANSACTIONS_SCHED_F.Add(objAdd);

                                    String strTransNumberNewIdSchedNOut = Guid.NewGuid().ToString().ToUpper();

                                    // SCHEDULE - 'N' - OUTSTANDING TRANSACTION
                                    FILING_TRANSACTIONS objAddSchedNOut = new FILING_TRANSACTIONS
                                    {
                                        FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                        LOAN_LIB_NUMBER = strLoanLibNumber,
                                        TRANS_NUMBER = strTransNumberNewIdSchedNOut,
                                        TRANS_MAPPING = strTransNumberNewIdSchedF,
                                        FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                        FILING_SCHED_ID = 14, // ITS SCHEDULE F - EXPENDITURE PAYMENT
                                        PAYMENT_TYPE_ID = Convert.ToInt32(itemAddData.PaymentTypeId),
                                        PURPOSE_CODE_ID = Convert.ToInt32(itemAddData.PurposeCodeId),
                                        SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                        PAY_NUMBER = itemAddData.PayNumber,
                                        ORG_AMT = dblOriginalAmount,
                                        OWED_AMT = Convert.ToDouble(itemAddData.OwedAmount),
                                        TRANS_EXPLNTN = itemAddData.TransExplanation,
                                        R_IE_SUPPORTED = itemAddData.IESupported,
                                        R_SUBCONTRACTOR = itemAddData.RSubcontractor,
                                        R_LIABILITY = itemAddData.RLiability,
                                        R_ITEMIZED = itemAddData.RItemized,
                                        R_STATUS = "A",
                                        CREATED_BY = strCreatedBy,
                                        CREATED_DATE = DateTime.Now
                                    };

                                    lstFILING_TRANSACTIONS_SCHED_F.Add(objAddSchedNOut);
                                }
                                // ITS EXISTING LIABILITY SO WILL CREATE EXPENDITURE PAYMENT SCHEDULE 'F' TRANSACTION...
                                // AND OUTSTANDING TRANSACTION SCHEDULE 'N'.. TOTAL 2 TRANSACTION IN ITEMIZED TRANSACTIONS.
                                else
                                {
                                    String strTransNumberNewIdSchedF = Guid.NewGuid().ToString().ToUpper();
                                    // SCHEDULE - 'F'
                                    FILING_TRANSACTIONS objAdd = new FILING_TRANSACTIONS
                                    {
                                        FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                        LOAN_LIB_NUMBER = itemAddData.LoanLibNumberSchedN,
                                        TRANS_NUMBER = strTransNumberNewIdSchedF,
                                        TRANS_MAPPING = itemAddData.LiabExistsTransId,
                                        FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                        FILING_SCHED_ID = Convert.ToInt32(itemAddData.FilingSchedId), // ITS SCHEDULE F - EXPENDITURE PAYMENT
                                        PAYMENT_TYPE_ID = Convert.ToInt32(itemAddData.PaymentTypeId),
                                        PURPOSE_CODE_ID = Convert.ToInt32(itemAddData.PurposeCodeId),
                                        SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                        PAY_NUMBER = itemAddData.PayNumber,
                                        ORG_AMT = Convert.ToDouble(itemAddData.OriginalAmount),
                                        TRANS_EXPLNTN = itemAddData.TransExplanation,
                                        R_IE_SUPPORTED = itemAddData.IESupported,
                                        R_SUBCONTRACTOR = itemAddData.RSubcontractor,
                                        R_LIABILITY = itemAddData.RLiability,
                                        R_ITEMIZED = itemAddData.RItemized,
                                        R_STATUS = "A",
                                        CREATED_BY = strCreatedBy,
                                        CREATED_DATE = DateTime.Now,
                                        R_PARENT = "Y"
                                    };

                                    lstFILING_TRANSACTIONS_SCHED_F.Add(objAdd);

                                    String strTransNumberNewIdSchedNOut = Guid.NewGuid().ToString().ToUpper();

                                    // SCHEDULE - 'N' - OUTSTANDING TRANSACTION
                                    FILING_TRANSACTIONS objAddSchedNOut = new FILING_TRANSACTIONS
                                    {
                                        FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                        LOAN_LIB_NUMBER = itemAddData.LoanLibNumberSchedN,
                                        TRANS_NUMBER = strTransNumberNewIdSchedNOut,
                                        TRANS_MAPPING = strTransNumberNewIdSchedF,
                                        FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                        FILING_SCHED_ID = 14, // ITS SCHEDULE F - EXPENDITURE PAYMENT
                                        PAYMENT_TYPE_ID = Convert.ToInt32(itemAddData.PaymentTypeId),
                                        PURPOSE_CODE_ID = Convert.ToInt32(itemAddData.PurposeCodeId),
                                        SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                        PAY_NUMBER = itemAddData.PayNumber,
                                        ORG_AMT = Convert.ToDouble(itemAddData.LiabExistsOrigAmount),
                                        OWED_AMT = Convert.ToDouble(itemAddData.OwedAmount),
                                        TRANS_EXPLNTN = itemAddData.TransExplanation,
                                        //EXISTS_LIAB_TRANS_NUMBER = itemAddData.LiabExistsTransId,
                                        R_IE_SUPPORTED = itemAddData.IESupported,
                                        R_SUBCONTRACTOR = itemAddData.RSubcontractor,
                                        R_LIABILITY = itemAddData.RLiability,
                                        R_ITEMIZED = itemAddData.RItemized,
                                        R_STATUS = "A",
                                        CREATED_BY = strCreatedBy,
                                        CREATED_DATE = DateTime.Now
                                    };

                                    lstFILING_TRANSACTIONS_SCHED_F.Add(objAddSchedNOut);
                                }
                            }
                            else // ITS NOT LIABILITY TRANSACTIONS....ITS EITHER NORMAL SCHEDULE 'F' PAYMENT OR SUBCONTRACTOR PAYMENT.
                            {
                                String strTransNumberNewIdAll = Guid.NewGuid().ToString().ToUpper();

                                FILING_TRANSACTIONS objAdd = new FILING_TRANSACTIONS
                                {
                                    FLNG_ENT_ID = Convert.ToInt64(itemAddData.FilingEntityId),
                                    TRANS_NUMBER = strTransNumberNewIdAll,
                                    FILINGS_ID = Convert.ToInt64(itemAddData.FilingsId),
                                    FILING_SCHED_ID = Convert.ToInt32(itemAddData.FilingSchedId),
                                    PAYMENT_TYPE_ID = Convert.ToInt32(itemAddData.PaymentTypeId),
                                    PURPOSE_CODE_ID = Convert.ToInt32(itemAddData.PurposeCodeId),
                                    SCHED_DATE = Convert.ToDateTime(itemAddData.SchedDate),
                                    PAY_NUMBER = itemAddData.PayNumber,
                                    ORG_AMT = Convert.ToDouble(itemAddData.OriginalAmount),
                                    TRANS_EXPLNTN = itemAddData.TransExplanation,
                                    R_IE_SUPPORTED = itemAddData.IESupported,
                                    R_SUBCONTRACTOR = itemAddData.RSubcontractor,
                                    R_LIABILITY = itemAddData.RLiability,
                                    R_ITEMIZED = itemAddData.RItemized,
                                    R_STATUS = "A",
                                    CREATED_BY = strCreatedBy,
                                    CREATED_DATE = DateTime.Now,
                                    R_PARENT = "Y"
                                };

                                lstFILING_TRANSACTIONS.Add(objAdd);
                            }
                        }

                        if (lstFILING_TRANSACTIONS_SCHED_F.Count() >= 1)
                        {
                            using (var context = new CAPASFIDAS_RLSEntities())
                            {

                                using (var dbContextTransaction = context.Database.BeginTransaction())
                                {
                                    try
                                    {
                                        // HAVE TO WORK ON THESE MAPPING BECUASE THE FILING_TRANSACTION_MAPPING TABLE GOT DELETED
                                        // ... WE ARE NOT USING MAPPING TABLE SO HAVE TO LOOK INTO THIS.
                                        //++++++++++================++++++++++++++++++++++
                                        //++++++++++================++++++++++++++++++++++
                                        //++++++++++================++++++++++++++++++++++

                                        //IList<FILING_TRANSACTIONS_MAPPING> lstFILING_TRANSACTIONS_MAPPING = new List<FILING_TRANSACTIONS_MAPPING>();
                                        using (var dbAdd = new CAPASFIDAS_RLSEntities())
                                        {
                                            // INSERT
                                            dbAdd.FILING_TRANSACTIONS.AddRange(lstFILING_TRANSACTIONS_SCHED_F);
                                            dbAdd.SaveChanges();

                                        }

                                        // COMMIT TRANSACTIONS. IF NO ERRORS.
                                        dbContextTransaction.Commit();
                                    }
                                    catch (Exception ex)
                                    {
                                        dbContextTransaction.Rollback();
                                        return false;
                                        throw new CommonException(string.Format(ex.Message));
                                    }
                                }
                            }
                        }

                        if (lstFILING_TRANSACTIONS_SCHED_I.Count() >= 1)
                        {
                            using (var context = new CAPASFIDAS_RLSEntities())
                            {
                                using (var dbContextTransaction = context.Database.BeginTransaction())
                                {
                                    try
                                    {
                                        // HAVE TO WORK ON THESE MAPPING BECUASE THE FILING_TRANSACTION_MAPPING TABLE GOT DELETED
                                        // ... WE ARE NOT USING MAPPING TABLE SO HAVE TO LOOK INTO THIS.
                                        //++++++++++================++++++++++++++++++++++
                                        //++++++++++================++++++++++++++++++++++
                                        //++++++++++================++++++++++++++++++++++

                                        //IList<FILING_TRANSACTIONS_MAPPING> lstFILING_TRANSACTIONS_MAPPING = new List<FILING_TRANSACTIONS_MAPPING>();
                                        using (var dbAdd = new CAPASFIDAS_RLSEntities())
                                        {
                                            // INSERT
                                            dbAdd.FILING_TRANSACTIONS.AddRange(lstFILING_TRANSACTIONS_SCHED_I);
                                            dbAdd.SaveChanges();
                                        }

                                        // COMMIT TRANSACTIONS. IF NO ERRORS.
                                        dbContextTransaction.Commit();
                                    }
                                    catch (Exception ex)
                                    {
                                        dbContextTransaction.Rollback();
                                        return false;
                                        throw new CommonException(string.Format(ex.Message));
                                    }
                                }
                            }
                        }
                    }

                    using (var context = new CAPASFIDAS_RLSEntities())
                    {
                        using (var dbContextTransaction = context.Database.BeginTransaction())
                        {
                            try
                            {
                                using (var dbAdd = new CAPASFIDAS_RLSEntities())
                                {
                                    // INSERT
                                    dbAdd.FILING_TRANSACTIONS.AddRange(lstFILING_TRANSACTIONS);
                                    dbAdd.SaveChanges();
                                }

                                Boolean resultValue = false;
                                //UPDATE
                                foreach (var itemUpdateData in strTransNumber)
                                {
                                    var results = entities.SP_U_ItemizedIETransUpdate(itemUpdateData.ToString(), strCreatedBy);

                                    if (results >= 1)
                                        resultValue = true;
                                    else
                                        resultValue = false;
                                }

                                // COMMIT TRANSACTIONS. IF NO ERRORS.
                                dbContextTransaction.Commit();

                                if (resultValue)
                                    return true;
                                else
                                    return false;
                            }
                            catch (Exception ex)
                            {
                                dbContextTransaction.Rollback();
                                return false;
                                throw new CommonException(string.Format(ex.Message));
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddItemizedIETransactionsData

        #region GetContributorCodeIEWeeklyContrSchedC
        /// <summary>
        /// /GetContributorCodeIEWeeklyContrSchedC
        /// </summary>
        /// <returns></returns>
        public IList<ContributorNameEntity> GetContributorCodeIEWeeklyContrSchedC()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContributorNameEntity> lstContributorNameEntity = new List<ContributorNameEntity>();
                    ContributorNameEntity objContributorNameEntity;

                    var results = entities.SP_S_ContributorCodeIEWeeklyContrSchedC();

                    foreach (var item in results)
                    {
                        objContributorNameEntity = new ContributorNameEntity();
                        objContributorNameEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objContributorNameEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objContributorNameEntity.ContributorTypeAbbrev = item.CNTRBR_TYPE_ABBREV;
                        lstContributorNameEntity.Add(objContributorNameEntity);
                    }

                    return lstContributorNameEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetContributorCodeIEWeeklyContrSchedC

        #region GetContributorCodeIEWeeklyContrScheD
        /// <summary>
        /// GetContributorCodeIEWeeklyContrScheD
        /// </summary>
        /// <returns></returns>
        public IList<ContributorNameEntity> GetContributorCodeIEWeeklyContrSchedD()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContributorNameEntity> lstContributorNameEntity = new List<ContributorNameEntity>();
                    ContributorNameEntity objContributorNameEntity;

                    var results = entities.SP_S_ContributorCodeIEWeeklyContrSchedD();

                    foreach (var item in results)
                    {
                        objContributorNameEntity = new ContributorNameEntity();
                        objContributorNameEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objContributorNameEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objContributorNameEntity.ContributorTypeAbbrev = item.CNTRBR_TYPE_ABBREV;
                        lstContributorNameEntity.Add(objContributorNameEntity);
                    }

                    return lstContributorNameEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetContributorCodeIEWeeklyContrScheD

        #region GetFilingTransIE24HContributioneData
        /// <summary>
        /// GetFilingTransIE24HContributioneData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIE24HContributioneData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIE24HContributionTrans(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        //objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        //objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else if (item.R_IE_SUPPORTED == "N")
                            objFilingTransactionDataEntity.IESupported = "No";
                        else
                            objFilingTransactionDataEntity.IESupported = "";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIE24HContributioneData

        #region GetFilingTransIE24HContributionHistoryData
        /// <summary>
        /// GetFilingTransIE24HContributionHistoryData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIE24HContributionHistoryData(String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIE24HContributionTransHistory(strTransNumber);

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.IESupported = item.R_IE_SUPPORTED;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIE24HContributionHistoryData

        #region GetIE24HContrTransactionTypes
        /// <summary>
        /// GetIE24HContrTransactionTypes
        /// </summary>
        /// <returns></returns>
        public IList<TransactionTypesEntity> GetIE24HContrTransactionTypes()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionTypesEntity> lstTransactionTypesEntity = new List<TransactionTypesEntity>();
                    TransactionTypesEntity objTransactionTypesEntity;

                    var results = entities.SP_S_TransactionTypes24HContribution();

                    foreach (var item in results)
                    {
                        objTransactionTypesEntity = new TransactionTypesEntity();
                        objTransactionTypesEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objTransactionTypesEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objTransactionTypesEntity.FilingSchedAbbrev = item.FILING_SCHED_ABBREV;
                        lstTransactionTypesEntity.Add(objTransactionTypesEntity);
                    }

                    return lstTransactionTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetIE24HContrTransactionTypes

        #region AddNonItemIE24HContrFlngTrans
        /// <summary>
        /// AddNonItemIE24HContrFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemIE24HContrFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedIE24HContrFlngTrans(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.LoanOtherId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.LoanOtherId),
                        objFilingTransactionsEntity.PayNumber,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntFirstName,
                        objFilingTransactionsEntity.FlngEntLastName,
                        objFilingTransactionsEntity.FlngEntMiddleName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        objFilingTransactionsEntity.CandBallotPropReference,
                        objFilingTransactionsEntity.ContributorOccupation,
                        objFilingTransactionsEntity.ContributorEmployer,
                        objFilingTransactionsEntity.IEDescription,
                        objFilingTransactionsEntity.R_Supported,
                        objFilingTransactionsEntity.CreatedBy,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemIE24HContrFlngTrans

        #region UpdateIE24HContrFlngTrans
        /// <summary>
        /// UpdateIE24HContrFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateIE24HContrFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItemizedIE24HContrFlngTrans(objFilingTransactionsEntity.TransNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.ContributionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributionTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                    objFilingTransactionsEntity.SubmissionDate,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    objFilingTransactionsEntity.PayNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntFirstName,
                    objFilingTransactionsEntity.FlngEntMiddleName,
                    objFilingTransactionsEntity.FlngEntLastName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.TreasurerStreetAddress,
                    objFilingTransactionsEntity.TreasurerCity,
                    objFilingTransactionsEntity.TreasurerState,
                    objFilingTransactionsEntity.TreasurerZip,
                    objFilingTransactionsEntity.ContributorOccupation,
                    objFilingTransactionsEntity.ContributorEmployer,
                    objFilingTransactionsEntity.IEDescription,
                    objFilingTransactionsEntity.TreasurerOccupation,
                    objFilingTransactionsEntity.TreasurerEmployer,
                    objFilingTransactionsEntity.R_Supported,
                    objFilingTransactionsEntity.CandBallotPropReference,
                    objFilingTransactionsEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion UpdateIE24HContrFlngTrans

        #region SubmitIE24HContrFlngTrans
        /// <summary>
        /// SubmitIE24HContrFlngTrans
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean SubmitIE24HContrFlngTrans(String strTransNumber, String strModifiedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItemizedIE24HContrFlngTransSubmit(strTransNumber, strModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion SubmitIE24HContrFlngTrans

        #region GetIEWeeklyExpTransactionTypes
        /// <summary>
        /// GetIEWeeklyExpTransactionTypes
        /// </summary>
        /// <returns></returns>
        public IList<TransactionTypesEntity> GetIEWeeklyExpTransactionTypes()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionTypesEntity> lstTransactionTypesEntity = new List<TransactionTypesEntity>();
                    TransactionTypesEntity objTransactionTypesEntity;

                    var results = entities.SP_S_TransactionTypeIEWeeklyExpenditure();

                    foreach (var item in results)
                    {
                        objTransactionTypesEntity = new TransactionTypesEntity();
                        objTransactionTypesEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objTransactionTypesEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objTransactionTypesEntity.FilingSchedAbbrev = item.FILING_SCHED_ABBREV;
                        lstTransactionTypesEntity.Add(objTransactionTypesEntity);
                    }

                    return lstTransactionTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetIEWeeklyExpTransactionTypes

        #region GetFilingTransIEWeeklyExpenditureData
        /// <summary>
        /// GetFilingTransIEWeeklyExpenditureData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIEWeeklyExpenditureData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIEWeeklyExpenditureTrans(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.MunicipalityID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        if (item.OWED_AMT != null)
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        else
                            objFilingTransactionDataEntity.OwedAmount = "";

                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else
                            objFilingTransactionDataEntity.IESupported = "No";
                        if (item.R_LIABILITY == "Y")
                            objFilingTransactionDataEntity.RLiability = "Yes";
                        else
                            objFilingTransactionDataEntity.RLiability = "No";
                        if (item.R_SUBCONTRACTOR == "Y")
                            objFilingTransactionDataEntity.RSubcontractor = "Yes";
                        else
                            objFilingTransactionDataEntity.RSubcontractor = "No";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.DateIncurredOrgAmtId = item.EXISTS_LIAB_TRANS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        objFilingTransactionDataEntity.FilingsId = Convert.ToString(item.FILINGS_ID);
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIEWeeklyExpenditureData

        #region GetFilingTransIEWeeklyExpenditureHistoryData
        /// <summary>
        /// GetFilingTransIEWeeklyExpenditureHistoryData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIEWeeklyExpenditureHistoryData(String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIEWeeklyExpenditureTransHistory(strTransNumber);

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.PurposeCodeId = item.PURPOSE_CODE_ID;
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.IESupported = item.R_IE_SUPPORTED;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIEWeeklyExpenditureHistoryData

        #region AddNonItemIEWeeklyExpFlngTrans
        /// <summary>
        /// AddNonItemIEWeeklyExpFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemIEWeeklyExpFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedIEWeeklyExpFlngTrans(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                        objFilingTransactionsEntity.PayNumber,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        objFilingTransactionsEntity.CandBallotPropReference,
                        objFilingTransactionsEntity.IEDescription,
                        objFilingTransactionsEntity.DateIncurredOrgAmtId,
                        objFilingTransactionsEntity.R_Supported,
                        objFilingTransactionsEntity.RLiability,
                        objFilingTransactionsEntity.RSubcontractor,
                        objFilingTransactionsEntity.CreatedBy,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemIEWeeklyExpFlngTrans

        #region UpdateIEWeeklyExpenditureFlngTrans
        /// <summary>
        /// UpdateIEWeeklyExpenditureFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateIEWeeklyExpenditureFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItemIEWeeklyExpenditureTrans(objFilingTransactionsEntity.TransNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                    objFilingTransactionsEntity.SubmissionDate,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    objFilingTransactionsEntity.PayNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.TreasurerStreetAddress,
                    objFilingTransactionsEntity.TreasurerCity,
                    objFilingTransactionsEntity.TreasurerState,
                    objFilingTransactionsEntity.TreasurerZip,
                    objFilingTransactionsEntity.IEDescription,
                    objFilingTransactionsEntity.TreasurerOccupation,
                    objFilingTransactionsEntity.TreasurerEmployer,
                    objFilingTransactionsEntity.R_Supported,
                    objFilingTransactionsEntity.CandBallotPropReference,
                    objFilingTransactionsEntity.DateIncurredOrgAmtId,
                    objFilingTransactionsEntity.RSubcontractor,
                    objFilingTransactionsEntity.RLiability,
                    objFilingTransactionsEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion UpdateIEWeeklyExpenditureFlngTrans

        #region GetNonItemIEDateIncrdLiabUpdateData
        /// <summary>
        /// GetNonItemIEDateIncrdLiabUpdateData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<DateIncurredEntity> GetNonItemIEDateIncrdLiabUpdateData(String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DateIncurredEntity> lstDateIncurredEntity = new List<DateIncurredEntity>();
                    DateIncurredEntity objDateIncurredEntity;

                    var results = entities.SP_S_NonItemIEDateIncrdLiabUpdate(strTransNumber);

                    foreach (var item in results)
                    {
                        objDateIncurredEntity = new DateIncurredEntity();
                        objDateIncurredEntity.DateIncurredId = item.TRANS_NUMBER;
                        objDateIncurredEntity.DateIncurredValue = item.SCHED_DATE;
                        objDateIncurredEntity.AmountLiability = String.Format("{0:0.00}", item.ORG_AMT);
                        lstDateIncurredEntity.Add(objDateIncurredEntity);
                    }
                    return lstDateIncurredEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetNonItemIEDateIncrdLiabUpdateData

        #region GetNonItemIEPurposeCodes
        /// <summary>
        /// GetNonItemIEPurposeCodes
        /// </summary>
        /// <returns></returns>
        public IList<PurposeCodeEntity> GetNonItemIEPurposeCodes()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCodeNonItemIESchedF();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetNonItemIEPurposeCodes

        #region GetNonItemIEPurposeCodesSubContr
        /// <summary>
        /// GetNonItemIEPurposeCodesSubContr
        /// </summary>
        /// <returns></returns>
        public IList<PurposeCodeEntity> GetNonItemIEPurposeCodesSubContr()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCodeNonItemIESchedFSubContr();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetNonItemIEPurposeCodesSubContr

        #region GetFilingTransIE24HourExpenditureData
        /// <summary>
        /// GetFilingTransIE24HourExpenditureData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIE24HourExpenditureData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIE24HourExpenditureTrans(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        if (item.OWED_AMT != null)
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        else
                            objFilingTransactionDataEntity.OwedAmount = "";

                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else
                            objFilingTransactionDataEntity.IESupported = "No";
                        if (item.R_LIABILITY == "Y")
                            objFilingTransactionDataEntity.RLiability = "Yes";
                        else
                            objFilingTransactionDataEntity.RLiability = "No";
                        if (item.R_SUBCONTRACTOR == "Y")
                            objFilingTransactionDataEntity.RSubcontractor = "Yes";
                        else
                            objFilingTransactionDataEntity.RSubcontractor = "No";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.DateIncurredOrgAmtId = item.EXISTS_LIAB_TRANS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIE24HourExpenditureData

        #region GetFilingTransIE24HourPIDAExpenditureData
        /// <summary>
        /// GetFilingTransIE24HourPIDAExpenditureData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIE24HourPIDAExpenditureData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIE24HourPIDAExpenditureTrans(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                    String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        if (item.OWED_AMT != null)
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        else
                            objFilingTransactionDataEntity.OwedAmount = "";

                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else
                            objFilingTransactionDataEntity.IESupported = "No";
                        if (item.R_LIABILITY == "Y")
                            objFilingTransactionDataEntity.RLiability = "Yes";
                        else
                            objFilingTransactionDataEntity.RLiability = "No";
                        if (item.R_SUBCONTRACTOR == "Y")
                            objFilingTransactionDataEntity.RSubcontractor = "Yes";
                        else
                            objFilingTransactionDataEntity.RSubcontractor = "No";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.DateIncurredOrgAmtId = item.EXISTS_LIAB_TRANS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }
        }
        #endregion GetFilingTransIE24HourPIDAExpenditureData

        #region AddNonItemIE24HourExpFlngTrans
        /// <summary>
        /// AddNonItemIE24HourExpFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemIE24HourExpFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedIE24HourExpFlngTrans(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                        objFilingTransactionsEntity.PayNumber,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        objFilingTransactionsEntity.CandBallotPropReference,
                        objFilingTransactionsEntity.IEDescription,
                        objFilingTransactionsEntity.DateIncurredOrgAmtId,
                        objFilingTransactionsEntity.R_Supported,
                        objFilingTransactionsEntity.RLiability,
                        objFilingTransactionsEntity.RSubcontractor,
                        objFilingTransactionsEntity.CreatedBy,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemIE24HourExpFlngTrans

        #region AddNonItemIE24HourPIDAExpFlngTrans
        /// <summary>
        /// AddNonItemIE24HourPIDAExpFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemIE24HourPIDAExpFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedIE24HourPIDAExpFlngTrans(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                        objFilingTransactionsEntity.PayNumber,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        objFilingTransactionsEntity.CandBallotPropReference,
                        objFilingTransactionsEntity.IEDescription,
                        objFilingTransactionsEntity.DateIncurredOrgAmtId,
                        objFilingTransactionsEntity.R_Supported,
                        objFilingTransactionsEntity.RLiability,
                        objFilingTransactionsEntity.RSubcontractor,
                        objFilingTransactionsEntity.CreatedBy,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }
        }
        #endregion AddNonItemIE24HourPIDAExpFlngTrans

        #region GetFilingTransIEWeeklyPIDAExpenditureData
        /// <summary>
        /// GetFilingTransIEWeeklyPIDAExpenditureData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIEWeeklyPIDAExpenditureData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIEWeeklyPIDAExpenditureTrans(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate),
                                        String.IsNullOrEmpty(objFilingTransDataEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.MunicipalityID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        if (item.OWED_AMT != null)
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        else
                            objFilingTransactionDataEntity.OwedAmount = "";

                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else
                            objFilingTransactionDataEntity.IESupported = "No";
                        if (item.R_LIABILITY == "Y")
                            objFilingTransactionDataEntity.RLiability = "Yes";
                        else
                            objFilingTransactionDataEntity.RLiability = "No";
                        if (item.R_SUBCONTRACTOR == "Y")
                            objFilingTransactionDataEntity.RSubcontractor = "Yes";
                        else
                            objFilingTransactionDataEntity.RSubcontractor = "No";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.DateIncurredOrgAmtId = item.EXISTS_LIAB_TRANS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIEWeeklyPIDAExpenditureData

        #region AddNonItemIEWeeklyPIDAExpFlngTrans
        /// <summary>
        /// AddNonItemIEWeeklyPIDAExpFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemIEWeeklyPIDAExpFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedIEWeeklyPIDAExpFlngTrans(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                        objFilingTransactionsEntity.PayNumber,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        objFilingTransactionsEntity.CandBallotPropReference,
                        objFilingTransactionsEntity.IEDescription,
                        objFilingTransactionsEntity.DateIncurredOrgAmtId,
                        objFilingTransactionsEntity.R_Supported,
                        objFilingTransactionsEntity.RLiability,
                        objFilingTransactionsEntity.RSubcontractor,
                        objFilingTransactionsEntity.CreatedBy,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemIEWeeklyPIDAExpFlngTrans

        #region GetIEWeeklyLiabInccrTransactionTypes
        /// <summary>
        /// GetIEWeeklyLiabInccrTransactionTypes
        /// </summary>
        /// <returns></returns>
        public IList<TransactionTypesEntity> GetIEWeeklyLiabInccrTransactionTypes()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionTypesEntity> lstTransactionTypesEntity = new List<TransactionTypesEntity>();
                    TransactionTypesEntity objTransactionTypesEntity;

                    var results = entities.SP_S_TransactionTypeIEWeeklyLiabIncr();

                    foreach (var item in results)
                    {
                        objTransactionTypesEntity = new TransactionTypesEntity();
                        objTransactionTypesEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objTransactionTypesEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objTransactionTypesEntity.FilingSchedAbbrev = item.FILING_SCHED_ABBREV;
                        lstTransactionTypesEntity.Add(objTransactionTypesEntity);
                    }

                    return lstTransactionTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetIEWeeklyLiabInccrTransactionTypes

        #region GetNonItemIESchedNPurposeCodes
        /// <summary>
        /// GetNonItemIESchedNPurposeCodes
        /// </summary>
        /// <returns></returns>
        public IList<PurposeCodeEntity> GetNonItemIESchedNPurposeCodes()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCodeNonItemIESchedN();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetNonItemIESchedNPurposeCodes

        #region GetFilingTransIEWeeklyLiabIncrData
        /// <summary>
        /// GetFilingTransIEWeeklyLiabIncrData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIEWeeklyLiabIncrData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;
                    //var results = entities.SP_S_NonItemIEWeeklyLiabIncrTrans(objFilingTransDataEntity.FilerId,
                    //    objFilingTransDataEntity.ReportYearId, objFilingTransDataEntity.OfficeTypeId,
                    //    objFilingTransDataEntity.ElectionType, objFilingTransDataEntity.ElectionDateId);

                    var results = entities.SP_S_NonItemIEWeeklyLiabIncrTrans(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate),
                                String.IsNullOrEmpty(objFilingTransDataEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.MunicipalityID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        if (item.OWED_AMT != null)
                            objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        else
                            objFilingTransactionDataEntity.OwedAmount = "";

                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.ContributorOccupation = item.CREDITOR_OCCUPATION;
                        objFilingTransactionDataEntity.ContributorEmployer = item.CREDITOR_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else
                            objFilingTransactionDataEntity.IESupported = "No";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIEWeeklyLiabIncrData

        #region GetFilingTransIEWeeklyLiabIncrHistoryData
        /// <summary>
        /// GetFilingTransIEWeeklyLiabIncrHistoryData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransIEWeeklyLiabIncrHistoryData(String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemIEWeeklyLiabIncrTransHistory(strTransNumber);

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.PurposeCodeId = item.PURPOSE_CODE_ID;
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.ContributorOccupation = item.CREDITOR_OCCUPATION;
                        objFilingTransactionDataEntity.ContributorEmployer = item.CREDITOR_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.IESupported = item.R_IE_SUPPORTED;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingTransIEWeeklyLiabIncrHistoryData

        #region AddNonItemIEWeeklyLiabIncrFlngTrans
        /// <summary>
        /// AddNonItemIEWeeklyLiabIncrFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemIEWeeklyLiabIncrFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedIEWeeklyLiabIncrFlngTrans(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                        objFilingTransactionsEntity.PayNumber,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.RAmend,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.FlngEntCountry,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.ContributorOccupation,
                        objFilingTransactionsEntity.ContributorEmployer,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        objFilingTransactionsEntity.CandBallotPropReference,
                        objFilingTransactionsEntity.IEDescription,
                        objFilingTransactionsEntity.DateIncurredOrgAmtId,
                        objFilingTransactionsEntity.R_Supported,
                        objFilingTransactionsEntity.CreatedBy,
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemIEWeeklyLiabIncrFlngTrans

        #region UpdateIEWeeklyLiabIncrFlngTrans
        /// <summary>
        /// UpdateIEWeeklyLiabIncrFlngTrans
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateIEWeeklyLiabIncrFlngTrans(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_NonItemIEWeeklyLiabIncrTrans(objFilingTransactionsEntity.TransNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.TreasId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.TreasId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.AddrId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.AddrId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PersonId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.PersonId),
                    objFilingTransactionsEntity.SubmissionDate,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                    objFilingTransactionsEntity.PayNumber,
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.PurposeCodeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PurposeCodeId),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                    String.IsNullOrEmpty(objFilingTransactionsEntity.OwedAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OwedAmt),
                    objFilingTransactionsEntity.TransExplanation,
                    objFilingTransactionsEntity.FlngEntName,
                    objFilingTransactionsEntity.FlngEntCountry,
                    objFilingTransactionsEntity.FlngEntStrName,
                    objFilingTransactionsEntity.FlngEntCity,
                    objFilingTransactionsEntity.FlngEntState,
                    objFilingTransactionsEntity.FlngEntZip,
                    objFilingTransactionsEntity.TreasurerStreetAddress,
                    objFilingTransactionsEntity.TreasurerCity,
                    objFilingTransactionsEntity.TreasurerState,
                    objFilingTransactionsEntity.TreasurerZip,
                    objFilingTransactionsEntity.IEDescription,
                    objFilingTransactionsEntity.TreasurerOccupation,
                    objFilingTransactionsEntity.TreasurerEmployer,
                    objFilingTransactionsEntity.ContributorOccupation,
                    objFilingTransactionsEntity.ContributorEmployer,
                    objFilingTransactionsEntity.R_Supported,
                    objFilingTransactionsEntity.CandBallotPropReference,
                    objFilingTransactionsEntity.ModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion UpdateIEWeeklyLiabIncrFlngTrans

        #region GetFilingMethodData
        /// <summary>
        /// GetFilingMethodData
        /// </summary>
        /// <returns></returns>
        public IList<FilingMthodEntity> GetFilingMethodData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingMthodEntity> lstFilingMthodEntity = new List<FilingMthodEntity>();
                    FilingMthodEntity objFilingMthodEntity;

                    var results = entities.SP_S_FilingMethods();

                    foreach (var item in results)
                    {
                        objFilingMthodEntity = new FilingMthodEntity();
                        objFilingMthodEntity.FilingMethodId = Convert.ToString(item.FILING_METHOD_ID);
                        objFilingMthodEntity.FilingMethodDesc = item.FILING_METHOD_DESC;
                        lstFilingMthodEntity.Add(objFilingMthodEntity);
                    }

                    return lstFilingMthodEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingMethodData

        #region GetCampaignMaterialData
        /// <summary>
        /// GetCampaignMaterialData
        /// </summary>
        /// <param name="objNonItemCampaignMaterialEntity"></param>
        /// <returns></returns>
        public IList<NonItemCampaignMaterialDataEntity> GetCampaignMaterialData(NonItemCampaignMaterialEntity objNonItemCampaignMaterialEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<NonItemCampaignMaterialDataEntity> lstNonItemCampaignMaterialDataEntity = new List<NonItemCampaignMaterialDataEntity>();
                    NonItemCampaignMaterialDataEntity objNonItemCampaignMaterialDataEntity;

                    var results = entities.SP_S_NonItemCampaignMaterial(String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilerId) ? (long?)null : Convert.ToInt64(objNonItemCampaignMaterialEntity.FilerId),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objNonItemCampaignMaterialEntity.ElectionDate),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectYearId),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectionYear),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectionTypeId),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.OfficeTypeId),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.FilingTypeId),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectionDateId),
                                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objNonItemCampaignMaterialEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objNonItemCampaignMaterialDataEntity = new NonItemCampaignMaterialDataEntity();
                        objNonItemCampaignMaterialDataEntity.CampaignMaterialId = Convert.ToString(item.CAMP_MATR_ID);
                        objNonItemCampaignMaterialDataEntity.FilingMethodId = Convert.ToString(item.FILING_METHOD_ID);
                        objNonItemCampaignMaterialDataEntity.SacnDocId = Convert.ToString(item.SCAN_DOC_ID);
                        if (item.DATE_SUBMITTED != "")
                        {
                            if (Convert.ToDateTime(item.DATE_SUBMITTED).ToShortDateString() == "1/1/1900")
                                objNonItemCampaignMaterialDataEntity.DateSubmitted = "";
                            else
                                objNonItemCampaignMaterialDataEntity.DateSubmitted = item.DATE_SUBMITTED;
                        }
                        else
                        {
                            objNonItemCampaignMaterialDataEntity.DateSubmitted = "";
                        }
                        objNonItemCampaignMaterialDataEntity.CampaignMaterialDesc = item.CAMP_MATR_DESC;
                        objNonItemCampaignMaterialDataEntity.FilingMethodDesc = item.FILING_METHOD_DESC;
                        if (item.R_CAMP_MATR == "Y")
                            objNonItemCampaignMaterialDataEntity.RCampMatr = "Yes";
                        else
                            objNonItemCampaignMaterialDataEntity.RCampMatr = "No";
                        objNonItemCampaignMaterialDataEntity.CreatedDate = item.CREATED_DATE.ToShortDateString();
                        objNonItemCampaignMaterialDataEntity.CampMatrFileType = item.CAMP_MATR_FILE_TYPE;
                        objNonItemCampaignMaterialDataEntity.CampMatrFileSize = item.CAMP_MATR_FILE_SIZE;
                        if (item.R_AMEND == "N")
                            objNonItemCampaignMaterialDataEntity.RAmended = "No";
                        else
                            objNonItemCampaignMaterialDataEntity.RAmended = "Yes";
                        lstNonItemCampaignMaterialDataEntity.Add(objNonItemCampaignMaterialDataEntity);
                    }

                    return lstNonItemCampaignMaterialDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetCampaignMaterialData

        #region AddNonItemCampaignMaterial
        /// <summary>
        /// AddNonItemCampaignMaterial
        /// </summary>
        /// <param name="objNonItemCampaignMaterialEntity"></param>
        /// <returns></returns>
        public Boolean AddNonItemCampaignMaterial(NonItemCampaignMaterialEntity objNonItemCampaignMaterialEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItem_CampaignMaterial(String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilerId) ? (long?)null : Convert.ToInt64(objNonItemCampaignMaterialEntity.FilerId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objNonItemCampaignMaterialEntity.ElectionDate),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectionDateId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.FilingTypeId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilingCategoryId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.FilingCategoryId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectYearId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.ElectionYear),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.CountyId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.CountyId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.MunicipalityId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.MunicipalityId),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.DateSubmitted) ? (DateTime?)null : Convert.ToDateTime(objNonItemCampaignMaterialEntity.DateSubmitted),
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilingMethodId) ? (int?)null : Convert.ToInt32(objNonItemCampaignMaterialEntity.FilingMethodId),
                        objNonItemCampaignMaterialEntity.CampaignMaterialDesc,
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.SacnDocId) ? (long?)null : Convert.ToInt64(objNonItemCampaignMaterialEntity.SacnDocId),
                        objNonItemCampaignMaterialEntity.CampMatrFileType,
                        objNonItemCampaignMaterialEntity.CampMatrFileSize,
                        objNonItemCampaignMaterialEntity.RCampMatr,
                        objNonItemCampaignMaterialEntity.CreatedBy,
                        String.IsNullOrEmpty(objNonItemCampaignMaterialEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objNonItemCampaignMaterialEntity.FilingDate));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemCampaignMaterial

        #region DeleteCampaignMaterial
        /// <summary>
        /// DeleteCampaignMaterial
        /// </summary>
        /// <param name="strCampMatrId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean DeleteCampaignMaterial(String strCampMatrId, String strModifiedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_NonItemCampaignMaterial(String.IsNullOrEmpty(strCampMatrId) ? (int?)null : Convert.ToInt32(strCampMatrId), strModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion DeleteCampaignMaterial                       

        //========================================================================================================================================
        // NON-ITEMIZED TRANSACTIONS - END >>>>>>>>>>>>>>>
        //========================================================================================================================================

        //========================================================================================================================================
        // COMMON METHOD FOR DROPDOWN VALUES VALIDATION.
        //========================================================================================================================================

        #region GetDropdownValueExists
        /// <summary>
        /// GetDropdownValueExists
        /// </summary>
        /// <param name="strTableName"></param>
        /// <param name="strDropdownValue"></param>
        /// <returns></returns>
        public Boolean GetDropdownValueExists(String strTableName, String strDropdownValue)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    Boolean dropdownValExists = false;

                    var results = entities.SP_S_EFSDropdownValExists(strTableName, strDropdownValue);

                    foreach (var item in results)
                    {
                        if (item.RETURN_VALUE.ToString() == "TRUE")
                            dropdownValExists = true;
                        else
                            dropdownValExists = false;
                    }

                    return dropdownValExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetDropdownValueExists

        #region GetDropdownValueExistsValidation
        /// <summary>
        /// GetDropdownValueExistsValidation
        /// </summary>
        /// <returns></returns>
        public IList<VendorImportValidationEntity> GetDropdownValueExistsValidation()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<VendorImportValidationEntity> lstVendorImportValidation = new List<VendorImportValidationEntity>();
                    VendorImportValidationEntity objVendorImportValidation;

                    var results = entities.SP_S_EFSDropdownValExistsForValidation();

                    foreach (var item in results)
                    {
                        objVendorImportValidation = new VendorImportValidationEntity();
                        objVendorImportValidation.Id = item.ID;
                        objVendorImportValidation.TableName = item.TABLE_NAME;
                        lstVendorImportValidation.Add(objVendorImportValidation);
                    }

                    return lstVendorImportValidation;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetDropdownValueExistsValidation

        //========================================================================================================================================
        // COMMON METHOD FOR DROPDOWN VALUES VALIDATION.
        //========================================================================================================================================

        #region GetFilingDateOffCycleData
        /// <summary>
        /// GetFilingDateOffCycleData
        /// </summary>
        /// <param name="strElectionYearId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <returns></returns>
        public IList<FilingDatesOffCycleEntity> GetFilingDateOffCycleData(String strElectionYearId, String strOfficeTypeId, String strFilerId, String strDisclosureType)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingDatesOffCycleEntity> lstFilingDatesOffCycleEntity = new List<FilingDatesOffCycleEntity>();
                    FilingDatesOffCycleEntity objFilingDatesOffCycleEntity;

                    var results = entities.SP_S_FilingDatesOffCycle(String.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId), 
                        String.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), 
                        String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId), 
                        String.IsNullOrEmpty(strDisclosureType) ? (int?)null : Convert.ToInt32(strDisclosureType));

                    foreach (var item in results)
                    {
                        objFilingDatesOffCycleEntity = new FilingDatesOffCycleEntity();
                        objFilingDatesOffCycleEntity.FilingDateId = Convert.ToString(item.FILINGS_ID);
                        objFilingDatesOffCycleEntity.FilingDate = item.FILING_DATE;
                        lstFilingDatesOffCycleEntity.Add(objFilingDatesOffCycleEntity);
                    }

                    return lstFilingDatesOffCycleEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingDateOffCycleData

        #region GetFilingDateIEWeeklyeData
        /// <summary>
        /// GetFilingDateIEWeeklyeData
        /// </summary>
        /// <param name="strElectionYearId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilerId"></param>
        /// <param name="strElectionTypeId"></param>
        /// <param name="strFilingType"></param>
        /// <param name="strFilingCatId"></param>
        /// <param name="strElectionDateId"></param>
        /// <returns></returns>
        public IList<FilingDatesOffCycleEntity> GetFilingDateIEWeeklyeData(String strElectionYearId, String strElectionTypeId, String strOfficeTypeId, String strFilerId, String strFilingType, String strFilingCatId, String strElectionDateId, String strMunicipalityID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingDatesOffCycleEntity> lstFilingDatesOffCycleEntity = new List<FilingDatesOffCycleEntity>();
                    FilingDatesOffCycleEntity objFilingDatesOffCycleEntity;

                    var results = entities.SP_S_FilingDatesIEWeekly(String.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId), 
                        String.IsNullOrEmpty(strElectionTypeId) ? (int?)null : Convert.ToInt32(strElectionTypeId), 
                        String.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), 
                        String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId), 
                        String.IsNullOrEmpty(strFilingType) ? (int?)null : Convert.ToInt32(strFilingType), 
                        String.IsNullOrEmpty(strFilingCatId) ? (int?)null : Convert.ToInt32(strFilingCatId), 
                        String.IsNullOrEmpty(strElectionDateId) ? (int?)null : Convert.ToInt32(strElectionDateId), 
                        String.IsNullOrEmpty(strMunicipalityID) ? (int?)null : Convert.ToInt32(strMunicipalityID));

                    foreach (var item in results)
                    {
                        objFilingDatesOffCycleEntity = new FilingDatesOffCycleEntity();
                        objFilingDatesOffCycleEntity.FilingDateId = Convert.ToString(item.FILINGS_ID);
                        objFilingDatesOffCycleEntity.FilingDate = item.FILING_DATE;
                        lstFilingDatesOffCycleEntity.Add(objFilingDatesOffCycleEntity);
                    }

                    return lstFilingDatesOffCycleEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingDateIEWeeklyeData

        #region GeResigTermTypeData
        /// <summary>
        /// GeResigTermTypeData
        /// </summary>
        /// <returns></returns>
        public IList<ResigTermTypeEntity> GeResigTermTypeData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ResigTermTypeEntity> lstResigTermTypeEntity = new List<ResigTermTypeEntity>();
                    ResigTermTypeEntity objResigTermTypeEntity;

                    var results = entities.SP_S_ResignationTerminationType();

                    foreach (var item in results)
                    {
                        objResigTermTypeEntity = new ResigTermTypeEntity();
                        objResigTermTypeEntity.ResigTermTypeId = Convert.ToString(item.RESIG_TERM_TYPE_ID);
                        objResigTermTypeEntity.ResigTermTypeDesc = Convert.ToString(item.RESIG_TERM_TYPE_DESC);
                        lstResigTermTypeEntity.Add(objResigTermTypeEntity);
                    }

                    return lstResigTermTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GeResigTermTypeData

        #region GetResgTermTypeExistValue
        /// <summary>
        /// GetResgTermTypeExistValue
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <param name="strElectionTypeId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <param name="strElectionYearId"></param>
        /// <returns></returns>
        public IList<ResigTermTypeEntity> GetResgTermTypeExistsValue(String strFilerId, String strElectionTypeId, String strOfficeTypeId, String strFilingTypeId, String strElectionYearId, String strElectionDateId, String strFilingDate, String strFilingCategoryId, String strMunicipalityId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ResigTermTypeEntity> lstResigTermTypeEntity = new List<ResigTermTypeEntity>();
                    ResigTermTypeEntity objResigTermTypeEntity;

                    var results = entities.SP_S_GetFilingsResgTermType(String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId), 
                        String.IsNullOrEmpty(strElectionTypeId) ? (int?)null : Convert.ToInt32(strElectionTypeId), 
                        String.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), 
                        String.IsNullOrEmpty(strFilingTypeId) ? (int?)null : Convert.ToInt32(strFilingTypeId), 
                        String.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId), 
                        String.IsNullOrEmpty(strElectionDateId) ? (int?)null : Convert.ToInt32(strElectionDateId), 
                        String.IsNullOrEmpty(strFilingDate) ? (DateTime?)null : Convert.ToDateTime(strFilingDate), 
                        String.IsNullOrEmpty(strFilingCategoryId) ? (int?)null : Convert.ToInt32(strFilingCategoryId), 
                        String.IsNullOrEmpty(strMunicipalityId) ? (int?)null : Convert.ToInt32(strMunicipalityId));

                    foreach (var item in results)
                    {
                        objResigTermTypeEntity = new ResigTermTypeEntity();
                        objResigTermTypeEntity.ResigTermTypeId = Convert.ToString(item.RESIG_TERM_TYPE_ID);
                        objResigTermTypeEntity.ResigTermTypeDesc = Convert.ToString(item.RESIG_TERM_TYPE_DESC);
                        objResigTermTypeEntity.FilingsId = Convert.ToString(item.FILINGS_ID);
                        lstResigTermTypeEntity.Add(objResigTermTypeEntity);
                    }

                    return lstResigTermTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetResgTermTypeExistValue

        #region UpdateResgTermTypeFilings
        /// <summary>
        /// UpdateResgTermTypeFilings
        /// </summary>
        /// <param name="strFilingsId"></param>
        /// <param name="strResgTermTypeId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean UpdateResgTermTypeFilings(String strFilingsId, String strResgTermTypeId, String strModifiedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_FilingsResgTermType(String.IsNullOrEmpty(strFilingsId) ? (long?)null : Convert.ToInt64(strFilingsId), 
                        String.IsNullOrEmpty(strResgTermTypeId) ? (int?)null : Convert.ToInt32(strResgTermTypeId), strModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion UpdateResgTermTypeFilings

        #region GetEelectionExistsEFS
        /// <summary>
        /// GetEelectionExistsEFS
        /// </summary>
        /// <param name="strElectionYearId"></param>
        /// <param name="strElectionTypeId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strElectionDateId"></param>
        /// <returns></returns>
        public Boolean GetEelectionExistsEFS(String strElectionYearId, String strElectionTypeId, String strOfficeTypeId, String strElectionDateId, String strMunicipalityId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    Boolean electionExists = false;

                    var results = entities.SP_S_EFSElectionExists(String.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId), 
                        String.IsNullOrEmpty(strElectionTypeId) ? (int?)null : Convert.ToInt32(strElectionTypeId), 
                        String.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId), 
                        String.IsNullOrEmpty(strElectionDateId) ? (int?)null : Convert.ToInt32(strElectionDateId), 
                        String.IsNullOrEmpty(strMunicipalityId) ? (int?)null : Convert.ToInt32(strMunicipalityId));

                    foreach (var item in results)
                    {
                        if (item.RETURN_VALUE.ToString() == "TRUE")
                            electionExists = true;
                        else
                            electionExists = false;
                    }

                    return electionExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetEelectionExistsEFS

        #region TransferOutStandingLiabilityBalance
        /// <summary>
        /// TransferOutStandingLiabilityBalance
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string TransferOutStandingLiabilityBalance(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strResult_value = String.Empty;
                    var result = entities.SP_I_TRANSFER_OUT_LIAB_BALANCE(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                        objFilingTransactionsEntity.CreatedBy);

                    foreach (var item in result)
                    {
                        strResult_value = item.RETURN_VALUE.ToString();
                    }
                    return strResult_value;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion TransferOutStandingLiabilityBalance

        /// <summary>
        /// Get Filer Information
        /// </summary>
        /// <param name="filerID"></param>
        /// <param name="person_ID"></param>
        /// <returns></returns>
        public IList<FilerInfo> GetFilerInforamation(String filerID, String person_ID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilerInfo> listFilerInfo = new List<FilerInfo>();
                    FilerInfo objFilerInfo;
                    //data from stored procedure
                    var results = entities.SP_S_GetFilerINFO(String.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID), String.IsNullOrEmpty(person_ID) ? (long?)null : Convert.ToInt64(person_ID));

                    foreach (var item in results)
                    {
                        //create GetDistrictsEntity object
                        objFilerInfo = new FilerInfo();
                        //modify object's attributes
                        objFilerInfo.Trans_Cand_ID = Convert.ToString(item.TRASN_CAND_ID);
                        objFilerInfo.Filer_ID = Convert.ToString(item.FILER_ID);
                        objFilerInfo.Cand_Comm_ID = Convert.ToString(item.CAND_COMM_ID);
                        objFilerInfo.Cand_Comm_Name = Convert.ToString(item.CAND_COMM_NAME);
                        objFilerInfo.PersonID = Convert.ToString(item.PERSON_ID);
                        objFilerInfo.Name = Convert.ToString(item.NAME);
                        //add object to list
                        listFilerInfo.Add(objFilerInfo);
                    }
                    return listFilerInfo;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Transfer Outstanding balance in Sched N
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string TransferOutStandingBalance(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strResult_value = String.Empty;
                    var result = entities.SP_I_TRANSFER_OUTSTANDING_BALANCE(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                            objFilingTransactionsEntity.CreatedBy);

                    foreach (var item in result)
                    {
                        strResult_value = item.RETURN_VALUE.ToString();
                    }
                    return strResult_value;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Submit filings from Summery Page
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean SubmitFilings_Summery(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_SUBMIT_FILINGS(String.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                            objFilingTransactionsEntity.CreatedBy,
                            String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                            String.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId));

                    if (result >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetFilingTransactionsData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingTransactionsDataSummary(FilingTransDataEntity objFilingTransDataEntity)
        {

            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_Filing_Transactions_Data_Summary(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),                            
                        String.IsNullOrEmpty(objFilingTransDataEntity.DisclosurePeriod) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.DisclosurePeriod),
                        objFilingTransDataEntity.FilingSchedID, 
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId), 
                        String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.ContributionTypeId = Convert.ToString(item.CNTRBN_TYPE_ID);
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.ReceiptTypeDesc = item.RECEIPT_TYPE_ABBREV;
                        objFilingTransactionDataEntity.TransferTypeDesc = item.TRANSFER_TYPE_ABBREV;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.PurposeCodeDesc = item.PURPOSE_CODE_ABBREV;
                        objFilingTransactionDataEntity.ReceiptCodeDesc = item.RECEIPT_CODE_DESC;
                        objFilingTransactionDataEntity.ReceiptCodeId = item.RECEIPT_CODE_ID;
                        objFilingTransactionDataEntity.RLiability = item.R_LIABILITY;
                        objFilingTransactionDataEntity.RSubcontractor = item.R_SUBCONTRACTOR;
                        if (item.ORG_DATE != "")
                            objFilingTransactionDataEntity.OriginalDate = Convert.ToDateTime(item.ORG_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.OriginalDate = "";
                        //objFilingTransactionDataEntity.LoanerCode = item.R_BANK_LOAN;
                        objFilingTransactionDataEntity.ElectionYear = item.ELECTION_YEAR;
                        objFilingTransactionDataEntity.ReportYear = Convert.ToString(item.ELECT_YEAR);
                        objFilingTransactionDataEntity.Office = Convert.ToString(item.OFFICE_ID);
                        objFilingTransactionDataEntity.District = Convert.ToString(item.DISTRICT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objFilingTransactionDataEntity.OwedAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyID = Convert.ToString(item.COUNTY_ID);
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        objFilingTransactionDataEntity.MunicipalityID = Convert.ToString(item.MUNICIPALITY_ID);
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOAN_OTHER_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOAN_OTHER_DESC);
                        objFilingTransactionDataEntity.Increased = String.Format("{0:0.00}", Convert.ToString(item.INCREASED));
                        objFilingTransactionDataEntity.Decreased = String.Format("{0:0.00}", Convert.ToString(item.DECREASED));
                        objFilingTransactionDataEntity.Balance = String.Format("{0:0.00}", Convert.ToString(item.BALANCE));
                        objFilingTransactionDataEntity.CreatedDate = Convert.ToDateTime(item.CREATED_DATE).ToString();
                        objFilingTransactionDataEntity.LoanLiablityNumber = Convert.ToString(item.LOAN_LIB_NUMBER);
                        objFilingTransactionDataEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objFilingTransactionDataEntity.TransMapping = Convert.ToString(item.TRANS_MAPPING);
                        objFilingTransactionDataEntity.DBStatus = Convert.ToString(item.DB_STATUS);

                        objFilingTransactionDataEntity.FilerId = Convert.ToString(item.FILER_ID);
                        objFilingTransactionDataEntity.CandidateCommitteeName = Convert.ToString(item.CANDIDATE_COMMITTEE_NAME);
                        objFilingTransactionDataEntity.FilerType = Convert.ToString(item.FILER_TYPE);
                        objFilingTransactionDataEntity.ElectionType = Convert.ToString(item.ELECTION_TYPE);
                        objFilingTransactionDataEntity.ReportType = Convert.ToString(item.REPORT_TYPE);
                        objFilingTransactionDataEntity.ElectionDate = Convert.ToDateTime(item.ELECTION_DATE).ToString("MM/dd/yyyy");
                        objFilingTransactionDataEntity.DisclosureType = Convert.ToString(item.DISCLOSURE_TYPE);
                        objFilingTransactionDataEntity.DisclosurePeriod = Convert.ToString(item.DISCLOSURE_PERIOD);
                        objFilingTransactionDataEntity.Office_Desc = Convert.ToString(item.OFFICE_DESC);
                        if (item.R_CLAIM == "Y")
                        {
                            objFilingTransactionDataEntity.RClaim = "Yes";
                        }
                        else if (item.R_CLAIM == "N")
                        {
                            objFilingTransactionDataEntity.RClaim = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RClaim = "";
                        }

                        if (item.R_IN_DISTRICT == "Y")
                        {
                            objFilingTransactionDataEntity.InDistrict = "Yes";
                        }
                        else if (item.R_IN_DISTRICT == "N")
                        {
                            objFilingTransactionDataEntity.InDistrict = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.InDistrict = "";
                        }

                        if (item.R_MINOR == "Y")
                        {
                            objFilingTransactionDataEntity.RMinor = "Yes";
                        }
                        else if (item.R_MINOR == "N")
                        {
                            objFilingTransactionDataEntity.RMinor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RMinor = "";
                        }

                        if (item.R_VENDOR == "Y")
                        {
                            objFilingTransactionDataEntity.RVendor = "Yes";
                        }
                        else if (item.R_VENDOR == "N")
                        {
                            objFilingTransactionDataEntity.RVendor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RVendor = "";
                        }

                        if (item.R_LOBBYIST == "Y")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "Yes";
                        }
                        else if (item.R_LOBBYIST == "N")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RLobbyist = "";
                        }

                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objFilingTransactionDataEntity.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objFilingTransactionDataEntity.RContributions = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RContributions = "";
                        }

                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreaAddress = item.TREAS_ADDRESS;
                        objFilingTransactionDataEntity.TreaAddr1 = item.TREAS_ADDR1;
                        objFilingTransactionDataEntity.TreaCity = item.TREAS_CITY;
                        objFilingTransactionDataEntity.TreaState = item.TREAS_STATE;
                        objFilingTransactionDataEntity.TreaZipCode = item.TREAS_ZIP;

                        if (item.R_IE_SUPPORTED == "Y")
                        {
                            objFilingTransactionDataEntity.RIESupported = "Yes";
                        }
                        else if (item.R_IE_SUPPORTED == "N")
                        {
                            objFilingTransactionDataEntity.RIESupported = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RIESupported = "";
                        }

                        if (item.R_SUPPORT_OPPOSE == "S")
                        {
                            objFilingTransactionDataEntity.RSupportOppose = "Support";
                        }
                        else if (item.R_SUPPORT_OPPOSE == "O")
                        {
                            objFilingTransactionDataEntity.RSupportOppose = "Oppose";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RSupportOppose = "";
                        }

                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }
                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// Get Opening Balance of Disclosure Summery
        /// </summary>
        /// <param name="filerID"></param>
        /// <param name="election_Year_ID"></param>
        /// <param name="office_Type_ID"></param>
        /// <param name="filing_Type_ID"></param>
        /// <param name="election_Date"></param>
        /// <returns></returns>
        public String GetSummery_OpeningBalance(String filerID, String election_Year_ID, String office_Type_ID, String filing_Type_ID, String election_Date, String filing_Date)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strOpeningBalance = String.Empty;

                    var results = entities.SP_S_Get_Opening_Balance(String.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID), 
                        String.IsNullOrEmpty(election_Year_ID) ? (int?)null : Convert.ToInt32(election_Year_ID), 
                        String.IsNullOrEmpty(office_Type_ID) ? (int?)null : Convert.ToInt32(office_Type_ID), 
                        String.IsNullOrEmpty(filing_Type_ID) ? (int?)null : Convert.ToInt32(filing_Type_ID), 
                        String.IsNullOrEmpty(filing_Date) ? (DateTime?)null : Convert.ToDateTime(filing_Date));

                    foreach (var item in results)
                    {
                        strOpeningBalance = item.OPENING_BALANCE.ToString();
                    }

                    return strOpeningBalance;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get Closing Balance of Summery page
        /// </summary>
        /// <param name="filerID"></param>
        /// <param name="election_Year_ID"></param>
        /// <param name="office_Type_ID"></param>
        /// <param name="filing_Type_ID"></param>
        /// <returns></returns>
        public String GetSummery_ClosingBalance(String filerID, String election_Year_ID, String office_Type_ID, String filing_Type_ID, String filing_date)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strClosingBalance = String.Empty;

                    var results = entities.SP_S_Get_Closing_Balance(String.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID), 
                        String.IsNullOrEmpty(election_Year_ID) ? (int?)null : Convert.ToInt32(election_Year_ID), 
                        String.IsNullOrEmpty(office_Type_ID) ? (int?)null : Convert.ToInt32(office_Type_ID), 
                        String.IsNullOrEmpty(filing_Type_ID) ? (int?)null : Convert.ToInt32(filing_Type_ID), 
                        String.IsNullOrEmpty(filing_date) ? (DateTime?)null : Convert.ToDateTime(filing_date));

                    foreach (var item in results)
                    {
                        strClosingBalance = item.CLOSING_BALANCE.ToString();
                    }

                    return strClosingBalance;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }


        /// <summary>
        /// Get All Scheduled Balances
        /// </summary>
        /// <param name="filerID"></param>
        /// <param name="election_Year_ID"></param>
        /// <param name="office_Type_ID"></param>
        /// <param name="filing_Type_ID"></param>
        /// <param name="filing_date"></param>
        /// <param name="filingSchedID"></param>
        /// <returns></returns>
        public String GetSummery_AllSchedBalances(String filerID, String election_Year_ID, String office_Type_ID, String filing_Type_ID, String filing_date, String filingSchedID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strClosingBalance = String.Empty;

                    var results = entities.SP_S_Get_Summery_Balances(String.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID), 
                        String.IsNullOrEmpty(election_Year_ID) ? (int?)null : Convert.ToInt32(election_Year_ID), 
                        String.IsNullOrEmpty(office_Type_ID) ? (int?)null : Convert.ToInt32(office_Type_ID), 
                        String.IsNullOrEmpty(filing_Type_ID) ? (int?)null : Convert.ToInt32(filing_Type_ID), 
                        String.IsNullOrEmpty(filing_date) ? (DateTime?)null : Convert.ToDateTime(filing_date),
                        filingSchedID);

                    foreach (var item in results)
                    {
                        strClosingBalance = item.TOTAL_CONTRIBUTION.ToString();
                    }

                    return strClosingBalance;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        public String GetSummery_AllSchedBalances_Sched_N(String filerID, String election_Year_ID, String office_Type_ID, String filing_Type_ID, String filing_date, String filingSchedID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strClosingBalance = String.Empty;

                    var results = entities.SP_S_Get_Summery_Balances_Sched_N(String.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID), 
                        String.IsNullOrEmpty(election_Year_ID) ? (int?)null : Convert.ToInt32(election_Year_ID), 
                        String.IsNullOrEmpty(office_Type_ID) ? (int?)null : Convert.ToInt32(office_Type_ID), 
                        String.IsNullOrEmpty(filing_Type_ID) ? (int?)null : Convert.ToInt32(filing_Type_ID), 
                        String.IsNullOrEmpty(filing_date) ? (DateTime?)null : Convert.ToDateTime(filing_date),
                        filingSchedID);

                    foreach (var item in results)
                    {
                        strClosingBalance = item.TOTAL_CONTRIBUTION.ToString();
                    }

                    return strClosingBalance;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region GetOfficeTypeEFS
        /// <summary>
        /// GetOfficeTypeEFS
        /// </summary>
        /// <returns></returns>
        public IList<OfficeTypeEntity> GetOfficeTypeEFS(String strElectionYear)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OfficeTypeEntity> lstOfficeTypeEntity = new List<OfficeTypeEntity>();
                    OfficeTypeEntity objOfficeTypeEntity;

                    var results = entities.SP_S_OfficeTypesEFS(String.IsNullOrEmpty(strElectionYear) ? (int?)null : Convert.ToInt32(strElectionYear));

                    foreach (var item in results)
                    {
                        objOfficeTypeEntity = new OfficeTypeEntity();
                        objOfficeTypeEntity.OfficeTypeId = Convert.ToString(item.OFFICE_TYPE_ID);
                        //if (item.OFFICE_TYPE_DESC == "County")
                        //    objOfficeTypeEntity.OfficeTypeDesc = "Local";
                        //else
                        objOfficeTypeEntity.OfficeTypeDesc = item.OFFICE_TYPE_DESC;
                        lstOfficeTypeEntity.Add(objOfficeTypeEntity);
                    }

                    return lstOfficeTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetOfficeTypeEFS

        // Creighton Newsom
        // ViewAllDisclosures Page
        #region "ViewAllDisclosures"

        #region "GetOfficeTypeForFilerID"
        // FUNCTION POPULATES OFFICETYPES FOR THE FILTER DROPDOWNS
        public IList<OfficeTypeEntity> GetOfficeTypeForFilerID(String strElectYearID, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OfficeTypeEntity> listOfficeTypeEntity = new List<OfficeTypeEntity>();

                    OfficeTypeEntity objOfficeTypeEntity;

                    //data from stored procedure
                    var results = entities.SP_S_OfficeTypesForFilerID(String.IsNullOrEmpty(strElectYearID) ? (int?)null : Convert.ToInt32(strElectYearID), String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        //create OfficeTypeEntity object
                        objOfficeTypeEntity = new OfficeTypeEntity();

                        //modify object's attributes
                        objOfficeTypeEntity.OfficeTypeId = Convert.ToString(item.OFFICE_TYPE_ID);
                        objOfficeTypeEntity.OfficeTypeDesc = Convert.ToString(item.OFFICE_TYPE_DESC);

                        //add object to list
                        listOfficeTypeEntity.Add(objOfficeTypeEntity);
                    }

                    return listOfficeTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetElectionTypeForFilerID"
        // THIS FUNCTION GETS THE DATA FOR THE ELECTIONTYPE FILTER DROPDOWN
        public IList<ElectionTypeEntity> GetElectionTypeForFilerID(String strElectYearID, String strOfficeTypeID, String strCountyID, String strMunicipalityID, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionTypeEntity> listElectionTypeEntity = new List<ElectionTypeEntity>();

                    ElectionTypeEntity objElectionTypeEntity;

                    //data from stored procedure
                    var results = entities.SP_S_ElectionTypesForFilerID(String.IsNullOrEmpty(strElectYearID) ? (int?)null : Convert.ToInt32(strElectYearID), 
                        String.IsNullOrEmpty(strOfficeTypeID) ? (int?)null : Convert.ToInt32(strOfficeTypeID), 
                        String.IsNullOrEmpty(strCountyID) ? (int?)null : Convert.ToInt32(strCountyID), 
                        String.IsNullOrEmpty(strMunicipalityID) ? (int?)null : Convert.ToInt32(strMunicipalityID), 
                        String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        //create ElectionTypeEntity object
                        objElectionTypeEntity = new ElectionTypeEntity();

                        //modify object's attributes
                        objElectionTypeEntity.ElectionTypeId = Convert.ToString(item.ELECT_TYPE_ID);
                        objElectionTypeEntity.ElectionTypeDesc = Convert.ToString(item.ELECT_TYPE_DESC);

                        //add object to list
                        listElectionTypeEntity.Add(objElectionTypeEntity);
                    }

                    return listElectionTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetElectionDate"
        // THIS FUNCTION GETS THE DATA FOR THE ELECTIONDATE FILTER DROPDOWN
        public IList<ElectionDateEntity> GetElectionDate(string electionYearID, string electionTypeID, string officeTypeID, string filerID, string countyID, string municipalityID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionDateEntity> listElectionDateEntity = new List<ElectionDateEntity>();

                    ElectionDateEntity objElectionDateEntity;

                    //data from stored procedure
                    var results = entities.SP_S_ElectionDate(String.IsNullOrEmpty(electionYearID) ? (int?)null : Convert.ToInt32(electionYearID), 
                        String.IsNullOrEmpty(electionTypeID) ? (int?)null : Convert.ToInt32(electionTypeID), 
                        String.IsNullOrEmpty(officeTypeID) ? (int?)null : Convert.ToInt32(officeTypeID), 
                        String.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID), 
                        String.IsNullOrEmpty(countyID) ? (int?)null : Convert.ToInt32(countyID), 
                        String.IsNullOrEmpty(municipalityID) ? (int?)null : Convert.ToInt32(municipalityID));

                    foreach (var item in results)
                    {
                        //create ElectionDateEntity object
                        objElectionDateEntity = new ElectionDateEntity();

                        //modify object's attributes
                        objElectionDateEntity.ElectId = Convert.ToString(item.POL_CAL_DATE_ID);
                        //objElectionDateEntity.ElectDate = Convert.ToString(item.ELECTION_DATE);
                        DateTime dt = new DateTime();
                        if (item.ELECTION_DATE != null)
                        {
                            dt = DateTime.Parse(item.ELECTION_DATE);
                            objElectionDateEntity.ElectDate = (dt).ToString("MM/dd/yyyy");
                        }
                        else
                            objElectionDateEntity.ElectDate = "";

                        //add object to list
                        listElectionDateEntity.Add(objElectionDateEntity);
                    }

                    return listElectionDateEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetCounty"
        // THIS FUNCTION GETS THE DATA FOR THE COUNTY FILTER DROPDOWN
        public IList<CountyEntity> GetCounty(int officeTypeID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<CountyEntity> listCountyEntity = new List<CountyEntity>();

                    CountyEntity objCountyEntity;

                    //data from stored procedure
                    var results = entities.SP_S_County(officeTypeID);

                    foreach (var item in results)
                    {
                        //create CountyEntity object
                        objCountyEntity = new CountyEntity();

                        //modify object's attributes
                        objCountyEntity.CountyId = Convert.ToString(item.COUNTY_ID);
                        objCountyEntity.CountyDesc = Convert.ToString(item.CNTY_BOARD);

                        //add object to list
                        listCountyEntity.Add(objCountyEntity);
                    }

                    return listCountyEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetMunicipality"
        // THIS FUNCTION GETS THE DATA FOR THE MUNICIPALITY FILTER DROPDOWN
        public IList<MunicipalityEntity> GetMunicipality(int countyID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<MunicipalityEntity> listMunicipalityEntity = new List<MunicipalityEntity>();

                    MunicipalityEntity objMunicipalityEntity;

                    //data from stored procedure
                    var results = entities.SP_S_Muncipality(countyID);

                    foreach (var item in results)
                    {
                        //create MunicipalityEntity object
                        objMunicipalityEntity = new MunicipalityEntity();

                        //modify object's attributes
                        objMunicipalityEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                        objMunicipalityEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);

                        //add object to list
                        listMunicipalityEntity.Add(objMunicipalityEntity);
                    }

                    return listMunicipalityEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetDisclosurePeriodsForYearAndFilerIDAndElectionType"
        // THIS FUNCTION GETS THE DISCLOSURE PERIODS FOR THE FILTER DROPDOWN
        public IList<DisclosurePreiodEntity> GetDisclosurePeriodsForYearAndFilerIDAndElectionType(String strFilerID, String strElectionYearID, String strElectionTypeID, String strFilingCatID, String strOfficeTypeID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosurePreiodEntity> lstDisclosurePreiodEntity = new List<DisclosurePreiodEntity>();
                    DisclosurePreiodEntity objDisclosurePreiodEntity;

                    var results = entities.SP_S_DisclosurePeriodsForYearAndFilerIDAndElectionType(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), String.IsNullOrEmpty(strElectionYearID) ? (int?)null : Convert.ToInt32(strElectionYearID), 
                        String.IsNullOrEmpty(strElectionTypeID) ? (int?)null : Convert.ToInt32(strElectionTypeID), 
                        String.IsNullOrEmpty(strFilingCatID) ? (int?)null : Convert.ToInt32(strFilingCatID), 
                        String.IsNullOrEmpty(strOfficeTypeID) ? (int?)null : Convert.ToInt32(strOfficeTypeID));

                    foreach (var item in results)
                    {
                        objDisclosurePreiodEntity = new DisclosurePreiodEntity();
                        objDisclosurePreiodEntity.FilingTypeId = Convert.ToString(item.FILING_TYPE_ID);
                        objDisclosurePreiodEntity.FilingDesc = item.FILING_DESC;
                        objDisclosurePreiodEntity.FilingAbbrev = item.FILING_ABBREV;
                        lstDisclosurePreiodEntity.Add(objDisclosurePreiodEntity);
                    }

                    return lstDisclosurePreiodEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetDisclosureTypesForYearAndFilerID"
        // THIS FUNCTION GETS THE DISCLOSURE TYPES FOR THE FILTER DROPDOWN
        public IList<DisclosureTypesEntity> GetDisclosureTypesForYearAndFilerID(String strFilerID, String strElectYearID, String strElectTypeID, String strElectionDateID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosureTypesEntity> lstDisclosureTypesEntity = new List<DisclosureTypesEntity>();
                    DisclosureTypesEntity objDisclosureTypesEntity;

                    var results = entities.SP_S_DisclosureTypesForYearAndFilerID(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), 
                        String.IsNullOrEmpty(strElectYearID) ? (int?)null : Convert.ToInt32(strElectYearID), 
                        String.IsNullOrEmpty(strElectTypeID) ? (int?)null : Convert.ToInt32(strElectTypeID), 
                        String.IsNullOrEmpty(strElectionDateID) ? (int?)null : Convert.ToInt32(strElectionDateID));

                    foreach (var item in results)
                    {
                        objDisclosureTypesEntity = new DisclosureTypesEntity();
                        objDisclosureTypesEntity.DisclosureTypeId = Convert.ToString(item.FILING_CAT_ID);
                        objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC;
                        objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        lstDisclosureTypesEntity.Add(objDisclosureTypesEntity);
                    }

                    return lstDisclosureTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetElectionYearDataForFilerID"
        // THIS FUNCTION GETS THE ELECTION YEARS FOR THE FILTER DROPDOWN
        public IList<ElectionYearEntity> GetElectionYearDataForFilerID(String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionYearEntity> lstElectionYearEntity = new List<ElectionYearEntity>();
                    ElectionYearEntity objElectionYearEntity;

                    var results = entities.SP_S_GetElectionYearsForFilerID(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        objElectionYearEntity = new ElectionYearEntity();
                        objElectionYearEntity.ElectionYearId = Convert.ToString(item.ELECTION_YEAR_ID);
                        objElectionYearEntity.ElectionYearValue = Convert.ToString(item.ELECT_YEAR);
                        lstElectionYearEntity.Add(objElectionYearEntity);
                    }

                    return lstElectionYearEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "InsertSupportingDocument"
        // FUNCTION DOES AN INSERT INTO THE SUPPORTINGDOCUMENTS TABLE
        // THIS GETS CALLED AFTER THE DOCUMENT IS UPLOADED TO CABINET
        // SCANDOCID IS THE NUMBER RETURNED FROM CABINET
        public String InsertSupportingDocument(
            String strTransNumber,
            String strFilingMethodID,
            String strDocTypeID,
            String strScanDocID,
            String strFileType,
            String strFileSize,
            String strCreatedBy,
            String strFilerID,
            String strFilingsID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    int result = entities.SP_I_InsertSupportingDocuments(strTransNumber, 
                        String.IsNullOrEmpty(strFilingMethodID) ? (int?)null : Convert.ToInt32(strFilingMethodID), 
                        String.IsNullOrEmpty(strDocTypeID) ? (int?)null : Convert.ToInt32(strDocTypeID), String.IsNullOrEmpty(strScanDocID) ? (long?)null : Convert.ToInt64(strScanDocID), strFileType, strFileSize, strCreatedBy,
                        String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID),
                        String.IsNullOrEmpty(strFilingsID) ? (long?)null : Convert.ToInt64(strFilingsID));
                    return result.ToString();
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "InsertSupportingDocumentPIDA"
        // FUNCTION DOES AN INSERT INTO THE SUPPORTINGDOCUMENTS TABLE
        // THIS GETS CALLED AFTER THE DOCUMENT IS UPLOADED TO CABINET
        // SCANDOCID IS THE NUMBER RETURNED FROM CABINET, THIS PIDA VERSION
        // IS SLIGHTLY DIFFERENT THAN THE OTHER VERSION, AS IT INCLUDES ADDITIONAL
        // FIELDS
        public String InsertSupportingDocumentPIDA(
            String strTransNumber,
            String strFilingMethodID,
            String strCommTypeID,
            String strScanDocID,
            String strFileType,
            String strFileSize,
            String strDateSubmitted,
            String strComments,
            String strCreatedBy,
            String strFilerID,
            String strFilingsID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    int result = entities.SP_I_InsertSupportingDocumentsPIDA(strTransNumber, 
                        String.IsNullOrEmpty(strFilingMethodID) ? (int?)null : Convert.ToInt32(strFilingMethodID), 
                        String.IsNullOrEmpty(strCommTypeID) ? (int?)null : Convert.ToInt32(strCommTypeID), 
                        String.IsNullOrEmpty(strScanDocID) ? (long?)null : Convert.ToInt64(strScanDocID), strFileType, strFileSize, 
                        String.IsNullOrEmpty(strDateSubmitted) ? (DateTime?)null : Convert.ToDateTime(strDateSubmitted), strComments, strCreatedBy,
                        String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID),
                        String.IsNullOrEmpty(strFilingsID) ? (long?)null : Convert.ToInt64(strFilingsID));
                    return result.ToString();
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "UpdateSupportingDocumentPIDA"
        // FUNCTION UPDATES THE SUPPORTINGDOCUMENTS TABLE
        // FOR PIDA RECORDS
        public String UpdateSupportingDocumentPIDA(
            String strSupportingDocID,
            String strFilingMethodID,
            String strCommTypeID,
            String strScanDocID,
            String strFileType,
            String strFileSize,
            String strDateSubmitted,
            String strComments,
            String strUserID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    int result = entities.SP_U_UpdateSupportingDocumentsPIDA(String.IsNullOrEmpty(strSupportingDocID) ? (int?)null : Convert.ToInt32(strSupportingDocID), 
                        String.IsNullOrEmpty(strFilingMethodID) ? (int?)null : Convert.ToInt32(strFilingMethodID), 
                        String.IsNullOrEmpty(strCommTypeID) ? (int?)null : Convert.ToInt32(strCommTypeID), String.IsNullOrEmpty(strScanDocID) ? (long?)null : Convert.ToInt64(strScanDocID), strFileType, strFileSize, String.IsNullOrEmpty(strDateSubmitted) ? (DateTime?)null : Convert.ToDateTime(strDateSubmitted), strComments, strUserID);
                    return result.ToString();
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetTransactionsGridData"
        // GETS THE DATA FOR THE TRANSACTION GRID
        public IList<TransactionGridEntity> GetTransactionsGridData(String strFilingsID, String strPolCalDateID, String strAmended, String strR_Status, String strDateSubmitted, String strFilingCatID, String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionGridEntity> lstTransactionsGrid = new List<TransactionGridEntity>();
                    TransactionGridEntity objTransactionsGrid;

                    var results = entities.SP_S_GetTransactionsGridData(String.IsNullOrEmpty(strFilingsID) ? (long?)null : Convert.ToInt64(strFilingsID), 
                        String.IsNullOrEmpty(strPolCalDateID) ? (int?)null : Convert.ToInt32(strPolCalDateID), strAmended, strR_Status, strDateSubmitted, 
                        String.IsNullOrEmpty(strFilingCatID) ? (int?)null : Convert.ToInt32(strFilingCatID), strTransNumber);

                    foreach (var item in results)
                    {
                        objTransactionsGrid = new TransactionGridEntity();

                        objTransactionsGrid.Amount = String.Format("{0:0.00}", item.AMOUNT);
                        objTransactionsGrid.CheckNum = item.CHECK_NUM;
                        objTransactionsGrid.City = item.FLNG_ENT_CITY;
                        objTransactionsGrid.ContributionType = item.CONTRIBUTION_TYPE;
                        objTransactionsGrid.ContributorCode = item.CONTRIBUTOR_CODE;
                        objTransactionsGrid.Country = item.FLNG_ENT_COUNTRY;
                        objTransactionsGrid.County = item.COUNTY;
                        objTransactionsGrid.ElectionYear = item.ELECTION_YEAR;
                        objTransactionsGrid.EntityName = item.FLNG_ENT_NAME;
                        objTransactionsGrid.Explanation = item.EXPLANATION;
                        objTransactionsGrid.FilingSchedID = Convert.ToString(item.FILING_SCHED_ID);
                        objTransactionsGrid.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objTransactionsGrid.FirstName = item.FLNG_ENT_FIRST_NAME;

                        //objTransactionsGrid.Itemized = item.ITEMIZED;
                        if (item.ITEMIZED == "Y")
                            objTransactionsGrid.Itemized = "Yes";
                        else
                            objTransactionsGrid.Itemized = "No";

                        objTransactionsGrid.LastName = item.FLNG_ENT_LAST_NAME;
                        objTransactionsGrid.LoanerCode = item.LOANER_CODE;
                        objTransactionsGrid.Method = item.METHOD;
                        objTransactionsGrid.MiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objTransactionsGrid.Municipality = item.MUNICIPALITY;
                        objTransactionsGrid.Office = item.OFFICE;
                        objTransactionsGrid.District = item.DISTRICT;

                        if (item.ORIGINAL_DATE != null)
                            objTransactionsGrid.OriginalDate = ((DateTime)item.ORIGINAL_DATE).ToString("MM/dd/yyyy");
                        else
                            objTransactionsGrid.OriginalDate = "";

                        objTransactionsGrid.OutStandingAmount = String.Format("{0:0.00}", item.OUTSTANDING_AMOUNT);
                        objTransactionsGrid.PurposeCode = item.PURPOSE_CODE_DESC;
                        objTransactionsGrid.PurposeCodeID = Convert.ToString(item.PURPOSE_CODE_ID);
                        objTransactionsGrid.ReceiptCode = item.RECEIPT_CODE_DESC;
                        objTransactionsGrid.ReceiptType = item.RECEIPT_TYPE_DESC;
                        objTransactionsGrid.State = item.FLNG_ENT_STATE;
                        objTransactionsGrid.StreetAddress = item.STREET_ADDRESS;

                        if (item.TRANSACTION_DATE != null)
                            objTransactionsGrid.TransactionDate = ((DateTime)item.TRANSACTION_DATE).ToString("MM/dd/yyyy");
                        else
                            objTransactionsGrid.TransactionDate = "";

                        objTransactionsGrid.TransactionType = item.TRANSACTION_TYPE;
                        objTransactionsGrid.TransferType = item.TRANSFER_TYPE_DESC;
                        objTransactionsGrid.ZipCode = item.FLNG_ENT_ZIP;

                        if (item.STATUS == "A")
                            objTransactionsGrid.Status = "Active";
                        else if (item.STATUS == "I")
                            objTransactionsGrid.Status = "Inactive";
                        else if (item.STATUS == "P")
                            objTransactionsGrid.Status = "Pending";
                        else if (item.STATUS == "D")
                            objTransactionsGrid.Status = "Deleted";
                        else
                            objTransactionsGrid.Status = item.STATUS;

                        if (item.AMENDED == "Y")
                            objTransactionsGrid.Amended = "Yes";
                        else if (item.AMENDED == "N")
                            objTransactionsGrid.Amended = "No";
                        else
                            objTransactionsGrid.Amended = item.AMENDED;

                        if (item.DATE_SUBMITTED != null)
                            objTransactionsGrid.DateSubmitted = ((DateTime)item.DATE_SUBMITTED).ToString("MM/dd/yyyy hh:mm:ss tt");
                        else
                            objTransactionsGrid.DateSubmitted = "";

                        objTransactionsGrid.TransMapping = item.TRANS_MAPPING;
                        objTransactionsGrid.R_Subcontractor = item.R_SUBCONTRACTOR;

                        //objTransactionsGrid.CreatedDate = Convert.ToString(item.CREATED_DATE);

                        if (item.CREATED_DATE != null)
                            objTransactionsGrid.CreatedDate = ((DateTime)item.CREATED_DATE).ToString("MM/dd/yyyy hh:mm:ss tt");
                        else
                            objTransactionsGrid.CreatedDate = "";

                        objTransactionsGrid.ContributorTypeID = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objTransactionsGrid.LoanOtherID = Convert.ToString(item.LOAN_OTHER_ID);
                        objTransactionsGrid.ReceiptCodeID = Convert.ToString(item.RECEIPT_CODE_ID);
                        objTransactionsGrid.R_Liability = item.R_LIABILITY;
                        objTransactionsGrid.LoanLibNumber = item.LOAN_LIB_NUMBER;


                        objTransactionsGrid.TreasurerOccupation = item.TREAS_OCCUPATION;
                        objTransactionsGrid.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objTransactionsGrid.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objTransactionsGrid.TreasurerCity = item.ADDR_CITY;
                        objTransactionsGrid.TreasurerState = item.ADDR_STATE;
                        objTransactionsGrid.TreasurerZipCode = item.ADDR_ZIP;
                        objTransactionsGrid.ContributorName = item.CONTRIBUTOR_NAME;
                        objTransactionsGrid.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objTransactionsGrid.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objTransactionsGrid.IEDescription = item.IE_DESC;
                        objTransactionsGrid.CandidateNameBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objTransactionsGrid.Supported = item.R_IE_SUPPORTED;
                        if (item.R_CLAIM == "Y")
                        {
                            objTransactionsGrid.RClaim = "Yes";
                        }
                        else if (item.R_CLAIM == "N")
                        {
                            objTransactionsGrid.RClaim = "No";
                        }
                        else
                        {
                            objTransactionsGrid.RClaim = "";
                        }

                        if (item.R_IN_DISTRICT == "Y")
                        {
                            objTransactionsGrid.InDistrict = "Yes";
                        }
                        else if (item.R_IN_DISTRICT == "N")
                        {
                            objTransactionsGrid.InDistrict = "No";
                        }
                        else
                        {
                            objTransactionsGrid.InDistrict = "";
                        }

                        if (item.R_MINOR == "Y")
                        {
                            objTransactionsGrid.RMinor = "Yes";
                        }
                        else if (item.R_MINOR == "N")
                        {
                            objTransactionsGrid.RMinor = "No";
                        }
                        else
                        {
                            objTransactionsGrid.RMinor = "";
                        }

                        if (item.R_VENDOR == "Y")
                        {
                            objTransactionsGrid.RVendor = "Yes";
                        }
                        else if (item.R_VENDOR == "N")
                        {
                            objTransactionsGrid.RVendor = "No";
                        }
                        else
                        {
                            objTransactionsGrid.RVendor = "";
                        }

                        if (item.R_LOBBYIST == "Y")
                        {
                            objTransactionsGrid.RLobbyist = "Yes";
                        }
                        else if (item.R_LOBBYIST == "N")
                        {
                            objTransactionsGrid.RLobbyist = "No";
                        }
                        else
                        {
                            objTransactionsGrid.RLobbyist = "";
                        }

                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objTransactionsGrid.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objTransactionsGrid.RContributions = "No";
                        }
                        else
                        {
                            objTransactionsGrid.RContributions = "";
                        }

                        objTransactionsGrid.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objTransactionsGrid.TreasurerOccupation = item.TREAS_OCCUPATION;
                        objTransactionsGrid.TreaAddress = item.TREAS_ADDRESS;
                        objTransactionsGrid.TreaAddr1 = item.ADDR_ADDR1;
                        objTransactionsGrid.TreaCity = item.ADDR_CITY;
                        objTransactionsGrid.TreaState = item.ADDR_STATE;
                        objTransactionsGrid.TreaZipCode = item.ADDR_ZIP;

                        //add object to list
                        lstTransactionsGrid.Add(objTransactionsGrid);
                    }
                    return lstTransactionsGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetDisclosureGridData"
        // GETS THE DATA FOR THE DISCLOSURE GRID
        public IList<DisclosureGridEntity> GetDisclosureGridData(String strFilerID, String strReportYearID, String strOfficeTypeID, String strCountyID, String strMunicipalityID, String strElectionTypeID, String strElectionDateID, String strDiclosureTypeID, String strDisclosurePeriodID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosureGridEntity> lstDisclosureGrid = new List<DisclosureGridEntity>();
                    DisclosureGridEntity objDisclosureGrid;

                    var results = entities.SP_S_GetDisclosuresGridData(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), 
                        String.IsNullOrEmpty(strReportYearID) ? (int?)null : Convert.ToInt32(strReportYearID), 
                        String.IsNullOrEmpty(strOfficeTypeID) ? (int?)null : Convert.ToInt32(strOfficeTypeID), 
                        String.IsNullOrEmpty(strCountyID) ? (int?)null : Convert.ToInt32(strCountyID), 
                        String.IsNullOrEmpty(strMunicipalityID) ? (int?)null : Convert.ToInt32(strMunicipalityID), 
                        String.IsNullOrEmpty(strElectionTypeID) ? (int?)null : Convert.ToInt32(strElectionTypeID), 
                        String.IsNullOrEmpty(strElectionDateID) ? (int?)null : Convert.ToInt32(strElectionDateID), 
                        String.IsNullOrEmpty(strDiclosureTypeID) ? (int?)null : Convert.ToInt32(strDiclosureTypeID), 
                        String.IsNullOrEmpty(strDisclosurePeriodID) ? (int?)null : Convert.ToInt32(strDisclosurePeriodID));

                    foreach (var item in results)
                    {
                        objDisclosureGrid = new DisclosureGridEntity();
                        objDisclosureGrid.FilingsID = item.FILINGS_ID.ToString();
                        objDisclosureGrid.PolCalDateID = item.POL_CAL_DATE_ID.ToString();
                        objDisclosureGrid.ReportYearID = item.REPORT_YEAR_ID.ToString();
                        objDisclosureGrid.OfficeTypeID = item.OFFICE_TYPE_ID.ToString();
                        objDisclosureGrid.ElectTypeID = item.ELECT_TYPE_ID.ToString();
                        objDisclosureGrid.DisclosureTypeID = item.DISCLOSURE_TYPE_ID.ToString();
                        objDisclosureGrid.DisclosurePeriodID = item.DISCLOSURE_PERIOD_ID.ToString();

                        if (item.AMENDED == "Y")
                            objDisclosureGrid.Amended = "Yes";
                        else if (item.AMENDED == "N")
                            objDisclosureGrid.Amended = "No";
                        else
                            objDisclosureGrid.Amended = item.AMENDED;

                        objDisclosureGrid.ReportYear = item.REPORT_YEAR.ToString();
                        objDisclosureGrid.OfficeType = item.OFFICE_TYPE_DESC;
                        objDisclosureGrid.ElectionType = item.ELECT_TYPE_DESC;

                        if (item.DISCLOSURE_PERIOD_ID != 10 && item.DISCLOSURE_PERIOD_ID != 11)
                        {
                            if (item.ELECT_DATE != null)
                                objDisclosureGrid.ElectionDate = ((DateTime)item.ELECT_DATE).ToString("MM/dd/yyyy");
                            else
                                objDisclosureGrid.ElectionDate = "";
                        }
                        else
                            objDisclosureGrid.ElectionDate = "";


                        if (item.FILING_DATE != null)
                            objDisclosureGrid.FilingDate = ((DateTime)item.FILING_DATE).ToString("MM/dd/yyyy");
                        else
                            objDisclosureGrid.FilingDate = "";

                        objDisclosureGrid.DisclosureType = item.DISCLOSURE_TYPE;

                        if (item.DISCLOSURE_TYPE_ID != 6)
                        {
                            if (item.SUBMIT_DATE != null)
                                objDisclosureGrid.DateSubmitted = ((DateTime)item.SUBMIT_DATE).ToString("MM/dd/yyyy hh:mm:ss tt");
                            else
                                objDisclosureGrid.DateSubmitted = "";
                        }
                        else
                            objDisclosureGrid.DateSubmitted = "See Transactions";


                        objDisclosureGrid.DisclosurePeriod = item.DISCLOSURE_PERIOD;

                        if (item.R_STATUS == "A")
                            objDisclosureGrid.R_Status = "Active";
                        else if (item.R_STATUS == "I")
                            objDisclosureGrid.R_Status = "Inactive";
                        else if (item.R_STATUS == "P")
                            objDisclosureGrid.R_Status = "Pending";
                        else if (item.R_STATUS == "D")
                            objDisclosureGrid.R_Status = "Deleted";
                        else
                            objDisclosureGrid.R_Status = item.R_STATUS;

                        objDisclosureGrid.TransNumber = item.TRANS_NUMBER;
                        objDisclosureGrid.FilingAbbrev = item.FILING_ABBREV;

                        if (item.RESIG_TERM_TYPE_ID != null)
                            objDisclosureGrid.ResigTermTypeID = Convert.ToString(item.RESIG_TERM_TYPE_ID);
                        else
                            objDisclosureGrid.ResigTermTypeID = "- Not Applicable -";

                        objDisclosureGrid.LoanLibNumber = item.LOAN_LIB_NUMBER;
                        objDisclosureGrid.County = item.COUNTY;
                        objDisclosureGrid.Municipality = item.MUNICIPALITY;

                        if (item.CC_DOC_TYPE != null)
                            objDisclosureGrid.CCDocType = item.CC_DOC_TYPE;
                        else
                            objDisclosureGrid.CCDocType = "";

                        //add object to list
                        lstDisclosureGrid.Add(objDisclosureGrid);
                    }
                    return lstDisclosureGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetSupportingDocumentsGridData"
        // GETS THE DATA FOR THE SUPPORTING DOCUMENTS GRID
        public IList<SupportingDocumentsGridEntity> GetSupportingDocumentsGridData(String strTransNumber, string strFilingID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<SupportingDocumentsGridEntity> lstSupportingDocumentsGrid = new List<SupportingDocumentsGridEntity>();
                    SupportingDocumentsGridEntity objSupportingDocumentsGrid;

                    var results = entities.SP_S_GetSupportingDocumentsGridData(strTransNumber, String.IsNullOrEmpty(strFilingID) ? (long?)null : Convert.ToInt64(strFilingID));

                    foreach (var item in results)
                    {
                        objSupportingDocumentsGrid = new SupportingDocumentsGridEntity();

                        if (item.DATE_RECEIVED != null)
                            objSupportingDocumentsGrid.DateReceived = ((DateTime)item.DATE_RECEIVED).ToString("MM/dd/yyyy");
                        else
                            objSupportingDocumentsGrid.DateReceived = "";

                        objSupportingDocumentsGrid.DocumentType = item.DOCUMENT_TYPE;
                        objSupportingDocumentsGrid.FileSize = item.FILE_SIZE;
                        objSupportingDocumentsGrid.FileType = item.FILE_TYPE;
                        objSupportingDocumentsGrid.FilingMethod = item.FILING_METHOD_DESC;
                        objSupportingDocumentsGrid.SupportingDocID = item.SUPPORT_DOC_ID.ToString();
                        objSupportingDocumentsGrid.ScanDocID = item.SCAN_DOC_ID.ToString();

                        //add object to list
                        lstSupportingDocumentsGrid.Add(objSupportingDocumentsGrid);
                    }
                    return lstSupportingDocumentsGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetPIDAGridData"
        // GETS THE DATA FOR THE PIDA GRID
        public IList<PIDAGridEntity> GetPIDAGridData(String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PIDAGridEntity> lstPIDAGrid = new List<PIDAGridEntity>();
                    PIDAGridEntity objPIDAGrid;

                    var results = entities.SP_S_GetPIDAGridData(strTransNumber);

                    foreach (var item in results)
                    {
                        objPIDAGrid = new PIDAGridEntity();

                        objPIDAGrid.SupportingDocID = item.SUPPORT_DOC_ID.ToString();
                        objPIDAGrid.ScanDocID = item.SCAN_DOC_ID.ToString();
                        objPIDAGrid.CommunicationTypeID = Convert.ToString(item.COMM_TYPE_ID);
                        objPIDAGrid.FileSize = item.FILE_SIZE;
                        objPIDAGrid.FileType = item.FILE_TYPE;

                        if (item.DATE_FILED != null)
                            objPIDAGrid.DateSubmitted = ((DateTime)item.DATE_FILED).ToString("MM/dd/yyyy");
                        else
                            objPIDAGrid.DateSubmitted = "";

                        objPIDAGrid.CommunicationType = item.COMM_DESC;
                        objPIDAGrid.Description = item.SUPPORT_DOC_CMTS;
                        objPIDAGrid.SubmittedBy = item.CREATED_BY;

                        //add object to list
                        lstPIDAGrid.Add(objPIDAGrid);
                    }
                    return lstPIDAGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetCampaignMaterialsGridData"
        // GETS THE DATA FOR THE CAMPAIGN MATERIALS GRID
        public IList<CampaignMaterialsGridEntity> GetCampaignMaterialsGridData(String strFilingsID, String strAmended)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<CampaignMaterialsGridEntity> lstCampaignMaterialsGrid = new List<CampaignMaterialsGridEntity>();
                    CampaignMaterialsGridEntity objCampaignMaterialsGrid;

                    var results = entities.SP_S_GetCampaignMaterialsGridData(String.IsNullOrEmpty(strFilingsID) ? (long?)null : Convert.ToInt64(strFilingsID), strAmended);

                    foreach (var item in results)
                    {
                        objCampaignMaterialsGrid = new CampaignMaterialsGridEntity();
                        objCampaignMaterialsGrid.CampaignMaterialID = Convert.ToString(item.CAMP_MATR_ID);
                        objCampaignMaterialsGrid.FilingMethodID = Convert.ToString(item.FILING_METHOD_ID);
                        objCampaignMaterialsGrid.ScanDocID = Convert.ToString(item.SCAN_DOC_ID);

                        if (item.DATE_SUBMITTED != null)
                            objCampaignMaterialsGrid.DateSubmitted = ((DateTime)item.DATE_SUBMITTED).ToString("MM/dd/yyyy hh:mm:ss tt");
                        else
                            objCampaignMaterialsGrid.DateSubmitted = "";


                        objCampaignMaterialsGrid.CampaignMaterialDesc = item.CAMP_MATR_DESC;
                        objCampaignMaterialsGrid.FileSize = item.CAMP_MATR_FILE_SIZE;
                        objCampaignMaterialsGrid.FileType = item.CAMP_MATR_FILE_TYPE;
                        objCampaignMaterialsGrid.FilingMethodDesc = item.FILING_METHOD_DESC;

                        if (item.CREATED_DATE != null)
                            objCampaignMaterialsGrid.CreatedDate = ((DateTime)item.CREATED_DATE).ToString("MM/dd/yyyy hh:mm:ss tt");
                        else
                            objCampaignMaterialsGrid.CreatedDate = "";

                        if (item.CAMPAIGN_MATERIAL_AVAILABLE == "Y")
                            objCampaignMaterialsGrid.CampaignMaterialAvailable = "Yes";
                        else if (item.CAMPAIGN_MATERIAL_AVAILABLE == "N")
                            objCampaignMaterialsGrid.CampaignMaterialAvailable = "No";
                        else
                            objCampaignMaterialsGrid.CampaignMaterialAvailable = item.CAMPAIGN_MATERIAL_AVAILABLE;


                        //add object to list
                        lstCampaignMaterialsGrid.Add(objCampaignMaterialsGrid);
                    }
                    return lstCampaignMaterialsGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetTransactionDetailsGridData"
        // GETS THE DATA FOR THE TRANSACTION DETAILS GRID
        public IList<TransactionDetailsGridEntity> GetTransactionDetailsGridData(String strTransNumber, String strSubmitDate, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionDetailsGridEntity> lstTransactionDetailsGrid = new List<TransactionDetailsGridEntity>();
                    TransactionDetailsGridEntity objTransactionDetailsGrid;

                    var results = entities.SP_S_GetTransactionDetailsGridData(strTransNumber, strSubmitDate, String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        objTransactionDetailsGrid = new TransactionDetailsGridEntity();
                        objTransactionDetailsGrid.Amount = String.Format("{0:0.00}", item.ORG_AMT);
                        objTransactionDetailsGrid.Explanation = item.TRANS_EXPLNTN;
                        objTransactionDetailsGrid.FilingEntityCity = item.FLNG_ENT_CITY;
                        objTransactionDetailsGrid.FilingEntityCountry = item.FLNG_ENT_COUNTRY;
                        objTransactionDetailsGrid.FilingEntityFirstName = item.FLNG_ENT_FIRST_NAME;
                        objTransactionDetailsGrid.FilingEntityID = Convert.ToString(item.FLNG_ENT_ID);
                        objTransactionDetailsGrid.FilingEntityLastName = item.FLNG_ENT_LAST_NAME;
                        objTransactionDetailsGrid.FilingEntityMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objTransactionDetailsGrid.FilingEntityName = item.FLNG_ENT_NAME;
                        objTransactionDetailsGrid.FilingEntityState = item.FLNG_ENT_STATE;
                        objTransactionDetailsGrid.FilingEntityStreetAddress = item.STREET_ADDRESS;
                        objTransactionDetailsGrid.FilingEntityZip = item.FLNG_ENT_ZIP;

                        if (item.R_ITEMIZED == "Y")
                            objTransactionDetailsGrid.Itemized = "Yes";
                        else
                            objTransactionDetailsGrid.Itemized = "No";

                        objTransactionDetailsGrid.CreatedDate = Convert.ToString(item.CREATED_DATE);

                        if (item.PAY_DATE != null)
                            objTransactionDetailsGrid.PayDate = ((DateTime)item.PAY_DATE).ToString("MM/dd/yyyy");
                        else
                            objTransactionDetailsGrid.PayDate = "";

                        objTransactionDetailsGrid.PurposeCode = item.PURPOSE_CODE_DESC;
                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objTransactionDetailsGrid.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objTransactionDetailsGrid.RContributions = "No";
                        }
                        else
                        {
                            objTransactionDetailsGrid.RContributions = "";
                        }

                        objTransactionDetailsGrid.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objTransactionDetailsGrid.TreasurerOccupation = item.TREAS_OCCUPATION;
                        objTransactionDetailsGrid.TreaAddress = item.TREAS_ADDRESS;
                        objTransactionDetailsGrid.TreaAddr1 = item.ADDR_ADDR1;
                        objTransactionDetailsGrid.TreaCity = item.ADDR_CITY;
                        objTransactionDetailsGrid.TreaState = item.ADDR_STATE;
                        objTransactionDetailsGrid.TreaZipCode = item.ADDR_ZIP;

                        //add object to list
                        lstTransactionDetailsGrid.Add(objTransactionDetailsGrid);
                    }
                    return lstTransactionDetailsGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetDocumentTypes"
        // GETS THE DOCUMENT TYPES (LETTER OF INDEBTEDNESS ETC)
        public IList<DocumentTypeEntity> GetDocumentTypes(String applicationID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DocumentTypeEntity> lstDocumentTypesEntity = new List<DocumentTypeEntity>();
                    DocumentTypeEntity objDocumentTypesEntity;

                    var results = entities.SP_S_GetDocumentTypes(String.IsNullOrEmpty(applicationID) ? (int?)null : Convert.ToInt32(applicationID));
                    foreach (var item in results)
                    {
                        objDocumentTypesEntity = new DocumentTypeEntity();
                        objDocumentTypesEntity.DocumentTypeID = Convert.ToString(item.DOC_TYPE_ID);
                        objDocumentTypesEntity.DocumentTypeDesc = item.DOC_TYPE_DESC;
                        lstDocumentTypesEntity.Add(objDocumentTypesEntity);
                    }
                    return lstDocumentTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetCommunicationTypes"
        // GETS THE COMMUNICATION TYPES FOR PIDA FUNCTIONALITY...
        public IList<CommunicationTypeEntity> GetCommunicationTypes()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<CommunicationTypeEntity> lstCommunicationTypesEntity = new List<CommunicationTypeEntity>();
                    CommunicationTypeEntity objCommunicationTypesEntity;

                    var results = entities.SP_S_GetCommunicationTypes();
                    foreach (var item in results)
                    {
                        objCommunicationTypesEntity = new CommunicationTypeEntity();
                        objCommunicationTypesEntity.CommunicationTypeID = Convert.ToString(item.COMM_TYPE_ID);
                        objCommunicationTypesEntity.CommunicationTypeDesc = item.COMM_DESC;
                        lstCommunicationTypesEntity.Add(objCommunicationTypesEntity);
                    }
                    return lstCommunicationTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "DeleteDisclosure"
        // IF IN PROD, SOFT DELETES A DISCLOSURE BY UPDATING FILING AND FILING TRANSACTION TABLES
        // IF IN TEMPORARY DATABASE, DOES A HARD DELETE
        public String DeleteDisclosure(String strFilingID, String strIsSubmitted, String strUserName, String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_D_DeleteDisclosure(String.IsNullOrEmpty(strFilingID) ? (long?)null : Convert.ToInt64(strFilingID), strIsSubmitted, strUserName, strTransNumber);
                    String returnValue = string.Empty;
                    foreach (var item in results)
                        returnValue = item.RETURN_VALUE;

                    return returnValue;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "DeleteSupportingDocument"
        // SOFT DELETES A SUPPORTING DOCUMENT BY UPDATING R_STATUS
        public String DeleteSupportingDocument(String strSupportingDocumentID, String strUserName)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_D_DeleteSupportingDocument(String.IsNullOrEmpty(strSupportingDocumentID) ? (int?)null : Convert.ToInt32(strSupportingDocumentID), strUserName);
                    return result.ToString();
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion                

        #region "TransactionHasDetails"
        // FUNCTION RETURNS TRUE OR FALSE 
        // DEPENDING ON WHETHER OR NOT THE SENT TRANS_NUMBER
        // HAS THE VALUE IN TRANS_MAPPING
        public String TransactionHasDetails(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_S_TransactionHasDetails(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));
                    String returnValue = string.Empty;
                    foreach (var item in results)
                    {
                        returnValue = item.RETURN_VALUE;
                    }
                    return returnValue;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "DoesTransNumberExistInTemp"
        public String DoesTransNumberExistInTemp(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_S_DoesTransNumberExistInTemp(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));
                    String returnValue = string.Empty;
                    foreach (var item in results)
                    {
                        returnValue = item.RETURN_VALUE;
                    }
                    return returnValue;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #endregion // END REGION VIEWALLDISCLOSURES 

        // Creighton Newsom
        // ViewSupportingDocuments Page 11/2018
        #region "ViewSupportingDocuments"

        #region "GetViewSupportingDocumentsGridData"
        // FUNCTION GETS DATA FOR THE SUPPORTINGDOCUMENTS GRID
        // FILERID IS REQUIRED, REPORTYEAR AND DISCLOSUREPERIOD ARE OPTIONAL
        public IList<ViewSupportingDocumentsGridEntity> GetViewSupportingDocumentsGridData(String strFilerID, String strReportYearID, String strDisclosurePeriodID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ViewSupportingDocumentsGridEntity> lstViewSupportingDocumentsGrid = new List<ViewSupportingDocumentsGridEntity>();
                    ViewSupportingDocumentsGridEntity objViewSupportingDocumentsGrid;

                    objViewSupportingDocumentsGrid = new ViewSupportingDocumentsGridEntity();

                    var results = entities.SP_S_ViewSupportingDocumentsGrid(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), 
                        String.IsNullOrEmpty(strReportYearID) ? (int?)null : Convert.ToInt32(strReportYearID), 
                        String.IsNullOrEmpty(strDisclosurePeriodID) ? (int?)null : Convert.ToInt32(strDisclosurePeriodID));

                    foreach (var item in results)
                    {
                        objViewSupportingDocumentsGrid = new ViewSupportingDocumentsGridEntity();

                        objViewSupportingDocumentsGrid.SupportDocID = Convert.ToString(item.SUPPORT_DOC_ID);
                        objViewSupportingDocumentsGrid.ScanDocID = Convert.ToString(item.SCAN_DOC_ID);
                        objViewSupportingDocumentsGrid.OfficeTypeID = Convert.ToString(item.OFFICE_TYPE_ID);
                        objViewSupportingDocumentsGrid.ElectTypeID = Convert.ToString(item.ELECT_TYPE_ID);
                        objViewSupportingDocumentsGrid.PolCalDateID = Convert.ToString(item.POL_CAL_DATE_ID);

                        if (item.DATE_RECEIVED != null)
                            objViewSupportingDocumentsGrid.DateReceived = ((DateTime)item.DATE_RECEIVED).ToString("MM/dd/yyyy");
                        else
                            objViewSupportingDocumentsGrid.DateReceived = "";

                        objViewSupportingDocumentsGrid.DocumentType = Convert.ToString(item.DOCUMENT_TYPE);

                        if (item.AMENDED == "Y")
                            objViewSupportingDocumentsGrid.Amended = "Yes";
                        else if (item.AMENDED == "N")
                            objViewSupportingDocumentsGrid.Amended = "No";
                        else
                            objViewSupportingDocumentsGrid.Amended = item.AMENDED;

                        objViewSupportingDocumentsGrid.ReportYear = Convert.ToString(item.REPORT_YEAR);
                        objViewSupportingDocumentsGrid.OfficeType = item.OFFICE_TYPE;
                        objViewSupportingDocumentsGrid.ElectionType = item.ELECTION_TYPE;

                        if (item.ELECT_DATE != null)
                            objViewSupportingDocumentsGrid.ElectionDate = ((DateTime)item.ELECT_DATE).ToString("MM/dd/yyyy");
                        else
                            objViewSupportingDocumentsGrid.ElectionDate = "";

                        objViewSupportingDocumentsGrid.DisclosurePeriod = item.DISCLOSURE_PERIOD;

                        if (item.R_STATUS == "A")
                            objViewSupportingDocumentsGrid.R_Status = "Active";
                        else if (item.R_STATUS == "I")
                            objViewSupportingDocumentsGrid.R_Status = "Inactive";
                        else if (item.R_STATUS == "P")
                            objViewSupportingDocumentsGrid.R_Status = "Pending";
                        else if (item.R_STATUS == "D")
                            objViewSupportingDocumentsGrid.R_Status = "Deleted";
                        else
                            objViewSupportingDocumentsGrid.R_Status = item.R_STATUS;

                        objViewSupportingDocumentsGrid.FileType = item.FILE_TYPE;
                        objViewSupportingDocumentsGrid.Size = Convert.ToString(item.FILE_SIZE);
                        objViewSupportingDocumentsGrid.FilingMethod = item.FILING_METHOD_DESC;

                        //add object to list
                        lstViewSupportingDocumentsGrid.Add(objViewSupportingDocumentsGrid);
                    }
                    return lstViewSupportingDocumentsGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetDisclosurePeriodsForYearAndFilerID"
        // FUNCTION GETS THE DISCLOSURE PERIODS BASED ON THE YEAR AND FILER ID
        public IList<DisclosurePreiodEntity> GetDisclosurePeriodsForYearAndFilerID(String strFilerID, String strElectionYearID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosurePreiodEntity> lstDisclosurePreiodEntity = new List<DisclosurePreiodEntity>();
                    DisclosurePreiodEntity objDisclosurePreiodEntity;

                    var results = entities.SP_S_DisclosurePeriodsForYearAndFilerID(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), 
                        String.IsNullOrEmpty(strElectionYearID) ? (int?)null : Convert.ToInt32(strElectionYearID));

                    foreach (var item in results)
                    {
                        objDisclosurePreiodEntity = new DisclosurePreiodEntity();
                        objDisclosurePreiodEntity.FilingTypeId = Convert.ToString(item.FILING_TYPE_ID);
                        objDisclosurePreiodEntity.FilingDesc = item.FILING_DESC;
                        objDisclosurePreiodEntity.FilingAbbrev = item.FILING_ABBREV;
                        lstDisclosurePreiodEntity.Add(objDisclosurePreiodEntity);
                    }

                    return lstDisclosurePreiodEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetElectionYearForFilerID_VSD"
        // THIS FUNCTION GETS THE ELECTION YEARS FOR THE FILTER DROPDOWN
        public IList<ElectionYearEntity> GetElectionYearForFilerID_VSD(String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionYearEntity> lstElectionYearEntity = new List<ElectionYearEntity>();
                    ElectionYearEntity objElectionYearEntity;

                    var results = entities.SP_S_GetElectionYearsForFilerID_VSD(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        objElectionYearEntity = new ElectionYearEntity();
                        objElectionYearEntity.ElectionYearId = Convert.ToString(item.ELECTION_YEAR_ID);
                        objElectionYearEntity.ElectionYearValue = Convert.ToString(item.ELECT_YEAR);
                        lstElectionYearEntity.Add(objElectionYearEntity);
                    }

                    return lstElectionYearEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #endregion // END VIEWSUPPORTINGDOCUMENTS

        // Creighton Newsom
        #region "Loan and Liability Reconciliation"


        #region "GetLoanReceivedGridData"
        // FUNCTION GETS DATA FOR THE LOAN RECEIVED GRID
        // FILERID IS REQUIRED
        public IList<LoanReceivedGridEntity> GetLoanReceivedGridData(String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LoanReceivedGridEntity> lstLoanReceivedGrid = new List<LoanReceivedGridEntity>();
                    LoanReceivedGridEntity objLoanReceivedGrid;

                    objLoanReceivedGrid = new LoanReceivedGridEntity();

                    var results = entities.SP_S_GetLoansReceivedGridData(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        objLoanReceivedGrid = new LoanReceivedGridEntity();

                        objLoanReceivedGrid.FilingTransID = Convert.ToString(item.FILING_TRANS_ID);
                        objLoanReceivedGrid.TransNumber = item.TRANS_NUMBER;
                        objLoanReceivedGrid.TransMapping = item.TRANS_MAPPING;

                        if (item.TRANSACTION_DATE != null)
                            objLoanReceivedGrid.TransactionDate = ((DateTime)item.TRANSACTION_DATE).ToString("MM/dd/yyyy");
                        else
                            objLoanReceivedGrid.TransactionDate = "";

                        objLoanReceivedGrid.EntityName = item.FLNG_ENT_NAME;
                        objLoanReceivedGrid.Amount = String.Format("{0:0.00}", item.AMOUNT);
                        objLoanReceivedGrid.ElectionYear = Convert.ToString(item.ELECTION_YEAR);
                        objLoanReceivedGrid.OfficeType = item.OFFICE_TYPE_DESC;
                        objLoanReceivedGrid.ElectionType = item.ELECT_TYPE_DESC;

                        if (item.ELECT_DATE != null)
                            objLoanReceivedGrid.ElectionDate = ((DateTime)item.ELECT_DATE).ToString("MM/dd/yyyy");
                        else
                            objLoanReceivedGrid.ElectionDate = "";

                        objLoanReceivedGrid.DisclosurePeriod = item.FILING_DESC;

                        //add object to list
                        lstLoanReceivedGrid.Add(objLoanReceivedGrid);
                    }
                    return lstLoanReceivedGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetLoanPaymentGridData"
        // FUNCTION GETS DATA FOR THE LOAN PAYMENT GRID
        // FILERID IS REQUIRED
        public IList<LoanPaymentGridEntity> GetLoanPaymentGridData(String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LoanPaymentGridEntity> lstLoanPaymentGrid = new List<LoanPaymentGridEntity>();
                    LoanPaymentGridEntity objLoanPaymentGrid;

                    objLoanPaymentGrid = new LoanPaymentGridEntity();

                    var results = entities.SP_S_GetLoanPaymentsGridData(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        objLoanPaymentGrid = new LoanPaymentGridEntity();

                        objLoanPaymentGrid.FilingTransID = Convert.ToString(item.FILING_TRANS_ID);
                        objLoanPaymentGrid.TransNumber = item.TRANS_NUMBER;
                        objLoanPaymentGrid.TransMapping = item.TRANS_MAPPING;

                        if (item.TRANSACTION_DATE != null)
                            objLoanPaymentGrid.TransactionDate = ((DateTime)item.TRANSACTION_DATE).ToString("MM/dd/yyyy");
                        else
                            objLoanPaymentGrid.TransactionDate = "";

                        objLoanPaymentGrid.EntityName = item.FLNG_ENT_NAME;
                        objLoanPaymentGrid.Amount = String.Format("{0:0.00}", item.AMOUNT);

                        if (item.ORG_DATE != null)
                            objLoanPaymentGrid.OriginalLoanDate = ((DateTime)item.ORG_DATE).ToString("MM/dd/yyyy");
                        else
                            objLoanPaymentGrid.OriginalLoanDate = "";

                        objLoanPaymentGrid.ElectionYear = Convert.ToString(item.ELECTION_YEAR);
                        objLoanPaymentGrid.OfficeType = item.OFFICE_TYPE_DESC;
                        objLoanPaymentGrid.ElectionType = item.ELECT_TYPE_DESC;

                        if (item.ELECT_DATE != null)
                            objLoanPaymentGrid.ElectionDate = ((DateTime)item.ELECT_DATE).ToString("MM/dd/yyyy");
                        else
                            objLoanPaymentGrid.ElectionDate = "";

                        objLoanPaymentGrid.DisclosurePeriod = item.FILING_DESC;

                        //add object to list
                        lstLoanPaymentGrid.Add(objLoanPaymentGrid);
                    }
                    return lstLoanPaymentGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetOutstandingLiabilityGridData"
        // FUNCTION GETS DATA FOR THE OUTSTANDING LIABILITIES GRID
        // FILERID AND DATATORETURN ARE REQUIRED
        // IF DATATORETURN IS 0, THEN ALL RECORDS ARE RETURNED
        // IF DATATORETURN IS 1 THEN RECORDS WHERE ORG_AMT = OWED_AMT ARE RETURNED
        // IF DATATORETURN IS 2 THEN RECORDS WHERE ORG_AMT <> OWED_AMT ARE RETURNED
        public IList<OutstandingLiabilityGridEntity> GetOutstandingLiabilityGridData(String strFilerID, int dataToReturn)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OutstandingLiabilityGridEntity> lstOutstandingLiabilityGrid = new List<OutstandingLiabilityGridEntity>();
                    OutstandingLiabilityGridEntity objOutstandingLiabilityGrid;

                    objOutstandingLiabilityGrid = new OutstandingLiabilityGridEntity();

                    var results = entities.SP_S_GetOutstandingLiabilitiesGridData(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), dataToReturn);

                    foreach (var item in results)
                    {
                        objOutstandingLiabilityGrid = new OutstandingLiabilityGridEntity();

                        objOutstandingLiabilityGrid.FilingTransID = Convert.ToString(item.FILING_TRANS_ID);
                        objOutstandingLiabilityGrid.TransNumber = item.TRANS_NUMBER;
                        objOutstandingLiabilityGrid.TransMapping = item.TRANS_MAPPING;

                        if (item.TRANSACTION_DATE != null)
                            objOutstandingLiabilityGrid.TransactionDate = ((DateTime)item.TRANSACTION_DATE).ToString("MM/dd/yyyy");
                        else
                            objOutstandingLiabilityGrid.TransactionDate = "";

                        objOutstandingLiabilityGrid.EntityName = item.FLNG_ENT_NAME;
                        objOutstandingLiabilityGrid.OriginalAmount = String.Format("{0:0.00}", item.AMOUNT);
                        objOutstandingLiabilityGrid.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        objOutstandingLiabilityGrid.ElectionYear = Convert.ToString(item.ELECTION_YEAR);
                        objOutstandingLiabilityGrid.OfficeType = item.OFFICE_TYPE_DESC;
                        objOutstandingLiabilityGrid.ElectionType = item.ELECT_TYPE_DESC;

                        if (item.ELECT_DATE != null)
                            objOutstandingLiabilityGrid.ElectionDate = ((DateTime)item.ELECT_DATE).ToString("MM/dd/yyyy");
                        else
                            objOutstandingLiabilityGrid.ElectionDate = "";

                        objOutstandingLiabilityGrid.DisclosurePeriod = item.FILING_DESC;

                        //add object to list
                        lstOutstandingLiabilityGrid.Add(objOutstandingLiabilityGrid);
                    }
                    return lstOutstandingLiabilityGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetLiabilityLoanForgivenGridData"
        // FUNCTION GETS DATA FOR THE LIABILITY/LOAN FORGIVEN GRID
        // FILERID IS REQUIRED
        public IList<LiabilityLoanForgivenGridEntity> GetLiabilityLoanFogivenGridData(String strFilerID, int dataToReturn)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<LiabilityLoanForgivenGridEntity> lstLiabilityLoanForgivenGrid = new List<LiabilityLoanForgivenGridEntity>();
                    LiabilityLoanForgivenGridEntity objLiabilityLoanForgivenGrid;

                    objLiabilityLoanForgivenGrid = new LiabilityLoanForgivenGridEntity();

                    var results = entities.SP_S_GetLiabilitiesLoansForgivenGridData(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), dataToReturn);

                    foreach (var item in results)
                    {
                        objLiabilityLoanForgivenGrid = new LiabilityLoanForgivenGridEntity();

                        objLiabilityLoanForgivenGrid.FilingTransID = Convert.ToString(item.FILING_TRANS_ID);
                        objLiabilityLoanForgivenGrid.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objLiabilityLoanForgivenGrid.TransMapping = Convert.ToString(item.TRANS_MAPPING);

                        if (item.TRANSACTION_DATE != null)
                            objLiabilityLoanForgivenGrid.TransactionDate = ((DateTime)item.TRANSACTION_DATE).ToString("MM/dd/yyyy");
                        else
                            objLiabilityLoanForgivenGrid.TransactionDate = "";

                        objLiabilityLoanForgivenGrid.EntityName = item.FLNG_ENT_NAME;

                        objLiabilityLoanForgivenGrid.Amount = String.Format("{0:0.00}", item.AMOUNT);

                        if (item.ORG_DATE != null)
                            objLiabilityLoanForgivenGrid.OriginalDate = ((DateTime)item.ORG_DATE).ToString("MM/dd/yyyy");
                        else
                            objLiabilityLoanForgivenGrid.OriginalDate = "";

                        objLiabilityLoanForgivenGrid.ElectionYear = Convert.ToString(item.ELECTION_YEAR);
                        objLiabilityLoanForgivenGrid.OfficeType = item.OFFICE_TYPE_DESC;
                        objLiabilityLoanForgivenGrid.ElectionType = item.ELECT_TYPE_DESC;

                        if (item.ELECT_DATE != null)
                            objLiabilityLoanForgivenGrid.ElectionDate = ((DateTime)item.ELECT_DATE).ToString("MM/dd/yyyy");
                        else
                            objLiabilityLoanForgivenGrid.ElectionDate = "";

                        objLiabilityLoanForgivenGrid.DisclosurePeriod = item.FILING_DESC;

                        //add object to list
                        lstLiabilityLoanForgivenGrid.Add(objLiabilityLoanForgivenGrid);
                    }
                    return lstLiabilityLoanForgivenGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "GetExpenditurePaymentGridData"
        // FUNCTION GETS DATA FOR THE EXPENDITURES/PAYMENTS GRID
        // FILERID IS REQUIRED
        public IList<ExpenditurePaymentGridEntity> GetExpenditurePaymentGridData(String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ExpenditurePaymentGridEntity> lstExpenditurePaymentGrid = new List<ExpenditurePaymentGridEntity>();
                    ExpenditurePaymentGridEntity objExpenditurePaymentGrid;

                    objExpenditurePaymentGrid = new ExpenditurePaymentGridEntity();

                    var results = entities.SP_S_GetExpenditurePaymentsGridData(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        objExpenditurePaymentGrid = new ExpenditurePaymentGridEntity();

                        objExpenditurePaymentGrid.FilingTransID = Convert.ToString(item.FILING_TRANS_ID);
                        objExpenditurePaymentGrid.TransNumber = item.TRANS_NUMBER;
                        objExpenditurePaymentGrid.TransMapping = item.TRANS_MAPPING;

                        if (item.TRANSACTION_DATE != null)
                            objExpenditurePaymentGrid.TransactionDate = ((DateTime)item.TRANSACTION_DATE).ToString("MM/dd/yyyy");
                        else
                            objExpenditurePaymentGrid.TransactionDate = "";

                        objExpenditurePaymentGrid.EntityName = item.FLNG_ENT_NAME;
                        objExpenditurePaymentGrid.Amount = String.Format("{0:0.00}", item.AMOUNT);
                        objExpenditurePaymentGrid.Explanation = item.TRANS_EXPLNTN;
                        objExpenditurePaymentGrid.ElectionYear = Convert.ToString(item.ELECTION_YEAR);
                        objExpenditurePaymentGrid.OfficeType = item.OFFICE_TYPE_DESC;
                        objExpenditurePaymentGrid.ElectionType = item.ELECT_TYPE_DESC;

                        if (item.ELECT_DATE != null)
                            objExpenditurePaymentGrid.ElectionDate = ((DateTime)item.ELECT_DATE).ToString("MM/dd/yyyy");
                        else
                            objExpenditurePaymentGrid.ElectionDate = "";

                        objExpenditurePaymentGrid.DisclosurePeriod = item.FILING_DESC;

                        //add object to list
                        lstExpenditurePaymentGrid.Add(objExpenditurePaymentGrid);
                    }
                    return lstExpenditurePaymentGrid;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #endregion

        #region "Reconcile_Loan"
        // PROCEDURE RECONCILES LOANS, PAYMENTS, OUTSTANDING LIABILITIES AND LOAN FORGIVENS
        public String Reconcile_Loan(String Schedule_I_TransFilingID, String[] Schedule_J_TransFilingIDs, String[] Schedule_N_TransFilingIDs, String[] Schedule_K_TransFilingIDs, String strUser)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    // CREATE SQLPARAMETER TYPES FOR EACH OF THE INCOMING PARAMETERS

                    // SCHEDULE I IS A SINGLE STRING ITEM
                    SqlParameter Sch_I_Param = new SqlParameter("@SCHEDULE_I_ID", SqlDbType.BigInt);
                    Sch_I_Param.Value = String.IsNullOrEmpty(Schedule_I_TransFilingID) ? (long?)null : Convert.ToInt64(Schedule_I_TransFilingID);

                    // SCHEDULE J IS AN ARRAY
                    DataTable Sch_J_TransIDs = new DataTable();
                    Sch_J_TransIDs.Columns.Add(new DataColumn("FILING_TRANS_ID", typeof(string)));
                    if (Schedule_J_TransFilingIDs != null)
                        foreach (var id in Schedule_J_TransFilingIDs)
                            Sch_J_TransIDs.Rows.Add(id);

                    SqlParameter Sch_Js_Param = new SqlParameter("@SCHEDULE_J_IDS", SqlDbType.Structured);
                    Sch_Js_Param.TypeName = "dbo.ScheduleJ_ID_List";
                    Sch_Js_Param.Value = Sch_J_TransIDs;

                    // SCHEDULE N IS AN ARRAY
                    DataTable Sch_N_TransIDs = new DataTable();
                    Sch_N_TransIDs.Columns.Add(new DataColumn("FILING_TRANS_ID", typeof(string)));
                    if (Schedule_N_TransFilingIDs != null)
                        foreach (var id in Schedule_N_TransFilingIDs)
                            Sch_N_TransIDs.Rows.Add(id);

                    SqlParameter Sch_Ns_Param = new SqlParameter("@SCHEDULE_N_IDS", SqlDbType.Structured);
                    Sch_Ns_Param.TypeName = "dbo.ScheduleN_ID_List";
                    Sch_Ns_Param.Value = Sch_N_TransIDs;

                    // SCHEDULE K IS AN ARRAY
                    DataTable Sch_K_TransIDs = new DataTable();
                    Sch_K_TransIDs.Columns.Add(new DataColumn("FILING_TRANS_ID", typeof(string)));
                    if (Schedule_K_TransFilingIDs != null)
                        foreach (var id in Schedule_K_TransFilingIDs)
                            Sch_K_TransIDs.Rows.Add(id);

                    SqlParameter Sch_Ks_Param = new SqlParameter("@SCHEDULE_K_IDS", SqlDbType.Structured);
                    Sch_Ks_Param.TypeName = "dbo.ScheduleK_ID_List";
                    Sch_Ks_Param.Value = Sch_K_TransIDs;

                    // USER NAME
                    SqlParameter User_Param = new SqlParameter("@USER", SqlDbType.NVarChar);
                    User_Param.Value = strUser;

                    // RETURN CODE
                    SqlParameter ReturnCode_Param = new SqlParameter("@RETURN_CODE", SqlDbType.NVarChar);
                    ReturnCode_Param.Direction = ParameterDirection.InputOutput;
                    ReturnCode_Param.Value = "0";

                    // CREATE AN OBJECT LIST AND ADD THE PARAMETER OBJECTS TO THE LIST
                    List<object> parameterList = new List<object>();
                    parameterList.Add(Sch_I_Param);
                    parameterList.Add(Sch_Js_Param);
                    parameterList.Add(Sch_Ns_Param);
                    parameterList.Add(Sch_Ks_Param);
                    parameterList.Add(User_Param);
                    parameterList.Add(ReturnCode_Param);

                    // CREATE AN OBJECT ARRAY FROM THE LIST IN ORDER TO PASS TO STORED PROC 
                    object[] parameterArray = parameterList.ToArray();

                    using (var context = new EFSEntities())
                    {
                        // FOR SELECTS USE LINE BELOW (SQLQUERY)
                        //var result = context.Database.SqlQuery<Int32>("EXEC dbo.SP_U_EFS_Reconcile_Loan @SCHEDULE_I_ID, @SCHEDULE_J_IDS, @SCHEDULE_N_IDS, @SCHEDULE_K_IDS", parameterArray).ToList();

                        // FOR UPDATES USE EXECUTESQLCOMMAND
                        int result = context.Database.ExecuteSqlCommand("EXEC dbo.SP_U_EFS_Reconcile_Loan @SCHEDULE_I_ID, @SCHEDULE_J_IDS, @SCHEDULE_N_IDS, @SCHEDULE_K_IDS, @USER, @RETURN_CODE OUTPUT", parameterArray);
                        return ReturnCode_Param.Value.ToString();
                    }
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "Reconcile_Liability"
        // PROCEDURE RECONCILES THE ORIGINAL LIABILITY WITH EXPENDITURES, OUTSTANDING
        // LIABILITIES AND LOANS FORGIVEN
        public String Reconcile_Liability(String Schedule_N_OriginalLiability_TransFilingID, String[] Schedule_F_TransFilingIDs, String[] Schedule_N_TransFilingIDs, String[] Schedule_K_TransFilingIDs, String strUser)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    // CREATE SQLPARAMETER TYPES FOR EACH OF THE INCOMING PARAMETERS

                    // SCHEDULE I IS A SINGLE STRING ITEM
                    SqlParameter Sch_I_OrgLiab_Param = new SqlParameter("@SCHEDULE_N_ORIGINALLIABILITY_TRANSFILINGID", SqlDbType.BigInt);
                    Sch_I_OrgLiab_Param.Value = String.IsNullOrEmpty(Schedule_N_OriginalLiability_TransFilingID) ? (long?)null : Convert.ToInt64(Schedule_N_OriginalLiability_TransFilingID);

                    // SCHEDULE F IS AN ARRAY
                    DataTable Sch_F_TransIDs = new DataTable();
                    Sch_F_TransIDs.Columns.Add(new DataColumn("FILING_TRANS_ID", typeof(string)));
                    if (Schedule_F_TransFilingIDs != null)
                        foreach (var id in Schedule_F_TransFilingIDs)
                            Sch_F_TransIDs.Rows.Add(id);

                    SqlParameter Sch_Fs_Param = new SqlParameter("@SCHEDULE_F_IDS", SqlDbType.Structured);
                    Sch_Fs_Param.TypeName = "dbo.ScheduleF_ID_List";
                    Sch_Fs_Param.Value = Sch_F_TransIDs;

                    // SCHEDULE N IS AN ARRAY
                    DataTable Sch_N_TransIDs = new DataTable();
                    Sch_N_TransIDs.Columns.Add(new DataColumn("FILING_TRANS_ID", typeof(string)));
                    if (Schedule_N_TransFilingIDs != null)
                        foreach (var id in Schedule_N_TransFilingIDs)
                            Sch_N_TransIDs.Rows.Add(id);

                    SqlParameter Sch_Ns_Param = new SqlParameter("@SCHEDULE_N_IDS", SqlDbType.Structured);
                    Sch_Ns_Param.TypeName = "dbo.ScheduleN_ID_List";
                    Sch_Ns_Param.Value = Sch_N_TransIDs;

                    // SCHEDULE K IS AN ARRAY
                    DataTable Sch_K_TransIDs = new DataTable();
                    Sch_K_TransIDs.Columns.Add(new DataColumn("FILING_TRANS_ID", typeof(string)));
                    if (Schedule_K_TransFilingIDs != null)
                        foreach (var id in Schedule_K_TransFilingIDs)
                            Sch_K_TransIDs.Rows.Add(id);

                    SqlParameter Sch_Ks_Param = new SqlParameter("@SCHEDULE_K_IDS", SqlDbType.Structured);
                    Sch_Ks_Param.TypeName = "dbo.ScheduleK_ID_List";
                    Sch_Ks_Param.Value = Sch_K_TransIDs;

                    // USER NAME
                    SqlParameter User_Param = new SqlParameter("@USER", SqlDbType.NVarChar);
                    User_Param.Value = strUser;

                    // RETURN CODE
                    SqlParameter ReturnCode_Param = new SqlParameter("@RETURN_CODE", SqlDbType.NVarChar);
                    ReturnCode_Param.Direction = ParameterDirection.InputOutput;
                    ReturnCode_Param.Value = "0";

                    // CREATE AN OBJECT LIST AND ADD THE PARAMETER OBJECTS TO THE LIST
                    List<object> parameterList = new List<object>();
                    parameterList.Add(Sch_I_OrgLiab_Param);
                    parameterList.Add(Sch_Fs_Param);
                    parameterList.Add(Sch_Ns_Param);
                    parameterList.Add(Sch_Ks_Param);
                    parameterList.Add(User_Param);
                    parameterList.Add(ReturnCode_Param);

                    // CREATE AN OBJECT ARRAY FROM THE LIST IN ORDER TO PASS TO STORED PROC 
                    object[] parameterArray = parameterList.ToArray();

                    using (var context = new EFSEntities())
                    {
                        // FOR SELECTS USE LINE BELOW (SQLQUERY)
                        //var result = context.Database.SqlQuery<Int32>("EXEC dbo.SP_U_EFS_Reconcile_Loan @SCHEDULE_I_ID, @SCHEDULE_J_IDS, @SCHEDULE_N_IDS, @SCHEDULE_K_IDS", parameterArray).ToList();

                        // FOR UPDATES USE EXECUTESQLCOMMAND
                        int result = context.Database.ExecuteSqlCommand("EXEC dbo.SP_U_EFS_Reconcile_Liability @SCHEDULE_N_ORIGINALLIABILITY_TRANSFILINGID, @SCHEDULE_F_IDS, @SCHEDULE_N_IDS, @SCHEDULE_K_IDS, @USER, @RETURN_CODE OUTPUT", parameterArray);
                        return ReturnCode_Param.Value.ToString();

                    }
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetUnreconciledLoansOrLiabilities"
        // FUNCTION RETURNS THE NUMBER OF LOANS +
        // THE NUMBER OF LIABILITIES. IF THE RESULT IS 0 THEN THE 
        // RECONCILIATION PAGE DOESN'T NEED TO LOAD. IT WILL CALL 
        // UPDATEREQUIREDFILER METHOD AND THAT IS IT.
        public String GetUncreconciledLoansAndLiabilities(String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_S_GetUncreconciledLoansAndLiabilities(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));
                    String returnValue = string.Empty;
                    foreach (var item in results)
                    {
                        returnValue = Convert.ToString(item.RETURNVALUE);
                    }
                    return returnValue;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "UpdateRequiredFilerForReconcile"
        // THIS METHOD SIMPLY UPDATE THE R_RECONCILED AND MODIFIED_BY COLUMNS
        // IN THE REQUIRED_FILER TABLE. IT IS CALLED WHEN THERE ARE NO LOANS 
        // OR LIABILITIES OR WHEN THEY HAVE ALL BEEN RECONCILED
        public String UpdateRequiredFilerForReconcile(String strFilerID, String strUser)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_U_UpdateRequiredFilerForReconcile(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), strUser);
                    String returnValue = string.Empty;
                    foreach (var item in results)
                    {
                        returnValue = item.RETURNVALUE;
                    }
                    return returnValue;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetMinReconciledOwedAmount"
        public String GetMinReconciledOwedAmount(String strTransID, String strOrgAmount, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var results = entities.SP_S_GetMinReconciledOwedAmount(String.IsNullOrEmpty(strTransID) ? (long?)null : Convert.ToInt64(strTransID), 
                        String.IsNullOrEmpty(strOrgAmount) ? (double?)null : Convert.ToDouble(strOrgAmount), string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));
                    String returnValue = string.Empty;
                    foreach (var item in results)
                    {
                        returnValue = Convert.ToString(item.RETURNVALUE);
                    }
                    return returnValue;
                }

            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #endregion


        /// <summary>
        /// Get Outstanding Forgiven
        /// </summary>
        /// <param name="strFilingEntityId"></param>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public IList<OriginalAmountEntity> GetOutstandingAmountLiabData_Forgiven(String strFilingEntityId, String strTransNumber, String strFilingsId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<OriginalAmountEntity> lstOriginalAmountEntity = new List<OriginalAmountEntity>();
                    OriginalAmountEntity objOriginalAmountEntity;

                    var results = entities.SP_S_OutstandingAmountLiability_FORGIVEN(String.IsNullOrEmpty(strFilingEntityId) ? (long?)null : Convert.ToInt64(strFilingEntityId), strTransNumber, 
                        String.IsNullOrEmpty(strFilingsId) ? (long?)null : Convert.ToInt64(strFilingsId));

                    foreach (var item in results)
                    {
                        objOriginalAmountEntity = new OriginalAmountEntity();
                        objOriginalAmountEntity.OriginalAmountId = Convert.ToString(item.LOAN_LIB_NUMBER);
                        objOriginalAmountEntity.OutstandingAmount = String.Format("{0:0.00}", item.OWED_AMT);
                        lstOriginalAmountEntity.Add(objOriginalAmountEntity);
                    }
                    return lstOriginalAmountEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Check Amend Status
        /// </summary>
        /// <param name="filings_ID"></param>
        /// <returns></returns>
        public IList<CheckAmendStatus> GetAmendStatus(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<CheckAmendStatus> lstCheckAmendStatusEntity = new List<CheckAmendStatus>();
                    CheckAmendStatus objCheckAmendStatusEntity;

                    var results = entities.SP_S_GetAmend_Status(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.DisclosurePeriod) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.DisclosurePeriod),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objCheckAmendStatusEntity = new CheckAmendStatus();
                        objCheckAmendStatusEntity.Submit_Date = Convert.ToDateTime(item.SUBMIT_DATE).ToString("MM/dd/yyyy HH:mm:ss");
                        objCheckAmendStatusEntity.IsAmend = item.IS_AMEND.ToString();
                        lstCheckAmendStatusEntity.Add(objCheckAmendStatusEntity);
                    }

                    return lstCheckAmendStatusEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetExpSubContrTotAmt
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public String GetExpSubContrTotAmt_LoanDetails(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExpSubContrTotAmt = String.Empty;

                    var results = entities.SP_S_GetExpSubContrAmtTot_LoanReceived(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        if (item != null)
                            strExpSubContrTotAmt = String.Format("{0:0.00}", item.Value);
                        else
                            strExpSubContrTotAmt = "";
                    }

                    return strExpSubContrTotAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Get Edit Flag
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<GetEditFlagData> GetEditFlag(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetEditFlagData> lstGetEditFlagDataEntity = new List<GetEditFlagData>();
                    GetEditFlagData objGetEditFlagDataEntity;

                    if (objFilingTransDataEntity.TransNumber == null)
                    {
                        var results = entities.SP_S_GetIsEditFlag(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId), 
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                        String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId), 
                        String.IsNullOrEmpty(objFilingTransDataEntity.DisclosurePeriod) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.DisclosurePeriod), 
                        String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId), 
                        objFilingTransDataEntity.Created_By, 
                        String.IsNullOrEmpty(objFilingTransDataEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.MunicipalityID));

                        foreach (var item in results)
                        {
                            objGetEditFlagDataEntity = new GetEditFlagData();
                            objGetEditFlagDataEntity.Is_Edit = item.IS_EDIT.ToString();
                            lstGetEditFlagDataEntity.Add(objGetEditFlagDataEntity);
                        }
                    }
                    else if (objFilingTransDataEntity.TransNumber != null)
                    {
                        var results = entities.SP_S_GetIsEditFlagNonItemized(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId), objFilingTransDataEntity.TransNumber);

                        foreach (var item in results)
                        {
                            objGetEditFlagDataEntity = new GetEditFlagData();
                            objGetEditFlagDataEntity.Is_Edit = item.IS_EDIT.ToString();
                            lstGetEditFlagDataEntity.Add(objGetEditFlagDataEntity);
                        }
                    }

                    return lstGetEditFlagDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// ValidateFilings
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<GetEditFlagData> ValidateFilings(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetEditFlagData> lstGetEditFlagDataEntity = new List<GetEditFlagData>();
                    GetEditFlagData objGetEditFlagDataEntity;

                    var results = entities.SP_S_Validate_Submit_Filings(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate));

                    foreach (var item in results)
                    {
                        objGetEditFlagDataEntity = new GetEditFlagData();
                        objGetEditFlagDataEntity.VALIDATE_FILINGS = item.VALIDATE_FILINGS.ToString();
                        lstGetEditFlagDataEntity.Add(objGetEditFlagDataEntity);
                    }

                    return lstGetEditFlagDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// Add Viewable Column
        /// </summary>
        /// <param name="filer_ID"></param>
        /// <param name="created_By"></param>
        /// <returns></returns>
        public Boolean AddViewableColumn(string filer_ID, string created_By)
        {
            try
            {
                //var returnValue = entities.SP_I_VIEWABLE_FIELD(filer_ID, created_By);

                //if (returnValue >= 1)
                //    return true;
                //else
                return false;
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetContrInKindPartnersData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<ContrInKindPartnersEntity> GetLoanReceviedPartnersData(String strFilingTransId, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ContrInKindPartnersEntity> lstContrInKindPartnersEntity = new List<ContrInKindPartnersEntity>();
                    ContrInKindPartnersEntity objContrInKindPartnersEntity;

                    var results = entities.SP_S_LoanReceived_PartnersData(strFilingTransId, String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objContrInKindPartnersEntity = new ContrInKindPartnersEntity();
                        objContrInKindPartnersEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objContrInKindPartnersEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                        objContrInKindPartnersEntity.PartnershipName = item.FLNG_ENT_NAME;
                        objContrInKindPartnersEntity.PartnerFirstName = item.FLNG_ENT_FIRST_NAME;
                        objContrInKindPartnersEntity.PartnerMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objContrInKindPartnersEntity.PartnerLastName = item.FLNG_ENT_LAST_NAME;
                        objContrInKindPartnersEntity.PartnerStreetNo = item.FLNG_ENT_STR_NUM;
                        objContrInKindPartnersEntity.PartnerStreetName = item.LNG_ENT_STR_NAME;
                        objContrInKindPartnersEntity.PartnerCity = item.FLNG_ENT_CITY;
                        objContrInKindPartnersEntity.PartnerState = item.FLNG_ENT_STATE;
                        objContrInKindPartnersEntity.PartnerZip5 = item.FLNG_ENT_ZIP;
                        objContrInKindPartnersEntity.PartnershipCountry = item.FLNG_ENT_COUNTRY;
                        objContrInKindPartnersEntity.PartnerAmountAttributed = String.Format("{0:0.00}", item.ORG_AMT);
                        objContrInKindPartnersEntity.PartnerExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objContrInKindPartnersEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objContrInKindPartnersEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objContrInKindPartnersEntity.RItemized = "No";
                        objContrInKindPartnersEntity.TransNumber = item.TRANS_NUMBER;
                        objContrInKindPartnersEntity.TransMapping = item.TRANS_MAPPING;
                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objContrInKindPartnersEntity.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objContrInKindPartnersEntity.RContributions = "No";
                        }
                        else
                        {
                            objContrInKindPartnersEntity.RContributions = "";
                        }

                        objContrInKindPartnersEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objContrInKindPartnersEntity.TreasurerOccupation = item.TREAS_OCCUPATION;
                        objContrInKindPartnersEntity.TreaAddress = item.TREAS_ADDRESS;
                        objContrInKindPartnersEntity.TreaAddr1 = item.TREAS_ADDR1;
                        objContrInKindPartnersEntity.TreaCity = item.TREAS_CITY;
                        objContrInKindPartnersEntity.TreaState = item.TREAS_STATE;
                        objContrInKindPartnersEntity.TreaZipCode = item.TREAS_ZIP;
                        lstContrInKindPartnersEntity.Add(objContrInKindPartnersEntity);
                    }

                    return lstContrInKindPartnersEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }


        /// <summary>
        /// Validate Loan Received Delete 
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<GetEditFlagData> ValidateLoanReceived_Delete(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetEditFlagData> lstGetEditFlagDataEntity = new List<GetEditFlagData>();
                    GetEditFlagData objGetEditFlagDataEntity;

                    var results = entities.SP_S_VALIDATE_LOAN_RECD_DELETE(objFilingTransDataEntity.Loan_Lib_Num, string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId));

                    foreach (var item in results)
                    {
                        objGetEditFlagDataEntity = new GetEditFlagData();
                        objGetEditFlagDataEntity.VALIDATE_FILINGS = item.VALIDATE_LOAN_RECEIVED.ToString();
                        lstGetEditFlagDataEntity.Add(objGetEditFlagDataEntity);
                    }

                    return lstGetEditFlagDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region GetExpPaymentExistsSchedL
        /// <summary>
        /// GetExpPaymentExistsSchedL
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public String GetExpPaymentExistsSchedL(String strTransNumber, String filerID, String strSchedID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExists = String.Empty;

                    if (strSchedID == "20")
                    {
                        var results = entities.SP_S_EFS_QualifiedExpendituresSchedT_Exist_L(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                        foreach (var item in results)
                        {
                            strExists = item.RETURN_VALUE.ToString();
                        }
                    }
                    else
                    {
                        var results = entities.SP_S_ExpPaymentExistsSchedL(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                        foreach (var item in results)
                        {
                            strExists = item.RETURN_VALUE.ToString();
                        }
                    }

                    return strExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetExpPaymentExistsSchedL

        #region GetContributionsExistsSchedM
        /// <summary>
        /// GetContributionsExistsSchedM
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public String GetContributionsExistsSchedM(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExists = String.Empty;

                    var results = entities.SP_S_ContributionsABCExistsSchedM(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        strExists = item.RETURN_VALUE.ToString();
                    }

                    return strExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetContributionsExistsSchedM

        #region GetFilingsSubmittedOrNot
        /// <summary>
        /// GetFilingsSubmittedOrNot
        /// </summary>
        /// <param name="strFilingsId"></param>
        /// <returns></returns>
        public String GetFilingsSubmittedOrNot(String strFilingsId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExists = String.Empty;

                    var results = entities.SP_S_GetFilingsSubmittedOrNot(String.IsNullOrEmpty(strFilingsId) ? (long?)null : Convert.ToInt64(strFilingsId));

                    foreach (var item in results)
                    {
                        strExists = item.RETURN_VALUE.ToString();
                    }

                    return strExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingsSubmittedOrNot

        #region GetExpRefundedSchedFTotalAmt
        /// <summary>
        /// GetExpRefundedSchedFTotalAmt
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public String GetExpRefundedSchedFTotalAmt(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExpRefundedAmt = String.Empty;

                    var results = entities.SP_S_ExpRefundAmtForSchedF(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        strExpRefundedAmt = String.Format("{0:0.00}", item.ORG_AMT);

                    }

                    return strExpRefundedAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetExpRefundedSchedFTotalAmt

        #region GetContrRefundedSchedABCTotalAmt
        /// <summary>
        /// GetContrRefundedSchedABCTotalAmt
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public String GetContrRefundedSchedABCTotalAmt(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strContrRefundedAmt = String.Empty;

                    var results = entities.SP_S_ContrRefundAmtForSchedABC(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        strContrRefundedAmt = String.Format("{0:0.00}", item.ORG_AMT);

                    }

                    return strContrRefundedAmt;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetContrRefundedSchedABCTotalAmt

        #region GetCommEditIETransData
        /// <summary>
        /// GetCommEditIETransData
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetCommEditIETransData(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemizedIECommEditTrans(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else
                            objFilingTransactionDataEntity.IESupported = "No";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        objFilingTransactionDataEntity.DateIncurredOrgAmtId = item.EXISTS_LIAB_TRANS_ID;
                        if (item.R_LIABILITY == "Y")
                            objFilingTransactionDataEntity.RLiability = "Yes";
                        else
                            objFilingTransactionDataEntity.RLiability = "No";
                        if (item.R_SUBCONTRACTOR == "Y")
                            objFilingTransactionDataEntity.RSubcontractor = "Yes";
                        else
                            objFilingTransactionDataEntity.RSubcontractor = "No";
                        if (item.OWED_AMT != null)
                            objFilingTransactionDataEntity.OwedAmount = Convert.ToString(item.OWED_AMT);
                        else
                            objFilingTransactionDataEntity.OwedAmount = "";
                        objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetCommEditIETransData

        #region LiabilityPrevFlngsOrgAutoCreatedExts
        /// <summary>
        /// LiabilityPrevFlngsOrgAutoCreatedExts
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public String LiabilityPrevFlngsOrgAutoCreatedExts(String strTransNumber, String strFilingsId, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strExists = String.Empty;

                    var results = entities.SP_S_LiabilityOrgAutoCreatedPrevFlngsExists(strTransNumber, String.IsNullOrEmpty(strFilingsId) ? (long?)null : Convert.ToInt64(strFilingsId), string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        strExists = item.RETURN_VALUE.ToString();
                    }

                    return strExists;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion LiabilityPrevFlngsOrgAutoCreatedExts

        #region AddNonItemSetPrefPerFiler
        /// <summary>
        /// AddNonItemSetPrefPerFiler
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <param name="strCreatedBy"></param>
        /// <returns></returns>
        public Boolean AddNonItemSetPrefPerFiler(String strFilerId, String strFilingTypeId, String strCreatedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_NonItemizedSetPreferencesValues(String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId), strFilingTypeId, strCreatedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion AddNonItemSetPrefPerFiler

        #region GetEFSPDFBytes
        /// <summary>
        /// GetEFSPDFBytes
        /// </summary>
        /// <param name="objEFSPDFResponseEntity"></param>
        /// <returns></returns>
        public EFSPDFResponseEntity GetEFSPDFBytes(EFSPDFRequestEntity objEFSPDFRequestEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    EFSPDFResponseEntity objEFSPDFResponseEntity = new EFSPDFResponseEntity();

                    // SSRS SERVER USER ID.
                    String strReportUser = ConfigurationManager.AppSettings["SSRSUserName"];
                    // SSRS SERVER PASSPORD.
                    String strReportUserPW = ConfigurationManager.AppSettings["SSRSPassword"];

                    // DOMAIN NAME
                    String strReportUserDomain = "NYSBOELAN.elections.ny.gov";
                    String encoding;
                    String mimeType;
                    String extension;
                    Warning[] warnings = null;
                    String[] streamIDs = null;
                    String reportName = string.Empty;
                    ReportExecutionService re2005 = new ReportExecutionService();
                    re2005.Url = ConfigurationManager.AppSettings["SSRSServerURL"];
                    re2005.Credentials = new NetworkCredential(strReportUser, strReportUserPW, strReportUserDomain);

                    ParameterValue[] executionParams;
                    executionParams = AddParameter(objEFSPDFRequestEntity);
                    reportName = "/EFSREPORTS/" + objEFSPDFRequestEntity.ReportName.ToString();
                    //reportName = "/EFSREPORTS_BLANK_DB/" + objEFSPDFRequestEntity.ReportName.ToString();
                    re2005.LoadReport(reportName, null);
                    if (executionParams[0].Name != "")
                        re2005.SetExecutionParameters(executionParams, "en-us");
                    re2005.Timeout = 18000000;
                    objEFSPDFResponseEntity.fileByte = re2005.Render("PDF", null, out extension, out mimeType, out encoding, out warnings, out streamIDs);
                    objEFSPDFResponseEntity.fileURL = "C:/COPLIANCE/PDF/" + objEFSPDFRequestEntity.ReportName + ".pdf";

                    return objEFSPDFResponseEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetEFSPDFBytes

        #region AddParameter
        /// <summary>
        /// AddParameter
        /// </summary>
        /// <param name="objFilingTransactionDataEntity"></param>
        /// <returns></returns>
        private static ParameterValue[] AddParameter(EFSPDFRequestEntity objEFSPDFRequestEntity)
        {
            ParameterValue[] executionParams;

            if (objEFSPDFRequestEntity.ReportName == "EFS_FullPeriod_Report")
            {
                // BASED ON INPUT PARATEMETERS.....
                // EXAMPLE.. IF YOU HAVE 5 THEN PASS 5 PARAMETERS START FROM 0 BASED ON REPORT.
                executionParams = new ParameterValue[7];
                executionParams[0] = new ParameterValue();
                executionParams[0].Name = "FILER_ID";
                executionParams[0].Value = Convert.ToString(objEFSPDFRequestEntity.FilerId); new ParameterValue();

                executionParams[1] = new ParameterValue();
                executionParams[1].Name = "ELECTION_YEAR_ID";
                executionParams[1].Value = Convert.ToString(objEFSPDFRequestEntity.ElectionYearId); new ParameterValue();

                executionParams[2] = new ParameterValue();
                executionParams[2].Name = "OFFICE_TYPE_ID";
                executionParams[2].Value = Convert.ToString(objEFSPDFRequestEntity.OfficeTypeId); new ParameterValue();

                executionParams[3] = new ParameterValue();
                executionParams[3].Name = "FILING_TYPE_ID";
                executionParams[3].Value = Convert.ToString(objEFSPDFRequestEntity.FilingTypeId); new ParameterValue();

                executionParams[4] = new ParameterValue();
                executionParams[4].Name = "FILING_DATE";
                executionParams[4].Value = Convert.ToString(objEFSPDFRequestEntity.FilingDate); new ParameterValue();

                executionParams[5] = new ParameterValue();
                executionParams[5].Name = "ELECTION_TYPE_ID";
                executionParams[5].Value = Convert.ToString(objEFSPDFRequestEntity.ElectionTypeID); new ParameterValue();

                executionParams[6] = new ParameterValue();
                executionParams[6].Name = "ELECTION_DATE_ID";
                executionParams[6].Value = Convert.ToString(objEFSPDFRequestEntity.ElectionDateID); new ParameterValue();



                //executionParams[4] = new ParameterValue(); // NULL
                //executionParams[4].Name = "POL CAL LBL ID";
                //executionParams[4].Value = Convert.ToString(objEFSPDFRequestEntity.TransNumber); new ParameterValue();                                
            }
            else if (objEFSPDFRequestEntity.ReportName == "FidasBalances_Report")
            {
                // BASED ON INPUT PARATEMETERS.....
                // EXAMPLE.. IF YOU HAVE 5 THEN PASS 5 PARAMETERS START FROM 0 BASED ON REPORT.
                executionParams = new ParameterValue[1];
                executionParams[0] = new ParameterValue();
                executionParams[0].Name = "FILER_ID";
                executionParams[0].Value = Convert.ToString(objEFSPDFRequestEntity.FilerId); new ParameterValue();
            }
            else if (objEFSPDFRequestEntity.ReportName == "DisclosureRepInventory_Report")
            {
                // BASED ON INPUT PARATEMETERS.....
                // EXAMPLE.. IF YOU HAVE 5 THEN PASS 5 PARAMETERS START FROM 0 BASED ON REPORT.
                executionParams = new ParameterValue[1];
                executionParams[0] = new ParameterValue();
                executionParams[0].Name = "FILER_ID";
                executionParams[0].Value = Convert.ToString(objEFSPDFRequestEntity.FilerId); new ParameterValue();
            }
            else if (objEFSPDFRequestEntity.ReportName == "EFS_VADfp_Report")
            {
                // BASED ON INPUT PARATEMETERS.....
                // EXAMPLE.. IF YOU HAVE 5 THEN PASS 5 PARAMETERS START FROM 0 BASED ON REPORT.
                executionParams = new ParameterValue[8];
                executionParams[0] = new ParameterValue();
                executionParams[0].Name = "FILER_ID";
                executionParams[0].Value = Convert.ToString(objEFSPDFRequestEntity.FilerId); new ParameterValue();

                executionParams[1] = new ParameterValue();
                executionParams[1].Name = "ELECTION_YEAR_ID";
                executionParams[1].Value = Convert.ToString(objEFSPDFRequestEntity.ElectionYearId); new ParameterValue();

                executionParams[2] = new ParameterValue();
                executionParams[2].Name = "OFFICE_TYPE_ID";
                executionParams[2].Value = Convert.ToString(objEFSPDFRequestEntity.OfficeTypeId); new ParameterValue();

                executionParams[3] = new ParameterValue();
                executionParams[3].Name = "FILING_TYPE_ID";
                executionParams[3].Value = Convert.ToString(objEFSPDFRequestEntity.FilingTypeId); new ParameterValue();

                executionParams[4] = new ParameterValue();
                executionParams[4].Name = "FILING_DATE";
                executionParams[4].Value = Convert.ToString(objEFSPDFRequestEntity.FilingDate); new ParameterValue();

                executionParams[5] = new ParameterValue();
                executionParams[5].Name = "ELECTION_TYPE_ID";
                executionParams[5].Value = Convert.ToString(objEFSPDFRequestEntity.ElectionTypeID); new ParameterValue();

                executionParams[6] = new ParameterValue();
                executionParams[6].Name = "ELECTION_DATE_ID";
                executionParams[6].Value = Convert.ToString(objEFSPDFRequestEntity.ElectionDateID); new ParameterValue();

                executionParams[7] = new ParameterValue();
                executionParams[7].Name = "DATE_SUBMITTED";
                executionParams[7].Value = Convert.ToString(objEFSPDFRequestEntity.SubmitDate); new ParameterValue();
            }
            else
            {
                executionParams = new ParameterValue[1];
                executionParams[0] = new ParameterValue();
                executionParams[0].Name = "";
                executionParams[0].Value = "";
            }

            return executionParams;
        }
        #endregion AddParameter

        #region GetImportDisclosureRptsData
        /// <summary>
        /// GetImportDisclosureRptsData
        /// </summary>
        /// <param name="txtFilerID"></param>
        /// <param name="strReportYear"></param>
        /// <returns></returns>
        public IList<ImportDisclosureRptsDataEntity> GetImportDisclosureRptsData(String txtFilerID, String strReportYear)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    List<ImportDisclosureRptsDataEntity> lstImportDisclosureRptsDataEntity = new List<ImportDisclosureRptsDataEntity>();
                    ImportDisclosureRptsDataEntity objImportDisclosureRptsDataEntity;

                    var results = entities.SP_S_GetImportDisclosureRptsData(String.IsNullOrEmpty(txtFilerID) ? (long?)null : Convert.ToInt64(txtFilerID), String.IsNullOrEmpty(strReportYear) ? (int?)null : Convert.ToInt32(strReportYear));

                    foreach (var item in results)
                    {
                        objImportDisclosureRptsDataEntity = new ImportDisclosureRptsDataEntity();
                        objImportDisclosureRptsDataEntity.DateImported = Convert.ToString(item.CREATED_DATE);
                        objImportDisclosureRptsDataEntity.TransactionType = item.FILING_CAT_DESC;
                        objImportDisclosureRptsDataEntity.ReportYear = Convert.ToString(item.ELECT_YEAR);
                        objImportDisclosureRptsDataEntity.FilerType = item.OFFICE_TYPE_DESC;
                        objImportDisclosureRptsDataEntity.ReportType = item.ELECT_TYPE_DESC;
                        if (Convert.ToDateTime(item.ELECTION_DATE).ToShortDateString() == "1/1/1900")
                            objImportDisclosureRptsDataEntity.ElectionDate = "";
                        else
                            objImportDisclosureRptsDataEntity.ElectionDate = Convert.ToDateTime(item.ELECTION_DATE).ToShortDateString();
                        objImportDisclosureRptsDataEntity.DisclosurePeriod = item.FILING_DESC;
                        objImportDisclosureRptsDataEntity.SubmissionStatus = item.SUBMISSION_STATUS;
                        objImportDisclosureRptsDataEntity.FileSize = item.VENDOR_FILE_SIZE;
                        objImportDisclosureRptsDataEntity.NoOfTrans = Convert.ToString(item.VENDOR_TRANS_COUNT);
                        objImportDisclosureRptsDataEntity.ElectionYearId = Convert.ToString(item.ELECTION_YEAR_ID);
                        objImportDisclosureRptsDataEntity.OfficeTypeId = Convert.ToString(item.OFFICE_TYPE_ID);
                        objImportDisclosureRptsDataEntity.ElectionTypeId = Convert.ToString(item.ELECT_TYPE_ID);
                        objImportDisclosureRptsDataEntity.ElectionDateId = Convert.ToString(item.POL_CAL_DATE_ID);
                        objImportDisclosureRptsDataEntity.FilingTypeId = Convert.ToString(item.FILING_TYPE_ID);
                        objImportDisclosureRptsDataEntity.FilingCategoryId = Convert.ToString(item.FILING_CAT_ID);
                        objImportDisclosureRptsDataEntity.VendorName = item.VENDOR_NAME;
                        lstImportDisclosureRptsDataEntity.Add(objImportDisclosureRptsDataEntity);
                    }

                    return lstImportDisclosureRptsDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetImportDisclosureRptsData

        #region GetVendorNamesData
        /// <summary>
        /// GetVendorNamesData
        /// </summary>
        /// <returns></returns>
        public IList<VendorNamesEntity> GetVendorNamesData()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    List<VendorNamesEntity> lstVendorNamesEntity = new List<VendorNamesEntity>();
                    VendorNamesEntity objVendorNamesEntity;

                    var results = entities.SP_S_GetVendorNames();

                    foreach (var item in results)
                    {
                        objVendorNamesEntity = new VendorNamesEntity();
                        objVendorNamesEntity.VendorId = Convert.ToString(item.VENDOR_ID);
                        objVendorNamesEntity.VendorName = item.VENDOR_NAME;
                        lstVendorNamesEntity.Add(objVendorNamesEntity);
                    }

                    return lstVendorNamesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetVendorNamesData

        #region GetFilingDateCheckValues
        /// <summary>
        /// GetFilingDateCheckValues
        /// </summary>
        /// <param name="objImportDisclsoureRptsFilingsEntity"></param>
        /// <returns></returns>
        public IList<CheckFilingDateEntity> GetFilingDateCheckValues(ImportDisclsoureRptsFilingsEntity objImportDisclsoureRptsFilingsEntity)
        {
            using (EFSEntities entities = new EFSEntities())
            {
                IList<CheckFilingDateEntity> lstCheckFilingDateEntity = new List<CheckFilingDateEntity>();
                CheckFilingDateEntity objCheckFilingDateEntity;

                var results = entities.SP_S_GetFilingDateCorrectorNot(String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.FilingPeriodId) ? (int?)null : Convert.ToInt32(objImportDisclsoureRptsFilingsEntity.FilingPeriodId), String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.ElectId) ? (int?)null : Convert.ToInt32(objImportDisclsoureRptsFilingsEntity.ElectId));

                foreach (var item in results)
                {
                    objCheckFilingDateEntity = new CheckFilingDateEntity();
                    objCheckFilingDateEntity.ElectionYearId = Convert.ToString(item.ELECT_YEAR_ID);
                    objCheckFilingDateEntity.ElectionTypeId = Convert.ToString(item.ELECT_TYPE_ID);
                    objCheckFilingDateEntity.OfficeTypeId = Convert.ToString(item.OFFICE_TYPE_ID);
                    objCheckFilingDateEntity.FilingTypeId = Convert.ToString(item.FILING_TYPE_ID);
                    objCheckFilingDateEntity.ElectionDateId = Convert.ToString(item.POL_CAL_DATE_ID);
                    lstCheckFilingDateEntity.Add(objCheckFilingDateEntity);
                }

                return lstCheckFilingDateEntity;
            }
        }
        #endregion GetFilingDateCheckValues

        #region GetFilingsIdForUploadData
        /// <summary>
        /// GetFilingsIdForUploadData
        /// </summary>
        /// <param name="objImportDisclsoureRptsFilings"></param>
        /// <returns></returns>
        public IList<FilingsForFilingCutOffDateEntity> GetFilingsIdForUploadData(ImportDisclsoureRptsFilingsEntity objImportDisclsoureRptsFilingsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingsForFilingCutOffDateEntity> lstFilingsForFilingCutOffDateEntity = new List<FilingsForFilingCutOffDateEntity>();
                    FilingsForFilingCutOffDateEntity objFilingsForFilingCutOffDateEntity;

                    var results = entities.SP_S_GetFilingsIdforUploadData(String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.FilerId) ? (long?)null : Convert.ToInt64(objImportDisclsoureRptsFilingsEntity.FilerId), 
                        String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.FilingPeriodId) ? (int?)null : Convert.ToInt32(objImportDisclsoureRptsFilingsEntity.FilingPeriodId), 
                        String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.FilingCategoryId) ? (int?)null : Convert.ToInt32(objImportDisclsoureRptsFilingsEntity.FilingCategoryId), 
                        String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.ElectId) ? (int?)null : Convert.ToInt32(objImportDisclsoureRptsFilingsEntity.ElectId),
                        String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objImportDisclsoureRptsFilingsEntity.ResigTermTypeId), 
                        String.IsNullOrEmpty(objImportDisclsoureRptsFilingsEntity.RFilingDate) ? (DateTime?)null : Convert.ToDateTime(objImportDisclsoureRptsFilingsEntity.RFilingDate),
                        objImportDisclsoureRptsFilingsEntity.CreatedBy);

                    foreach (var item in results)
                    {
                        objFilingsForFilingCutOffDateEntity = new FilingsForFilingCutOffDateEntity();
                        objFilingsForFilingCutOffDateEntity.FilingsId = Convert.ToString(item.FILINGS_ID);
                        objFilingsForFilingCutOffDateEntity.ElectionYearId = Convert.ToString(item.ELECT_YEAR_ID);
                        objFilingsForFilingCutOffDateEntity.ElectionTypeId = Convert.ToString(item.ELECT_TYPE_ID);
                        objFilingsForFilingCutOffDateEntity.OfficeTypeId = Convert.ToString(item.OFFICE_TYPE_ID);
                        if (item.FILING_TYPE_ID != 0)
                            objFilingsForFilingCutOffDateEntity.FilingTypeId = Convert.ToString(item.FILING_TYPE_ID);
                        else
                            objFilingsForFilingCutOffDateEntity.FilingTypeId = "";
                        objFilingsForFilingCutOffDateEntity.ElectionDateId = Convert.ToString(item.POL_CAL_DATE_ID);
                        objFilingsForFilingCutOffDateEntity.FilingDate = Convert.ToString(Convert.ToDateTime(item.R_FILING_DATE).ToShortDateString());
                        lstFilingsForFilingCutOffDateEntity.Add(objFilingsForFilingCutOffDateEntity);
                    }

                    return lstFilingsForFilingCutOffDateEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingsIdForUploadData

        #region GetFilingsExistsorNot
        /// <summary>
        /// GetFilingsExistsorNot
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <returns></returns>
        public String GetFilingsExistsorNot(String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strResults = String.Empty;

                    var results = entities.SP_S_GetFilingsExistsInTempDB(String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        strResults = item.RETURN_VALUE;
                    }

                    return strResults;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingsExistsorNot

        #region LoanLiabilityExists
        /// <summary>
        /// LoanLiabilityExists
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <param name="strTransNumber"></param>
        /// <param name="strLoanLiabilityNumber"></param>
        /// <returns></returns>
        public Boolean LoanLiabilityExists(String strFilerId, String strTransNumber, String strLoanLiabilityNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strResults = String.Empty;

                    var results = entities.SP_S_LoanLiabilityExists(String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId), strTransNumber, strLoanLiabilityNumber);

                    foreach (var item in results)
                    {
                        strResults = item.RETURN_VALUE;
                    }

                    if (strResults == "TRUE")
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion LoanLiabilityExists

        #region AddVendorImportFileIntoTempDatabase
        /// <summary>
        /// AddVendorImportFileIntoTempDatabase
        /// </summary>
        /// <param name="lstFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddVendorImportFileIntoTempDatabase(IList<FilingTransactionsEntity> lstFilingTransactionsEntity, VendorImportDataEntity objVendorImportDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FILING_TRANSACTIONS> lstFILING_TRANSACTIONS = new List<FILING_TRANSACTIONS>();
                    for (int item = 0; item < lstFilingTransactionsEntity.Count(); item++)
                    {
                        if (lstFilingTransactionsEntity[item].Loan_Lib_Number == null)
                            lstFilingTransactionsEntity[item].Loan_Lib_Number = "";
                        if (lstFilingTransactionsEntity[item].TransNumber == null)
                            lstFilingTransactionsEntity[item].TransNumber = "";
                        if (lstFilingTransactionsEntity[item].TransMapping == null)
                            lstFilingTransactionsEntity[item].TransMapping = "";
                        if (lstFilingTransactionsEntity[item].FilingsId == null)
                            lstFilingTransactionsEntity[item].FilingsId = "";
                        if (lstFilingTransactionsEntity[item].FilingSchedId == null)
                            lstFilingTransactionsEntity[item].FilingSchedId = "";
                        if (lstFilingTransactionsEntity[item].ContributorTypeId == null)
                            lstFilingTransactionsEntity[item].ContributorTypeId = "";
                        if (lstFilingTransactionsEntity[item].ContributionTypeId == null)
                            lstFilingTransactionsEntity[item].ContributionTypeId = "";
                        if (lstFilingTransactionsEntity[item].PaymentTypeId == null)
                            lstFilingTransactionsEntity[item].PaymentTypeId = "";
                        if (lstFilingTransactionsEntity[item].ReceiptTypeId == null)
                            lstFilingTransactionsEntity[item].ReceiptTypeId = "";
                        if (lstFilingTransactionsEntity[item].PurposeCodeId == null)
                            lstFilingTransactionsEntity[item].PurposeCodeId = "";
                        if (lstFilingTransactionsEntity[item].TransferTypeId == null)
                            lstFilingTransactionsEntity[item].TransferTypeId = "";
                        if (lstFilingTransactionsEntity[item].ReceiptCodeId == null)
                            lstFilingTransactionsEntity[item].ReceiptCodeId = "";
                        if (lstFilingTransactionsEntity[item].LoanOtherId == null)
                            lstFilingTransactionsEntity[item].LoanOtherId = "";
                        if (lstFilingTransactionsEntity[item].TransCode == null)
                            lstFilingTransactionsEntity[item].TransCode = "";
                        if (lstFilingTransactionsEntity[item].MunicipalityID == null)
                            lstFilingTransactionsEntity[item].MunicipalityID = "";
                        if (lstFilingTransactionsEntity[item].TreasId == null)
                            lstFilingTransactionsEntity[item].TreasId = "";
                        if (lstFilingTransactionsEntity[item].AddrId == null)
                            lstFilingTransactionsEntity[item].AddrId = "";
                        if (lstFilingTransactionsEntity[item].ParentFilingEntityId == null)
                            lstFilingTransactionsEntity[item].ParentFilingEntityId = "";
                        if (lstFilingTransactionsEntity[item].OfficeID == null)
                            lstFilingTransactionsEntity[item].OfficeID = "";
                        if (lstFilingTransactionsEntity[item].DistrictID == null)
                            lstFilingTransactionsEntity[item].DistrictID = "";
                        if (lstFilingTransactionsEntity[item].SchedDate == null)
                            lstFilingTransactionsEntity[item].SchedDate = "";
                        if (lstFilingTransactionsEntity[item].OrgDate == null)
                            lstFilingTransactionsEntity[item].OrgDate = "";
                        if (lstFilingTransactionsEntity[item].PayDate == null)
                            lstFilingTransactionsEntity[item].PayDate = "";
                        if (lstFilingTransactionsEntity[item].PayNumber == null)
                            lstFilingTransactionsEntity[item].PayNumber = "";
                        if (lstFilingTransactionsEntity[item].OrgAmt == null)
                            lstFilingTransactionsEntity[item].OrgAmt = "";
                        if (lstFilingTransactionsEntity[item].OwedAmt == null)
                            lstFilingTransactionsEntity[item].OwedAmt = "";
                        if (lstFilingTransactionsEntity[item].TransDesc == null)
                            lstFilingTransactionsEntity[item].TransDesc = "";
                        if (lstFilingTransactionsEntity[item].TransExplanation == null)
                            lstFilingTransactionsEntity[item].TransExplanation = "";
                        if (lstFilingTransactionsEntity[item].ElectionDate == null)
                            lstFilingTransactionsEntity[item].ElectionDate = "";
                        if (lstFilingTransactionsEntity[item].ElectionTypeId == null)
                            lstFilingTransactionsEntity[item].ElectionTypeId = "";
                        if (lstFilingTransactionsEntity[item].ElectionYear == null)
                            lstFilingTransactionsEntity[item].ElectionYear = "";
                        if (lstFilingTransactionsEntity[item].RBankLoan == null)
                            lstFilingTransactionsEntity[item].RBankLoan = "";
                        if (lstFilingTransactionsEntity[item].DistOffCandBalProp == null)
                            lstFilingTransactionsEntity[item].DistOffCandBalProp = "";
                        if (lstFilingTransactionsEntity[item].ContributorOccupation == null)
                            lstFilingTransactionsEntity[item].ContributorOccupation = "";
                        if (lstFilingTransactionsEntity[item].ContributorEmployer == null)
                            lstFilingTransactionsEntity[item].ContributorEmployer = "";
                        if (lstFilingTransactionsEntity[item].IEDescription == null)
                            lstFilingTransactionsEntity[item].IEDescription = "";
                        if (lstFilingTransactionsEntity[item].TreasurerOccupation == null)
                            lstFilingTransactionsEntity[item].TreasurerOccupation = "";
                        if (lstFilingTransactionsEntity[item].TreasurerEmployer == null)
                            lstFilingTransactionsEntity[item].TreasurerEmployer = "";
                        if (lstFilingTransactionsEntity[item].TreasurerStreetAddress == null)
                            lstFilingTransactionsEntity[item].TreasurerStreetAddress = "";
                        if (lstFilingTransactionsEntity[item].TreasurerCity == null)
                            lstFilingTransactionsEntity[item].TreasurerCity = "";
                        if (lstFilingTransactionsEntity[item].TreasurerState == null)
                            lstFilingTransactionsEntity[item].TreasurerState = "";
                        if (lstFilingTransactionsEntity[item].TreasurerZip == null)
                            lstFilingTransactionsEntity[item].TreasurerZip = "";
                        if (lstFilingTransactionsEntity[item].ExistsLiabTransNumber == null)
                            lstFilingTransactionsEntity[item].ExistsLiabTransNumber = "";
                        if (lstFilingTransactionsEntity[item].RIESupported == null)
                            lstFilingTransactionsEntity[item].RIESupported = "";
                        if (lstFilingTransactionsEntity[item].SubmissionDate == null)
                            lstFilingTransactionsEntity[item].SubmissionDate = "";
                        if (lstFilingTransactionsEntity[item].RSubcontractor == null)
                            lstFilingTransactionsEntity[item].RSubcontractor = "";
                        if (lstFilingTransactionsEntity[item].RLiability == null)
                            lstFilingTransactionsEntity[item].RLiability = "";
                        if (lstFilingTransactionsEntity[item].RItemized == null)
                            lstFilingTransactionsEntity[item].RItemized = "";
                        if (lstFilingTransactionsEntity[item].RIEIncluded == null)
                            lstFilingTransactionsEntity[item].RIEIncluded = "";
                        if (lstFilingTransactionsEntity[item].RAmend == null)
                            lstFilingTransactionsEntity[item].RAmend = "";
                        if (lstFilingTransactionsEntity[item].CreatedBy == null)
                        {
                            // CREATE BY VALUES COMING FROM OBJECT NOT LIST OBJECT
                            // FIXED ON 07.20.2021 - SB.
                            if (objVendorImportDataEntity.CreatedBy != null)
                                lstFilingTransactionsEntity[item].CreatedBy = objVendorImportDataEntity.CreatedBy;
                            else
                                lstFilingTransactionsEntity[item].CreatedBy = "";
                        }                            
                        if (lstFilingTransactionsEntity[item].ModifiedBy == null)
                            lstFilingTransactionsEntity[item].ModifiedBy = "";
                        if (lstFilingTransactionsEntity[item].FlngEntName == null)
                            lstFilingTransactionsEntity[item].FlngEntName = "";
                        if (lstFilingTransactionsEntity[item].FlngEntFirstName == null)
                            lstFilingTransactionsEntity[item].FlngEntFirstName = "";
                        if (lstFilingTransactionsEntity[item].FlngEntLastName == null)
                            lstFilingTransactionsEntity[item].FlngEntLastName = "";
                        if (lstFilingTransactionsEntity[item].FlngEntMiddleName == null)
                            lstFilingTransactionsEntity[item].FlngEntMiddleName = "";
                        if (lstFilingTransactionsEntity[item].FlngEntCountry == null)
                            lstFilingTransactionsEntity[item].FlngEntCountry = "";
                        if (lstFilingTransactionsEntity[item].FlngEntStrName == null)
                            lstFilingTransactionsEntity[item].FlngEntStrName = "";
                        if (lstFilingTransactionsEntity[item].FlngEntCity == null)
                            lstFilingTransactionsEntity[item].FlngEntCity = "";
                        if (lstFilingTransactionsEntity[item].FlngEntState == null)
                            lstFilingTransactionsEntity[item].FlngEntState = "";
                        if (lstFilingTransactionsEntity[item].FlngEntZip == null)
                            lstFilingTransactionsEntity[item].FlngEntZip = "";
                        if (lstFilingTransactionsEntity[item].RParent == null)
                            lstFilingTransactionsEntity[item].RParent = "";
                        if (lstFilingTransactionsEntity[item].FilingEntId == null)
                            lstFilingTransactionsEntity[item].FilingEntId = "";
                        if (lstFilingTransactionsEntity[item].SupportOppose == null)
                            lstFilingTransactionsEntity[item].SupportOppose = "";
                    }

                    //an instance of the XmlSerializer class is created
                    XElement xmllstFilingTransactionsEntity = new XElement("FILING_TRANSACTIONS",
                     from ftXMLObject in lstFilingTransactionsEntity
                     select new XElement("FILING_TRANSACTIONS",
                                  new XAttribute("FilingEntId", ftXMLObject.FilingEntId),
                                  ftXMLObject.Loan_Lib_Number != null ? new XAttribute("Loan_Lib_Number", ftXMLObject.Loan_Lib_Number) : null,
                                  ftXMLObject.TransNumber != null ? new XAttribute("TransNumber", ftXMLObject.TransNumber) : null,
                                  ftXMLObject.TransMapping != null ? new XAttribute("TransMapping", ftXMLObject.TransMapping) : null,
                                  ftXMLObject.FilingsId != null ? new XAttribute("FilingsId", ftXMLObject.FilingsId) : null,
                                  ftXMLObject.FilingSchedId != null ? new XAttribute("FilingSchedId", ftXMLObject.FilingSchedId) : null,
                                  ftXMLObject.ContributorTypeId != null ? new XAttribute("ContributorTypeId", ftXMLObject.ContributorTypeId) : null,
                                  ftXMLObject.ContributionTypeId != null ? new XAttribute("ContributionTypeId", ftXMLObject.ContributionTypeId) : null,
                                  ftXMLObject.PaymentTypeId != null ? new XAttribute("PaymentTypeId", ftXMLObject.PaymentTypeId) : null,
                                  ftXMLObject.ReceiptTypeId != null ? new XAttribute("ReceiptTypeId", ftXMLObject.ReceiptTypeId) : null,
                                  ftXMLObject.PurposeCodeId != null ? new XAttribute("PurposeCodeId", ftXMLObject.PurposeCodeId) : null,
                                  ftXMLObject.TransferTypeId != null ? new XAttribute("TransferTypeId", ftXMLObject.TransferTypeId) : null,
                                  ftXMLObject.ReceiptCodeId != null ? new XAttribute("ReceiptCodeId", ftXMLObject.ReceiptCodeId) : null,
                                  ftXMLObject.LoanOtherId != null ? new XAttribute("LoanOtherId", ftXMLObject.LoanOtherId) : null,
                                  ftXMLObject.TransCode != null ? new XAttribute("TRANS_CODE", ftXMLObject.TransCode) : null,
                                  ftXMLObject.MunicipalityID != null ? new XAttribute("MunicipalityID", ftXMLObject.MunicipalityID) : null,
                                  ftXMLObject.TreasId != null ? new XAttribute("TreasId", ftXMLObject.TreasId) : null,
                                  ftXMLObject.AddrId != null ? new XAttribute("AddrId", ftXMLObject.AddrId) : null,
                                  ftXMLObject.ParentFilingEntityId != null ? new XAttribute("ParentFilingEntityId", ftXMLObject.ParentFilingEntityId) : null,
                                  ftXMLObject.OfficeID != null ? new XAttribute("OfficeID", ftXMLObject.OfficeID) : null,
                                  ftXMLObject.DistrictID != null ? new XAttribute("DISTRICT", ftXMLObject.DistrictID) : null,
                                  ftXMLObject.SchedDate != null ? new XAttribute("SchedDate", ftXMLObject.SchedDate) : null,
                                  ftXMLObject.OrgDate != null ? new XAttribute("OrgDate", ftXMLObject.OrgDate) : null,
                                  ftXMLObject.PayDate != null ? new XAttribute("PAY_DATE", ftXMLObject.PayDate) : null,
                                  ftXMLObject.PayNumber != null ? new XAttribute("PayNumber", ftXMLObject.PayNumber) : null,
                                  ftXMLObject.OrgAmt != null ? new XAttribute("OrgAmt", ftXMLObject.OrgAmt) : null,
                                  ftXMLObject.OwedAmt != null ? new XAttribute("OwedAmt", ftXMLObject.OwedAmt) : null,
                                  ftXMLObject.TransDesc != null ? new XAttribute("TRANS_DESC", ftXMLObject.TransDesc) : null,
                                  ftXMLObject.TransExplanation != null ? new XAttribute("TransExplanation", ftXMLObject.TransExplanation) : null,
                                  ftXMLObject.ElectionDate != null ? new XAttribute("ELECTION_DATE", ftXMLObject.ElectionDate) : null,
                                  ftXMLObject.ElectionTypeId != null ? new XAttribute("ELECTION_TYPE", ftXMLObject.ElectionTypeId) : null,
                                  ftXMLObject.ElectionYear != null ? new XAttribute("ElectionYear", ftXMLObject.ElectionYear) : null,
                                  ftXMLObject.RBankLoan != null ? new XAttribute("RBankLoan", ftXMLObject.RBankLoan) : null,
                                  ftXMLObject.DistOffCandBalProp != null ? new XAttribute("DistOffCandBalProp", ftXMLObject.DistOffCandBalProp) : null,
                                  ftXMLObject.ContributorOccupation != null ? new XAttribute("ContributorOccupation", ftXMLObject.ContributorOccupation) : null,
                                  ftXMLObject.ContributorEmployer != null ? new XAttribute("ContributorEmployer", ftXMLObject.ContributorEmployer) : null,
                                  ftXMLObject.IEDescription != null ? new XAttribute("IEDescription", ftXMLObject.IEDescription) : null,
                                  ftXMLObject.TreasurerOccupation != null ? new XAttribute("TreasurerOccupation", ftXMLObject.TreasurerOccupation) : null,
                                  ftXMLObject.TreasurerEmployer != null ? new XAttribute("TreasurerEmployer", ftXMLObject.TreasurerEmployer) : null,
                                  ftXMLObject.TreasurerStreetAddress != null ? new XAttribute("TreasurerStreetAddress", ftXMLObject.TreasurerStreetAddress) : null,
                                  ftXMLObject.TreasurerCity != null ? new XAttribute("TreasurerCity", ftXMLObject.TreasurerCity) : null,
                                  ftXMLObject.TreasurerState != null ? new XAttribute("TreasurerState", ftXMLObject.TreasurerState) : null,
                                  ftXMLObject.TreasurerZip != null ? new XAttribute("TreasurerZip", ftXMLObject.TreasurerZip) : null,
                                  ftXMLObject.ExistsLiabTransNumber != null ? new XAttribute("ExistsLiabTransNumber", ftXMLObject.ExistsLiabTransNumber) : null,
                                  ftXMLObject.RIESupported != null ? new XAttribute("RIESupported", ftXMLObject.RIESupported) : null,
                                  ftXMLObject.SubmissionDate != null ? new XAttribute("SUBMIT_DATE", ftXMLObject.SubmissionDate) : null,
                                  ftXMLObject.RSubcontractor != null ? new XAttribute("RSubcontractor", ftXMLObject.RSubcontractor) : null,
                                  ftXMLObject.RLiability != null ? new XAttribute("RLiability", ftXMLObject.RLiability) : null,
                                  ftXMLObject.RItemized != null ? new XAttribute("RItemized", ftXMLObject.RItemized) : null,
                                  ftXMLObject.RIEIncluded != null ? new XAttribute("RIEIncluded", ftXMLObject.RIEIncluded) : null,
                                  new XAttribute("R_STATUS", "A"),
                                  ftXMLObject.RAmend != null ? new XAttribute("RAmend", ftXMLObject.RAmend) : null,
                                  ftXMLObject.CreatedBy != null ? new XAttribute("CreatedBy", ftXMLObject.CreatedBy) : null,
                                  new XAttribute("dtCreatedDate", ""),
                                  ftXMLObject.ModifiedBy != null ? new XAttribute("MODIFIED_BY", ftXMLObject.ModifiedBy) : null,
                                  new XAttribute("MODIFIED_DATE", ""),
                                  ftXMLObject.FlngEntName != null ? new XAttribute("FLNG_ENT_NAME", ftXMLObject.FlngEntName) : null,
                                  ftXMLObject.FlngEntFirstName != null ? new XAttribute("FLNG_ENT_FIRST_NAME", ftXMLObject.FlngEntFirstName) : null,
                                  ftXMLObject.FlngEntLastName != null ? new XAttribute("FLNG_ENT_LAST_NAME", ftXMLObject.FlngEntLastName) : null,
                                  ftXMLObject.FlngEntMiddleName != null ? new XAttribute("FLNG_ENT_MIDDLE_NAME", ftXMLObject.FlngEntMiddleName) : null,
                                  ftXMLObject.FlngEntCountry != null ? new XAttribute("FLNG_ENT_COUNTRY", ftXMLObject.FlngEntCountry) : null,
                                  ftXMLObject.FlngEntStrName != null ? new XAttribute("FLNG_ENT_STR_NAME", ftXMLObject.FlngEntStrName) : null,
                                  ftXMLObject.FlngEntCity != null ? new XAttribute("FLNG_ENT_CITY", ftXMLObject.FlngEntCity) : null,
                                  ftXMLObject.FlngEntState != null ? new XAttribute("FLNG_ENT_STATE", ftXMLObject.FlngEntState) : null,
                                  ftXMLObject.FlngEntZip != null ? new XAttribute("FLNG_ENT_ZIP", ftXMLObject.FlngEntZip) : null,
                                  ftXMLObject.RParent != null ? new XAttribute("RParent", ftXMLObject.RParent) : null,
                                  ftXMLObject.IsClaim != null ? new XAttribute("IsClaim", ftXMLObject.IsClaim) : null,
                                  ftXMLObject.InDistrict != null ? new XAttribute("InDistrict", ftXMLObject.InDistrict) : null,
                                  ftXMLObject.Minor != null ? new XAttribute("Minor", ftXMLObject.Minor) : null,
                                  ftXMLObject.Vendor != null ? new XAttribute("Vendor", ftXMLObject.Vendor) : null,
                                  ftXMLObject.Lobbyist != null ? new XAttribute("Lobbyist", ftXMLObject.Lobbyist) : null,
                                  ftXMLObject.RContributions != null ? new XAttribute("RContributions", ftXMLObject.RContributions) : null,
                                  ftXMLObject.SupportOppose != null ? new XAttribute("R_SUPPORT_OPPOSE", ftXMLObject.SupportOppose) : null



                     ));

                    var resultVendorFile = entities.SP_I_Vendor_Import_File(xmllstFilingTransactionsEntity.ToString());
                    Boolean rstVal = false;
                    int valCount = 0;
                    foreach (var item in resultVendorFile)
                    {
                        valCount = item.Value;
                    }
                    if (valCount >= 1)
                    {
                        var resultsCheck = entities.SP_I_VendorImportData(objVendorImportDataEntity.FilingsId, objVendorImportDataEntity.VendorId, objVendorImportDataEntity.VendorFileSize, objVendorImportDataEntity.VendorTransCount, objVendorImportDataEntity.CreatedBy, objVendorImportDataEntity.dtCreatedDate);
                        if (resultsCheck >= 1)
                            rstVal = true;
                        else
                            rstVal = false;
                    }
                    else
                    {
                        rstVal = false;
                    }
                    return rstVal;
                }
            }
            catch (Exception ex)
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    // AFTER ROLLBACK CURRENT SET OF TRANSACITONS.
                    // WE NEED TO DELETE PREVIOUS SET OF TRANSACTIONS ALREADY INSERTED INTO DATABASE.
                    // DELETE TRANSACTION PERIOUS SET OF TRANSACTIONS.
                    using (var dbDel = new CAPASFIDAS_RLSEntities())
                    {
                        try
                        {
                            // DELETE.
                            var results = entities.SP_D_DeleteVendorImportTrans(String.IsNullOrEmpty(objVendorImportDataEntity.FilingsId) ? (long?)null : Convert.ToInt64(objVendorImportDataEntity.FilingsId), objVendorImportDataEntity.dtCreatedDate);
                        }
                        catch (Exception e)
                        {
                            throw new CommonException(string.Format(e.Message));
                        }
                    }
                }
                throw new CommonException(string.Format(ex.Message));
            }
        }

        //public Boolean AddVendorImportFileIntoTempDatabase_old(IList<FilingTransactionsEntity> lstFilingTransactionsEntity, VendorImportDataEntity objVendorImportDataEntity)
        //{
        //    try
        //    {
        //        IList<FILING_TRANSACTIONS> lstFILING_TRANSACTIONS = new List<FILING_TRANSACTIONS>();

        //        //// GET THE DATE.
        //        //DateTime dtCreatedDate = DateTime.Now;

        //        for (int item = 0; item < lstFilingTransactionsEntity.Count(); item++)
        //        {
        //            #region Get The Filing Entity Id.
        //            // IF PARATERMER NULL THEN CHANGE TO '' EMPTY.
        //            if (lstFilingTransactionsEntity[item].ContributorTypeId == null)
        //                lstFilingTransactionsEntity[item].ContributorTypeId = "";
        //            if (lstFilingTransactionsEntity[item].LoanOtherId == null)
        //                lstFilingTransactionsEntity[item].LoanOtherId = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntName == null)
        //                lstFilingTransactionsEntity[item].FlngEntName = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntFirstName == null)
        //                lstFilingTransactionsEntity[item].FlngEntFirstName = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntLastName == null)
        //                lstFilingTransactionsEntity[item].FlngEntLastName = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntMiddleName == null)
        //                lstFilingTransactionsEntity[item].FlngEntMiddleName = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntCountry == null)
        //                lstFilingTransactionsEntity[item].FlngEntCountry = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntStrName == null)
        //                lstFilingTransactionsEntity[item].FlngEntStrName = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntCity == null)
        //                lstFilingTransactionsEntity[item].FlngEntCity = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntState == null)
        //                lstFilingTransactionsEntity[item].FlngEntState = "";
        //            if (lstFilingTransactionsEntity[item].FlngEntZip == null)
        //                lstFilingTransactionsEntity[item].FlngEntZip = "";
        //            if (lstFilingTransactionsEntity[item].CreatedBy == null)
        //                lstFilingTransactionsEntity[item].CreatedBy = "";
        //            // GET THE FILING ENTITY ID FOR EACH TRANSACTION.
        //            if (lstFilingTransactionsEntity[item].RItemized == "Y")
        //            {
        //                var results = entities.SP_S_GetFilingEntityId(lstFilingTransactionsEntity[item].FilingSchedId, lstFilingTransactionsEntity[item].ContributorTypeId, lstFilingTransactionsEntity[item].LoanOtherId, lstFilingTransactionsEntity[item].FlngEntName, lstFilingTransactionsEntity[item].FlngEntFirstName, lstFilingTransactionsEntity[item].FlngEntLastName, lstFilingTransactionsEntity[item].FlngEntMiddleName, lstFilingTransactionsEntity[item].FlngEntCountry, lstFilingTransactionsEntity[item].FlngEntStrName, lstFilingTransactionsEntity[item].FlngEntCity, lstFilingTransactionsEntity[item].FlngEntState, lstFilingTransactionsEntity[item].FlngEntZip, lstFilingTransactionsEntity[item].CreatedBy);
        //                foreach (var itemFlngEntyId in results)
        //                {
        //                    lstFilingTransactionsEntity[item].FilingEntId = Convert.ToString(itemFlngEntyId.FLNG_ENT_ID);
        //                }
        //            }
        //            else
        //            {
        //                lstFilingTransactionsEntity[item].FilingEntId = "";
        //            }
        //            #endregion Get The Filing Entity Id.                                

        //            #region Create Table Object
        //            FILING_TRANSACTIONS objAddAllSchedules = new FILING_TRANSACTIONS
        //            {
        //                // ADD FOR ALL THE SCHEDULES. (A-R)
        //                FLNG_ENT_ID = lstFilingTransactionsEntity[item].FilingEntId != "" ? Convert.ToInt64(lstFilingTransactionsEntity[item].FilingEntId) : (Int64?)null,
        //                // Convert.ToInt64(lstFilingTransactionsEntity[item].FilingEntId),
        //                LOAN_LIB_NUMBER = lstFilingTransactionsEntity[item].Loan_Lib_Number,
        //                TRANS_NUMBER = lstFilingTransactionsEntity[item].TransNumber,
        //                TRANS_MAPPING = lstFilingTransactionsEntity[item].TransMapping,
        //                FILINGS_ID = Convert.ToInt64(lstFilingTransactionsEntity[item].FilingsId),
        //                FILING_SCHED_ID = Convert.ToInt32(lstFilingTransactionsEntity[item].FilingSchedId),
        //                CNTRBR_TYPE_ID = lstFilingTransactionsEntity[item].ContributorTypeId != "" ? Convert.ToInt32(lstFilingTransactionsEntity[item].ContributorTypeId) : (Int32?)null,
        //                CNTRBN_TYPE_ID = lstFilingTransactionsEntity[item].ContributionTypeId != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].ContributionTypeId) : (Int32?)null,
        //                PAYMENT_TYPE_ID = lstFilingTransactionsEntity[item].PaymentTypeId != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].PaymentTypeId) : (Int32?)null,
        //                RECEIPT_TYPE_ID = lstFilingTransactionsEntity[item].ReceiptTypeId != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].ReceiptTypeId) : (Int32?)null,
        //                PURPOSE_CODE_ID = lstFilingTransactionsEntity[item].PurposeCodeId != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].PurposeCodeId) : (Int32?)null,
        //                TRANSFER_TYPE_ID = lstFilingTransactionsEntity[item].TransferTypeId != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].TransferTypeId) : (Int32?)null,
        //                RECEIPT_CODE_ID = lstFilingTransactionsEntity[item].ReceiptCodeId != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].ReceiptCodeId) : (Int32?)null,
        //                LOAN_OTHER_ID = lstFilingTransactionsEntity[item].LoanOtherId != "" ? Convert.ToInt32(lstFilingTransactionsEntity[item].LoanOtherId) : (Int32?)null,
        //                MUNICIPALITY_ID = lstFilingTransactionsEntity[item].MunicipalityID != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].MunicipalityID) : (Int32?)null,
        //                TREAS_ID = lstFilingTransactionsEntity[item].TreasId != null ? Convert.ToInt64(lstFilingTransactionsEntity[item].TreasId) : (Int64?)null,
        //                ADDR_ID = lstFilingTransactionsEntity[item].AddrId != null ? Convert.ToInt64(lstFilingTransactionsEntity[item].AddrId) : (Int64?)null,
        //                PART_FLNG_ENT_ID = lstFilingTransactionsEntity[item].ParentFilingEntityId != null ? Convert.ToInt64(lstFilingTransactionsEntity[item].ParentFilingEntityId) : (Int64?)null,
        //                OFFICE_ID = lstFilingTransactionsEntity[item].OfficeID != null ? Convert.ToInt32(lstFilingTransactionsEntity[item].OfficeID) : (Int32?)null,
        //                SCHED_DATE = Convert.ToDateTime(lstFilingTransactionsEntity[item].SchedDate),
        //                ORG_DATE = lstFilingTransactionsEntity[item].OrgDate != null ? Convert.ToDateTime(lstFilingTransactionsEntity[item].OrgDate) : (DateTime?)null,
        //                PAY_NUMBER = lstFilingTransactionsEntity[item].PayNumber,
        //                ORG_AMT = Convert.ToDouble(lstFilingTransactionsEntity[item].OrgAmt),
        //                OWED_AMT = lstFilingTransactionsEntity[item].OwedAmt != null ? Convert.ToDouble(lstFilingTransactionsEntity[item].OwedAmt) : (Double?)null,
        //                TRANS_EXPLNTN = lstFilingTransactionsEntity[item].TransExplanation,
        //                ELECTION_YEAR = lstFilingTransactionsEntity[item].ElectionYear,
        //                R_BANK_LOAN = lstFilingTransactionsEntity[item].RBankLoan,
        //                DIST_OFF_CAND_BAL_PROP = lstFilingTransactionsEntity[item].DistOffCandBalProp,
        //                IE_CNTRBR_OCC = lstFilingTransactionsEntity[item].ContributorOccupation,
        //                IE_CNTRBR_EMP = lstFilingTransactionsEntity[item].ContributorEmployer,
        //                IE_DESC = lstFilingTransactionsEntity[item].IEDescription,
        //                TREAS_OCCUPATION = lstFilingTransactionsEntity[item].TreasurerOccupation,
        //                TREAS_EMPLOYER = lstFilingTransactionsEntity[item].TreasurerEmployer,
        //                EXISTS_LIAB_TRANS_NUMBER = lstFilingTransactionsEntity[item].ExistsLiabTransNumber,
        //                R_IE_SUPPORTED = lstFilingTransactionsEntity[item].RIESupported,
        //                R_SUBCONTRACTOR = lstFilingTransactionsEntity[item].RSubcontractor,
        //                R_LIABILITY = lstFilingTransactionsEntity[item].RLiability,
        //                R_ITEMIZED = lstFilingTransactionsEntity[item].RItemized,
        //                R_IE_INCLUDED = lstFilingTransactionsEntity[item].RIEIncluded,
        //                R_STATUS = "A",
        //                R_AMEND = lstFilingTransactionsEntity[item].RAmend,
        //                CREATED_BY = lstFilingTransactionsEntity[item].CreatedBy,
        //                CREATED_DATE = objVendorImportDataEntity.dtCreatedDate,  //DateTime.Now
        //                R_PARENT = lstFilingTransactionsEntity[item].RParent
        //            };
        //            lstFILING_TRANSACTIONS.Add(objAddAllSchedules);
        //            #endregion Create Table 
        //        }
        //        #region Old Code
        //        //foreach (var item in lstFilingTransactionsEntity)                
        //        //{
        //        //    #region Get The Filing Entity Id.
        //        //    // IF PARATERMER NULL THEN CHANGE TO '' EMPTY.
        //        //    if (item.ContributorTypeId == null)
        //        //        item.ContributorTypeId = "";
        //        //    if (item.LoanOtherId == null)
        //        //        item.LoanOtherId = "";
        //        //    if (item.FlngEntName == null)
        //        //        item.FlngEntName = "";
        //        //    if (item.FlngEntFirstName == null)
        //        //        item.FlngEntFirstName = "";
        //        //    if (item.FlngEntLastName == null)
        //        //        item.FlngEntLastName = "";
        //        //    if (item.FlngEntMiddleName == null)
        //        //        item.FlngEntMiddleName = "";
        //        //    if (item.FlngEntCountry == null)
        //        //        item.FlngEntCountry = "";
        //        //    if (item.FlngEntStrName == null)
        //        //        item.FlngEntStrName = "";
        //        //    if (item.FlngEntCity == null)
        //        //        item.FlngEntCity = "";
        //        //    if (item.FlngEntState == null)
        //        //        item.FlngEntState = "";
        //        //    if (item.FlngEntZip == null)
        //        //        item.FlngEntZip = "";
        //        //    if (item.CreatedBy == null)
        //        //        item.CreatedBy = "";
        //        //    // GET THE FILING ENTITY ID FOR EACH TRANSACTION.
        //        //    if (item.RItemized == "Y")
        //        //    {
        //        //        var results = entities.SP_S_GetFilingEntityId(item.FilingSchedId, item.ContributorTypeId, item.LoanOtherId, item.FlngEntName, item.FlngEntFirstName, item.FlngEntLastName, item.FlngEntMiddleName, item.FlngEntCountry, item.FlngEntStrName, item.FlngEntCity, item.FlngEntState, item.FlngEntZip, item.CreatedBy);
        //        //        foreach (var itemFlngEntyId in results)
        //        //        {
        //        //            item.FilingEntId = Convert.ToString(itemFlngEntyId.FLNG_ENT_ID);
        //        //        }
        //        //    }
        //        //    else
        //        //    {
        //        //        item.FilingEntId = "";
        //        //    }
        //        //    #endregion Get The Filing Entity Id.                                

        //        //    #region Create Table Object
        //        //    FILING_TRANSACTIONS objAddAllSchedules = new FILING_TRANSACTIONS
        //        //    {
        //        //        // ADD FOR ALL THE SCHEDULES. (A-R)
        //        //        FLNG_ENT_ID = item.FilingEntId != "" ? Convert.ToInt64(item.FilingEntId) : (Int64?)null,
        //        //        // Convert.ToInt64(item.FilingEntId),
        //        //        LOAN_LIB_NUMBER = item.Loan_Lib_Number,
        //        //        TRANS_NUMBER = item.TransNumber,
        //        //        TRANS_MAPPING = item.TransMapping,
        //        //        FILINGS_ID = Convert.ToInt64(item.FilingsId),
        //        //        FILING_SCHED_ID = Convert.ToInt32(item.FilingSchedId),
        //        //        CNTRBR_TYPE_ID = item.ContributorTypeId != "" ? Convert.ToInt32(item.ContributorTypeId) : (Int32?)null,
        //        //        CNTRBN_TYPE_ID = item.ContributionTypeId != null ? Convert.ToInt32(item.ContributionTypeId) : (Int32?)null,
        //        //        PAYMENT_TYPE_ID = item.PaymentTypeId != null ? Convert.ToInt32(item.PaymentTypeId) : (Int32?)null,
        //        //        RECEIPT_TYPE_ID = item.ReceiptTypeId != null ? Convert.ToInt32(item.ReceiptTypeId) : (Int32?)null,
        //        //        PURPOSE_CODE_ID = item.PurposeCodeId != null ? Convert.ToInt32(item.PurposeCodeId) : (Int32?)null,
        //        //        TRANSFER_TYPE_ID = item.TransferTypeId != null ? Convert.ToInt32(item.TransferTypeId) : (Int32?)null,
        //        //        RECEIPT_CODE_ID = item.ReceiptCodeId != null ? Convert.ToInt32(item.ReceiptCodeId) : (Int32?)null,
        //        //        LOAN_OTHER_ID = item.LoanOtherId != "" ? Convert.ToInt32(item.LoanOtherId) : (Int32?)null,
        //        //        MUNICIPALITY_ID = item.MunicipalityID != null ? Convert.ToInt32(item.MunicipalityID) : (Int32?)null,
        //        //        TREAS_ID = item.TreasId != null ? Convert.ToInt64(item.TreasId) : (Int64?)null,
        //        //        ADDR_ID = item.AddrId != null ? Convert.ToInt64(item.AddrId) : (Int64?)null,
        //        //        PART_FLNG_ENT_ID = item.ParentFilingEntityId != null ? Convert.ToInt64(item.ParentFilingEntityId) : (Int64?)null,
        //        //        OFFICE_ID = item.OfficeID != null ? Convert.ToInt32(item.OfficeID) : (Int32?)null,
        //        //        SCHED_DATE = Convert.ToDateTime(item.SchedDate),
        //        //        ORG_DATE = item.OrgDate != null ? Convert.ToDateTime(item.OrgDate) : (DateTime?)null,
        //        //        PAY_NUMBER = item.PayNumber,
        //        //        ORG_AMT = Convert.ToDouble(item.OrgAmt),
        //        //        OWED_AMT = item.OwedAmt != null ? Convert.ToDouble(item.OwedAmt) : (Double?)null,
        //        //        TRANS_EXPLNTN = item.TransExplanation,
        //        //        ELECTION_YEAR = item.ElectionYear,
        //        //        R_BANK_LOAN = item.RBankLoan,
        //        //        DIST_OFF_CAND_BAL_PROP = item.DistOffCandBalProp,
        //        //        IE_CNTRBR_OCC = item.ContributorOccupation,
        //        //        IE_CNTRBR_EMP = item.ContributorEmployer,
        //        //        IE_DESC = item.IEDescription,
        //        //        TREAS_OCCUPATION = item.TreasurerOccupation,
        //        //        TREAS_EMPLOYER = item.TreasurerEmployer,
        //        //        EXISTS_LIAB_TRANS_NUMBER = item.ExistsLiabTransNumber,
        //        //        R_IE_SUPPORTED = item.RIESupported,
        //        //        R_SUBCONTRACTOR = item.RSubcontractor,
        //        //        R_LIABILITY = item.RLiability,
        //        //        R_ITEMIZED = item.RItemized,
        //        //        R_IE_INCLUDED = item.RIEIncluded,
        //        //        R_STATUS = "A",
        //        //        R_AMEND = item.RAmend,
        //        //        CREATED_BY = item.CreatedBy,
        //        //        CREATED_DATE = objVendorImportDataEntity.dtCreatedDate,  //DateTime.Now
        //        //        R_PARENT = item.RParent
        //        //    };
        //        //    lstFILING_TRANSACTIONS.Add(objAddAllSchedules);
        //        //    #endregion Create Table Object
        //        //}
        //        #endregion 

        //        #region Call Entity Framework to Insert Bulk Transactions.
        //        using (var context = new CAPASFIDAS_RLSEntities())
        //        {
        //            context.Configuration.AutoDetectChangesEnabled = false;
        //            using (var dbContextTransaction = context.Database.BeginTransaction())
        //            {
        //                try
        //                {
        //                    using (var dbAdd = new CAPASFIDAS_RLSEntities())
        //                    {
        //                        dbAdd.Configuration.AutoDetectChangesEnabled = false;
        //                        // INSERT
        //                        dbAdd.FILING_TRANSACTIONS.AddRange(lstFILING_TRANSACTIONS);
        //                        dbAdd.SaveChanges();
        //                        //dbAdd.BulkInsert(lstFILING_TRANSACTIONS); // throwing error.
        //                    }
        //                    Boolean resultValue = false;
        //                    // INSERT INTO VENDOR IMPORT TABLE.
        //                    // BELOW SHOULD UPDATE IF IT LAST SET OF TRANSACTIONS ONLY.
        //                    if (objVendorImportDataEntity.strLastSetOfTrans == "TRUE")
        //                    {
        //                        var results = entities.SP_I_VendorImportData(objVendorImportDataEntity.FilingsId, objVendorImportDataEntity.VendorId, objVendorImportDataEntity.VendorFileSize, objVendorImportDataEntity.VendorTransCount, objVendorImportDataEntity.CreatedBy, objVendorImportDataEntity.dtCreatedDate);

        //                        if (results >= 1)
        //                            resultValue = true;
        //                        else
        //                            resultValue = false;
        //                    }
        //                    else
        //                    {
        //                        resultValue = true;
        //                    }

        //                    // COMMIT TRANSACTIONS. IF NO ERRORS.
        //                    dbContextTransaction.Commit();

        //                    if (resultValue)
        //                        return true;
        //                    else
        //                        return false;
        //                }
        //                catch (Exception ex)
        //                {
        //                    dbContextTransaction.Rollback();
        //                    // AFTER ROLLBACK CURRENT SET OF TRANSACITONS.
        //                    // WE NEED TO DELETE PREVIOUS SET OF TRANSACTIONS ALREADY INSERTED INTO DATABASE.
        //                    // DELETE TRANSACTION PERIOUS SET OF TRANSACTIONS.
        //                    using (var dbDel = new CAPASFIDAS_RLSEntities())
        //                    {
        //                        try
        //                        {
        //                            // DELETE.
        //                            var results = entities.SP_D_DeleteVendorImportTrans(objVendorImportDataEntity.FilingsId, Convert.ToString(objVendorImportDataEntity.dtCreatedDate));
        //                            //IList<FILING_TRANSACTIONS> lstFT = new List<FILING_TRANSACTIONS>();
        //                            //var lstFilingTransactions = dbDel.FILING_TRANSACTIONS.Where(x => x.FILINGS_ID == Convert.ToInt64(objVendorImportDataEntity.FilingsId) && x.CREATED_DATE == objVendorImportDataEntity.dtCreatedDate).ToList();
        //                            //foreach (FILING_TRANSACTIONS ft in lstFilingTransactions)
        //                            //{
        //                            //    lstFT.Add(ft);
        //                            //}
        //                            ////List<FILING_TRANSACTIONS> lstFT = dbDel.FILING_TRANSACTIONS.Where(x => x.FILINGS_ID == Convert.ToInt64(objVendorImportDataEntity.FilingsId) && x.CREATED_DATE == objVendorImportDataEntity.dtCreatedDate).ToList();
        //                            //dbDel.FILING_TRANSACTIONS.RemoveRange(lstFT);
        //                            //dbDel.SaveChanges();
        //                        }
        //                        catch (Exception e)
        //                        {
        //                            return false;
        //                            throw new CommonException(string.Format(e.Message));
        //                        }
        //                    }
        //                    return false;
        //                    throw new CommonException(string.Format(ex.Message));
        //                }
        //            }
        //        }
        //        #endregion Call Entity Framework to Insert Bulk Transactions.
        //    }
        //    catch (Exception ex)
        //    {
        //        // AFTER ROLLBACK CURRENT SET OF TRANSACITONS.
        //        // WE NEED TO DELETE PREVIOUS SET OF TRANSACTIONS ALREADY INSERTED INTO DATABASE.
        //        // DELETE TRANSACTION PERIOUS SET OF TRANSACTIONS.
        //        using (var dbDel = new CAPASFIDAS_RLSEntities())
        //        {
        //            try
        //            {
        //                // DELETE.
        //                var results = entities.SP_D_DeleteVendorImportTrans(objVendorImportDataEntity.FilingsId, Convert.ToString(objVendorImportDataEntity.dtCreatedDate));
        //                //IList<FILING_TRANSACTIONS> lstFT = new List<FILING_TRANSACTIONS>();
        //                //var lstFilingTransactions = dbDel.FILING_TRANSACTIONS.Where(x => x.FILINGS_ID == Convert.ToInt64(objVendorImportDataEntity.FilingsId) && x.CREATED_DATE == objVendorImportDataEntity.dtCreatedDate).ToList();
        //                //foreach (FILING_TRANSACTIONS ft in lstFilingTransactions)
        //                //{
        //                //    lstFT.Add(ft);
        //                //}
        //                ////List<FILING_TRANSACTIONS> lstFT = dbDel.FILING_TRANSACTIONS.Where(x => x.FILINGS_ID == Convert.ToInt64(objVendorImportDataEntity.FilingsId) && x.CREATED_DATE == objVendorImportDataEntity.dtCreatedDate).ToList();
        //                //dbDel.FILING_TRANSACTIONS.RemoveRange(lstFT);
        //                //dbDel.SaveChanges();
        //            }
        //            catch (Exception e)
        //            {
        //                throw new CommonException(string.Format(e.Message));
        //            }
        //        }
        //        throw new CommonException(string.Format(ex.Message));
        //    }
        //}
        #endregion AddVendorImportFileIntoTempDatabase


        /// <summary>
        /// GetSchedR_Exists
        /// </summary>
        /// <param name="objSchedR_ISExists_Entity"></param>
        /// <returns></returns>
        public String GetSchedR_Exists(SchedR_ISExists_Entity objSchedR_ISExists_Entity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String returnIsExistsSchedR = String.Empty;
                    objSchedR_ISExists_Entity.Filing_Enty_First_Name.Replace("'", "''");
                    objSchedR_ISExists_Entity.Filing_Enty_Middle_Name.Replace("'", "''");
                    objSchedR_ISExists_Entity.Filing_Enty_Last_Name.Replace("'", "''");
                    var results = entities.SP_S_ScheduleR_AlreadyExists(String.IsNullOrEmpty(objSchedR_ISExists_Entity.FilerId) ? (long?)null : Convert.ToInt64(objSchedR_ISExists_Entity.FilerId),
                                                                        String.IsNullOrEmpty(objSchedR_ISExists_Entity.ReportYearId) ? (int?)null : Convert.ToInt32(objSchedR_ISExists_Entity.ReportYearId),
                                                                        objSchedR_ISExists_Entity.Filing_Enty_First_Name,
                                                                        objSchedR_ISExists_Entity.Filing_Enty_Middle_Name,
                                                                        objSchedR_ISExists_Entity.Filing_Enty_Last_Name,
                                                                        String.IsNullOrEmpty(objSchedR_ISExists_Entity.Office_Id) ? (int?)null : Convert.ToInt32(objSchedR_ISExists_Entity.Office_Id),
                                                                        objSchedR_ISExists_Entity.District_Id);

                    foreach (var item in results)
                    {
                        returnIsExistsSchedR = item.IS_EXISTS.ToString();
                    }

                    return returnIsExistsSchedR;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetFilerCommitteeTypeId
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <returns></returns>
        public String GetFilerCommitteeTypeId(String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strCommitteeTypeId = String.Empty;

                    var results = entities.SP_S_GetFilerCommitteeType(String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        strCommitteeTypeId = item.Value.ToString();
                    }

                    return strCommitteeTypeId;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region "GetElectionTypeForFilerID"
        // THIS FUNCTION GETS THE DATA FOR THE ELECTIONTYPE FILTER DROPDOWN
        public IList<ElectionTypeEntity> GetElectionTypeForFilerIDForSubmit(String strElectYearID, String strOfficeTypeID, String strCountyID, String strMunicipalityID, String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionTypeEntity> listElectionTypeEntity = new List<ElectionTypeEntity>();

                    ElectionTypeEntity objElectionTypeEntity;

                    //data from stored procedure
                    var results = entities.SP_S_ElectionTypesForFilerIDForSubmit(String.IsNullOrEmpty(strElectYearID) ? (int?)null : Convert.ToInt32(strElectYearID), String.IsNullOrEmpty(strOfficeTypeID) ? (int?)null : Convert.ToInt32(strOfficeTypeID), String.IsNullOrEmpty(strCountyID) ? (int?)null : Convert.ToInt32(strCountyID), String.IsNullOrEmpty(strMunicipalityID) ? (int?)null : Convert.ToInt32(strMunicipalityID), String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        //create ElectionTypeEntity object
                        objElectionTypeEntity = new ElectionTypeEntity();

                        //modify object's attributes
                        objElectionTypeEntity.ElectionTypeId = Convert.ToString(item.ELECT_TYPE_ID);
                        objElectionTypeEntity.ElectionTypeDesc = Convert.ToString(item.ELECT_TYPE_DESC);

                        //add object to list
                        listElectionTypeEntity.Add(objElectionTypeEntity);
                    }

                    return listElectionTypeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        #region "GetElectionYearDataForFilerIDForSubmit"
        // THIS FUNCTION GETS THE ELECTION YEARS FOR THE FILTER DROPDOWN
        public IList<ElectionYearEntity> GetElectionYearDataForFilerIDForSubmit(String strFilerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ElectionYearEntity> lstElectionYearEntity = new List<ElectionYearEntity>();
                    ElectionYearEntity objElectionYearEntity;

                    var results = entities.SP_S_GetElectionYearsForFilerIDSubmit(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID));

                    foreach (var item in results)
                    {
                        objElectionYearEntity = new ElectionYearEntity();
                        objElectionYearEntity.ElectionYearId = Convert.ToString(item.ELECTION_YEAR_ID);
                        objElectionYearEntity.ElectionYearValue = Convert.ToString(item.ELECT_YEAR);
                        lstElectionYearEntity.Add(objElectionYearEntity);
                    }

                    return lstElectionYearEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        /// <summary>
        /// GetDisclosurePeriodDataForNoActivity
        /// </summary>
        /// <param name="strFilerID"></param>
        /// <param name="strPolCalDateID"></param>
        /// <param name="strElectTypeId"></param>
        /// <returns></returns>
        public IList<DisclosurePreiodEntity> GetDisclosurePeriodDataForNoActivity(String strFilerID, String strPolCalDateID, String strElectTypeId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosurePreiodEntity> lstDisclosurePreiodEntity = new List<DisclosurePreiodEntity>();
                    DisclosurePreiodEntity objDisclosurePreiodEntity;

                    var results = entities.SP_S_DisclosurePeriodForNoActivity(String.IsNullOrEmpty(strFilerID) ? (long?)null : Convert.ToInt64(strFilerID), String.IsNullOrEmpty(strPolCalDateID) ? (int?)null : Convert.ToInt32(strPolCalDateID), String.IsNullOrEmpty(strElectTypeId) ? (int?)null : Convert.ToInt32(strElectTypeId));

                    foreach (var item in results)
                    {
                        objDisclosurePreiodEntity = new DisclosurePreiodEntity();
                        objDisclosurePreiodEntity.FilingTypeId = Convert.ToString(item.FILING_TYPE_ID);
                        objDisclosurePreiodEntity.FilingDesc = item.FILING_DESC;
                        objDisclosurePreiodEntity.FilingAbbrev = item.FILING_ABBREV;
                        lstDisclosurePreiodEntity.Add(objDisclosurePreiodEntity);
                    }

                    return lstDisclosurePreiodEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region GetMunicipalityByOfficeType
        /// <summary>
        /// GetMunicipalityByOfficeType
        /// </summary>
        /// <param name="strCountyId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <returns></returns>
        // GetMunicipalityByOfficeType
        public IList<MunicipalityEntity> GetMunicipalityByOfficeType(String strCountyId, String strOfficeTypeId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<MunicipalityEntity> lstMunicipalityEntity = new List<MunicipalityEntity>();
                    MunicipalityEntity objMunicipalityEntity;

                    Int32 intCountyId;
                    if (strCountyId != "")
                        intCountyId = Convert.ToInt32(strCountyId);
                    else
                        intCountyId = 0;

                    var results = entities.SP_S_MuncipalityByOfficeType(intCountyId, strOfficeTypeId);

                    foreach (var item in results)
                    {
                        objMunicipalityEntity = new MunicipalityEntity();
                        objMunicipalityEntity.MunicipalityId = Convert.ToString(item.MUNICIPALITY_ID);
                        objMunicipalityEntity.MunicipalityDesc = item.MUNICIPALITY_DESC;
                        lstMunicipalityEntity.Add(objMunicipalityEntity);
                    }

                    return lstMunicipalityEntity;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }
        #endregion GetMunicipalityByOfficeType

        #region "GetCounty"
        // THIS FUNCTION GETS THE DATA FOR THE COUNTY FILTER DROPDOWN
        /// <summary>
        /// GetCounty
        /// </summary>
        /// <param name="elect_Year_ID"></param>
        /// <param name="filer_ID"></param>
        /// <returns></returns>
        public IList<CountyEntity> GetCountyForFilings(string elect_Year_ID, string filer_ID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<CountyEntity> listCountyEntity = new List<CountyEntity>();

                    CountyEntity objCountyEntity;

                    //data from stored procedure
                    var results = entities.SP_S_County_Filings(String.IsNullOrEmpty(elect_Year_ID) ? (int?)null : Convert.ToInt32(elect_Year_ID), Convert.ToInt64(filer_ID));

                    foreach (var item in results)
                    {
                        //create CountyEntity object
                        objCountyEntity = new CountyEntity();

                        //modify object's attributes
                        objCountyEntity.CountyId = Convert.ToString(item.COUNTY_ID);
                        objCountyEntity.CountyDesc = Convert.ToString(item.CNTY_BOARD);

                        //add object to list
                        listCountyEntity.Add(objCountyEntity);
                    }

                    return listCountyEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion


        /// <summary>
        /// Get Loan Outstanding balance
        /// </summary>
        /// <param name="loan_Lib_number"></param>
        /// <param name="strFilerId"></param>
        /// <returns></returns>
        public String FilingTransactionOutStandingBalance(String loan_Lib_number, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    String strResult_value = String.Empty;
                    var result = entities.SP_S_FilingTrans_SubOutstanding(loan_Lib_number,
                        String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in result)
                    {
                        strResult_value = item.OUTSTANDING_AMT.ToString();
                    }
                    return strResult_value;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region AddVendorImportFileForSchedA
        /// <summary>
        /// AddVendorImportFileForSchedA
        /// </summary>
        /// <param name="lstFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean AddVendorImportFileForSchedA(IList<FilingTransactionsEntity> lstFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {                    
                    //an instance of the XmlSerializer class is created
                    XElement xmllstFilingTransactionsEntity = new XElement("FILING_TRANSACTIONS",
                     from ftXMLObject in lstFilingTransactionsEntity
                     select new XElement("FILING_TRANSACTIONS",
                                  new XAttribute("FilerId", ftXMLObject.FilerId),
                                  ftXMLObject.ElectYearId != null ? new XAttribute("ElectionYear", ftXMLObject.ElectYearId) : null,
                                  ftXMLObject.OfficeTypeId != null ? new XAttribute("OFFICE_TYPE_ID", ftXMLObject.OfficeTypeId) : null,
                                  ftXMLObject.ElectionTypeId != null ? new XAttribute("ELECTION_TYPE_ID", ftXMLObject.ElectionTypeId) : null,
                                  ftXMLObject.ElectionDateId != null ? new XAttribute("ELECTION_DATE", ftXMLObject.ElectionDateId) : null,
                                  ftXMLObject.FilingTypeId != null ? new XAttribute("FILING_TYPE_ID", ftXMLObject.FilingTypeId) : null,
                                  ftXMLObject.ResigTermTypeId != null ? new XAttribute("REGIS_TERM_TYPE_ID", ftXMLObject.ResigTermTypeId) : null,
                                  ftXMLObject.FilingDate != null ? new XAttribute("FILING_DATE", ftXMLObject.FilingDate) : null,
                                  ftXMLObject.CreatedBy != null ? new XAttribute("CREATED_BY", ftXMLObject.CreatedBy) : null,
                                  ftXMLObject.SchedDate != null ? new XAttribute("SchedDate", ftXMLObject.SchedDate) : null,
                                  ftXMLObject.ContributorTypeDesc != null ? new XAttribute("ContributorTypeDesc", ftXMLObject.ContributorTypeDesc) : null,
                                  ftXMLObject.FlngEntFirstName != null ? new XAttribute("FLNG_ENT_FIRST_NAME", ftXMLObject.FlngEntFirstName) : null,
                                  ftXMLObject.FlngEntMiddleName != null ? new XAttribute("FLNG_ENT_MIDDLE_NAME", ftXMLObject.FlngEntMiddleName) : null,
                                  ftXMLObject.FlngEntLastName != null ? new XAttribute("FLNG_ENT_LAST_NAME", ftXMLObject.FlngEntLastName) : null,
                                  ftXMLObject.FlngEntName != null ? new XAttribute("FLNG_ENT_NAME", ftXMLObject.FlngEntName) : null,
                                  ftXMLObject.FlngEntCountry != null ? new XAttribute("FLNG_ENT_COUNTRY", ftXMLObject.FlngEntCountry) : null,
                                  ftXMLObject.FlngEntStrName != null ? new XAttribute("FLNG_ENT_STR_NAME", ftXMLObject.FlngEntStrName) : null,
                                  ftXMLObject.FlngEntCity != null ? new XAttribute("FLNG_ENT_CITY", ftXMLObject.FlngEntCity) : null,
                                  ftXMLObject.FlngEntState != null ? new XAttribute("FLNG_ENT_STATE", ftXMLObject.FlngEntState) : null,
                                  ftXMLObject.FlngEntZip != null ? new XAttribute("FLNG_ENT_ZIP", ftXMLObject.FlngEntZip) : null,
                                  ftXMLObject.PaymentTypeDesc != null ? new XAttribute("PaymentTypeDesc", ftXMLObject.PaymentTypeDesc) : null,
                                  ftXMLObject.PayNumber != null ? new XAttribute("PayNumber", ftXMLObject.PayNumber) : null,
                                  ftXMLObject.OrgAmt != null ? new XAttribute("OrgAmt", ftXMLObject.OrgAmt) : null,
                                  ftXMLObject.TransExplanation != null ? new XAttribute("TransExplanation", ftXMLObject.TransExplanation) : null,
                                  ftXMLObject.Unique_Num != null ? new XAttribute("Unique_Num", ftXMLObject.Unique_Num) : null,
                                  // DAVE PCF ENHANCEMENT ADDED FIELDS BELOW
                                  ftXMLObject.IsClaim != null ? new XAttribute("R_CLAIM", ftXMLObject.IsClaim) : null,
                                  ftXMLObject.InDistrict != null ? new XAttribute("R_IN_DISTRICT", ftXMLObject.InDistrict) : null,
                                  ftXMLObject.Minor != null ? new XAttribute("R_MINOR", ftXMLObject.Minor) : null,
                                  ftXMLObject.Vendor != null ? new XAttribute("R_VENDOR", ftXMLObject.Vendor) : null,
                                  ftXMLObject.Lobbyist != null ? new XAttribute("R_LOBBYIST", ftXMLObject.Lobbyist) : null,
                                  ftXMLObject.RContributions != null ? new XAttribute("R_CONTRIBUTIONS", ftXMLObject.RContributions) : null,
                                  ftXMLObject.TreasurerEmployer != null ? new XAttribute("TREAS_EMPLOYER", ftXMLObject.TreasurerEmployer) : null,
                                  ftXMLObject.TreasurerOccupation != null ? new XAttribute("TREAS_OCCUPATION", ftXMLObject.TreasurerOccupation) : null,
                                  ftXMLObject.TreasurerStreetAddress != null ? new XAttribute("ADDR_ADDR1", ftXMLObject.TreasurerStreetAddress) : null,
                                  ftXMLObject.TreasurerCity != null ? new XAttribute("ADDR_CITY", ftXMLObject.TreasurerCity) : null,
                                  ftXMLObject.TreasurerState != null ? new XAttribute("ADDR_STATE", ftXMLObject.TreasurerState) : null,
                                  ftXMLObject.TreasurerZip != null ? new XAttribute("ADDR_ZIP", ftXMLObject.TreasurerZip) : null));

                    var resultVendorFile = entities.SP_I_Vendor_Import_SCHED_A(xmllstFilingTransactionsEntity.ToString());
                    Boolean rstVal = true;

                    return rstVal;
                }
            }
            catch (Exception ex)
            {
                throw new CommonException(string.Format(ex.Message));
            }
        }
        #endregion AddVendorImportFileForSchedA

        #region GetTransactionTypesForWeeklyClaim
        /// <summary>
        /// GetTransactionTypesForWeeklyClaim
        /// </summary>
        /// <returns></returns>
        public IList<TransactionTypesEntity> GetTransactionTypesForWeeklyClaim()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<TransactionTypesEntity> lstTransactionTypesEntity = new List<TransactionTypesEntity>();
                    TransactionTypesEntity objTransactionTypesEntity;

                    var results = entities.SP_S_TransactionTypesForWeeklyClaim();

                    foreach (var item in results)
                    {
                        objTransactionTypesEntity = new TransactionTypesEntity();
                        objTransactionTypesEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objTransactionTypesEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objTransactionTypesEntity.FilingSchedAbbrev = item.FILING_SCHED_ABBREV;
                        lstTransactionTypesEntity.Add(objTransactionTypesEntity);
                    }

                    return lstTransactionTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetTransactionTypesForWeeklyClaim

        #region GetFilingWeeklyClaimSubmissionData
        /// <summary>
        /// GetFilingWeeklyClaimSubmissionData
        /// </summary>
        /// <param name="objFilingTransDataEntity"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetFilingWeeklyClaimSubmissionData(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_WeeklyClaimSubmissionTrans(string.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate),
                                            string.IsNullOrEmpty(objFilingTransDataEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.MunicipalityID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else if (item.R_IE_SUPPORTED == "N")
                            objFilingTransactionDataEntity.IESupported = "No";
                        else
                            objFilingTransactionDataEntity.IESupported = "";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        if (item.R_IN_DISTRICT == "Y")
                        {
                            objFilingTransactionDataEntity.InDistrict = "Yes";
                        }
                        else if (item.R_IN_DISTRICT == "N")
                        {
                            objFilingTransactionDataEntity.InDistrict = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.InDistrict = "";
                        }

                        if (item.R_MINOR == "Y")
                        {
                            objFilingTransactionDataEntity.RMinor = "Yes";
                        }
                        else if (item.R_MINOR == "N")
                        {
                            objFilingTransactionDataEntity.RMinor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RMinor = "";
                        }

                        if (item.R_VENDOR == "Y")
                        {
                            objFilingTransactionDataEntity.RVendor = "Yes";
                        }
                        else if (item.R_VENDOR == "N")
                        {
                            objFilingTransactionDataEntity.RVendor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RVendor = "";
                        }

                        if (item.R_LOBBYIST == "Y")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "Yes";
                        }
                        else if (item.R_LOBBYIST == "N")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RLobbyist = "";
                        }

                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objFilingTransactionDataEntity.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objFilingTransactionDataEntity.RContributions = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RContributions = "";
                        }

                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreaAddress = item.TREAS_ADDRESS;
                        objFilingTransactionDataEntity.TreaAddr1 = item.TREAS_ADDR1;
                        objFilingTransactionDataEntity.TreaCity = item.TREAS_CITY;
                        objFilingTransactionDataEntity.TreaState = item.TREAS_STATE;
                        objFilingTransactionDataEntity.TreaZipCode = item.TREAS_ZIP;
                        objFilingTransactionDataEntity.RecordType = item.RECORD_TYPE;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetFilingWeeklyClaimSubmissionData

        #region GetWeeklyClaimSubmissionHistoryData
        /// <summary>
        /// GetWeeklyClaimSubmissionHistoryData
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetWeeklyClaimSubmissionHistoryData(String strTransNumber)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_WeeklyClaimSubmissionTransHistory(strTransNumber);

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.IESupported = item.R_IE_SUPPORTED;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        if (item.R_IN_DISTRICT == "Y")
                        {
                            objFilingTransactionDataEntity.InDistrict = "Yes";
                        }
                        else if (item.R_IN_DISTRICT == "N")
                        {
                            objFilingTransactionDataEntity.InDistrict = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.InDistrict = "";
                        }

                        if (item.R_MINOR == "Y")
                        {
                            objFilingTransactionDataEntity.RMinor = "Yes";
                        }
                        else if (item.R_MINOR == "N")
                        {
                            objFilingTransactionDataEntity.RMinor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RMinor = "";
                        }

                        if (item.R_VENDOR == "Y")
                        {
                            objFilingTransactionDataEntity.RVendor = "Yes";
                        }
                        else if (item.R_VENDOR == "N")
                        {
                            objFilingTransactionDataEntity.RVendor = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RVendor = "";
                        }

                        if (item.R_LOBBYIST == "Y")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "Yes";
                        }
                        else if (item.R_LOBBYIST == "N")
                        {
                            objFilingTransactionDataEntity.RLobbyist = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RLobbyist = "";
                        }

                        if (item.R_CONTRIBUTIONS == "Y")
                        {
                            objFilingTransactionDataEntity.RContributions = "Yes";
                        }
                        else if (item.R_CONTRIBUTIONS == "N")
                        {
                            objFilingTransactionDataEntity.RContributions = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RContributions = "";
                        }

                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreaAddress = item.TREAS_ADDRESS;
                        objFilingTransactionDataEntity.TreaAddr1 = item.TREAS_ADDR1;
                        objFilingTransactionDataEntity.TreaCity = item.TREAS_CITY;
                        objFilingTransactionDataEntity.TreaState = item.TREAS_STATE;
                        objFilingTransactionDataEntity.TreaZipCode = item.TREAS_ZIP;

                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetWeeklyClaimSubmissionHistoryData

        /// <summary>
        /// /AddWeeklyClaimSubSchedA
        /// </summary>
        /// <param name="AddWeeklyClaimSubSchedA"></param>
        /// <returns></returns>
        public string AddWeeklyClaimSubSchedA(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string result = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_I_WeeklyClaimSubSchedA(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingSchedId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingSchedId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                        objFilingTransactionsEntity.PayNumber,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                        objFilingTransactionsEntity.TransExplanation,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.ElectionDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionYear) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionYear),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                        objFilingTransactionsEntity.FlngEntName,
                        objFilingTransactionsEntity.FlngEntFirstName,
                        objFilingTransactionsEntity.FlngEntLastName,
                        objFilingTransactionsEntity.FlngEntMiddleName,
                        objFilingTransactionsEntity.FlngEntStrName,
                        objFilingTransactionsEntity.FlngEntCity,
                        objFilingTransactionsEntity.FlngEntState,
                        objFilingTransactionsEntity.FlngEntZip,
                        objFilingTransactionsEntity.RItemized,
                        objFilingTransactionsEntity.FlngEntCountry,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                        objFilingTransactionsEntity.CreatedBy,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                        string.IsNullOrEmpty(objFilingTransactionsEntity.MunicipalityID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.MunicipalityID),
                        objFilingTransactionsEntity.IsClaim,
                        objFilingTransactionsEntity.InDistrict,
                        objFilingTransactionsEntity.Minor,
                        objFilingTransactionsEntity.Vendor,
                        objFilingTransactionsEntity.Lobbyist,
                        objFilingTransactionsEntity.TreasurerEmployer,
                        objFilingTransactionsEntity.TreasurerOccupation,
                        objFilingTransactionsEntity.TreasurerStreetAddress,
                        objFilingTransactionsEntity.TreasurerCity,
                        objFilingTransactionsEntity.TreasurerState,
                        objFilingTransactionsEntity.TreasurerZip,
                        string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                        objFilingTransactionsEntity.RContributions);

                    foreach (var item in returnValue)
                    {
                        result = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return result;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region UpdateWeeklyClaimSubSchedA
        /// <summary>
        /// UpdateWeeklyClaimSubSchedA
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateWeeklyClaimSubSchedA(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_U_WeeklyClaimSub_SchedA(objFilingTransactionsEntity.TransNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.ContributorTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ContributorTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                    objFilingTransactionsEntity.PayNumber,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                    objFilingTransactionsEntity.TransExplanation,
                                    objFilingTransactionsEntity.FlngEntName,
                                    objFilingTransactionsEntity.FlngEntFirstName,
                                    objFilingTransactionsEntity.FlngEntMiddleName,
                                    objFilingTransactionsEntity.FlngEntLastName,
                                    objFilingTransactionsEntity.FlngEntStrName,
                                    objFilingTransactionsEntity.FlngEntCity,
                                    objFilingTransactionsEntity.FlngEntState,
                                    objFilingTransactionsEntity.FlngEntZip,
                                    objFilingTransactionsEntity.FlngEntCountry,
                                    objFilingTransactionsEntity.ModifiedBy,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                    objFilingTransactionsEntity.IsClaim,
                                    objFilingTransactionsEntity.InDistrict,
                                    objFilingTransactionsEntity.Minor,
                                    objFilingTransactionsEntity.Vendor,
                                    objFilingTransactionsEntity.Lobbyist,
                                    objFilingTransactionsEntity.TreasurerEmployer,
                                    objFilingTransactionsEntity.TreasurerOccupation,
                                    objFilingTransactionsEntity.TreasurerStreetAddress,
                                    objFilingTransactionsEntity.TreasurerCity,
                                    objFilingTransactionsEntity.TreasurerState,
                                    objFilingTransactionsEntity.TreasurerZip,
                                    string.IsNullOrEmpty(objFilingTransactionsEntity.CommTypeID) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.CommTypeID),
                                    objFilingTransactionsEntity.RContributions,
                                    objFilingTransactionsEntity.SubmissionDate);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion UpdateFlngTransMonetaryContrData

        #region WeeklyClaimSubSubmitTrans
        /// <summary>
        /// WeeklyClaimSubSubmitTrans
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean WeeklyClaimSubSubmitTrans(IList<FilingTransactionsTransIDEntity> lstFilingTransactionsTransIDEntity, String filerID, String strModifiedBy)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    //an instance of the XmlSerializer class is created
                    XElement xmllstFilingTransactionsEntity = new XElement("FILING_TRANSACTIONS",
                     from ftXMLObject in lstFilingTransactionsTransIDEntity
                     select new XElement("FILING_TRANSACTIONS",
                                  new XAttribute("TransId", ftXMLObject.TransID)
                     ));

                    var returnValue = entities.SP_U_WeeklyClaimSubSubmitTrans(xmllstFilingTransactionsEntity.ToString(), string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID), strModifiedBy);

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion WeeklyClaimSubSubmitTrans

        #region Delete24HNoticeFlngTrans
        /// <summary>
        /// Delete24HNoticeFlngTrans
        /// </summary>
        /// <param name="strFilingTransId"></param>
        /// <param name="strModifiedBy"></param>
        /// <returns></returns>
        public Boolean DeleteWeeklyClaimSubSchedA(String strTransNumber, String strModifiedBy, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var returnValue = entities.SP_D_WeeklyClaimSubSchedA(strTransNumber, strModifiedBy,
                                                                                 string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    if (returnValue >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion Delete24HNoticeFlngTrans

        #region GetItemizedWCSTrans
        /// <summary>
        /// GetItemizedWCSTrans
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <param name="strElectionYearId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strElectionTypeId"></param>
        /// <param name="strElectionDateId"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetItemizedWCSTrans(String strFilerId, String strElectionYearId, String strOfficeTypeId, String strElectionTypeId, String strElectionDateId, String strMunicipalityId, String strCuttOffDate)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_ItemizedWeeklyClaimSubTrans(String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId),
                        String.IsNullOrEmpty(strElectionYearId) ? (int?)null : Convert.ToInt32(strElectionYearId),
                        String.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId),
                        String.IsNullOrEmpty(strElectionTypeId) ? (int?)null : Convert.ToInt32(strElectionTypeId),
                        String.IsNullOrEmpty(strElectionDateId) ? (int?)null : Convert.ToInt32(strElectionDateId),
                        String.IsNullOrEmpty(strMunicipalityId) ? (int?)null : Convert.ToInt32(strMunicipalityId),
                        string.IsNullOrEmpty(strCuttOffDate) ? (DateTime?)null : Convert.ToDateTime(strCuttOffDate));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.IEType = item.FILING_CAT_SUBTYPE;
                        objFilingTransactionDataEntity.TreasurerName = item.TREASURER_NAME;
                        objFilingTransactionDataEntity.ContributorName = item.CONTRIBUTOR_NAME;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetItemizedWCSTrans

        #region AddWeeklyClaimSubItemizedTrans
        /// <summary>
        /// AddWeeklyClaimSubItemizedTrans
        /// </summary>
        /// <param name="lstFilingTransactionsEntity"></param>
        /// <param name="strFilerId"></param>
        /// <param name="strElectionYearId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <param name="strFilingTypeId"></param>
        /// <param name="strElectionTypeId"></param>
        /// <param name="strElectionDateId"></param>
        /// <param name="strCreatedBy"></param>
        /// <param name="strFilingDate"></param>
        /// <returns></returns>
        public Boolean AddWeeklyClaimSubItemizedTrans(IList<FilingTransactionsEntity> lstFilingTransactionsEntity, String strFilerId, String strElectionYearId, String strOfficeTypeId, String strFilingTypeId, String strElectionTypeId, String strElectionDateId, String strCreatedBy, String strFilingDate)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    //an instance of the XmlSerializer class is created
                    XElement xmllstFilingTransactionsEntity = new XElement("FILING_TRANSACTIONS",
                     from ftXMLObject in lstFilingTransactionsEntity
                     select new XElement("FILING_TRANSACTIONS",
                                  new XAttribute("TRANS_NUMBER", ftXMLObject.TransNumber)                                  
                     ));

                    var resultVendorFile = entities.SP_I_WeeklyClaimSub_Itemized(xmllstFilingTransactionsEntity.ToString(),
                        String.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId),                        
                        strElectionYearId,
                        strOfficeTypeId,
                        strFilingTypeId,
                        strElectionTypeId,
                        strElectionDateId,
                        strFilingDate,
                        strCreatedBy
                        );
                    Boolean rstVal = true;
                    return rstVal;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion

        /// <summary>
        /// GetDisclosureTypesDataForPCFB
        /// </summary>
        /// <returns></returns>
        public IList<DisclosureTypesEntity> GetDisclosureTypesDataForPCFB(String strCandCommId, String strElectTypeID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<DisclosureTypesEntity> lstDisclosureTypesEntity = new List<DisclosureTypesEntity>();
                    DisclosureTypesEntity objDisclosureTypesEntity;

                    var results = entities.SP_S_DisclosureTypes_CON_MON(string.IsNullOrEmpty(strCandCommId) ? (long?)null : Convert.ToInt64(strCandCommId),
                                                                        string.IsNullOrEmpty(strElectTypeID) ? (int?)null : Convert.ToInt32(strElectTypeID));

                    foreach (var item in results)
                    {
                        objDisclosureTypesEntity = new DisclosureTypesEntity();
                        objDisclosureTypesEntity.DisclosureTypeId = Convert.ToString(item.FILING_CAT_ID);
                        if (item.FILING_CAT_ID == 7)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 8)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 9)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 10)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 11)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 12)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 13)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else if (item.FILING_CAT_ID == 14)
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC + " - " + item.FILING_CAT_SUBTYPE;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        else
                        {
                            objDisclosureTypesEntity.DisclosureTypeDesc = item.FILING_CAT_DESC;
                            objDisclosureTypesEntity.DisclosureSubTypeDesc = item.FILING_CAT_SUBTYPE;
                        }
                        lstDisclosureTypesEntity.Add(objDisclosureTypesEntity);
                    }

                    return lstDisclosureTypesEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetReportSourceDataSchedS
        /// </summary>
        /// <returns></returns>
        public IList<ReportSourceEntity> GetReportSourceDataSchedS()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<ReportSourceEntity> lstReportSourceEntity = new List<ReportSourceEntity>();
                    ReportSourceEntity objReportSourceEntity;

                    var results = entities.SP_S_GetReportSourceForSchedS();

                    foreach (var item in results)
                    {
                        objReportSourceEntity = new ReportSourceEntity();
                        objReportSourceEntity.FilingEntityId = Convert.ToString(item.FLNG_ENT_ID);
                        objReportSourceEntity.ReportSource = Convert.ToString(item.FLNG_ENT_NAME);
                        objReportSourceEntity.StreetAddress1 = Convert.ToString(item.FLNG_ENT_ADDR1);
                        objReportSourceEntity.City = Convert.ToString(item.FLNG_ENT_CITY);
                        objReportSourceEntity.State = Convert.ToString(item.FLNG_ENT_STATE);
                        objReportSourceEntity.ZipCode = Convert.ToString(item.FLNG_ENT_ZIP);
                        objReportSourceEntity.Country = Convert.ToString(item.FLNG_ENT_COUNTRY);
                        lstReportSourceEntity.Add(objReportSourceEntity);
                    }

                    return lstReportSourceEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }
        }

        /// <summary>
        /// AddPublic_Fund_Receipts_SchedS
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddPublic_Fund_Receipts_SchedS(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTrans_Public_Fund_Rec(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),                                                                                        
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ReceiptTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ReceiptTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                                        objFilingTransactionsEntity.PayNumber,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                                        objFilingTransactionsEntity.CreatedBy);

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateFlngtrans_PublicFundRecpt
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateFlngtrans_PublicFundRecpt(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_U_PublicFundRec_Schd_S(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                        objFilingTransactionsEntity.TransNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,                                                                        
                                                                        objFilingTransactionsEntity.CreatedBy                                                                                                                                                
                                                                        );

                    if (result >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetPaymentMethodDataForSchedA
        /// </summary>
        /// <returns></returns>
        public IList<PaymentMethodEntity> GetPaymentMethodDataForSchedA()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PaymentMethodEntity> lstPaymentMethodEntity = new List<PaymentMethodEntity>();
                    PaymentMethodEntity objPaymentMethodEntity;

                    var results = entities.SP_S_PaymentMethod_SCHED_A();

                    foreach (var item in results)
                    {
                        objPaymentMethodEntity = new PaymentMethodEntity();
                        objPaymentMethodEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        objPaymentMethodEntity.PaymentTypeDesc = Convert.ToString(item.PAYMENT_TYPE_DESC);
                        objPaymentMethodEntity.PaymentTypeAbbrev = item.PAYMENT_TYPE_ABBREV;
                        lstPaymentMethodEntity.Add(objPaymentMethodEntity);
                    }

                    return lstPaymentMethodEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetEditFlagPCFDueDate
        /// </summary>
        /// <param name="strFilerId"></param>
        /// <param name="strCommTypeId"></param>
        /// <param name="strLabelId"></param>
        /// <param name="strFilingDate"></param>
        /// <returns></returns>
        public IList<GetEditFlagData> GetEditFlagPCFDueDate(FilingTransDataEntity objFilingTransDataEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetEditFlagData> lstGetEditFlagDataEntity = new List<GetEditFlagData>();
                    GetEditFlagData objGetEditFlagDataEntity;

                    var results = entities.SP_S_GetIsEdit_PCFB_DueDate(String.IsNullOrEmpty(objFilingTransDataEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransDataEntity.FilerId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ReportYearId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ReportYearId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionType) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionType),
                        String.IsNullOrEmpty(objFilingTransDataEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.OfficeTypeId),
                        String.IsNullOrEmpty(objFilingTransDataEntity.DisclosurePeriod) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.DisclosurePeriod),
                        String.IsNullOrEmpty(objFilingTransDataEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransDataEntity.FilingDate),
                        String.IsNullOrEmpty(objFilingTransDataEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.ElectionDateId),
                        objFilingTransDataEntity.Created_By,
                        string.IsNullOrEmpty(objFilingTransDataEntity.CommTypeId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.CommTypeId),
                        string.IsNullOrEmpty(objFilingTransDataEntity.LabelId) ? (int?)null : Convert.ToInt32(objFilingTransDataEntity.LabelId));

                    foreach (var item in results)
                    {
                        objGetEditFlagDataEntity = new GetEditFlagData();
                        objGetEditFlagDataEntity.Is_Edit = item.IS_EDIT.ToString();
                        lstGetEditFlagDataEntity.Add(objGetEditFlagDataEntity);
                    }

                    return lstGetEditFlagDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetEditFlagPCFDueDateImport
        /// </summary>
        /// <param name="filerId"></param>
        /// <param name="filingPeriodId"></param>
        /// <param name="electId"></param>
        /// <returns></returns>
        public IList<GetEditFlagData> GetEditFlagPCFDueDateImport(String filerId, String filingPeriodId, String electId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<GetEditFlagData> lstGetEditFlagDataEntity = new List<GetEditFlagData>();
                    GetEditFlagData objGetEditFlagDataEntity;

                    var results = entities.SP_S_GetIsEdit_PCFB_DueDate_Import(String.IsNullOrEmpty(filerId) ? (long?)null : Convert.ToInt64(filerId),
                        String.IsNullOrEmpty(filingPeriodId) ? (int?)null : Convert.ToInt32(filingPeriodId),
                        String.IsNullOrEmpty(electId) ? (int?)null : Convert.ToInt32(electId));

                    foreach (var item in results)
                    {
                        objGetEditFlagDataEntity = new GetEditFlagData();
                        objGetEditFlagDataEntity.Is_Edit = item.IS_EDIT.ToString();
                        lstGetEditFlagDataEntity.Add(objGetEditFlagDataEntity);
                    }

                    return lstGetEditFlagDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// AddPublic_Fund_Payment_SchedU
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public string AddPublic_Fund_Payment_SchedU(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                string resultData = string.Empty;
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_I_FilingTrans_Public_Fund_Payment(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingEntId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilingEntId),                                                                                        
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                                        objFilingTransactionsEntity.PayNumber,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OfficeTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.OfficeTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.FilingTypeId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectYearId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectYearId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.FilingDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.FilingDate),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ElectionDateId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ElectionDateId),
                                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.ResigTermTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.ResigTermTypeId),
                                                                                        objFilingTransactionsEntity.CreatedBy);

                    foreach (var item in result)
                    {
                        resultData = item.AG_FILING_TRANS_ID.ToString();
                    }

                    return resultData;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// UpdateFlngtrans_PublicFundPayment
        /// </summary>
        /// <param name="objFilingTransactionsEntity"></param>
        /// <returns></returns>
        public Boolean UpdateFlngtrans_PublicFundPayment(FilingTransactionsEntity objFilingTransactionsEntity)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    var result = entities.SP_U_PublicFundRec_Schd_S(string.IsNullOrEmpty(objFilingTransactionsEntity.FilerId) ? (long?)null : Convert.ToInt64(objFilingTransactionsEntity.FilerId),
                                                                        objFilingTransactionsEntity.TransNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.SchedDate) ? (DateTime?)null : Convert.ToDateTime(objFilingTransactionsEntity.SchedDate),
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.PaymentTypeId) ? (int?)null : Convert.ToInt32(objFilingTransactionsEntity.PaymentTypeId),
                                                                        objFilingTransactionsEntity.PayNumber,
                                                                        string.IsNullOrEmpty(objFilingTransactionsEntity.OrgAmt) ? (double?)null : Convert.ToDouble(objFilingTransactionsEntity.OrgAmt),
                                                                        objFilingTransactionsEntity.TransExplanation,
                                                                        objFilingTransactionsEntity.CreatedBy
                                                                        );

                    if (result >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetFilingCutOffDateData_PCF_WCS
        /// </summary>
        /// <param name="strElectYearId"></param>
        /// <param name="strElectTypeId"></param>
        /// <param name="strOfficeTypeId"></param>
        /// <returns></returns>
        public IList<FilingCutOffDateEntity> GetFilingCutOffDateData_PCF_WCS(String strElectYearId, String strElectTypeId, String strOfficeTypeId, String strPolCalMapId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingCutOffDateEntity> lstFilingCutOffDateEntity = new List<FilingCutOffDateEntity>();
                    FilingCutOffDateEntity objFilingCutOffDateEntity;

                    var results = entities.SP_S_FilingAndCutOffDate_PCF_WCS(string.IsNullOrEmpty(strElectYearId) ? (int?)null : Convert.ToInt32(strElectYearId), 
                        string.IsNullOrEmpty(strElectTypeId) ? (int?)null : Convert.ToInt32(strElectTypeId), 
                        string.IsNullOrEmpty(strOfficeTypeId) ? (int?)null : Convert.ToInt32(strOfficeTypeId),
                        strPolCalMapId);

                    foreach (var item in results)
                    {
                        objFilingCutOffDateEntity = new FilingCutOffDateEntity();
                        objFilingCutOffDateEntity.PoliticalCalDateId = Convert.ToString(item.POL_CAL_DATE_ID);
                        objFilingCutOffDateEntity.PriGenDate = Convert.ToString(item.PRI_GEN_DATE);
                        objFilingCutOffDateEntity.FilingDueDate = item.FILING_DATE;
                        objFilingCutOffDateEntity.CutOffDate = item.CUT_OFF_DATE;
                        lstFilingCutOffDateEntity.Add(objFilingCutOffDateEntity);
                    }

                    return lstFilingCutOffDateEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        /// <summary>
        /// GetFilingTransSchedR_ChildData
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <param name="strFilerId"></param>
        /// <returns></returns>
        public IList<FilingTransactionsEntity> GetFilingTransSchedR_ChildData(String strTransNumber, String strFilerId)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionsEntity> lstFilingTransactionsEntity = new List<FilingTransactionsEntity>();
                    FilingTransactionsEntity objFilingTransactionsEntity;

                    var results = entities.SP_S_EFS_SCHED_R_CHILD_Data(strTransNumber, string.IsNullOrEmpty(strFilerId) ? (long?)null : Convert.ToInt64(strFilerId));

                    foreach (var item in results)
                    {
                        objFilingTransactionsEntity = new FilingTransactionsEntity();
                        objFilingTransactionsEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionsEntity.TransNumber = Convert.ToString(item.TRANS_NUMBER);
                        objFilingTransactionsEntity.TransMapping = Convert.ToString(item.TRANS_MAPPING);
                        objFilingTransactionsEntity.FilingEntId = Convert.ToString(item.FLNG_ENT_ID);
                        if (item.R_SUPPORT_OPPOSE == "S")
                        {
                            objFilingTransactionsEntity.SupportOppose = "Support";
                        }
                        else if (item.R_SUPPORT_OPPOSE == "O")
                        {
                            objFilingTransactionsEntity.SupportOppose = "Oppose";
                        }
                        else 
                        {
                            objFilingTransactionsEntity.SupportOppose = "";
                        }
                        objFilingTransactionsEntity.SchedDate = item.SCHED_DATE;
                        objFilingTransactionsEntity.FlngEntFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionsEntity.FlngEntMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionsEntity.FlngEntLastName = item.FLNG_ENT_LAST_NAME;                        
                        objFilingTransactionsEntity.OrgAmt = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionsEntity.ElectionYear = item.ELECTION_YEAR;
                        objFilingTransactionsEntity.OfficeID = item.OFFICE_DESC;                        
                        objFilingTransactionsEntity.DistrictID = item.DISTRICT;
                        objFilingTransactionsEntity.TransExplanation = item.TRANS_EXPLNTN;
                        objFilingTransactionsEntity.RItemized = item.R_ITEMIZED;                        
                        lstFilingTransactionsEntity.Add(objFilingTransactionsEntity);
                    }

                    return lstFilingTransactionsEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }

        #region GetCommEditIETransData_WCS
        /// <summary>
        /// GetCommEditIETransData
        /// </summary>
        /// <param name="strTransNumber"></param>
        /// <returns></returns>
        public IList<FilingTransactionDataEntity> GetCommEditIETransData_WCS(String strTransNumber, String filerID)
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<FilingTransactionDataEntity> lstFilingTransactionDataEntity = new List<FilingTransactionDataEntity>();
                    FilingTransactionDataEntity objFilingTransactionDataEntity;

                    var results = entities.SP_S_NonItemizedIECommEditTrans_WCS(strTransNumber, string.IsNullOrEmpty(filerID) ? (long?)null : Convert.ToInt64(filerID));

                    foreach (var item in results)
                    {
                        objFilingTransactionDataEntity = new FilingTransactionDataEntity();
                        objFilingTransactionDataEntity.FilingTransId = Convert.ToString(item.FILING_TRANS_ID);
                        objFilingTransactionDataEntity.FilingSchedId = Convert.ToString(item.FILING_SCHED_ID);
                        objFilingTransactionDataEntity.ContributorTypeId = Convert.ToString(item.CNTRBR_TYPE_ID);
                        objFilingTransactionDataEntity.ContributorTypeDesc = item.CNTRBR_TYPE_DESC;
                        objFilingTransactionDataEntity.PaymentTypeId = Convert.ToString(item.PAYMENT_TYPE_ID);
                        if (item.SUBMIT_DATE != "")
                        {
                            if (Convert.ToDateTime(item.SUBMIT_DATE).ToShortDateString() == "1/1/1900")
                                objFilingTransactionDataEntity.SubmissionDate = "";
                            else
                                objFilingTransactionDataEntity.SubmissionDate = item.SUBMIT_DATE;
                        }
                        else
                        {
                            objFilingTransactionDataEntity.SubmissionDate = "";
                        }

                        if (item.SCHED_DATE != "")
                            objFilingTransactionDataEntity.SchedDate = Convert.ToDateTime(item.SCHED_DATE).ToShortDateString();
                        else
                            objFilingTransactionDataEntity.SchedDate = "";
                        objFilingTransactionDataEntity.FilingSchedDesc = item.FILING_SCHED_DESC;
                        objFilingTransactionDataEntity.FilingEntityId = item.FLNG_ENT_ID;
                        objFilingTransactionDataEntity.FilingEntityName = item.FLNG_ENT_NAME;
                        objFilingTransactionDataEntity.FilingFirstName = item.FLNG_ENT_FIRST_NAME;
                        objFilingTransactionDataEntity.FilingMiddleName = item.FLNG_ENT_MIDDLE_NAME;
                        objFilingTransactionDataEntity.FilingLastName = item.FLNG_ENT_LAST_NAME;
                        objFilingTransactionDataEntity.FilingStreetNumber = item.FLNG_ENT_STR_NUM;
                        objFilingTransactionDataEntity.FilingStreetName = item.FLNG_ENT_STR_NAME;
                        objFilingTransactionDataEntity.FilingCity = item.FLNG_ENT_CITY;
                        objFilingTransactionDataEntity.FilingState = item.FLNG_ENT_STATE;
                        objFilingTransactionDataEntity.FilingZip = item.FLNG_ENT_ZIP;
                        objFilingTransactionDataEntity.FilingCountry = item.FLNG_ENT_COUNTRY;
                        objFilingTransactionDataEntity.PaymentTypeDesc = item.PAYMENT_TYPE_DESC;
                        objFilingTransactionDataEntity.PayNumber = item.PAY_NUMBER;
                        objFilingTransactionDataEntity.OriginalAmount = String.Format("{0:0.00}", item.ORG_AMT);
                        objFilingTransactionDataEntity.TransExplanation = item.TRANS_EXPLNTN;
                        if (item.R_ITEMIZED == "" || item.R_ITEMIZED == null)
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "Y")
                            objFilingTransactionDataEntity.RItemized = "Yes";
                        else if (item.R_ITEMIZED == "N")
                            objFilingTransactionDataEntity.RItemized = "No";
                        objFilingTransactionDataEntity.CountyDesc = Convert.ToString(item.CNTY_DESC);
                        if (item.R_AMEND == "Y")
                        {
                            objFilingTransactionDataEntity.RAmend = "Yes";
                        }
                        else if (item.R_AMEND == "N")
                        {
                            objFilingTransactionDataEntity.RAmend = "No";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RAmend = item.R_AMEND;
                        }
                        if (item.R_STATUS == "A")
                        {
                            objFilingTransactionDataEntity.RStatus = "Active";
                        }
                        else if (item.R_STATUS == "I")
                        {
                            objFilingTransactionDataEntity.RStatus = "In-Active";
                        }
                        else if (item.R_STATUS == "P")
                        {
                            objFilingTransactionDataEntity.RStatus = "Pending";
                        }
                        else
                        {
                            objFilingTransactionDataEntity.RStatus = item.R_STATUS;
                        }
                        objFilingTransactionDataEntity.MunicipalityDesc = Convert.ToString(item.MUNICIPALITY_DESC);
                        objFilingTransactionDataEntity.LoanerCodeId = Convert.ToString(item.LOANER_CODE_ID);
                        objFilingTransactionDataEntity.LoanerCode = Convert.ToString(item.LOANER_CODE);
                        objFilingTransactionDataEntity.ContributionTypeId = item.CNTRBN_TYPE_ID;
                        objFilingTransactionDataEntity.ContributionTypeDesc = item.CNTRBN_TYPE_DESC;
                        objFilingTransactionDataEntity.CreatedDate = item.CREATED_DATE;
                        objFilingTransactionDataEntity.TreasurerFirstName = item.PERSON_FIRST_NAME;
                        objFilingTransactionDataEntity.TreasurerLastName = item.PERSON_LAST_NAME;
                        objFilingTransactionDataEntity.TreasurerMiddleName = item.PERSON_MIDDLE_NAME;
                        objFilingTransactionDataEntity.TreasurerOccuptaion = item.TREAS_OCCUPATION;
                        objFilingTransactionDataEntity.TreasurerEmployer = item.TREAS_EMPLOYER;
                        objFilingTransactionDataEntity.TreasurerStreetAddress = item.ADDR_ADDR1;
                        objFilingTransactionDataEntity.TreasurerCity = item.ADDR_CITY;
                        objFilingTransactionDataEntity.TreasurerState = item.ADDR_STATE;
                        objFilingTransactionDataEntity.TreasurerZip = item.ADDR_ZIP;
                        objFilingTransactionDataEntity.ContributorOccupation = item.IE_CNTRBR_OCC;
                        objFilingTransactionDataEntity.ContributorEmployer = item.IE_CNTRBR_EMP;
                        objFilingTransactionDataEntity.IEDescription = item.IE_DESC;
                        objFilingTransactionDataEntity.CandBallotPropReference = item.DIST_OFF_CAND_BAL_PROP;
                        if (item.R_IE_SUPPORTED == "Y")
                            objFilingTransactionDataEntity.IESupported = "Yes";
                        else
                            objFilingTransactionDataEntity.IESupported = "No";
                        objFilingTransactionDataEntity.AddrId = item.ADDR_ID;
                        objFilingTransactionDataEntity.TreasId = item.TREAS_ID;
                        objFilingTransactionDataEntity.LoanLiablityNumber = item.LOAN_LIB_NUMBER;
                        objFilingTransactionDataEntity.TransNumber = item.TRANS_NUMBER;
                        objFilingTransactionDataEntity.TransMapping = item.TRANS_MAPPING;
                        objFilingTransactionDataEntity.DateIncurredOrgAmtId = item.EXISTS_LIAB_TRANS_ID;
                        if (item.R_LIABILITY == "Y")
                            objFilingTransactionDataEntity.RLiability = "Yes";
                        else
                            objFilingTransactionDataEntity.RLiability = "No";
                        if (item.R_SUBCONTRACTOR == "Y")
                            objFilingTransactionDataEntity.RSubcontractor = "Yes";
                        else
                            objFilingTransactionDataEntity.RSubcontractor = "No";
                        if (item.OWED_AMT != null)
                            objFilingTransactionDataEntity.OwedAmount = Convert.ToString(item.OWED_AMT);
                        else
                            objFilingTransactionDataEntity.OwedAmount = "";
                        objFilingTransactionDataEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);

                        if (item.R_CLAIM == "Y")
                            objFilingTransactionDataEntity.RClaim = "Yes";
                        else
                            objFilingTransactionDataEntity.RClaim = "No";

                        if (item.R_IN_DISTRICT == "Y")
                            objFilingTransactionDataEntity.InDistrict = "Yes";
                        else
                            objFilingTransactionDataEntity.InDistrict = "No";

                        if (item.R_MINOR == "Y")
                            objFilingTransactionDataEntity.RMinor = "Yes";
                        else
                            objFilingTransactionDataEntity.RMinor = "No";

                        if (item.R_VENDOR == "Y")
                            objFilingTransactionDataEntity.RVendor = "Yes";
                        else
                            objFilingTransactionDataEntity.RVendor = "No";

                        if (item.R_LOBBYIST == "Y")
                            objFilingTransactionDataEntity.RLobbyist = "Yes";
                        else
                            objFilingTransactionDataEntity.RLobbyist = "No";

                        if (item.R_CONTRIBUTIONS == "Y")
                            objFilingTransactionDataEntity.RContributions = "Yes";
                        else
                            objFilingTransactionDataEntity.RContributions = "No";
                        lstFilingTransactionDataEntity.Add(objFilingTransactionDataEntity);
                    }

                    return lstFilingTransactionDataEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
        #endregion GetCommEditIETransData_WCS

        /// <summary>
        /// GetPurposeCodeData_PCF
        /// </summary>
        /// <returns></returns>
        public IList<PurposeCodeEntity> GetPurposeCodeData_PCF()
        {
            try
            {
                using (EFSEntities entities = new EFSEntities())
                {
                    IList<PurposeCodeEntity> lstPurposeCodeEntity = new List<PurposeCodeEntity>();
                    PurposeCodeEntity objPurposeCodeEntity;

                    var results = entities.SP_S_PurposeCode_PCF();

                    foreach (var item in results)
                    {
                        objPurposeCodeEntity = new PurposeCodeEntity();
                        objPurposeCodeEntity.PurposeCodeId = Convert.ToString(item.PURPOSE_CODE_ID);
                        objPurposeCodeEntity.PurposeCodeDesc = item.PURPOSE_CODE_DESC;
                        objPurposeCodeEntity.PurposeCodeAbbrev = item.PURPOSE_CODE_ABBREV;
                        lstPurposeCodeEntity.Add(objPurposeCodeEntity);
                    }

                    return lstPurposeCodeEntity;
                }
            }
            catch (Exception ex)
            {

                throw new CommonException(string.Format(ex.Message));
            }

        }
    }
}

